/**
 * Bridge Test library - general C# language tests
 * @version 15.4.0
 * @author Object.NET, Inc.
 * @copyright Copyright 2008-2016 Object.NET, Inc.
 * @compiler Bridge.NET 15.4.0
 */
Bridge.assembly("Bridge.ClientTest", {"Bridge.ClientTest.Batch1.Reflection.Resource1.bin":"AAECAwQFBgc=","Bridge.ClientTest.Batch1.Reflection.Resource2.bin":"EBESExQV"}, function ($asm, globals) {
    "use strict";

    Bridge.define("Bridge.ClientTest.ArgumentsTests", {
        lengthHelper0: function (args) {
            args = Array.prototype.slice.call(arguments, 0);
            Bridge.Test.Assert.areEqual(arguments.length, 0);
        },
        lengthHelper1: function (args) {
            args = Array.prototype.slice.call(arguments, 0);
            Bridge.Test.Assert.areEqual(arguments.length, 1);
        },
        lengthHelper2: function (args) {
            args = Array.prototype.slice.call(arguments, 0);
            Bridge.Test.Assert.areEqual(arguments.length, 2);
        },
        getArgumentHelper: function (index, args) {
            args = Array.prototype.slice.call(arguments, 1);
            return arguments[index];
        },
        toArrayHelper: function (args) {
            args = Array.prototype.slice.call(arguments, 0);
            return Array.prototype.slice.call(arguments);
        },
        toArrayHelper$1: function (T, args) {
            args = Array.prototype.slice.call(arguments, 1);
            return Array.prototype.slice.call(arguments, 1); // first argument will be generic type
        },
        lengthWorks: function () {
            this.lengthHelper0();
            this.lengthHelper1(4);
            this.lengthHelper2(6, "x");
        },
        getArgumentWorks: function () {
            Bridge.Test.Assert.areEqual(this.getArgumentHelper(0, "x", "y"), 0);
            Bridge.Test.Assert.areEqual(this.getArgumentHelper(1, "x", "y"), "x");
            Bridge.Test.Assert.areEqual(this.getArgumentHelper(2, "x", "y"), "y");
        },
        toArrayWorks: function () {
            Bridge.Test.Assert.areEqual(this.toArrayHelper(), System.Array.init(0, null));
            Bridge.Test.Assert.areEqual(this.toArrayHelper("x"), ["x"]);
            Bridge.Test.Assert.areEqual(this.toArrayHelper("x", 1), ["x", 1]);
        },
        toArrayOfTWorks: function () {
            Bridge.Test.Assert.areEqual(this.toArrayHelper$1(String), System.Array.init(0, null));
            Bridge.Test.Assert.areEqual(this.toArrayHelper$1(String, "x"), ["x"]);
            Bridge.Test.Assert.areEqual(this.toArrayHelper$1(String, "x", "y"), ["x", "y"]);
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests");

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet1", {
        typePropertiesAreCorrect: function () {
            var arr = [1, 2, 3];
            Bridge.Test.Assert.true$1(Bridge.is(arr, Array), "is Array should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Array), "is int[] should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.ICollection), "is ICollection should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.IEnumerable), "is IEnumerable should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.ICloneable), "is ICloneable should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Int32)), "is ICollection<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Int32)), "is IList<int> should be true");
        },
        lengthWorks: function () {
            Bridge.Test.Assert.areEqual(0, System.Array.init(0, 0).length);
            Bridge.Test.Assert.areEqual(1, ["x"].length);
            Bridge.Test.Assert.areEqual(2, ["x", "y"].length);
        },
        rankIsOne: function () {
            Bridge.Test.Assert.areEqual(1, System.Array.getRank(System.Array.init(0, 0)));
        },
        getLengthWorks: function () {
            Bridge.Test.Assert.areEqual(0, System.Array.getLength(System.Array.init(0, 0), 0));
            Bridge.Test.Assert.areEqual(1, System.Array.getLength(["x"], 0));
            Bridge.Test.Assert.areEqual(2, System.Array.getLength(["x", "y"], 0));
        },
        getLowerBound: function () {
            Bridge.Test.Assert.areEqual(0, System.Array.getLower(System.Array.init(0, 0), 0));
            Bridge.Test.Assert.areEqual(0, System.Array.getLower(["x"], 0));
            Bridge.Test.Assert.areEqual(0, System.Array.getLower(["x", "y"], 0));
        },
        getUpperBoundWorks: function () {
            Bridge.Test.Assert.areEqual(-1, (System.Array.getLength(System.Array.init(0, 0), 0) - 1));
            Bridge.Test.Assert.areEqual(0, (System.Array.getLength(["x"], 0) - 1));
            Bridge.Test.Assert.areEqual(1, (System.Array.getLength(["x", "y"], 0) - 1));
        },
        gettingValueByIndexWorks: function () {
            Bridge.Test.Assert.areEqual("x", ["x", "y"][0]);
            Bridge.Test.Assert.areEqual("y", ["x", "y"][1]);
        },
        getValueWorks: function () {
            Bridge.Test.Assert.areEqual("x", System.Array.get(["x", "y"], 0));
            Bridge.Test.Assert.areEqual("y", System.Array.get(["x", "y"], 1));
        },
        settingValueByIndexWorks: function () {
            var arr = System.Array.init(2, null);
            arr[0] = "x";
            arr[1] = "y";
            Bridge.Test.Assert.areEqual("x", arr[0]);
            Bridge.Test.Assert.areEqual("y", arr[1]);
        },
        setValueWorks: function () {
            var arr = System.Array.init(2, null);
            System.Array.set(arr, "x", 0);
            System.Array.set(arr, "y", 1);
            Bridge.Test.Assert.areEqual("x", arr[0]);
            Bridge.Test.Assert.areEqual("y", arr[1]);
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator(["x", "y"]);
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result = System.String.concat(result, s);
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        cloneWorks: function () {
            var arr = ["x", "y"];
            var arr2 = System.Array.clone(arr);
            Bridge.Test.Assert.false(Bridge.referenceEquals(arr, arr2));
            Bridge.Test.Assert.areDeepEqual(arr2, arr);
        },
        concatWorks: function () {
            var arr = ["a", "b"];
            Bridge.Test.Assert.areDeepEqual(["a", "b", "c"], arr.concat("c"));
            Bridge.Test.Assert.areDeepEqual(["a", "b", "c", "d"], arr.concat("c", "d"));
            Bridge.Test.Assert.areDeepEqual(["a", "b"], arr);
        },
        containsWorks: function () {
            var arr = ["x", "y"];
            Bridge.Test.Assert.true(System.Array.contains(arr, "x", String));
            Bridge.Test.Assert.false(System.Array.contains(arr, "z", String));
        },
        copyToSameBoundWorks: function () {
            var l = ["0", "1", "2"];

            var a1 = System.Array.init(3, null);
            System.Array.copy(l, 0, a1, 0, l.length);

            Bridge.Test.Assert.areEqual$1("0", a1[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("1", a1[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("2", a1[2], "Element 2");
        },
        copyToOffsetBoundWorks: function () {
            var l = ["0", "1", "2"];

            var a2 = System.Array.init(5, null);
            System.Array.copy(l, 0, a2, 1, l.length);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("0", a2[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("1", a2[2], "Element 2");
            Bridge.Test.Assert.areEqual$1("2", a2[3], "Element 3");
            Bridge.Test.Assert.areEqual$1(null, a2[4], "Element 4");
        },
        copyToIllegalBoundWorks: function () {
            var l = ["0", "1", "2"];

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copy(l, 0, null, 0, l.length);
            }, "null");

            var a1 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copy(l, 0, a1, 0, l.length);
            }, "Short array");

            var a2 = System.Array.init(3, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copy(l, 0, a2, 1, l.length);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copy(l, 0, a2, -1, l.length);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copy(l, 0, a2, 3, l.length);
            }, "Start index 3");
        },
        containsUsesEqualsMethod: function () {
            var arr = [new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(1), new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(2), new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(3)];
            Bridge.Test.Assert.true(System.Array.contains(arr, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(2), Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C));
            Bridge.Test.Assert.false(System.Array.contains(arr, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(4), Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C));
        },
        allWithArrayItemFilterCallbackWorks: function () {
            Bridge.Test.Assert.true(System.Linq.Enumerable.from([1, 2, 3]).all($_.Bridge.ClientTest.ArrayTests.ArrayTestsSet1.f1));
            Bridge.Test.Assert.false(System.Linq.Enumerable.from([1, 2, 3]).all($_.Bridge.ClientTest.ArrayTests.ArrayTestsSet1.f2));
        },
        sliceWithoutEndWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["c", "d"], ["a", "b", "c", "d"].slice(2));
            Bridge.Test.Assert.areDeepEqual(["b", "c"], ["a", "b", "c", "d"].slice(1, 3));
        },
        foreachWithArrayItemCallbackWorks: function () {
            var result = "";
            ["a", "b", "c"].forEach(function (s) {
                    result = System.String.concat(result, s);
                });
            Bridge.Test.Assert.areEqual("abc", result);
        },
        foreachWithArrayCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from(["a", "b", "c"]).forEach(function (s, i) {
                    result = System.String.concat(result, (System.String.concat(s, i)));
                });
            Bridge.Test.Assert.areEqual("a0b1c2", result);
        },
        indexOfWithoutStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, ["a", "b", "c", "b"].indexOf("b"));
        },
        indexOfWithoutStartIndexUsesEqualsMethod: function () {
            var arr = [new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(1), new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(2), new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(3)];
            Bridge.Test.Assert.areEqual(1, Bridge.Linq.Enumerable.from(arr).indexOf(new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(2)));
            Bridge.Test.Assert.areEqual(-1, Bridge.Linq.Enumerable.from(arr).indexOf(new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(4)));
        },
        indexOfWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(3, ["a", "b", "c", "b"].indexOf("b", 2));
        },
        joinWithoutDelimiterWorks: function () {
            Bridge.Test.Assert.areEqual("a,b,c,b", ["a", "b", "c", "b"].join(","));

            Bridge.Test.Assert.areEqual("a|b|c|b", ["a", "b", "c", "b"].join("|"));
        },
        reverseWorks: function () {
            var arr = [1, 3, 4, 1, 3, 2];
            arr.reverse();
            Bridge.Test.Assert.areDeepEqual([2, 3, 1, 4, 3, 1], arr);
        },
        anyWithArrayItemFilterCallbackWorks: function () {
            Bridge.Test.Assert.true(System.Linq.Enumerable.from([1, 2, 3, 4]).any($_.Bridge.ClientTest.ArrayTests.ArrayTestsSet1.f3));
            Bridge.Test.Assert.false(System.Linq.Enumerable.from([1, 2, 3, 4]).any($_.Bridge.ClientTest.ArrayTests.ArrayTestsSet1.f4));
        },
        binarySearch1Works: function () {
            var arr = [1, 2, 3, 3, 4, 5];

            Bridge.Test.Assert.areEqual(2, System.Array.binarySearch(arr, 0, arr.length, 3));
            Bridge.Test.Assert.true(System.Array.binarySearch(arr, 0, arr.length, 6) < 0);
        },
        binarySearch2Works: function () {
            var arr = [1, 2, 3, 3, 4, 5];

            Bridge.Test.Assert.areEqual(3, System.Array.binarySearch(arr, 3, 2, 3));
            Bridge.Test.Assert.true(System.Array.binarySearch(arr, 2, 2, 4) < 0);
        },
        binarySearch3Works: function () {
            var arr = [1, 2, 3, 3, 4, 5];

            Bridge.Test.Assert.areEqual(2, System.Array.binarySearch(arr, 0, arr.length, 3, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.TestReverseComparer()));
            Bridge.Test.Assert.areEqual(-1, System.Array.binarySearch(arr, 0, arr.length, 6, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.TestReverseComparer()));
        },
        binarySearch4Works: function () {
            var arr = [1, 2, 3, 3, 4, 5];

            Bridge.Test.Assert.areEqual(3, System.Array.binarySearch(arr, 3, 2, 3, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.TestReverseComparer()));
            Bridge.Test.Assert.true(System.Array.binarySearch(arr, 3, 2, 4, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.TestReverseComparer()) < 0);
        },
        binarySearchExceptionsWorks: function () {
            var arr1 = null;
            var arr2 = [1, 2, 3, 3, 4, 5];

            Bridge.Test.Assert.throws(function () {
                System.Array.binarySearch(arr1, 0, arr1.length, 1);
            });
            Bridge.Test.Assert.throws(function () {
                System.Array.binarySearch(arr2, -1, 1, 1);
            });
            Bridge.Test.Assert.throws(function () {
                System.Array.binarySearch(arr2, 1, 6, 1);
            });
        },
        sortWithDefaultCompareWorks: function () {
            var arr = [1, 6, 6, 4, 2];
            arr.sort();
            Bridge.Test.Assert.areDeepEqual([1, 2, 4, 6, 6], arr);
        },
        sort1Works: function () {
            var arr = [1, 6, 6, 4, 2];
            System.Array.sort(arr);
            Bridge.Test.Assert.areDeepEqual([1, 2, 4, 6, 6], arr);
        },
        sort2Works: function () {
            var arr = [1, 6, 6, 4, 2];
            System.Array.sort(arr, 2, 3);
            Bridge.Test.Assert.areDeepEqual([1, 6, 2, 4, 6], arr);
        },
        sort3Works: function () {
            var arr = [1, 2, 6, 3, 6, 7];
            System.Array.sort(arr, 2, 3, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.TestReverseComparer());
            Bridge.Test.Assert.areDeepEqual([1, 2, 6, 6, 3, 7], arr);
        },
        sort4Works: function () {
            var arr = [1, 6, 6, 4, 2];
            System.Array.sort(arr, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.TestReverseComparer());
            Bridge.Test.Assert.areDeepEqual([6, 6, 4, 2, 1], arr);
        },
        sortExceptionsWorks: function () {
            var arr1 = null;

            Bridge.Test.Assert.throws(function () {
                System.Array.sort(arr1);
            });
        },
        foreachWhenCastToIListWorks: function () {
            var $t;
            var list = ["x", "y"];
            var result = "";
            $t = Bridge.getEnumerator(list, String);
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result = System.String.concat(result, s);
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        iCollectionCountWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(l, String));
        },
        iCollectionIsReadOnlyWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(l, String));
        },
        iCollectionAddWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.add(l, "a", String);
            Bridge.Test.Assert.areDeepEqual(["x", "y", "z", "a"], l);
        },
        iCollectionClearWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.clear(l, String);
            Bridge.Test.Assert.areDeepEqual(System.Array.init(3, null), l);
            Bridge.Test.Assert.areDeepEqual(null, System.Array.getItem(l, 0, String));
            Bridge.Test.Assert.areDeepEqual(null, System.Array.getItem(l, 1, String));
            Bridge.Test.Assert.areDeepEqual(null, System.Array.getItem(l, 2, String));
        },
        iCollectionContainsWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.true(System.Array.contains(l, "y", String));
            Bridge.Test.Assert.false(System.Array.contains(l, "a", String));
        },
        iCollectionContainsUsesEqualsMethod: function () {
            var l = [new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(1), new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(2), new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(3)];
            Bridge.Test.Assert.true(System.Array.contains(l, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(2), Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C));
            Bridge.Test.Assert.false(System.Array.contains(l, new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(4), Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C));
        },
        iCollectionCopyToSameBoundWorks: function () {
            var l = ["0", "1", "2"];

            var a1 = System.Array.init(3, null);
            System.Array.copyTo(l, a1, 0, String);

            Bridge.Test.Assert.areEqual$1("0", a1[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("1", a1[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("2", a1[2], "Element 2");
        },
        iCollectionCopyToOffsetBoundWorks: function () {
            var l = ["0", "1", "2"];

            var a2 = System.Array.init(5, null);
            System.Array.copyTo(l, a2, 1, String);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("0", a2[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("1", a2[2], "Element 2");
            Bridge.Test.Assert.areEqual$1("2", a2[3], "Element 3");
            Bridge.Test.Assert.areEqual$1(null, a2[4], "Element 4");
        },
        iCollectionCopyToIllegalBoundWorks: function () {
            var l = ["0", "1", "2"];

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, String);
            }, "null");

            var a1 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a1, 0, String);
            }, "Short array");

            var a2 = System.Array.init(3, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a2, 1, String);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a2, -1, String);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a2, 3, String);
            }, "Start index 3");
        },
        iCollectionRemoveWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.true(System.Array.remove(l, "y", String));
            Bridge.Test.Assert.false(System.Array.remove(l, "a", String));
            Bridge.Test.Assert.areDeepEqual(["x", "z"], l);
        },
        iListIsReadOnlyWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(l, String));
        },
        iListIndexingWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1, String));
            System.Array.setItem(l, 1, "a", String);
            Bridge.Test.Assert.areDeepEqual(["x", "a", "z"], l);
        },
        iListIndexOfWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, "y", 0, null, String));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, "a", 0, null, String));
        },
        iListIndexOfUsesEqualsMethod: function () {
            var arr = [new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(1), new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(2), new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(3)];
            Bridge.Test.Assert.areEqual(1, Bridge.Linq.Enumerable.from(arr).indexOf(new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(2)));
            Bridge.Test.Assert.areEqual(-1, Bridge.Linq.Enumerable.from(arr).indexOf(new Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C(4)));
        },
        iListInsertWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.insert(l, 1, "a", String);
            Bridge.Test.Assert.areDeepEqual(["x", "a", "y", "z"], l);
        },
        iListRemoveAtWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.removeAt(l, 1, String);
            Bridge.Test.Assert.areDeepEqual(["x", "z"], l);
        }
    });

    var $_ = {};

    Bridge.ns("Bridge.ClientTest.ArrayTests.ArrayTestsSet1", $_);

    Bridge.apply($_.Bridge.ClientTest.ArrayTests.ArrayTestsSet1, {
        f1: function (x) {
            return x > 0;
        },
        f2: function (x) {
            return x > 1;
        },
        f3: function (i) {
            return i > 1;
        },
        f4: function (i) {
            return i > 5;
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C", {
        i: 0,
        ctor: function (i) {
            this.$initialize();
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C) && this.i === Bridge.cast(o, Bridge.ClientTest.ArrayTests.ArrayTestsSet1.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet1.TestReverseComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Int32)],
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Int32$compare"
            ]
        },
        compare: function (x, y) {
            return x === y ? 0 : (x > y ? -1 : 1);
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2", {
        statics: {
            getBinarySearchTestData: function () {
                var intArray = [1, 3, 6, 6, 8, 10, 12, 16];
                var intComparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.IntegerComparer();
                var intGenericComparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.IntegerComparer();

                var strArray = [null, "aa", "bb", "bb", "cc", "dd", "ee"];
                var strComparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.StringComparer();
                var strGenericComparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.StringComparer();

                return [[intArray, 8, intComparer, intGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f1], [intArray, 99, intComparer, intGenericComparer, function (i) {
                    return i === ~(intArray.length);
                }], [intArray, 6, intComparer, intGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f2], [strArray, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f2], [strArray, null, strComparer, null, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f3]];
            },
            getBinarySearchTestDataInRange: function () {
                var intArray = [1, 3, 6, 6, 8, 10, 12, 16];
                var intComparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.IntegerComparer();
                var intGenericComparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.IntegerComparer();

                var strArray = [null, "aa", "bb", "bb", "cc", "dd", "ee"];
                var strComparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.StringComparer();
                var strGenericComparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.StringComparer();

                return [[intArray, 0, 8, 99, intComparer, intGenericComparer, function (i) {
                    return i === ~(intArray.length);
                }], [intArray, 0, 8, 6, intComparer, intGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f2], [intArray, 1, 5, 16, intComparer, intGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f4], [strArray, 0, strArray.length, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f2], [strArray, 3, 4, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f5], [strArray, 4, 3, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f6], [strArray, 4, 0, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f6], [strArray, 0, 7, null, strComparer, null, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f3]];
            },
            testArrayAsIListOfT: function () {
                var sa = ["Hello", "There"];
                var s;
                var idx;

                var b = (Bridge.is(sa, System.Collections.Generic.IList$1(String)));
                Bridge.Test.Assert.true(b);

                var ils = sa;
                var len = System.Array.getCount(ils, String);
                Bridge.Test.Assert.areEqual(len, 2);

                b = System.Array.contains(ils, null, String);
                Bridge.Test.Assert.false(b);

                b = System.Array.contains(ils, "There", String);
                Bridge.Test.Assert.true(b);

                idx = System.Array.indexOf(ils, "There", 0, null, String);
                Bridge.Test.Assert.areEqual(idx, 1);
                idx = System.Array.indexOf(ils, null, 0, null, String);
                Bridge.Test.Assert.areEqual(idx, -1);

                var sa2 = System.Array.init(2, null);
                System.Array.copy(sa, 0, sa2, 0, sa.length);
                Bridge.Test.Assert.areEqual(sa2[0], sa[0]);
                Bridge.Test.Assert.areEqual(sa2[1], sa[1]);

                var ia1;
                var dst;
                ia1 = [1, 2, 3, 4];
                dst = System.Array.init(4, 0);
                System.Array.copy(ia1, 0, dst, 0, ia1.length);
                Bridge.Test.Assert.areEqual(dst, ia1);

                ia1 = [1, 2, 3, 4];
                dst = System.Array.init(6, 0);
                System.Array.copy(ia1, 0, dst, 1, ia1.length);
                Bridge.Test.Assert.areEqual(dst, [0, 1, 2, 3, 4, 0]);

                var e = Bridge.getEnumerator(ils, String);
                b = e.System$Collections$IEnumerator$moveNext();
                Bridge.Test.Assert.true(b);
                s = e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]();
                Bridge.Test.Assert.areEqual(s, sa[0]);
                b = e.System$Collections$IEnumerator$moveNext();
                Bridge.Test.Assert.true(b);
                s = e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]();
                Bridge.Test.Assert.areEqual(s, sa[1]);
                b = e.System$Collections$IEnumerator$moveNext();
                Bridge.Test.Assert.false(b);

                s = System.Array.getItem(ils, 1, String);
                Bridge.Test.Assert.areEqual(s, sa[1]);

                System.Array.setItem(ils, 1, "42", String);
                Bridge.Test.Assert.areEqual(sa[1], "42");
            },
            testTrivials: function () {
                // Check a number of the simple APIs on Array for dimensions up to 4.
                var a = [1, 2, 3];
                Bridge.Test.Assert.areEqual(a.length, 3);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a, 0), 3);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a, -1);
                });
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a, 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getLower(a, 0), 0);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLower(a, 1);
                });
                Bridge.Test.Assert.areEqual((System.Array.getLength(a, 0) - 1), 2);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    (System.Array.getLength(a, 1) - 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getRank(a), 1);
                var il = a;
                Bridge.Test.Assert.areEqual(System.Array.getCount(il, System.Int32), 3);

                Bridge.Test.Assert.true(System.Array.contains(il, 1, System.Int32));
                Bridge.Test.Assert.false(System.Array.contains(il, 999, System.Int32));
                Bridge.Test.Assert.areEqual(System.Array.indexOf(il, 1, 0, null, System.Int32), 0);
                Bridge.Test.Assert.areEqual(System.Array.indexOf(il, 999, 0, null, System.Int32), -1);
                var v = System.Array.getItem(il, 0, System.Int32);
                Bridge.Test.Assert.areEqual(v, 1);
                v = System.Array.getItem(il, 1, System.Int32);
                Bridge.Test.Assert.areEqual(v, 2);
                v = System.Array.getItem(il, 2, System.Int32);
                Bridge.Test.Assert.areEqual(v, 3);
                System.Array.setItem(il, 2, 42, System.Int32);
                Bridge.Test.Assert.areEqual(Bridge.cast(a, Array)[2], 42);

                var a2 = System.Array.create(0, [[1, 2, 3], [4, 5, 6]], 2, 3);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a2, 0), 2);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a2, 1), 3);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a2, -1);
                });
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a2, 2);
                });
                Bridge.Test.Assert.areEqual(System.Array.getLower(a2, 0), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a2, 1), 0);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLower(a2, 2);
                });
                Bridge.Test.Assert.areEqual((System.Array.getLength(a2, 0) - 1), 1);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a2, 1) - 1), 2);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    (System.Array.getLength(a2, 2) - 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getRank(a2), 2);

                var a3 = System.Array.create(0, null, 2, 3, 4);
                var tracer = 0; // makes it easier to confirm row major ordering
                for (var i = 0; i < 2; i = (i + 1) | 0) {
                    for (var j = 0; j < 3; j = (j + 1) | 0) {
                        for (var k = 0; k < 4; k = (k + 1) | 0) {
                            System.Array.set(a3, Bridge.identity(tracer, (tracer = (tracer + 1) | 0)), i, j, k);
                        }
                    }
                }
                Bridge.Test.Assert.areEqual(System.Array.getLength(a3, 0), 2);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a3, 1), 3);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a3, 2), 4);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a3, -1);
                });
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a3, 3);
                });
                Bridge.Test.Assert.areEqual(System.Array.getLower(a3, 0), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a3, 1), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a3, 2), 0);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLower(a3, 3);
                });
                Bridge.Test.Assert.areEqual((System.Array.getLength(a3, 0) - 1), 1);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a3, 1) - 1), 2);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a3, 2) - 1), 3);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    (System.Array.getLength(a3, 3) - 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getRank(a3), 3);

                var a4 = System.Array.create(0, null, 2, 3, 4, 5);

                tracer = 0; // makes it easier to confirm row major ordering
                for (var i1 = 0; i1 < 2; i1 = (i1 + 1) | 0) {
                    for (var j1 = 0; j1 < 3; j1 = (j1 + 1) | 0) {
                        for (var k1 = 0; k1 < 4; k1 = (k1 + 1) | 0) {
                            for (var l = 0; l < 5; l = (l + 1) | 0) {
                                System.Array.set(a4, Bridge.identity(tracer, (tracer = (tracer + 1) | 0)), i1, j1, k1, l);
                            }
                        }
                    }
                }
                Bridge.Test.Assert.areEqual(System.Array.getLength(a4, 0), 2);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a4, 1), 3);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a4, 2), 4);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a4, 3), 5);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a4, -1);
                });
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a4, 4);
                });
                Bridge.Test.Assert.areEqual(System.Array.getLower(a4, 0), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a4, 1), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a4, 2), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a4, 3), 0);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLower(a4, 4);
                });
                Bridge.Test.Assert.areEqual((System.Array.getLength(a4, 0) - 1), 1);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a4, 1) - 1), 2);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a4, 2) - 1), 3);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a4, 3) - 1), 4);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    (System.Array.getLength(a4, 4) - 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getRank(a4), 4);
            },
            testGetAndSetValue: function () {
                var idirect = [7, 8, 9];
                var a = idirect;

                var seven = System.Array.get(a, 0);
                Bridge.Test.Assert.areEqual(7, seven);
                System.Array.set(a, 41, 0);
                Bridge.Test.Assert.areEqual(41, idirect[0]);

                var eight = System.Array.get(a, 1);
                Bridge.Test.Assert.areEqual(8, eight);
                System.Array.set(a, 42, 1);
                Bridge.Test.Assert.areEqual(42, idirect[1]);

                var nine = System.Array.get(a, 2);
                Bridge.Test.Assert.areEqual(9, nine);
                System.Array.set(a, 43, 2);
                Bridge.Test.Assert.areEqual(43, idirect[2]);

                var idirect2 = System.Array.create(0, [[1, 2, 3], [4, 5, 6]], 2, 3);
                var b = idirect2;
                Bridge.Test.Assert.areEqual(1, System.Array.get(b, 0, 0));
                Bridge.Test.Assert.areEqual(6, System.Array.get(b, 1, 2));
                System.Array.set(b, 42, 1, 2);
                Bridge.Test.Assert.areEqual(42, System.Array.get(b, 1, 2));

                var nullIndices = null;
                Bridge.Test.Assert.throws$6(System.ArgumentNullException, function () {
                    System.Array.get.apply(System.Array, [b].concat(nullIndices));
                });

                var tooManyIndices = [1, 2, 3, 4];
                Bridge.Test.Assert.throws$6(System.ArgumentException, function () {
                    System.Array.get.apply(System.Array, [b].concat(tooManyIndices));
                });
            },
            testClear: function () {
                //----------------------------------------------------------
                // Primitives/valuetypes with no gc-ref pointers
                //----------------------------------------------------------
                var idirect;
                idirect = [7, 8, 9];

                System.Array.fill(idirect, 0, 0, 3);
                Bridge.Test.Assert.areEqual(idirect[0], 0);
                Bridge.Test.Assert.areEqual(idirect[1], 0);
                Bridge.Test.Assert.areEqual(idirect[2], 0);

                idirect = [7, 8, 9];

                System.Array.clear(Bridge.cast(idirect, System.Collections.Generic.IList$1(System.Int32)), System.Int32);
                Bridge.Test.Assert.areEqual(idirect[0], 0);
                Bridge.Test.Assert.areEqual(idirect[1], 0);
                Bridge.Test.Assert.areEqual(idirect[2], 0);

                idirect = [19088743, 2023406814, 573785173, 1719109785, 288576887, 574908040];
                System.Array.fill(idirect, 0, 2, 3);
                Bridge.Test.Assert.areEqual(idirect[0], 19088743);
                Bridge.Test.Assert.areEqual(idirect[1], 2023406814);
                Bridge.Test.Assert.areEqual(idirect[2], 0);
                Bridge.Test.Assert.areEqual(idirect[3], 0);
                Bridge.Test.Assert.areEqual(idirect[4], 0);
                Bridge.Test.Assert.areEqual(idirect[5], 574908040);

                idirect = [19088743, 2023406814, 573785173, 1719109785, 288576887, 574908040];
                System.Array.fill(idirect, 0, 0, 6);
                Bridge.Test.Assert.areEqual(idirect[0], 0);
                Bridge.Test.Assert.areEqual(idirect[1], 0);
                Bridge.Test.Assert.areEqual(idirect[2], 0);
                Bridge.Test.Assert.areEqual(idirect[3], 0);
                Bridge.Test.Assert.areEqual(idirect[4], 0);
                Bridge.Test.Assert.areEqual(idirect[5], 0);

                idirect = [19088743, 2023406814, 573785173, 1719109785, 288576887, 574908040];
                System.Array.fill(idirect, 0, 6, 0);
                Bridge.Test.Assert.areEqual(idirect[0], 19088743);
                Bridge.Test.Assert.areEqual(idirect[1], 2023406814);
                Bridge.Test.Assert.areEqual(idirect[2], 573785173);
                Bridge.Test.Assert.areEqual(idirect[3], 1719109785);
                Bridge.Test.Assert.areEqual(idirect[4], 288576887);
                Bridge.Test.Assert.areEqual(idirect[5], 574908040);

                idirect = [19088743, 2023406814, 573785173, 1719109785, 288576887, 574908040];
                System.Array.fill(idirect, 0, 0, 0);
                Bridge.Test.Assert.areEqual(idirect[0], 19088743);
                Bridge.Test.Assert.areEqual(idirect[1], 2023406814);
                Bridge.Test.Assert.areEqual(idirect[2], 573785173);
                Bridge.Test.Assert.areEqual(idirect[3], 1719109785);
                Bridge.Test.Assert.areEqual(idirect[4], 288576887);
                Bridge.Test.Assert.areEqual(idirect[5], 574908040);

                //----------------------------------------------------------
                // GC-refs
                //----------------------------------------------------------
                var sdirect;

                sdirect = ["7", "8", "9"];

                System.Array.fill(sdirect, null, 0, 3);
                Bridge.Test.Assert.null(sdirect[0]);
                Bridge.Test.Assert.null(sdirect[1]);
                Bridge.Test.Assert.null(sdirect[2]);

                sdirect = ["7", "8", "9"];

                System.Array.clear(Bridge.cast(sdirect, System.Collections.Generic.IList$1(String)), String);
                Bridge.Test.Assert.null(sdirect[0]);
                Bridge.Test.Assert.null(sdirect[1]);
                Bridge.Test.Assert.null(sdirect[2]);

                sdirect = ["0x1234567", "0x789abcde", "0x22334455", "0x66778899", "0x11335577", "0x22446688"];
                System.Array.fill(sdirect, null, 2, 3);
                Bridge.Test.Assert.areEqual(sdirect[0], "0x1234567");
                Bridge.Test.Assert.areEqual(sdirect[1], "0x789abcde");
                Bridge.Test.Assert.null(sdirect[2]);
                Bridge.Test.Assert.null(sdirect[3]);
                Bridge.Test.Assert.null(sdirect[4]);
                Bridge.Test.Assert.areEqual(sdirect[5], "0x22446688");

                sdirect = ["0x1234567", "0x789abcde", "0x22334455", "0x66778899", "0x11335577", "0x22446688"];
                System.Array.fill(sdirect, null, 0, 6);
                Bridge.Test.Assert.null(sdirect[0]);
                Bridge.Test.Assert.null(sdirect[1]);
                Bridge.Test.Assert.null(sdirect[2]);
                Bridge.Test.Assert.null(sdirect[3]);
                Bridge.Test.Assert.null(sdirect[4]);
                Bridge.Test.Assert.null(sdirect[5]);

                sdirect = ["0x1234567", "0x789abcde", "0x22334455", "0x66778899", "0x11335577", "0x22446688"];
                System.Array.fill(sdirect, null, 6, 0);
                Bridge.Test.Assert.areEqual(sdirect[0], "0x1234567");
                Bridge.Test.Assert.areEqual(sdirect[1], "0x789abcde");
                Bridge.Test.Assert.areEqual(sdirect[2], "0x22334455");
                Bridge.Test.Assert.areEqual(sdirect[3], "0x66778899");
                Bridge.Test.Assert.areEqual(sdirect[4], "0x11335577");
                Bridge.Test.Assert.areEqual(sdirect[5], "0x22446688");

                sdirect = ["0x1234567", "0x789abcde", "0x22334455", "0x66778899", "0x11335577", "0x22446688"];
                System.Array.fill(sdirect, null, 0, 0);
                Bridge.Test.Assert.areEqual(sdirect[0], "0x1234567");
                Bridge.Test.Assert.areEqual(sdirect[1], "0x789abcde");
                Bridge.Test.Assert.areEqual(sdirect[2], "0x22334455");
                Bridge.Test.Assert.areEqual(sdirect[3], "0x66778899");
                Bridge.Test.Assert.areEqual(sdirect[4], "0x11335577");
                Bridge.Test.Assert.areEqual(sdirect[5], "0x22446688");

                //----------------------------------------------------------
                // Valuetypes with embedded GC-refs
                //----------------------------------------------------------
                var g;
                g = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G();
                });
                g[0].x = 7;
                g[0].s = "Hello";
                g[0].z = 8;
                g[1].x = 7;
                g[1].s = "Hello";
                g[1].z = 8;
                g[2].x = 7;
                g[2].s = "Hello";
                g[2].z = 8;
                g[3].x = 7;
                g[3].s = "Hello";
                g[3].z = 8;
                g[4].x = 7;
                g[4].s = "Hello";
                g[4].z = 8;

                System.Array.fill(g, Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G.getDefaultValue, 0, 5);
                for (var i = 0; i < g.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(g[i].x, 0);
                    Bridge.Test.Assert.null(g[i].s);
                    Bridge.Test.Assert.areEqual(g[i].z, 0);
                }

                g = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G();
                });
                g[0].x = 7;
                g[0].s = "Hello";
                g[0].z = 8;
                g[1].x = 7;
                g[1].s = "Hello";
                g[1].z = 8;
                g[2].x = 7;
                g[2].s = "Hello";
                g[2].z = 8;
                g[3].x = 7;
                g[3].s = "Hello";
                g[3].z = 8;
                g[4].x = 7;
                g[4].s = "Hello";
                g[4].z = 8;

                System.Array.fill(g, Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G.getDefaultValue, 2, 3);
                Bridge.Test.Assert.areEqual(g[0].x, 7);
                Bridge.Test.Assert.areEqual(g[0].s, "Hello");
                Bridge.Test.Assert.areEqual(g[0].z, 8);
                Bridge.Test.Assert.areEqual(g[1].x, 7);
                Bridge.Test.Assert.areEqual(g[1].s, "Hello");
                Bridge.Test.Assert.areEqual(g[1].z, 8);
                for (var i1 = 2; i1 < 5; i1 = (i1 + 1) | 0) {
                    Bridge.Test.Assert.areEqual(g[i1].x, 0);
                    Bridge.Test.Assert.null(g[i1].s);
                    Bridge.Test.Assert.areEqual(g[i1].z, 0);
                }

                //----------------------------------------------------------
                // Range-checks
                //----------------------------------------------------------
                Bridge.Test.Assert.throws$6(System.ArgumentNullException, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f7);

                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, -1, 1);
                });

                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 0, 7);
                });

                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 7, 0);
                });

                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 5, 2);
                });

                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 6, 2);
                });

                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 6, 2147483647);
                });
            },
            testCopy_GCRef: function () {
                var s;
                var d;

                s = ["Red", "Green", null, "Blue"];
                d = ["X", "X", "X", "X"];
                System.Array.copy(s, 0, d, 0, 4);
                Bridge.Test.Assert.areEqual(d[0], "Red");
                Bridge.Test.Assert.areEqual(d[1], "Green");
                Bridge.Test.Assert.null(d[2]);
                Bridge.Test.Assert.areEqual(d[3], "Blue");

                // With reverse overlap
                s = ["Red", "Green", null, "Blue"];
                System.Array.copy(s, 1, s, 2, 2);
                Bridge.Test.Assert.areEqual(s[0], "Red");
                Bridge.Test.Assert.areEqual(s[1], "Green");
                Bridge.Test.Assert.areEqual(s[2], "Green");
                Bridge.Test.Assert.null(s[3]);
            },
            testCopy_VTToObj: function () {
                // Test the Array.Copy code for value-type arrays => Object[]
                var s;
                var d;
                s = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G();
                });
                d = System.Array.init(5, null);

                s[0].x = 7;
                s[0].s = "Hello0";
                s[0].z = 8;

                s[1].x = 9;
                s[1].s = "Hello1";
                s[1].z = 10;

                s[2].x = 11;
                s[2].s = "Hello2";
                s[2].z = 12;

                s[3].x = 13;
                s[3].s = "Hello3";
                s[3].z = 14;

                s[4].x = 15;
                s[4].s = "Hello4";
                s[4].z = 16;

                System.Array.copy(s, 0, d, 0, 5);
                for (var i = 0; i < d.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.true(Bridge.is(d[i], Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G));
                    var g = System.Nullable.getValue(Bridge.cast((d[i]), Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G));
                    Bridge.Test.Assert.areEqual(g.x, s[i].x);
                    Bridge.Test.Assert.areEqual(g.s, s[i].s);
                    Bridge.Test.Assert.areEqual(g.z, s[i].z);
                }
            },
            testCopy_VTWithGCRef: function () {
                // Test the Array.Copy code for value-type arrays with no internal GC-refs.

                var s;
                var d;
                s = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G();
                });
                d = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G();
                });

                s[0].x = 7;
                s[0].s = "Hello0";
                s[0].z = 8;

                s[1].x = 9;
                s[1].s = "Hello1";
                s[1].z = 10;

                s[2].x = 11;
                s[2].s = "Hello2";
                s[2].z = 12;

                s[3].x = 13;
                s[3].s = "Hello3";
                s[3].z = 14;

                s[4].x = 15;
                s[4].s = "Hello4";
                s[4].z = 16;

                System.Array.copy(s, 0, d, 0, 5);
                for (var i = 0; i < d.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(d[i].x, s[i].x);
                    Bridge.Test.Assert.areEqual(d[i].s, s[i].s);
                    Bridge.Test.Assert.areEqual(d[i].z, s[i].z);
                }

                // With overlap
                System.Array.copy(s, 1, s, 2, 3);
                Bridge.Test.Assert.areEqual(s[0].x, 7);
                Bridge.Test.Assert.areEqual(s[0].s, "Hello0");
                Bridge.Test.Assert.areEqual(s[0].z, 8);

                Bridge.Test.Assert.areEqual(s[1].x, 9);
                Bridge.Test.Assert.areEqual(s[1].s, "Hello1");
                Bridge.Test.Assert.areEqual(s[1].z, 10);

                Bridge.Test.Assert.areEqual(s[2].x, 9);
                Bridge.Test.Assert.areEqual(s[2].s, "Hello1");
                Bridge.Test.Assert.areEqual(s[2].z, 10);

                Bridge.Test.Assert.areEqual(s[3].x, 11);
                Bridge.Test.Assert.areEqual(s[3].s, "Hello2");
                Bridge.Test.Assert.areEqual(s[3].z, 12);

                Bridge.Test.Assert.areEqual(s[4].x, 13);
                Bridge.Test.Assert.areEqual(s[4].s, "Hello3");
                Bridge.Test.Assert.areEqual(s[4].z, 14);
            },
            testCopy_VTNoGCRef: function () {
                // Test the Array.Copy code for value-type arrays with no internal GC-refs.

                var s;
                var d;
                s = [305419896, 573785173, 2005440938];
                d = System.Array.init(3, 0);

                // Value-type to value-type array copy.
                System.Array.copy(s, 0, d, 0, 3);
                Bridge.Test.Assert.areEqual(d[0], 305419896);
                Bridge.Test.Assert.areEqual(d[1], 573785173);
                Bridge.Test.Assert.areEqual(d[2], 2005440938);

                s = [305419896, 573785173, 2005440938, 1430532898, 860116326];
                // Value-type to value-type array copy (in place, with overlap)
                System.Array.copy(s, 3, s, 2, 2);
                Bridge.Test.Assert.areEqual(s[0], 305419896);
                Bridge.Test.Assert.areEqual(s[1], 573785173);
                Bridge.Test.Assert.areEqual(s[2], 1430532898);
                Bridge.Test.Assert.areEqual(s[3], 860116326);
                Bridge.Test.Assert.areEqual(s[4], 860116326);

                s = [305419896, 573785173, 2005440938, 1430532898, 860116326];
                // Value-type to value-type array copy (in place, with reverse overlap)
                System.Array.copy(s, 2, s, 3, 2);
                Bridge.Test.Assert.areEqual(s[0], 305419896);
                Bridge.Test.Assert.areEqual(s[1], 573785173);
                Bridge.Test.Assert.areEqual(s[2], 2005440938);
                Bridge.Test.Assert.areEqual(s[3], 2005440938);
                Bridge.Test.Assert.areEqual(s[4], 1430532898);
            },
            testFind: function () {
                var ia = [7, 8, 9];
                var b;

                // Exists included here since it's a trivial wrapper around FindIndex
                b = (System.Array.findIndex(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f8) !== -1);
                Bridge.Test.Assert.true(b);

                b = (System.Array.findIndex(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f9) !== -1);
                Bridge.Test.Assert.false(b);

                var results;
                results = System.Array.findAll(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f10);
                Bridge.Test.Assert.areEqual(results.length, 2);
                Bridge.Test.Assert.true((System.Array.findIndex(results, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f11) !== -1));
                Bridge.Test.Assert.true((System.Array.findIndex(results, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f12) !== -1));

                var sa = ["7", "8", "88", "888", "9"];
                var elem;
                elem = System.Array.find(String, sa, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f13);
                Bridge.Test.Assert.areEqual(elem, "8");

                elem = System.Array.find(String, sa, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f14);
                Bridge.Test.Assert.null(elem);

                ia = [40, 41, 42, 43, 44, 45, 46, 47, 48, 49];
                var idx;
                idx = System.Array.findIndex(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f15);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.findIndex(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f16);
                Bridge.Test.Assert.areEqual(idx, -1);

                idx = System.Array.findIndex(ia, 3, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.findIndex(ia, 4, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, -1);

                idx = System.Array.findIndex(ia, 1, 3, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.findIndex(ia, 1, 2, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, -1);

                sa = ["7", "8", "88", "888", "9"];
                elem = System.Array.findLast(String, sa, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f13);
                Bridge.Test.Assert.areEqual(elem, "888");

                elem = System.Array.findLast(String, sa, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f14);
                Bridge.Test.Assert.null(elem);

                ia = [40, 41, 42, 43, 44, 45, 46, 47, 48, 49];
                idx = System.Array.findLastIndex(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f15);
                Bridge.Test.Assert.areEqual(idx, 9);

                idx = System.Array.findLastIndex(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f16);
                Bridge.Test.Assert.areEqual(idx, -1);

                idx = System.Array.findLastIndex(ia, 3, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.findLastIndex(ia, 2, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, -1);

                idx = System.Array.findLastIndex(ia, 5, 3, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.findLastIndex(ia, 5, 2, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, -1);
            },
            testForEach: function () {
                var intArray = [2, 3, 4];
                var sum = 0;

                var action = function (i) {
                    sum = (sum + i) | 0;
                };

                System.Array.forEach(intArray, action);
                Bridge.Test.Assert.areEqual(9, sum);
            },
            testGetEnumerator: function () {
                var i = [7, 8, 9];

                var ie = Bridge.getEnumerator(i);
                var b;
                var v;

                b = ie.System$Collections$IEnumerator$moveNext();
                Bridge.Test.Assert.true(b);
                v = ie.System$Collections$IEnumerator$getCurrent();
                Bridge.Test.Assert.areEqual(v, 7);

                b = ie.System$Collections$IEnumerator$moveNext();
                Bridge.Test.Assert.true(b);
                v = ie.System$Collections$IEnumerator$getCurrent();
                Bridge.Test.Assert.areEqual(v, 8);

                b = ie.System$Collections$IEnumerator$moveNext();
                Bridge.Test.Assert.true(b);
                v = ie.System$Collections$IEnumerator$getCurrent();
                Bridge.Test.Assert.areEqual(v, 9);

                b = ie.System$Collections$IEnumerator$moveNext();
                Bridge.Test.Assert.false(b);

                ie.System$Collections$IEnumerator$reset();
                b = ie.System$Collections$IEnumerator$moveNext();
                Bridge.Test.Assert.true(b);
                v = ie.System$Collections$IEnumerator$getCurrent();
                Bridge.Test.Assert.areEqual(v, 7);
            },
            testIndexOf: function () {
                var a;

                a = [7, 7, 8, 8, 9, 9];
                var idx;
                idx = System.Array.lastIndexOfT(a, 8);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.lastIndexOfT(a, 8, 3);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.indexOfT(a, 8, 4);
                Bridge.Test.Assert.areEqual(idx, -1);

                idx = System.Array.indexOfT(a, 9, 2, 3);
                Bridge.Test.Assert.areEqual(idx, 4);

                idx = System.Array.indexOfT(a, 9, 2, 2);
                Bridge.Test.Assert.areEqual(idx, -1);

                var ia = Bridge.cast(a, Array);
                idx = System.Array.indexOfT(ia, 8);
                Bridge.Test.Assert.areEqual(idx, 2);

                idx = System.Array.indexOfT(ia, 8, 3);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.indexOfT(ia, 8, 4);
                Bridge.Test.Assert.areEqual(idx, -1);

                idx = System.Array.indexOfT(ia, 9, 2, 3);
                Bridge.Test.Assert.areEqual(idx, 4);

                idx = System.Array.indexOfT(ia, 9, 2, 2);
                Bridge.Test.Assert.areEqual(idx, -1);

                a = [null, null, "Hello", "Hello", "Goodbye", "Goodbye", null, null];
                idx = System.Array.indexOfT(a, null);
                Bridge.Test.Assert.areEqual(idx, 0);
                idx = System.Array.indexOfT(a, "Hello");
                Bridge.Test.Assert.areEqual(idx, 2);
                idx = System.Array.indexOfT(a, "Goodbye");
                Bridge.Test.Assert.areEqual(idx, 4);
                idx = System.Array.indexOfT(a, "Nowhere");
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.indexOfT(a, "Hello", 3);
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.indexOfT(a, "Hello", 4);
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.indexOfT(a, "Goodbye", 2, 3);
                Bridge.Test.Assert.areEqual(idx, 4);
                idx = System.Array.indexOfT(a, "Goodbye", 2, 2);
                Bridge.Test.Assert.areEqual(idx, -1);

                var sa = Bridge.cast(a, Array);
                idx = System.Array.indexOfT(sa, null);
                Bridge.Test.Assert.areEqual(idx, 0);
                idx = System.Array.indexOfT(sa, "Hello");
                Bridge.Test.Assert.areEqual(idx, 2);
                idx = System.Array.indexOfT(sa, "Goodbye");
                Bridge.Test.Assert.areEqual(idx, 4);
                idx = System.Array.indexOfT(sa, "Nowhere");
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.indexOfT(sa, "Hello", 3);
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.indexOfT(sa, "Hello", 4);
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.indexOfT(sa, "Goodbye", 2, 3);
                Bridge.Test.Assert.areEqual(idx, 4);
                idx = System.Array.indexOfT(sa, "Goodbye", 2, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
            },
            testLastIndexOf: function () {
                var a;

                a = [7, 7, 8, 8, 9, 9];
                var idx;
                idx = System.Array.lastIndexOfT(a, 8);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.lastIndexOfT(a, 8, 3);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.lastIndexOfT(a, 8, 1);
                Bridge.Test.Assert.areEqual(idx, -1);

                idx = System.Array.lastIndexOfT(a, 7, 3, 3);
                Bridge.Test.Assert.areEqual(idx, 1);

                idx = System.Array.lastIndexOfT(a, 7, 3, 2);
                Bridge.Test.Assert.areEqual(idx, -1);

                var ia = Bridge.cast(a, Array);
                idx = System.Array.lastIndexOfT(ia, 8);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.lastIndexOfT(ia, 8, 3);
                Bridge.Test.Assert.areEqual(idx, 3);

                idx = System.Array.lastIndexOfT(ia, 8, 1);
                Bridge.Test.Assert.areEqual(idx, -1);

                idx = System.Array.lastIndexOfT(ia, 7, 3, 3);
                Bridge.Test.Assert.areEqual(idx, 1);

                idx = System.Array.lastIndexOfT(ia, 7, 3, 2);
                Bridge.Test.Assert.areEqual(idx, -1);

                a = [null, null, "Hello", "Hello", "Goodbye", "Goodbye", null, null];
                idx = System.Array.lastIndexOfT(a, null);
                Bridge.Test.Assert.areEqual(idx, 7);
                idx = System.Array.lastIndexOfT(a, "Hello");
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.lastIndexOfT(a, "Goodbye");
                Bridge.Test.Assert.areEqual(idx, 5);
                idx = System.Array.lastIndexOfT(a, "Nowhere");
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.lastIndexOfT(a, "Hello", 3);
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.lastIndexOfT(a, "Hello", 2);
                Bridge.Test.Assert.areEqual(idx, 2);
                idx = System.Array.lastIndexOfT(a, "Goodbye", 7, 3);
                Bridge.Test.Assert.areEqual(idx, 5);
                idx = System.Array.lastIndexOfT(a, "Goodbye", 7, 2);
                Bridge.Test.Assert.areEqual(idx, -1);

                var sa = Bridge.cast(a, Array);
                idx = System.Array.lastIndexOfT(sa, null);
                Bridge.Test.Assert.areEqual(idx, 7);
                idx = System.Array.lastIndexOfT(sa, "Hello");
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.lastIndexOfT(sa, "Goodbye");
                Bridge.Test.Assert.areEqual(idx, 5);
                idx = System.Array.lastIndexOfT(sa, "Nowhere");
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.lastIndexOfT(sa, "Hello", 3);
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.lastIndexOfT(sa, "Hello", 2);
                Bridge.Test.Assert.areEqual(idx, 2);
                idx = System.Array.lastIndexOfT(sa, "Goodbye", 7, 3);
                Bridge.Test.Assert.areEqual(idx, 5);
                idx = System.Array.lastIndexOfT(sa, "Goodbye", 7, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
            },
            testResize: function () {
                var i = { };

                i.v = [1, 2, 3, 4, 5];
                System.Array.resize(i, 7, 0);
                Bridge.Test.Assert.areEqual(i.v.length, 7);
                Bridge.Test.Assert.areEqual(i.v[0], 1);
                Bridge.Test.Assert.areEqual(i.v[1], 2);
                Bridge.Test.Assert.areEqual(i.v[2], 3);
                Bridge.Test.Assert.areEqual(i.v[3], 4);
                Bridge.Test.Assert.areEqual(i.v[4], 5);
                Bridge.Test.Assert.areEqual(i.v[5], Bridge.getDefaultValue(System.Int32));
                Bridge.Test.Assert.areEqual(i.v[6], Bridge.getDefaultValue(System.Int32));

                i.v = [1, 2, 3, 4, 5];
                System.Array.resize(i, 3, 0);
                Bridge.Test.Assert.areEqual(i.v.length, 3);
                Bridge.Test.Assert.areEqual(i.v[0], 1);
                Bridge.Test.Assert.areEqual(i.v[1], 2);
                Bridge.Test.Assert.areEqual(i.v[2], 3);

                i.v = null;
                System.Array.resize(i, 3, 0);
                Bridge.Test.Assert.areEqual(i.v.length, 3);
                Bridge.Test.Assert.areEqual(i.v[0], Bridge.getDefaultValue(System.Int32));
                Bridge.Test.Assert.areEqual(i.v[1], Bridge.getDefaultValue(System.Int32));
                Bridge.Test.Assert.areEqual(i.v[2], Bridge.getDefaultValue(System.Int32));
            },
            testReverse: function () {
                var i;

                i = [1, 2, 3, 4, 5];
                System.Array.reverse(Bridge.cast(i, Array));
                Bridge.Test.Assert.areEqual(i[0], 5);
                Bridge.Test.Assert.areEqual(i[1], 4);
                Bridge.Test.Assert.areEqual(i[2], 3);
                Bridge.Test.Assert.areEqual(i[3], 2);
                Bridge.Test.Assert.areEqual(i[4], 1);

                i = [1, 2, 3, 4, 5];
                System.Array.reverse(Bridge.cast(i, Array), 2, 3);
                Bridge.Test.Assert.areEqual(i[0], 1);
                Bridge.Test.Assert.areEqual(i[1], 2);
                Bridge.Test.Assert.areEqual(i[2], 5);
                Bridge.Test.Assert.areEqual(i[3], 4);
                Bridge.Test.Assert.areEqual(i[4], 3);

                var s;

                s = ["1", "2", "3", "4", "5"];
                System.Array.reverse(Bridge.cast(s, Array));
                Bridge.Test.Assert.areEqual(s[0], "5");
                Bridge.Test.Assert.areEqual(s[1], "4");
                Bridge.Test.Assert.areEqual(s[2], "3");
                Bridge.Test.Assert.areEqual(s[3], "2");
                Bridge.Test.Assert.areEqual(s[4], "1");

                s = ["1", "2", "3", "4", "5"];
                System.Array.reverse(Bridge.cast(s, Array), 2, 3);
                Bridge.Test.Assert.areEqual(s[0], "1");
                Bridge.Test.Assert.areEqual(s[1], "2");
                Bridge.Test.Assert.areEqual(s[2], "5");
                Bridge.Test.Assert.areEqual(s[3], "4");
                Bridge.Test.Assert.areEqual(s[4], "3");
            },
            testSort: function () {
                var icomparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.IntegerComparer();

                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(System.Int32, [], 0, 0, icomparer);
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(System.Int32, [5], 0, 1, icomparer);
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(System.Int32, [5, 2], 0, 2, icomparer);

                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(System.Int32, [5, 2, 9, 8, 4, 3, 2, 4, 6], 0, 9, icomparer);
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(System.Int32, [5, 2, 9, 8, 4, 3, 2, 4, 6], 3, 4, icomparer);
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(System.Int32, [5, 2, 9, 8, 4, 3, 2, 4, 6], 3, 6, icomparer);

                var scomparer = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.StringComparer();
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(String, [], 0, 0, scomparer);
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(String, ["5"], 0, 1, scomparer);
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(String, ["5", "2"], 0, 2, scomparer);

                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(String, ["5", "2", null, "8", "4", "3", "2", "4", "6"], 0, 9, scomparer);
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(String, ["5", "2", null, "8", "4", "3", "2", "4", "6"], 3, 4, scomparer);
                Bridge.ClientTest.ArrayTests.ArrayTestsSet2.testSortHelper(String, ["5", "2", null, "8", "4", "3", "2", "4", "6"], 3, 6, scomparer);
            },
            testSortHelper: function (T, array, index, length, comparer) {
                var control = Bridge.ClientTest.ArrayTests.ArrayTestsSet2.simpleSort(T, array, index, length, comparer);

                {
                    var spawn2 = Bridge.cast((System.Array.clone(array)), Array);
                    System.Array.sort(spawn2, index, length, comparer);
                    Bridge.Test.Assert.true(Bridge.ClientTest.ArrayTests.ArrayTestsSet2.arraysAreEqual(T, spawn2, control, comparer));
                }
            },
            simpleSort: function (T, a, index, length, comparer) {
                var result = Bridge.cast((System.Array.clone(a)), Array);
                if (length < 2) {
                    return result;
                }

                for (var i = index; i < ((((index + length) | 0) - 1) | 0); i = (i + 1) | 0) {
                    var tmp = result[i];
                    for (var j = (i + 1) | 0; j < ((index + length) | 0); j = (j + 1) | 0) {
                        if (comparer["System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare"](tmp, result[j]) > 0) {
                            result[i] = result[j];
                            result[j] = tmp;
                            tmp = result[i];
                        }
                    }
                }
                return result;
            },
            arraysAreEqual: function (T, a, b, comparer) {
                // If the same instances were passed, this is unlikely what the test intended.
                Bridge.Test.Assert.false(Bridge.referenceEquals(a, b));

                if (a.length !== b.length) {
                    return false;
                }
                for (var i = 0; i < a.length; i = (i + 1) | 0) {
                    if (0 !== comparer["System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare"](a[i], b[i])) {
                        return false;
                    }
                }
                return true;
            },
            testTrueForAll: function () {
                var ia;
                var b;

                ia = [1, 2, 3, 4, 5];

                b = System.Array.trueForAll(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f18);
                Bridge.Test.Assert.true(b);

                b = System.Array.trueForAll(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f5);
                Bridge.Test.Assert.false(b);

                ia = System.Array.init(0, 0);
                b = System.Array.trueForAll(ia, $_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2.f19);
                Bridge.Test.Assert.true(b);
            },
            testSetValueCasting: function () {
                var indices = [1];
                {
                    // null -> default(null)
                    var a = System.Array.init(3, function (){
                        return new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.S();
                    });
                    a[1].x = 572662306;
                    //a.SetValue(null, indices);
                    //Assert.AreEqual(a[1].X, 0);
                }

                {
                    // T -> Nullable<T>
                    var a1 = System.Array.init(3, null);
                    System.Array.set.apply(System.Array, [a1, 42].concat(indices));
                    var ni = a1[1];
                    Bridge.Test.Assert.areEqual(System.Nullable.hasValue(ni), true);
                    Bridge.Test.Assert.areEqual(System.Nullable.getValue(ni), 42);
                }

                {
                    // null -> Nullable<T>
                    var a2 = System.Array.init(3, null);
                    var orig = 42;
                    a2[1] = orig;
                    System.Array.set.apply(System.Array, [a2, null].concat(indices));
                    var ni1 = a2[1];
                    Bridge.Test.Assert.areEqual(System.Nullable.hasValue(ni1), false);
                }

                {
                    // primitive widening
                    var a3 = System.Array.init(3, 0);
                    System.Array.set.apply(System.Array, [a3, 42].concat(indices));
                    Bridge.Test.Assert.areEqual(a3[1], 42);
                }

                {
                    // widening from enum to primitive
                    var a4 = System.Array.init(3, 0);
                    System.Array.set.apply(System.Array, [a4, Bridge.ClientTest.ArrayTests.ArrayTestsSet2.E1.MinusTwo].concat(indices));
                    Bridge.Test.Assert.areEqual(a4[1], -2);
                }
            },
            testValueTypeToReferenceCopy: function () {
                {
                    var s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
                    var d = System.Array.init(10, null);

                    System.Array.copy(s, 2, d, 5, 3);

                    Bridge.Test.Assert.areEqual(d[0], null);
                    Bridge.Test.Assert.areEqual(d[1], null);
                    Bridge.Test.Assert.areEqual(d[2], null);
                    Bridge.Test.Assert.areEqual(d[3], null);
                    Bridge.Test.Assert.areEqual(d[4], null);
                    Bridge.Test.Assert.areEqual(d[5], 2);
                    Bridge.Test.Assert.areEqual(d[6], 3);
                    Bridge.Test.Assert.areEqual(d[7], 4);
                    Bridge.Test.Assert.areEqual(d[8], null);
                    Bridge.Test.Assert.areEqual(d[9], null);
                }

                {
                    var s1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
                    var d1 = System.Array.init(10, null);

                    System.Array.copy(s1, 2, d1, 5, 3);

                    Bridge.Test.Assert.areEqual(d1[0], null);
                    Bridge.Test.Assert.areEqual(d1[1], null);
                    Bridge.Test.Assert.areEqual(d1[2], null);
                    Bridge.Test.Assert.areEqual(d1[3], null);
                    Bridge.Test.Assert.areEqual(d1[4], null);
                    Bridge.Test.Assert.areEqual(d1[5], 2);
                    Bridge.Test.Assert.areEqual(d1[6], 3);
                    Bridge.Test.Assert.areEqual(d1[7], 4);
                    Bridge.Test.Assert.areEqual(d1[8], null);
                    Bridge.Test.Assert.areEqual(d1[9], null);
                }

                {
                    var s2 = [0, 1, 2, null, 4, 5, 6, 7, 8, 9];
                    var d2 = System.Array.init(10, null);

                    System.Array.copy(s2, 2, d2, 5, 3);

                    Bridge.Test.Assert.areEqual(d2[0], null);
                    Bridge.Test.Assert.areEqual(d2[1], null);
                    Bridge.Test.Assert.areEqual(d2[2], null);
                    Bridge.Test.Assert.areEqual(d2[3], null);
                    Bridge.Test.Assert.areEqual(d2[4], null);
                    Bridge.Test.Assert.areEqual(d2[5], 2);
                    Bridge.Test.Assert.areEqual(d2[6], null);
                    Bridge.Test.Assert.areEqual(d2[7], 4);
                    Bridge.Test.Assert.areEqual(d2[8], null);
                    Bridge.Test.Assert.areEqual(d2[9], null);
                }

                return;
            },
            testReferenceToValueTypeCopy: function () {
                var cc = -858993460;

                {
                    var s = System.Array.init(10, null);
                    for (var i = 0; i < s.length; i = (i + 1) | 0) {
                        s[i] = i;
                    }

                    var d = System.Array.init(10, 0);
                    for (var i1 = 0; i1 < d.length; i1 = (i1 + 1) | 0) {
                        d[i1] = cc;
                    }

                    System.Array.copy(s, 2, d, 5, 3);
                    Bridge.Test.Assert.areEqual(d[0], cc);
                    Bridge.Test.Assert.areEqual(d[1], cc);
                    Bridge.Test.Assert.areEqual(d[2], cc);
                    Bridge.Test.Assert.areEqual(d[3], cc);
                    Bridge.Test.Assert.areEqual(d[4], cc);
                    Bridge.Test.Assert.areEqual(d[5], 2);
                    Bridge.Test.Assert.areEqual(d[6], 3);
                    Bridge.Test.Assert.areEqual(d[7], 4);
                    Bridge.Test.Assert.areEqual(d[8], cc);
                    Bridge.Test.Assert.areEqual(d[9], cc);
                }

                {
                    var s1 = System.Array.init(10, null);
                    for (var i2 = 0; i2 < s1.length; i2 = (i2 + 1) | 0) {
                        s1[i2] = i2;
                    }

                    var d1 = System.Array.init(10, 0);
                    for (var i3 = 0; i3 < d1.length; i3 = (i3 + 1) | 0) {
                        d1[i3] = cc;
                    }

                    System.Array.copy(s1, 2, d1, 5, 3);
                    Bridge.Test.Assert.areEqual(d1[0], cc);
                    Bridge.Test.Assert.areEqual(d1[1], cc);
                    Bridge.Test.Assert.areEqual(d1[2], cc);
                    Bridge.Test.Assert.areEqual(d1[3], cc);
                    Bridge.Test.Assert.areEqual(d1[4], cc);
                    Bridge.Test.Assert.areEqual(d1[5], 2);
                    Bridge.Test.Assert.areEqual(d1[6], 3);
                    Bridge.Test.Assert.areEqual(d1[7], 4);
                    Bridge.Test.Assert.areEqual(d1[8], cc);
                    Bridge.Test.Assert.areEqual(d1[9], cc);
                }

                {
                    var s2 = System.Array.init(10, null);
                    for (var i4 = 0; i4 < s2.length; i4 = (i4 + 1) | 0) {
                        s2[i4] = i4;
                    }
                    s2[1] = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.NotInt32();
                    s2[5] = new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.NotInt32();

                    var d2 = System.Array.init(10, 0);
                    for (var i5 = 0; i5 < d2.length; i5 = (i5 + 1) | 0) {
                        d2[i5] = cc;
                    }

                    System.Array.copy(s2, 2, d2, 5, 3);
                    Bridge.Test.Assert.areEqual(d2[0], cc);
                    Bridge.Test.Assert.areEqual(d2[1], cc);
                    Bridge.Test.Assert.areEqual(d2[2], cc);
                    Bridge.Test.Assert.areEqual(d2[3], cc);
                    Bridge.Test.Assert.areEqual(d2[4], cc);
                    Bridge.Test.Assert.areEqual(d2[5], 2);
                    Bridge.Test.Assert.areEqual(d2[6], 3);
                    Bridge.Test.Assert.areEqual(d2[7], 4);
                    Bridge.Test.Assert.areEqual(d2[8], cc);
                    Bridge.Test.Assert.areEqual(d2[9], cc);
                }

                {
                    var s3 = System.Array.init(10, null);
                    for (var i6 = 0; i6 < s3.length; i6 = (i6 + 1) | 0) {
                        s3[i6] = i6;
                    }
                    s3[4] = null;

                    var d3 = System.Array.init(10, null);
                    for (var i7 = 0; i7 < d3.length; i7 = (i7 + 1) | 0) {
                        d3[i7] = cc;
                    }

                    System.Array.copy(s3, 2, d3, 5, 3);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[0]) && System.Nullable.getValue(d3[0]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[1]) && System.Nullable.getValue(d3[1]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[2]) && System.Nullable.getValue(d3[2]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[3]) && System.Nullable.getValue(d3[3]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[4]) && System.Nullable.getValue(d3[4]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[5]) && System.Nullable.getValue(d3[5]) === 2);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[6]) && System.Nullable.getValue(d3[6]) === 3);
                    Bridge.Test.Assert.true(!System.Nullable.hasValue(d3[7]));
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[8]) && System.Nullable.getValue(d3[8]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[9]) && System.Nullable.getValue(d3[9]) === cc);
                }

                return;
            },
            testArrayConstructionMultidimArrays: function () {
                // This C# initialization syntax generates some peculiar looking IL.
                // Initializations of this form are handled specially on Desktop and
                // in .NET Native by UTC.
                var arr = System.Array.create(0, [[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]], [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]]], 2, 2, 2, 3);
                Bridge.Test.Assert.notNull(arr);
                Bridge.Test.Assert.areEqual(System.Array.get(arr, 0, 0, 0, 0), 1);
                Bridge.Test.Assert.areEqual(System.Array.get(arr, 0, 0, 0, 1), 2);
                Bridge.Test.Assert.areEqual(System.Array.get(arr, 0, 0, 0, 2), 3);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.ArrayTests.ArrayTestsSet2", $_);

    Bridge.apply($_.Bridge.ClientTest.ArrayTests.ArrayTestsSet2, {
        f1: function (i) {
            return i === 4;
        },
        f2: function (i) {
            return i === 2 || i === 3;
        },
        f3: function (i) {
            return i === 0;
        },
        f4: function (i) {
            return i === -7;
        },
        f5: function (i) {
            return i === 3;
        },
        f6: function (i) {
            return i === -5;
        },
        f7: function () {
            System.Array.fill(null, null, 0, 0);
        },
        f8: function (i) {
            return i === 8;
        },
        f9: function (i) {
            return i === -1;
        },
        f10: function (i) {
            return (i % 2) !== 0;
        },
        f11: function (i) {
            return i === 7;
        },
        f12: function (i) {
            return i === 9;
        },
        f13: function (s) {
            return System.String.startsWith(s, "8");
        },
        f14: function (s) {
            return Bridge.referenceEquals(s, "X");
        },
        f15: function (i) {
            return i >= 43;
        },
        f16: function (i) {
            return i === 99;
        },
        f17: function (i) {
            return i === 43;
        },
        f18: function (i) {
            return i > 0;
        },
        f19: function (i) {
            return false;
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.B1");

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.B2");

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.E1", {
        $kind: "enum",
        statics: {
            MinusTwo: -2
        },
        $utype: System.SByte
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G(); }
        },
        x: 0,
        s: null,
        z: 0,
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([71, this.x, this.s, this.z]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G)) {
                return false;
            }
            return Bridge.equals(this.x, o.x) && Bridge.equals(this.s, o.s) && Bridge.equals(this.z, o.z);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.G();
            s.x = this.x;
            s.s = this.s;
            s.z = this.z;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.I1", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.I2", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.IntegerComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Int32),System.Collections.IEqualityComparer],
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Int32$compare",
            "getHashCode", "System$Collections$IEqualityComparer$getHashCode"
            ]
        },
        compare: function (x, y) {
            return ((x - y) | 0);
        },
        System$Collections$IEqualityComparer$equals: function (x, y) {
            return System.Nullable.getValue(Bridge.cast(x, System.Int32)) === System.Nullable.getValue(Bridge.cast(y, System.Int32));
        },
        getHashCode: function (obj) {
            return System.Nullable.getValue(Bridge.cast(obj, System.Int32)) >> 2;
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.NotInt32", {
        inherits: [System.IEquatable$1(System.Int32)],
        config: {
            alias: [
            "equalsT", "System$IEquatable$1$System$Int32$equalsT"
            ]
        },
        equalsT: function (other) {
            throw new System.NotImplementedException();
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.S", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.S(); }
        },
        x: 0,
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([83, this.x]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.ArrayTests.ArrayTestsSet2.S)) {
                return false;
            }
            return Bridge.equals(this.x, o.x);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.ArrayTests.ArrayTestsSet2.S();
            s.x = this.x;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.StringComparer", {
        inherits: [System.Collections.Generic.IComparer$1(String)],
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$String$compare"
            ]
        },
        compare: function (x, y) {
            if (Bridge.referenceEquals(x, y)) {
                return 0;
            }
            if (x == null) {
                return -1;
            }
            if (y == null) {
                return 1;
            }
            return System.String.compare(x, y);
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.Class68", {
        x: 0,
        y: 1,
        test: function () {
            // Multiple local vars correctly
            var x = 1, y = 2;

            var z = (x + y) | 0;
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.ClassA", {
        statics: {
            ctor: function () {
                Bridge.ClientTest.BasicCSharp.ClassA.staticString = "Defined string";
                Bridge.ClientTest.BasicCSharp.ClassA.staticInt = -340;
            },
            statitIntNotInitialized: 0,
            statitStringNotInitialized: null,
            staticInt: 0,
            staticString: null,
            CONST_CHAR: 81,
            CONST_DECIMAL: System.Decimal("3.123456789324324324"),
            staticMethod1: function (i, s, d) {
                Bridge.ClientTest.BasicCSharp.ClassA.statitIntNotInitialized = i;
                Bridge.ClientTest.BasicCSharp.ClassA.statitStringNotInitialized = s;

                return Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.ctor(), {
                    setDoubleA: d
                } );
            },
            staticMethod2: function (p) {
                if (p === void 0) { p = []; }
                var i = (System.Nullable.getValue(Bridge.cast(p[0], System.Int32)) + 1000) | 0;
                var s = Bridge.cast(p[1], String);
                var d = System.Nullable.getValue(Bridge.cast(p[2], System.Double));

                return Bridge.ClientTest.BasicCSharp.ClassA.staticMethod1(i, s, d);
            },
            tryParse: function (o, i) {
                i.v = 3;

                return true;
            },
            getDefaultInt: function () {
                return Bridge.getDefaultValue(System.Int32);
            }
        },
        data: null,
        config: {
            properties: {
                NumberA: 0,
                StringA: null,
                BoolA: false,
                DoubleA: 0,
                DecimalA: System.Decimal(0.0)
            }
        },
        ctor: function () {
            this.$initialize();
            this.setNumberA(10);
            this.setStringA("Str");
            this.setBoolA(true);
            this.setDoubleA(Number.POSITIVE_INFINITY);
            this.setDecimalA(System.Decimal.MinusOne);
            this.setData(Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.Aux1(), {
                setNumber: 700
            } ));
        },
        $ctor1: function (d) {
            Bridge.ClientTest.BasicCSharp.ClassA.ctor.call(this);
            if (d == null) {
                throw new System.Exception("Related should not be null");
            }

            this.setData(d);
        },
        $ctor2: function (p) {
            if (p === void 0) { p = []; }

            Bridge.ClientTest.BasicCSharp.ClassA.ctor.call(this);
            if (p == null || p.length < 6) {
                throw new System.Exception("Should pass six parameters");
            }

            if (Bridge.is(p[0], System.Int32)) {
                this.setNumberA(System.Nullable.getValue(Bridge.cast(p[0], System.Int32)));
            }

            if (Bridge.is(p[1], String)) {
                this.setStringA(Bridge.cast(p[1], String));
            }

            if (Bridge.is(p[2], Boolean)) {
                this.setBoolA(System.Nullable.getValue(Bridge.cast(p[2], Boolean)));
            }

            if (Bridge.is(p[3], System.Double)) {
                this.setDoubleA(System.Nullable.getValue(Bridge.cast(p[3], System.Double)));
            }

            if (Bridge.is(p[4], System.Decimal)) {
                this.setDecimalA(System.Nullable.getValue(Bridge.cast(p[4], System.Decimal)));
            }

            if (Bridge.is(p[5], Bridge.ClientTest.BasicCSharp.ClassA.Aux1)) {
                this.setData(Bridge.cast(p[5], Bridge.ClientTest.BasicCSharp.ClassA.Aux1));
            }
        },
        getData: function () {
            return this.data;
        },
        setData: function (value) {
            this.data = value;
        },
        method1: function () {
            var a1 = Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.Aux1(), {
                setNumber: 1
            } );

            return Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.Aux1(), {
                setNumber: 2,
                setRelated: a1
            } );
        },
        method2: function (a) {
            a.setRelated(a);
        },
        method3: function () {
            if (this.getData() != null) {
                return this.getData().toString();
            }

            return "no data";
        },
        method4: function (i, add) {
            i = (i + add) | 0;
            return i;
        },
        method5: function (i) {
            if (i === void 0) { i = -5; }
            return i;
        },
        method5$1: function (i, k) {
            if (i === void 0) { i = -50; }
            if (k === void 0) { k = -60; }
            return ((i + k) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.ClassA.Aux1", {
        config: {
            properties: {
                Number: 0,
                Related: null
            }
        },
        toString: function () {
            return System.String.format("{0} Has related {1}", this.getNumber(), this.getRelated() != null ? this.getRelated().getNumber().toString() : "No");
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.Data", {
        config: {
            properties: {
                Count: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.Point", {
        $kind: "struct",
        statics: {
            ctor: function () {
                Bridge.ClientTest.BasicCSharp.Point.staticInt = 500;
                Bridge.ClientTest.BasicCSharp.Point.staticString = "Initialized";
            },
            statitIntNotInitialized: 0,
            statitStringNotInitialized: null,
            staticInt: 0,
            staticString: null,
            CONST_CHAR: 87,
            test3: function () {
                return ((Bridge.ClientTest.BasicCSharp.Point.statitIntNotInitialized + Bridge.ClientTest.BasicCSharp.Point.staticInt) | 0);
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BasicCSharp.Point(); }
        },
        x: 0,
        y: 0,
        ctor: function () {
            this.$initialize();
        },
        test1: function () {
            return ((Bridge.ClientTest.BasicCSharp.Point.staticInt + this.x) | 0);
        },
        test2: function (p) {
            return Bridge.merge(new Bridge.ClientTest.BasicCSharp.Point(), {
                x: ((this.x + p.x) | 0),
                y: ((this.y + p.y) | 0)
            } );
        },
        getHashCode: function () {
            var h = Bridge.addHash([1852403652, this.x, this.y]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BasicCSharp.Point)) {
                return false;
            }
            return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BasicCSharp.Point();
            s.x = this.x;
            s.y = this.y;
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.Rectangle", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BasicCSharp.Rectangle(); }
        },
        config: {
            init: function () {
                this.l = new Bridge.ClientTest.BasicCSharp.Point();
                this.t = new Bridge.ClientTest.BasicCSharp.Point();
            }
        },
        $ctor1: function (x, y) {
            this.$initialize();
            // [#69]
            (new Bridge.ClientTest.BasicCSharp.Rectangle.ctor()).$clone(this);

            this.l.x = x;
            this.l.y = y;
        },
        $ctor2: function (x1, y1, x2, y2) {
            this.$initialize();
            this.l.x = x1;
            this.l.y = y1;
            this.t.x = x2;
            this.t.y = y2;
        },
        ctor: function () {
            this.$initialize();
        },
        getHashCode: function () {
            var h = Bridge.addHash([3771388952, this.l, this.t]);
            return h;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BasicCSharp.Rectangle)) {
                return false;
            }
            return Bridge.equals(this.l, o.l) && Bridge.equals(this.t, o.t);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BasicCSharp.Rectangle();
            s.l = this.l.$clone();
            s.t = this.t.$clone();
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestAbstractClass", {
        statics: {
            testB: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestAbstractClass.B();

                Bridge.Test.Assert.true$1(b != null, "Instance of B created");
                Bridge.Test.Assert.areEqual$1("B", b.getString(), "b.GetString() = 'B'");
                Bridge.Test.Assert.areEqual$1(1, b.getData(), "b.Data = 1");
            },
            testC: function () {
                var c = new Bridge.ClientTest.BasicCSharp.TestAbstractClass.C();

                Bridge.Test.Assert.true$1(c != null, "Instance of C created");
                Bridge.Test.Assert.areEqual$1("C", c.getString(), "c.GetString() = 'C'");
                Bridge.Test.Assert.areEqual$1(-1, c.getData(), "c.Data = -1");
            },
            testBC: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestAbstractClass.B();

                Bridge.Test.Assert.true$1(b != null, "Instance of B created as instance of A");
                Bridge.Test.Assert.areEqual$1("B", b.getString(), "b.GetString() = 'B'");
                Bridge.Test.Assert.areEqual$1(1, b.getData(), "b.Data = 1");

                var c = new Bridge.ClientTest.BasicCSharp.TestAbstractClass.C();
                Bridge.Test.Assert.true$1(c != null, "Instance of C created as instance of A");
                Bridge.Test.Assert.areEqual$1("C", c.getString(), "c.GetString() = 'C'");
                Bridge.Test.Assert.areEqual$1(-1, c.getData(), "c.Data = -1");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestAbstractClass.A", {
        config: {
            properties: {
                Data: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestEnum", {
        statics: {
            testParse: function () {
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "Zero"), "Parse Digits.Zero");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "One"), "Parse Digits.One");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "Two"), "Parse Digits.Two");
                Bridge.Test.Assert.areEqual$1(3, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Dog, Cat"), "Parse Dog, Cat");
                Bridge.Test.Assert.areEqual$1(14, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Bird, Cat, Rabbit"), "Parse Bird, Cat, Rabbit");

                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BasicCSharp.TestEnum.f1, "Parse ONE");
            },
            testParseIgnoreCase: function () {
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "zero", true), "Parse Digits.Zero");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "oNe", true), "Parse Digits.One");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "TWO", true), "Parse Digits.Two");

                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BasicCSharp.TestEnum.f2, "Parse ONN");
            },
            testToString: function () {
                Bridge.Test.Assert.areEqual$1("Zero", System.Enum.toString(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero), "ToString Digits.Zero");
                Bridge.Test.Assert.areEqual$1("One", System.Enum.toString(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One), "ToString Digits.One");
                Bridge.Test.Assert.areEqual$1("Two", System.Enum.toString(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two), "ToString Digits.Two");
                Bridge.Test.Assert.areEqual$1("150", System.Enum.toString(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 150), "ToString (Digits)150");
            },
            testGetValues: function () {
                Bridge.Test.Assert.areDeepEqual$1([Bridge.ClientTest.BasicCSharp.TestEnum.Abc.A, Bridge.ClientTest.BasicCSharp.TestEnum.Abc.B, Bridge.ClientTest.BasicCSharp.TestEnum.Abc.C], System.Enum.getValues(Bridge.ClientTest.BasicCSharp.TestEnum.Abc), "Abc values");

                Bridge.Test.Assert.areDeepEqual$1([Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two], System.Enum.getValues(Bridge.ClientTest.BasicCSharp.TestEnum.Digits), "Digits values");
            },
            testCompareTo: function () {
                Bridge.Test.Assert.areEqual$1(0, Bridge.compare(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two), "CompareTo Digits.Two with Digits.Two");
                Bridge.Test.Assert.areEqual$1(-1, Bridge.compare(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two), "CompareTo Digits.One with Digits.Two");
                Bridge.Test.Assert.areEqual$1(1, Bridge.compare(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero), "CompareTo Digits.Two with Digits.Zero");
            },
            testFormat: function () {
                Bridge.Test.Assert.areEqual$1("Two", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, "G"), "Format Digits.Two G");
                Bridge.Test.Assert.areEqual$1("Two", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, "g"), "Format Digits.Two g");
                Bridge.Test.Assert.areEqual$1("150", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 150, "G"), "Format (Digits)150 G");
                Bridge.Test.Assert.areEqual$1("150", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 150, "g"), "Format (Digits)150 g");
                Bridge.Test.Assert.areEqual$1("Dog, Cat", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 3, "G"), "Format Pets.Dog | Pets.Cat G");
                Bridge.Test.Assert.areEqual$1("Bird, Rabbit, Other", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 28, "g"), "Format Pets.Bird | Pets.Rabbit | Pets.Other g");
                Bridge.Test.Assert.areEqual$1("3", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets1, 3, "G"), "Format Pets1.Cat | Pets1.Dog G");
                Bridge.Test.Assert.areEqual$1("3", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets1, 3, "g"), "Format Pets1.Cat | Pets1.Dog g");

                Bridge.Test.Assert.areEqual$1("2", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, "X"), "Format Digits.Two X");
                Bridge.Test.Assert.areEqual$1("1", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, "x"), "Format Digits.One x");
                Bridge.Test.Assert.areEqual$1("ff", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 255, "X"), "Format (Digits)255 X");
                Bridge.Test.Assert.areEqual$1("ff", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 255, "x"), "Format (Digits)255 x");
                Bridge.Test.Assert.areEqual$1("18", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 24, "X"), "Format Pets.Rabbit | Pets.Other X");
                Bridge.Test.Assert.areEqual$1("10", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Other, "x"), "Format Pets.Other x");

                Bridge.Test.Assert.areEqual$1("2", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, "D"), "Format Digits.Two D");
                Bridge.Test.Assert.areEqual$1("1", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, "d"), "Format Digits.One d");
                Bridge.Test.Assert.areEqual$1("255", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 255, "D"), "Format (Digits)255 D");
                Bridge.Test.Assert.areEqual$1("255", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 255, "d"), "Format (Digits)255 d");
                Bridge.Test.Assert.areEqual$1("24", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 24, "D"), "Format Pets.Rabbit | Pets.Other D");
                Bridge.Test.Assert.areEqual$1("16", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Other, "d"), "Format Pets.Other d");

                Bridge.Test.Assert.areEqual$1("Dog, Cat", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets1, 3, "F"), "Format Pets1.Cat | Pets1.Dog F");
                Bridge.Test.Assert.areEqual$1("Dog, Cat", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets1, 3, "f"), "Format Pets1.Cat | Pets1.Dog f");
            },
            testGetName: function () {
                Bridge.Test.Assert.areEqual$1("Two", System.Enum.getName(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 2), "GetName 2");
                Bridge.Test.Assert.areEqual$1("One", System.Enum.getName(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 1), "GetName 1");
                Bridge.Test.Assert.areEqual$1(null, System.Enum.getName(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 100), "GetName 100");
            },
            testGetNames: function () {
                Bridge.Test.Assert.areDeepEqual$1(["A", "B", "C"], System.Enum.getNames(Bridge.ClientTest.BasicCSharp.TestEnum.Abc), "Abc names");

                Bridge.Test.Assert.areDeepEqual$1(["Zero", "One", "Two"], System.Enum.getNames(Bridge.ClientTest.BasicCSharp.TestEnum.Digits), "Digits names");
            },
            testHasFlag: function () {
                Bridge.Test.Assert.areEqual$1(true, System.Enum.hasFlag((3), Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Cat), "(Pets.Dog | Pets.Cat).HasFlag(Pets.Cat)");
                Bridge.Test.Assert.areEqual$1(true, System.Enum.hasFlag((3), Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Dog), "(Pets.Dog | Pets.Cat).HasFlag(Pets.Dog)");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.hasFlag((3), Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Bird), "(Pets.Dog | Pets.Cat).HasFlag(Pets.Bird)");
                Bridge.Test.Assert.areEqual$1(true, System.Enum.hasFlag(Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Dog, Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Dog), "Pets.Dog.HasFlag(Pets.Dog)");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.hasFlag(Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Dog, Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Cat), "Pets.Dog.HasFlag(Pets.Cat)");
            },
            testIsDefined: function () {
                Bridge.Test.Assert.areEqual$1(true, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 1), "Enum.IsDefined(typeof(Pets), 1)");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 17), "Enum.IsDefined(typeof(Pets), 17)");
                Bridge.Test.Assert.areEqual$1(true, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Rabbit"), "Enum.IsDefined(typeof(Pets), \"Rabbit\")");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Parrot"), "Enum.IsDefined(typeof(Pets), \"Parrot\")");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "RABBIT"), "Enum.IsDefined(typeof(Pets), \"RABBIT\")");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 3), "Enum.IsDefined(typeof(Pets), Pets.Dog | Pets.Cat)");
            },
            testTryParse: function () {
                var outVar = { v : new Bridge.ClientTest.BasicCSharp.TestEnum.Digits() };
                var outPets = { v : new Bridge.ClientTest.BasicCSharp.TestEnum.Pets() };
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "Zero", outVar), "TryParse Digits.Zero");
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero, outVar.v);
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "One", outVar), "TryParse Digits.One");
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, outVar.v);
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "Two", outVar), "TryParse Digits.Two");
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, outVar.v);
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Dog, Cat", outPets), "TryParse Dog, Cat");
                Bridge.Test.Assert.areEqual(3, outPets.v);
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Bird, Cat, Rabbit", outPets), "TryParse Bird, Cat, Rabbit");
                Bridge.Test.Assert.areEqual(14, outPets.v);
                Bridge.Test.Assert.areEqual$1(false, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "ONE", outVar), "TryParse ONE");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.BasicCSharp.TestEnum", $_);

    Bridge.apply($_.Bridge.ClientTest.BasicCSharp.TestEnum, {
        f1: function () {
            var d = System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "ONE");
        },
        f2: function () {
            var d = System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "ONN", true);
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestEnum.Abc", {
        $kind: "enum",
        statics: {
            A: -1,
            B: 0,
            C: 1
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestEnum.Digits", {
        $kind: "enum",
        statics: {
            Zero: 0,
            One: 1,
            Two: 2
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestEnum.Pets", {
        $kind: "enum",
        statics: {
            None: 0,
            Dog: 1,
            Cat: 2,
            Bird: 4,
            Rabbit: 8,
            Other: 16
        },
        $flags: true
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestEnum.Pets1", {
        $kind: "enum",
        statics: {
            None: 0,
            Dog: 1,
            Cat: 2,
            Bird: 4,
            Rabbit: 8,
            Other: 16
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInheritance", {
        statics: {
            testA: function () {
                var a = new Bridge.ClientTest.BasicCSharp.TestInheritance.A(10);

                Bridge.Test.Assert.true$1(a != null, "Instance of A created");
                Bridge.Test.Assert.areEqual$1(10, a.getX(), "a.X = 10");
                Bridge.Test.Assert.areEqual$1(100, a.handleNumber(100), "a.HandleNumber(100) = 100");
                Bridge.Test.Assert.areEqual$1("Hundred", a.handleString("Hundred"), "a.HandleString('Hundred') = 'Hundred'");
            },
            testB: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestInheritance.B(10, 20);

                Bridge.Test.Assert.true$1(b != null, "Instance of B created");
                Bridge.Test.Assert.areEqual$1(10, b.getX(), "b.X = 10");
                Bridge.Test.Assert.areEqual$1(20, b.getY(), "b.Y = 20");
                Bridge.Test.Assert.areEqual$1(100, b.handleNumber$1(1), "b.HandleNumber(1) = 100");
                Bridge.Test.Assert.areEqual$1("Hundred", b.handleString("Hundred"), "b.HandleString('Hundred') = 'Hundred'");
            },
            testAB: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestInheritance.B(10, 20);

                Bridge.Test.Assert.true$1(b != null, "Instance of B created as A type");
                Bridge.Test.Assert.areEqual$1(10, b.getX(), "b.X = 10");
                Bridge.Test.Assert.areEqual$1(10, b.handleNumber(10), "b.HandleNumber(10) = 10");
                Bridge.Test.Assert.areEqual$1("Hundred", b.handleString("Hundred"), "b.HandleString('Hundred') = 'Hundred'");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInheritance.A", {
        config: {
            properties: {
                X: 0
            }
        },
        ctor: function (x) {
            this.$initialize();
            this.setX(x);
        },
        handleNumber: function (i) {
            return i;
        },
        handleString: function (s) {
            return s;
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInterfaces", {
        statics: {
            testInterfaceMethodAndProperty: function () {
                var a = new Bridge.ClientTest.BasicCSharp.TestInterfaces.A();

                Bridge.Test.Assert.true$1(a != null, "Instance of A created through ISimple interface");
                Bridge.Test.Assert.areEqual$1("A.ISimple", a.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getString(), "a.GetString() = A.ISimple  through interface");
                Bridge.Test.Assert.areEqual$1(1, a.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getData(), "a.Data = 1  through interface");

                var b = Bridge.as(a, Bridge.ClientTest.BasicCSharp.TestInterfaces.A);
                Bridge.Test.Assert.true$1(b != null, "Instance of ISimple as A");
                Bridge.Test.Assert.areEqual$1("A.ISimple", a.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getString(), "a.GetString() = A.ISimple through instance");
                Bridge.Test.Assert.areEqual$1(1, a.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getData(), "a.Data = 1 through instance");
            },
            testExplicitInterfaceMethodAndProperty: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestInterfaces.B();
                Bridge.Test.Assert.true$1(b != null, "Instance of B created through ISimple interface explicitly");
                Bridge.Test.Assert.areEqual$1("explicit B.ISimple", b.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getString(), "b.GetString() = explicit B.ISimple");
                Bridge.Test.Assert.areEqual$1(2, b.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getData(), "a.Data = 2");
            },
            testTwoInterfaces: function () {
                var c = new Bridge.ClientTest.BasicCSharp.TestInterfaces.C();

                Bridge.Test.Assert.true$1(c != null, "Instance of C created through ISimpleAsWell interface");
                Bridge.Test.Assert.areEqual$1("C.ISimpleAsWell", c.getStringAsWell(), "a.GetStringAsWell() = A.ISimple through instance");
                Bridge.Test.Assert.areEqual$1(4, c.getDataAsWell(), "c.DataAsWell = 4  through instance");

                var a = Bridge.as(c, Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple);
                Bridge.Test.Assert.true$1(a != null, "Instance of ISimple as C");
                Bridge.Test.Assert.areEqual$1("C.ISimple", a.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getString(), "a.GetString() = C.ISimple  through interface");
                Bridge.Test.Assert.areEqual$1(3, a.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getData(), "a.Data = 3 through interface");

                var b = Bridge.as(c, Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimpleAsWell);
                Bridge.Test.Assert.true$1(b != null, "Instance of ISimpleAsWell as C");
                Bridge.Test.Assert.areEqual$1("C.ISimpleAsWell", b.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimpleAsWell$getStringAsWell(), "b.GetStringAsWell() = C.ISimpleAsWell  through interface");
                Bridge.Test.Assert.areEqual$1(4, b.Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimpleAsWell$getDataAsWell(), "b.DataAsWell = 4 through interface");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimpleAsWell", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestMethodParametersClass", {
        statics: {
            methodDefault: function (i) {
                if (i === void 0) { i = 5; }
                return i;
            },
            methodParams: function (n) {
                if (n === void 0) { n = []; }
                var sum = 0;
                for (var i = 0; i < n.length; i = (i + 1) | 0) {
                    sum = (sum + n[i]) | 0;
                }

                return sum;
            },
            test: function () {
                Bridge.Test.Assert.areEqual$1(5, Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.methodDefault(), "Default parameter - 5");
                Bridge.Test.Assert.areEqual$1(10, Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.methodDefault(10), "Default parameter - 10");

                Bridge.Test.Assert.areEqual$1(6, Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.methodParams([1, 2, 3]), "params int[]");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods", {
        statics: {
            testInstance: function () {
                var i = new Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods.Instance();

                Bridge.Test.Assert.true$1(i != null, "i created");
                Bridge.Test.Assert.areEqual$1("Foo(int x)", i.foo$2(1), "Instance Foo(int x)");
                Bridge.Test.Assert.areEqual$1("Foo(string s)", i.foo$5("string"), "Instance Foo(string s)");
                Bridge.Test.Assert.areEqual$1("Foo(double d)", i.foo(1.1), "Instance Foo(double d)");
                Bridge.Test.Assert.areEqual$1("Foo(int x, int y)", i.foo$4(1, 2), "Instance Foo(int x, int y)");
                Bridge.Test.Assert.areEqual$1("Foo(int x, double y)", i.foo$3(1, 1.1), "Instance Foo(int x, double y)");
                Bridge.Test.Assert.areEqual$1("Foo(double x, int y)", i.foo$1(1.1, 1), "Instance Foo(double x, int y)");

                Bridge.Test.Assert.areEqual$1(67, i.fooReturnType(1), "Instance char FooReturnType(int y)");
                Bridge.Test.Assert.areEqual$1("string FooReturnType(double d)", i.fooReturnType$1(1.1), "Instance string FooReturnType(double d)");

                Bridge.Test.Assert.areEqual$1("FooOptionalParameters(int x)", i.fooOptionalParameters(1), "Instance FooOptionalParameters(int x)");
                Bridge.Test.Assert.areEqual$1("FooOptionalParameters(int x, int y = 5)", i.fooOptionalParameters$1(1, 2), "Instance FooOptionalParameters(int x, int y = 5)");

                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5)", i.fooMultipleOptionalParameters(1, 2), "Instance FooMultipleOptionalParameters(int x, int y = 5)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", i.fooMultipleOptionalParameters$1(1, 5, 2), "Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", i.fooMultipleOptionalParameters$1(1, 2, 3), "Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", i.fooMultipleOptionalParameters$1(1, 3, 2), "Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");

                Bridge.Test.Assert.areEqual$1("FooNamedArgument(int x)", i.fooNamedArgument$1(1), "Static FooNamedArgument(int x)");
                Bridge.Test.Assert.areEqual$1("FooNamedArgument(double d)", i.fooNamedArgument(1), "Static FooNamedArgument(double d)");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods.Instance", {
        foo$2: function (x) {
            return "Foo(int x)";
        },
        foo$5: function (s) {
            return "Foo(string s)";
        },
        foo: function (d) {
            return "Foo(double d)";
        },
        foo$4: function (x, y) {
            return "Foo(int x, int y)";
        },
        foo$3: function (x, y) {
            return "Foo(int x, double y)";
        },
        foo$1: function (x, y) {
            return "Foo(double x, int y)";
        },
        fooReturnType: function (x) {
            return 67;
        },
        fooReturnType$1: function (d) {
            return "string FooReturnType(double d)";
        },
        fooOptionalParameters$1: function (x, y) {
            if (y === void 0) { y = 5; }
            return "FooOptionalParameters(int x, int y = 5)";
        },
        fooOptionalParameters: function (x) {
            return "FooOptionalParameters(int x)";
        },
        fooMultipleOptionalParameters$1: function (x, y, z) {
            if (y === void 0) { y = 5; }
            if (z === void 0) { z = 10; }
            return "FooMultipleOptionalParameters(int x, int y = 5, int z = 10)";
        },
        fooMultipleOptionalParameters: function (x, y) {
            if (y === void 0) { y = 5; }
            return "FooMultipleOptionalParameters(int x, int y = 5)";
        },
        fooNamedArgument$1: function (x) {
            return "FooNamedArgument(int x)";
        },
        fooNamedArgument: function (d) {
            return "FooNamedArgument(double d)";
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods", {
        statics: {
            testStatic: function () {
                Bridge.Test.Assert.areEqual$1("Foo(int x)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$2(1), "Static Foo(int x)");
                Bridge.Test.Assert.areEqual$1("Foo(string s)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$5("string"), "Static Foo(string s)");
                Bridge.Test.Assert.areEqual$1("Foo(double d)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo(1.1), "Static Foo(double d)");
                Bridge.Test.Assert.areEqual$1("Foo(int x, int y)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$4(1, 2), "Static Foo(int x, int y)");
                Bridge.Test.Assert.areEqual$1("Foo(int x, double y)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$3(1, 1.1), "Static Foo(int x, double y)");
                Bridge.Test.Assert.areEqual$1("Foo(double x, int y)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$1(1.1, 1), "Static Foo(double x, int y)");

                Bridge.Test.Assert.areEqual$1(67, Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooReturnType(1), "Static char FooReturnType(int y)");
                Bridge.Test.Assert.areEqual$1("string FooReturnType(double d)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooReturnType$1(1.1), "Static string FooReturnType(double d)");

                Bridge.Test.Assert.areEqual$1("FooOptionalParameters(int x)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooOptionalParameters(1), "Static FooOptionalParameters(int x)");
                Bridge.Test.Assert.areEqual$1("FooOptionalParameters(int x, int y = 5)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooOptionalParameters$1(1, 2), "Static FooOptionalParameters(int x, int y = 5)");

                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooMultipleOptionalParameters(1, 2), "Static FooMultipleOptionalParameters(int x, int y = 5)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooMultipleOptionalParameters$1(1, 5, 2), "Static FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooMultipleOptionalParameters$1(1, 2, 3), "Static FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooMultipleOptionalParameters$1(1, 3, 2), "Static FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");

                Bridge.Test.Assert.areEqual$1("FooNamedArgument(int x)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooNamedArgument$1(1), "Static FooNamedArgument(int x)");
                Bridge.Test.Assert.areEqual$1("FooNamedArgument(double d)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooNamedArgument(1), "Static FooNamedArgument(double d)");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static", {
        statics: {
            foo$2: function (x) {
                return "Foo(int x)";
            },
            foo$5: function (s) {
                return "Foo(string s)";
            },
            foo: function (d) {
                return "Foo(double d)";
            },
            foo$4: function (x, y) {
                return "Foo(int x, int y)";
            },
            foo$3: function (x, y) {
                return "Foo(int x, double y)";
            },
            foo$1: function (x, y) {
                return "Foo(double x, int y)";
            },
            fooReturnType: function (x) {
                return 67;
            },
            fooReturnType$1: function (d) {
                return "string FooReturnType(double d)";
            },
            fooOptionalParameters$1: function (x, y) {
                if (y === void 0) { y = 5; }
                return "FooOptionalParameters(int x, int y = 5)";
            },
            fooOptionalParameters: function (x) {
                return "FooOptionalParameters(int x)";
            },
            fooMultipleOptionalParameters$1: function (x, y, z) {
                if (y === void 0) { y = 5; }
                if (z === void 0) { z = 10; }
                return "FooMultipleOptionalParameters(int x, int y = 5, int z = 10)";
            },
            fooMultipleOptionalParameters: function (x, y) {
                if (y === void 0) { y = 5; }
                return "FooMultipleOptionalParameters(int x, int y = 5)";
            },
            fooNamedArgument$1: function (x) {
                return "FooNamedArgument(int x)";
            },
            fooNamedArgument: function (d) {
                return "FooNamedArgument(double d)";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestReferenceTypes", {
        statics: {
            testInstanceConstructorsAndMethods: function () {
                // Check parameterless constructor
                var a = new Bridge.ClientTest.BasicCSharp.ClassA.ctor();

                // TEST
                Bridge.Test.Assert.areEqual$1(10, a.getNumberA(), "NumberA 10");
                Bridge.Test.Assert.areEqual$1("Str", a.getStringA(), "StringA Str");
                Bridge.Test.Assert.areEqual$1(true, a.getBoolA(), "BoolA true");
                Bridge.Test.Assert.true$1(a.getDoubleA() === Number.POSITIVE_INFINITY, "DoubleA Double.PositiveInfinity");
                Bridge.Test.Assert.areDeepEqual$1(System.Decimal(-1.0), a.getDecimalA(), "DecimalA Decimal.MinusOne");
                Bridge.Test.Assert.true$1(a.getData() != null, "Data not null");
                Bridge.Test.Assert.areEqual$1(700, a.getData().getNumber(), "Data.Number 700");

                // TEST
                // Check constructor with parameter
                Bridge.Test.Assert.throws$7(System.Exception, Bridge.ClientTest.BasicCSharp.TestSet1FailureHelper.testConstructor1Failure, "Related should not be null");

                // TEST
                // Check constructor with parameter
                Bridge.Test.Assert.throws$7(System.Exception, Bridge.ClientTest.BasicCSharp.TestSet1FailureHelper.testConstructor2Failure, "Should pass six parameters");

                a = new Bridge.ClientTest.BasicCSharp.ClassA.$ctor2([150, "151", true, 1.53, System.Decimal(1.54), Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.Aux1(), {
                    setNumber: 155
                } )]);

                Bridge.Test.Assert.areEqual$1(150, a.getNumberA(), "NumberA 150");
                Bridge.Test.Assert.areEqual$1("151", a.getStringA(), "StringA 151");
                Bridge.Test.Assert.areEqual$1(true, a.getBoolA(), "BoolA true");
                Bridge.Test.Assert.areEqual$1(1.53, a.getDoubleA(), "DoubleA Double.PositiveInfinity");
                Bridge.Test.Assert.areDeepEqual$1(System.Decimal(1.54), a.getDecimalA(), "DecimalA 154");
                Bridge.Test.Assert.true$1(a.getData() != null, "Data not null");
                Bridge.Test.Assert.areEqual$1(155, a.getData().getNumber(), "Data.Number 155");

                // TEST
                // Check instance methods
                var b = a.method1();

                Bridge.Test.Assert.true$1(b != null, "b not null");
                Bridge.Test.Assert.areEqual$1(2, b.getNumber(), "b Number 2");
                Bridge.Test.Assert.true$1(b.getRelated() != null, "b.Related not null");
                Bridge.Test.Assert.areEqual$1(1, b.getRelated().getNumber(), "b.Related Number 1");

                a.setData(b);
                Bridge.Test.Assert.areEqual$1("2 Has related 1", a.method3(), "Method3 2 Has related 1");
                a.setData(null);
                Bridge.Test.Assert.areEqual$1("no data", a.method3(), "Method3 no data");

                // TEST
                // Check [#68]
                var c68 = new Bridge.ClientTest.BasicCSharp.Class68();

                Bridge.Test.Assert.areEqual$1(0, c68.x, "c68.x 0");
                Bridge.Test.Assert.areEqual$1(1, c68.y, "c68.y 1");

                // TEST
                // Check local vars do not get overridden by fields
                c68.test();

                Bridge.Test.Assert.areEqual$1(0, c68.x, "c68.x 0");
                Bridge.Test.Assert.areEqual$1(1, c68.y, "c68.y 1");
            },
            testStaticConstructorsAndMethods: function () {
                // TEST
                // Check static fields initialization
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BasicCSharp.ClassA.statitIntNotInitialized, "#74 StatitInt not initialized");
                Bridge.Test.Assert.areEqual$1(null, Bridge.ClientTest.BasicCSharp.ClassA.statitStringNotInitialized, "#74 StatitString not initialized");
                Bridge.Test.Assert.areEqual$1(81, Bridge.ClientTest.BasicCSharp.ClassA.CONST_CHAR, "#74 CONST_CHAR Q");
                Bridge.Test.Assert.areEqual$1(true, true, "#74 CONST_DECIMAL 3.123456789324324324m");

                // TEST
                // Check static constructor
                Bridge.Test.Assert.areEqual$1(-340, Bridge.ClientTest.BasicCSharp.ClassA.staticInt, "StatitInt initialized");
                Bridge.Test.Assert.areEqual$1("Defined string", Bridge.ClientTest.BasicCSharp.ClassA.staticString, "StatitString initialized");

                // TEST
                // Check static methods
                var a = Bridge.ClientTest.BasicCSharp.ClassA.staticMethod1(678, "ASD", Number.NaN);

                Bridge.Test.Assert.areEqual$1(678, Bridge.ClientTest.BasicCSharp.ClassA.statitIntNotInitialized, "StatitIntNotInitialized 678");
                Bridge.Test.Assert.areEqual$1("ASD", Bridge.ClientTest.BasicCSharp.ClassA.statitStringNotInitialized, "ClassA.StatitStringNotInitialized ASD");
                Bridge.Test.Assert.areDeepEqual$1(Number.NaN, a.getDoubleA(), "DoubleA double.NaN");

                a = Bridge.ClientTest.BasicCSharp.ClassA.staticMethod2([678, "QWE", 234]);
                Bridge.Test.Assert.areEqual$1(1678, Bridge.ClientTest.BasicCSharp.ClassA.statitIntNotInitialized, "StatitIntNotInitialized 1678");
                Bridge.Test.Assert.areEqual$1("QWE", Bridge.ClientTest.BasicCSharp.ClassA.statitStringNotInitialized, "ClassA.StatitStringNotInitialized QWE");
                Bridge.Test.Assert.areEqual$1(234, a.getDoubleA(), "DoubleA 234");

                Bridge.Test.Assert.throws$7(System.InvalidCastException, Bridge.ClientTest.BasicCSharp.TestSet1FailureHelper.staticMethod2Failure, "Cast exception should occur");
            },
            testMethodParameters: function () {
                // Check default parameters
                var ra = new Bridge.ClientTest.BasicCSharp.ClassA.ctor();
                var r = ra.method5(5);

                Bridge.Test.Assert.areEqual$1(5, r, "r 5");
                r = ra.method5(15);
                Bridge.Test.Assert.areEqual$1(15, r, "r 15");
                r = ra.method5$1(5, 6);
                Bridge.Test.Assert.areEqual$1(11, r, "r 11");
                r = ra.method5$1(-50, 6);
                Bridge.Test.Assert.areEqual$1(-44, r, "r -44");

                // Check referencing did not change data
                var a = new Bridge.ClientTest.BasicCSharp.ClassA.ctor();
                var b = a.method1();
                var c = b.getRelated();

                a.method2(b);
                Bridge.Test.Assert.true$1(b != null, "b not null");
                Bridge.Test.Assert.areEqual$1(2, b.getNumber(), "b Number 2");
                Bridge.Test.Assert.true$1(b.getRelated() != null, "b.Related not null");
                Bridge.Test.Assert.areEqual$1(2, b.getRelated().getNumber(), "b.Related Number 2");

                Bridge.Test.Assert.true$1(c != null, "c not null");
                Bridge.Test.Assert.areEqual$1(1, c.getNumber(), "c Number 1");
                Bridge.Test.Assert.true$1(c.getRelated() == null, "c.Related null");

                // Check value local parameter
                var input = 1;
                var result = a.method4(input, 4);

                Bridge.Test.Assert.areEqual$1(1, input, "input 1");
                Bridge.Test.Assert.areEqual$1(5, result, "result 5");

                // TEST
                // [#86]
                var di = Bridge.ClientTest.BasicCSharp.ClassA.getDefaultInt();
                Bridge.Test.Assert.areEqual$1(0, di, "di 0");

                // TEST
                // Check  "out parameter"
                // [#85]
                var i = { };
                var tryResult = Bridge.ClientTest.BasicCSharp.ClassA.tryParse("", i);

                Bridge.Test.Assert.true$1(tryResult, "tryResult");
                Bridge.Test.Assert.areEqual$1(3, i.v, "i 3");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestSet1FailureHelper", {
        statics: {
            testConstructor1Failure: function () {
                new Bridge.ClientTest.BasicCSharp.ClassA.$ctor1(null);
            },
            testConstructor2Failure: function () {
                var t = new Bridge.ClientTest.BasicCSharp.ClassA.$ctor2(System.Array.init(2, null));
            },
            staticMethod2Failure: function () {
                Bridge.ClientTest.BasicCSharp.ClassA.staticMethod2(["1", "some string", "345.345435"]);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks", {
        statics: {
            config: {
                properties: {
                    IsATry: false,
                    IsACatch: false,
                    IsBTry: false,
                    IsBCatch: false,
                    IsCTry: false,
                    IsCCatch: false,
                    IsDTry: false,
                    IsDCatch: false
                }
            },
            simpleTryCatch: function () {
                var result = Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatch("Good");

                Bridge.Test.Assert.areEqual$1("Good", result, "TryCatch() executes");
            },
            caughtExceptions: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithCaughtException();
                Bridge.Test.Assert.true$1(true, "Exception catch");

                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithCaughtTypedException();
                Bridge.Test.Assert.true$1(true, "Typed exception catch");

                var exceptionMessage = Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithCaughtArgumentException();
                Bridge.Test.Assert.areEqual$1("catch me", exceptionMessage, "Typed exception catch with exception message");
            },
            thrownExceptions: function () {
                // #230
                Bridge.Test.Assert.throws$7(System.Exception, Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithNotCaughtTypedException, "A.Typed exception is not Caught");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsATry(), "A. exception not caught - try section called");
                Bridge.Test.Assert.true$1(!Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsACatch(), "A. exception not caught - catch section not called");

                // #229
                Bridge.Test.Assert.throws$7(System.Exception, Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithNotCaughtTypedExceptionAndArgument, "[#229] B. Typed exception is not Caught; and argument");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsBTry(), "[#229] B. exception not caught - try section called");
                Bridge.Test.Assert.true$1(!Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsBCatch(), "B. exception not caught - catch section not called");

                // #231
                Bridge.Test.Assert.throws$7(System.InvalidOperationException, Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithRethrow, "[#231] C. Rethrow");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsCTry(), "C. exception caught and re-thrown - try section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsCCatch(), "C. exception caught and re-thrown - catch section called");

                Bridge.Test.Assert.throws$2(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithRethrowEx, $_.Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.f1, "D. Rethrow with parameter");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsDTry(), "D. exception caught and re-thrown  - try section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsDCatch(), "D. exception caught and re-thrown  - catch section called");
            },
            bridge320: function () {
                var exceptionMessage = "";

                try {
                    "someString".SomeNotExistingMethod();
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    exceptionMessage = ex.getMessage();
                }

                // var expectedMessage = Utilities.BrowserHelper.IsPhantomJs()
                //    ? "undefined is not a constructor (evaluating '\"someString\".SomeNotExistingMethod()')"
                //    : "\"someString\".SomeNotExistingMethod is not a function";

                Bridge.Test.Assert.true$1(System.String.contains(exceptionMessage,"SomeNotExistingMethod"), "ex.Message works on built-in JavaScript type");
            },
            bridge343: function () {
                var exceptionMessage = "";

                var i = 0;

                try {
                    var r = (Bridge.Int.div(10, i)) | 0;
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.ArgumentException)) {
                    } else {
                        ex = $e1;
                        exceptionMessage = ex.getMessage();
                    }
                }

                Bridge.Test.Assert.true$1(!System.String.isNullOrEmpty(exceptionMessage), "Double catch block with general Exception works");
            },
            tryCatch: function (s) {
                try {
                    return s;
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    return "";
                }
            },
            tryCatchWithCaughtException: function () {
                try {
                    throw new System.Exception();
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            tryCatchWithCaughtTypedException: function () {
                try {
                    throw new System.Exception();
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            tryCatchWithCaughtArgumentException: function () {
                try {
                    throw new System.ArgumentException("catch me");
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.ArgumentException)) {
                        ex = $e1;
                        return ex.getMessage();
                    } else {
                        throw $e1;
                    }
                }
            },
            tryCatchWithNotCaughtTypedException: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsATry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsACatch(false);

                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsATry(true);
                    throw new System.Exception("catch me");
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.ArgumentException)) {
                        Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsATry(true);
                    } else {
                        throw $e1;
                    }
                }

                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsATry(false);
            },
            tryCatchWithNotCaughtTypedExceptionAndArgument: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBCatch(false);

                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBTry(true);
                    throw new System.Exception("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBTry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        ex = $e1;
                        Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBCatch(true);
                        var s = ex.getMessage();
                    } else {
                        throw $e1;
                    }
                }

                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBTry(false);
            },
            tryCatchWithRethrow: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCCatch(false);

                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCTry(true);
                    throw new System.InvalidOperationException("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCTry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCCatch(true);
                    throw $e1;
                }

                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCTry(false);
            },
            tryCatchWithRethrowEx: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDCatch(false);

                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDTry(true);
                    throw new System.ArgumentException("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDTry(false);
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDCatch(true);
                    throw ex;
                }

                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDTry(false);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks", $_);

    Bridge.apply($_.Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks, {
        f1: function (error) {
            return Bridge.referenceEquals(error.toString(), "catch me");
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks", {
        statics: {
            config: {
                properties: {
                    IsATry: false,
                    IsACatch: false,
                    IsAFinally: false,
                    IsBTry: false,
                    IsBCatch: false,
                    IsBFinally: false,
                    IsCTry: false,
                    IsCCatch: false,
                    IsCFinally: false,
                    IsDTry: false,
                    IsDCatch: false,
                    IsDFinally: false
                }
            },
            simpleTryCatchFinally: function () {
                var data = new Bridge.ClientTest.BasicCSharp.Data();
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinally(data);

                Bridge.Test.Assert.areEqual$1(2, data.getCount(), "TryCatchFinally() executes");
            },
            caughtExceptions: function () {
                var data = new Bridge.ClientTest.BasicCSharp.Data();
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinallyWithCaughtException(data);

                Bridge.Test.Assert.areEqual$1(7, data.getCount(), "Exception catch, Finally works");

                data = new Bridge.ClientTest.BasicCSharp.Data();
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinallyWithCaughtTypedException(data);

                Bridge.Test.Assert.areEqual$1(7, data.getCount(), "Typed exception catch, Finally works");

                data = new Bridge.ClientTest.BasicCSharp.Data();
                var exceptionMessage = Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinallyWithCaughtArgumentException(data);

                Bridge.Test.Assert.areEqual$1("catch me", exceptionMessage, "Typed exception catch with exception message");
                Bridge.Test.Assert.areEqual$1(7, data.getCount(), "Typed exception catch with exception message, Finally works");
            },
            thrownExceptions: function () {
                //#230
                Bridge.Test.Assert.throws$7(System.Exception, Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinallyWithNotCaughtTypedException, "A. Typed exception is not caught");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsATry(), "A. exception not caught - try section called");
                Bridge.Test.Assert.true$1(!Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsACatch(), "A. exception not caught - catch section not called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsAFinally(), "A. exception not caught - finally section called");

                //#229
                Bridge.Test.Assert.throws$7(System.Exception, Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchWithNotCaughtTypedExceptionAndArgument, "[#229] B. Typed exception is not caught; and argument");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsBTry(), "B. exception not caught - try section called");
                Bridge.Test.Assert.true$1(!Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsBCatch(), "B. exception not caught - catch section not called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsBFinally(), "B. exception not caught - finally section called");

                //#231
                Bridge.Test.Assert.throws$7(System.InvalidOperationException, Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchWithRethrow, "[#231] C. Rethrow");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsCTry(), "C. exception caught and re-thrown  - try section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsCCatch(), "C. exception caught and re-thrown  - catch section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsCFinally(), "C. exception caught and re-thrown  - finally section called");

                Bridge.Test.Assert.throws$2(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchWithRethrowEx, $_.Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.f1, "D. Rethrow with parameter");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsDTry(), "D. exception caught and re-thrown  - try section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsDCatch(), "D. exception caught and re-thrown  - catch section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsDFinally(), "D. exception caught and re-thrown  - finally section called");
            },
            tryCatchFinally: function (data) {
                try {
                    data.setCount((data.getCount() + 1) | 0);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
                finally {
                    data.setCount((data.getCount() + 1) | 0);
                }
            },
            tryCatchFinallyWithCaughtException: function (data) {
                try {
                    data.setCount((data.getCount() + 1) | 0);
                    throw new System.Exception();
                    data.setCount((data.getCount() - 1) | 0);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    data.setCount((data.getCount() + 2) | 0);
                }
                finally {
                    data.setCount((data.getCount() + 4) | 0);
                }
            },
            tryCatchFinallyWithCaughtTypedException: function (data) {
                try {
                    data.setCount((data.getCount() + 1) | 0);
                    throw new System.Exception("catch me");
                    data.setCount((data.getCount() - 1) | 0);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    data.setCount((data.getCount() + 2) | 0);
                }
                finally {
                    data.setCount((data.getCount() + 4) | 0);
                }
            },
            tryCatchFinallyWithCaughtArgumentException: function (data) {
                try {
                    data.setCount((data.getCount() + 1) | 0);
                    throw new System.ArgumentException("catch me");
                    data.setCount((data.getCount() - 1) | 0);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.ArgumentException)) {
                        ex = $e1;
                        data.setCount((data.getCount() + 2) | 0);

                        return ex.getMessage();
                    } else {
                        throw $e1;
                    }
                }
                finally {
                    data.setCount((data.getCount() + 4) | 0);
                }
            },
            tryCatchFinallyWithNotCaughtTypedException: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsATry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsACatch(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsAFinally(false);

                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsATry(true);
                    throw new System.Exception("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsATry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.ArgumentException)) {
                        Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsACatch(true);
                    } else {
                        throw $e1;
                    }
                }
                finally {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsAFinally(true);
                }
            },
            tryCatchWithNotCaughtTypedExceptionAndArgument: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBCatch(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBFinally(false);

                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBTry(true);
                    throw new System.Exception("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBTry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        ex = $e1;
                        var s = ex.getMessage();
                        Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBCatch(true);
                    } else {
                        throw $e1;
                    }
                }
                finally {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBFinally(true);
                }
            },
            tryCatchWithRethrow: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCCatch(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCFinally(false);

                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCTry(true);
                    throw new System.InvalidOperationException("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCTry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCCatch(true);
                    throw $e1;
                }
                finally {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCFinally(true);
                }
            },
            tryCatchWithRethrowEx: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDCatch(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDFinally(false);

                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDTry(true);
                    throw new System.ArgumentException("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDTry(false);
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDCatch(true);
                    throw ex;
                }
                finally {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDFinally(true);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks", $_);

    Bridge.apply($_.Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks, {
        f1: function (error) {
            return Bridge.referenceEquals(error.toString(), "catch me");
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestValueTypes", {
        statics: {
            testInstanceConstructorsAndMethods: function () {
                // Check parameterless constructor
                var a = new Bridge.ClientTest.BasicCSharp.Point();

                Bridge.Test.Assert.areEqual$1(0, a.x, "x 0");
                Bridge.Test.Assert.areEqual$1(0, a.y, "y 0");

                var r = new Bridge.ClientTest.BasicCSharp.Rectangle.ctor();

                Bridge.Test.Assert.areEqual$1(0, r.l.x, "r.l.x 0");
                Bridge.Test.Assert.areEqual$1(0, r.l.y, "r.l.y 0");
                Bridge.Test.Assert.areEqual$1(0, r.t.x, "r.t.x 0");
                Bridge.Test.Assert.areEqual$1(0, r.t.y, "r.t.y 0");

                r = new Bridge.ClientTest.BasicCSharp.Rectangle.$ctor1(10, 20);

                Bridge.Test.Assert.areEqual$1(10, r.l.x, "r.l.x 10");
                Bridge.Test.Assert.areEqual$1(20, r.l.y, "r.l.y 20");
                Bridge.Test.Assert.areEqual$1(0, r.t.x, "r.t.x 0");
                Bridge.Test.Assert.areEqual$1(0, r.t.y, "r.t.y 0");

                r = new Bridge.ClientTest.BasicCSharp.Rectangle.$ctor2(30, 40, 50, 60);

                Bridge.Test.Assert.areEqual$1(30, r.l.x, "r.l.x 30");
                Bridge.Test.Assert.areEqual$1(40, r.l.y, "r.l.y 40");
                Bridge.Test.Assert.areEqual$1(50, r.t.x, "r.t.x 50");
                Bridge.Test.Assert.areEqual$1(60, r.t.y, "r.t.y 60");

                var i = a.test1();

                Bridge.Test.Assert.areEqual$1(500, i, "i 500");
                a.x = 300;
                i = a.test1();
                Bridge.Test.Assert.areEqual$1(800, i, "i 800");

                a.y = 400;

                var b = Bridge.merge(new Bridge.ClientTest.BasicCSharp.Point(), {
                    x: 5,
                    y: 7
                } );
                var c = b.test2(a.$clone()).$clone();

                Bridge.Test.Assert.areEqual$1(305, c.x, "c.x 305");
                Bridge.Test.Assert.areEqual$1(407, c.y, "c.y 407");
            },
            testStaticConstructorsAndMethods: function () {
                Bridge.Test.Assert.areEqual$1(500, Bridge.ClientTest.BasicCSharp.Point.staticInt, "Point.StaticInt 500");
                Bridge.Test.Assert.areEqual$1("Initialized", Bridge.ClientTest.BasicCSharp.Point.staticString, "Point.StaticString Initialized");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BasicCSharp.Point.statitIntNotInitialized, "Point.StatitIntNotInitialized 0");
                Bridge.Test.Assert.areEqual$1(null, Bridge.ClientTest.BasicCSharp.Point.statitStringNotInitialized, "Point.StatitStringNotInitialized null");
                Bridge.Test.Assert.areEqual$1(87, Bridge.ClientTest.BasicCSharp.Point.CONST_CHAR, "Point.CONST_CHAR W");

                Bridge.ClientTest.BasicCSharp.Point.statitIntNotInitialized = -1;
                Bridge.Test.Assert.areEqual$1(-1, Bridge.ClientTest.BasicCSharp.Point.statitIntNotInitialized, "Point.StatitIntNotInitialized -1");

                var i = Bridge.ClientTest.BasicCSharp.Point.test3();
                Bridge.Test.Assert.areEqual$1(499, i, "i 499");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestVirtualMethods", {
        statics: {
            testB: function () {
                var a = new Bridge.ClientTest.BasicCSharp.TestVirtualMethods.A();

                Bridge.Test.Assert.true$1(a != null, "Instance of A created");
                Bridge.Test.Assert.areEqual$1("A", a.test(), "a.Test() = 'A'");

                var b = new Bridge.ClientTest.BasicCSharp.TestVirtualMethods.B();

                Bridge.Test.Assert.true$1(b != null, "Instance of B created");
                Bridge.Test.Assert.areEqual$1("B", b.test(), "b.Test() = 'B'");
                Bridge.Test.Assert.areEqual$1("A", b.testA(), "b.TestA() = 'A'");

                var c = new Bridge.ClientTest.BasicCSharp.TestVirtualMethods.B();

                Bridge.Test.Assert.true$1(c != null, "Instance of C created");
                Bridge.Test.Assert.areEqual$1("B", c.test(), "c.Test() = 'B'");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestVirtualMethods.A", {
        test: function () {
            return "A";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch1.Reflection.AssemblyTests", {
        getImportedModuleTestCase: function () {
            
	var x = {
		Foo: {
			Bar: {
				Inner: {
					OtherFunction: function() { }
				},
				Something: function() { }
			},
			baz: function() {
			},
			Bar2: 0
		}
	};
	x.Foo.baz.Test = function() {};
	return x;
        },
        getCompilerVersion: function () {
            //return AssemblyVersionMarker.GetVersion(AssemblyVersionMarker.VersionType.Compiler);
            return "";
        },
        getMscorlibName: function () {
            return "mscorlib";
        },
        getMscorlibWithVersion: function () {
            //return MscorlibName + ", Version=" + CompilerVersion;
            return this.getMscorlibName();
        },
        getAssemblyName: function () {
            return "Bridge.ClientTest";
        },
        getAssemblyWithVersion: function () {
            //return AssemblyName + ", Version=" + AssemblyVersionMarker.GetVersion(AssemblyVersionMarker.VersionType.CurrentAssembly);
            return this.getAssemblyName();
        },
        getExecutingAssemblyWorks: function () {
            Bridge.Test.Assert.areEqual($asm.name, this.getAssemblyWithVersion());
        },
        getAssemblyForTypeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(System.Int32).name, this.getMscorlibWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).name, this.getAssemblyWithVersion());
        },
        fullNameWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(System.Int32).name, this.getMscorlibWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).name, this.getAssemblyWithVersion());
        },
        toStringWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(System.Int32).toString(), this.getMscorlibWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).toString(), this.getAssemblyWithVersion());
        },
        getTypesWorks: function () {
            var $t;
            var types = new (System.Collections.Generic.List$1(String))();
            $t = Bridge.getEnumerator(Bridge.Reflection.getAssemblyTypes($asm));
            while ($t.moveNext()) {
                var t = $t.getCurrent();
                types.add(Bridge.Reflection.getTypeFullName(t));
            }
            Bridge.Test.Assert.true(types.contains(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch1.Reflection.AssemblyTests)));
            Bridge.Test.Assert.true(types.contains(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Reflection.ReflectionTests.C1)));
        },
        getTypesWithImportedModuleWorks: function () {
            var asm = this.getImportedModuleTestCase();
            var types = Bridge.Reflection.getAssemblyTypes(asm);
            Bridge.Test.Assert.areEqual$1(types.length, 3, "Length");
            Bridge.Test.Assert.true$1(System.Array.contains(types, Bridge.cast(asm.Foo.Bar.Inner.OtherFunction, Function), Function), "#1");
            Bridge.Test.Assert.true$1(System.Array.contains(types, Bridge.cast(asm.Foo.Bar.Something, Function), Function), "#2");
            Bridge.Test.Assert.true$1(System.Array.contains(types, Bridge.cast(asm.Foo.baz.Test, Function), Function), "#3");
        },
        getTypeWorks: function () {
            Bridge.Test.Assert.true(Bridge.referenceEquals(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch1.Reflection.AssemblyTests), $asm), Bridge.ClientTest.Batch1.Reflection.AssemblyTests));
            Bridge.Test.Assert.true(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(System.Collections.Generic.Dictionary$2), $asm) == null);
            Bridge.Test.Assert.true(Bridge.referenceEquals(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(System.Collections.Generic.Dictionary$2), Bridge.Reflection.getTypeAssembly(System.Int32)), System.Collections.Generic.Dictionary$2));
        },
        getTypeWorksWithGenerics: function () {
            Bridge.Test.Assert.true(Bridge.referenceEquals(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch1.Reflection.AssemblyTests.G$2), $asm), Bridge.ClientTest.Batch1.Reflection.AssemblyTests.G$2));
            Bridge.Test.Assert.true(Bridge.referenceEquals(Bridge.Reflection.getType(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch1.Reflection.AssemblyTests.G$2(System.Int32,String)), $asm), Bridge.ClientTest.Batch1.Reflection.AssemblyTests.G$2(System.Int32,String)));
        },
        getTypeWithImportedModuleWorks: function () {
            var asm = this.getImportedModuleTestCase();
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.getType("Foo.Bar.Inner.OtherFunction", asm), Bridge.cast(asm.Foo.Bar.Inner.OtherFunction, Function)), "#1");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.getType("Foo.Bar.Something", asm), Bridge.cast(asm.Foo.Bar.Something, Function)), "#2");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.getType("Foo.baz.Test", asm), Bridge.cast(asm.Foo.baz.Test, Function)), "#3");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getType("Foo.Bar", asm) == null, "#4");
        },
        assemblyOfBuiltInTypes: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Date).name, this.getMscorlibWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(System.Double).name, this.getMscorlibWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Boolean).name, this.getMscorlibWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(String).name, this.getMscorlibWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Function).name, this.getMscorlibWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Array).name, this.getMscorlibWithVersion());
        },
        createInstanceWorks: function () {
            Bridge.Test.Assert.true$1(Bridge.is(Bridge.Reflection.createAssemblyInstance(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch1.Reflection.AssemblyTests.C), Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch1.Reflection.AssemblyTests.C)), Bridge.ClientTest.Batch1.Reflection.AssemblyTests.C), "#1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.createAssemblyInstance(Bridge.Reflection.getTypeAssembly(System.Int32), Bridge.Reflection.getTypeFullName(System.Int32)), 0, "#2");
            Bridge.Test.Assert.true$1(Bridge.Reflection.createAssemblyInstance(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch1.Reflection.AssemblyTests.C), "NonExistentType") == null, "#3");
        },
        getCustomAttributesWorks: function () {
            var $t, $t1;
            var asm = $asm;
            $t = Bridge.getEnumerator([asm.getCustomAttributes(), asm.getCustomAttributes(true), asm.getCustomAttributes(false)]);
            while ($t.moveNext()) {
                var a = $t.getCurrent();
                Bridge.Test.Assert.false(a.some($_.Bridge.ClientTest.Batch1.Reflection.AssemblyTests.f1));
                var a2 = a.filter($_.Bridge.ClientTest.Batch1.Reflection.AssemblyTests.f2);
                Bridge.Test.Assert.areEqual(a2.length, 1);
                Bridge.Test.Assert.true(Bridge.cast(a2[0], Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute).getX() === 64);
                Bridge.Test.Assert.true(Bridge.cast(a2[0], Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute).getP() === 23);

                var a3 = a.filter($_.Bridge.ClientTest.Batch1.Reflection.AssemblyTests.f3);
                Bridge.Test.Assert.areEqual(a3.length, 1);
                Bridge.Test.Assert.true(Bridge.cast(a3[0], Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A3Attribute).getX() === 15);
                Bridge.Test.Assert.true(Bridge.cast(a3[0], Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A3Attribute).getP() === 45);
            }

            $t1 = Bridge.getEnumerator([asm.getCustomAttributes(Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute), asm.getCustomAttributes(Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute, true), asm.getCustomAttributes(Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute, false)]);
            while ($t1.moveNext()) {
                var a1 = $t1.getCurrent();
                Bridge.Test.Assert.areEqual(a1.length, 1);
                Bridge.Test.Assert.true(Bridge.cast(a1[0], Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute).getX() === 64);
                Bridge.Test.Assert.true(Bridge.cast(a1[0], Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute).getP() === 23);
            }
        },
        loadCanReturnReferenceToLoadedAssembly: function () {
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.load(this.getAssemblyName()), $asm), this.getAssemblyName());
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.load(this.getMscorlibName()), Bridge.Reflection.getTypeAssembly(System.Int32)), this.getMscorlibName());

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.load(this.getAssemblyWithVersion()), $asm), this.getAssemblyWithVersion());
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.Reflection.load(this.getMscorlibWithVersion()), Bridge.Reflection.getTypeAssembly(System.Int32)), this.getMscorlibWithVersion());
        },
        getManifestResourceNamesWorks: function () {
            var names = $asm.getManifestResourceNames();
            names.sort($_.Bridge.ClientTest.Batch1.Reflection.AssemblyTests.f4);
            Bridge.Test.Assert.areEqual(names, ["Bridge.ClientTest.Batch1.Reflection.Resource1.bin", "Bridge.ClientTest.Batch1.Reflection.Resource2.bin"]);
        },
        getManifestResourceDataAsBase64WithoutTypeWorks: function () {
            Bridge.Test.Assert.areEqual$1($asm.getManifestResourceDataAsBase64("Bridge.ClientTest.Batch1.Reflection.Resource1.bin"), "AAECAwQFBgc=", "#1");
            Bridge.Test.Assert.areEqual$1($asm.getManifestResourceDataAsBase64("Bridge.ClientTest.Batch1.Reflection.Resource2.bin"), "EBESExQV", "#2");
            Bridge.Test.Assert.null$1($asm.getManifestResourceDataAsBase64("NonExistent"), "#3");
        },
        getManifestResourceDataAsBase64WithTypeWorks: function () {
            Bridge.Test.Assert.areEqual$1($asm.getManifestResourceDataAsBase64(Bridge.ClientTest.Batch1.Reflection.AssemblyTests, "Resource1.bin"), "AAECAwQFBgc=", "#1");
            Bridge.Test.Assert.areEqual$1($asm.getManifestResourceDataAsBase64(Bridge.ClientTest.Batch1.Reflection.AssemblyTests, "Resource2.bin"), "EBESExQV", "#2");
            Bridge.Test.Assert.null$1($asm.getManifestResourceDataAsBase64(Bridge.ClientTest.Batch1.Reflection.AssemblyTests, "NonExistent"), "#3");
        },
        getManifestResourceDataWithoutTypeWorks: function () {
            Bridge.Test.Assert.areEqual$1($asm.getManifestResourceData("Bridge.ClientTest.Batch1.Reflection.Resource1.bin"), [0, 1, 2, 3, 4, 5, 6, 7], "#1");
            Bridge.Test.Assert.areEqual$1($asm.getManifestResourceData("Bridge.ClientTest.Batch1.Reflection.Resource2.bin"), [16, 17, 18, 19, 20, 21], "#2");
            Bridge.Test.Assert.null$1($asm.getManifestResourceData("NonExistent"), "#3");
        },
        getManifestResourceDataWithTypeWorks: function () {
            Bridge.Test.Assert.areEqual$1($asm.getManifestResourceData(Bridge.ClientTest.Batch1.Reflection.AssemblyTests, "Resource1.bin"), [0, 1, 2, 3, 4, 5, 6, 7], "#1");
            Bridge.Test.Assert.areEqual$1($asm.getManifestResourceData(Bridge.ClientTest.Batch1.Reflection.AssemblyTests, "Resource2.bin"), [16, 17, 18, 19, 20, 21], "#2");
            Bridge.Test.Assert.null$1($asm.getManifestResourceData(Bridge.ClientTest.Batch1.Reflection.AssemblyTests, "NonExistent"), "#3");
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch1.Reflection.AssemblyTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Batch1.Reflection.AssemblyTests, {
        f1: function (x) {
            return Bridge.referenceEquals(Bridge.Reflection.getTypeName(Bridge.getType(x)), "A1Attribute");
        },
        f2: function (x) {
            return Bridge.is(x, Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute);
        },
        f3: function (x) {
            return Bridge.is(x, Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A3Attribute);
        },
        f4: function (a, b) {
            return System.String.compare(a, b);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                X: 0,
                P: 0
            }
        },
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setX(x);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A3Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                X: 0,
                P: 0
            }
        },
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setX(x);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch1.Reflection.AssemblyTests.C");

    Bridge.define("Bridge.ClientTest.Batch1.Reflection.AssemblyTests.G$2", function (T1, T2) { return {

    }; });

    Bridge.define("Bridge.ClientTest.BridgeConsoleTests", {
        testLogMessageObject: function () {
            this.assertLogMessageObject("#0 - ", "Test Bridge Console Log Message Object", "Test Bridge Console Log Message Object");
            this.assertLogMessageObject("#1 - ", true, "true");
            this.assertLogMessageObject("#2 - ", false, "false");
            this.assertLogMessageObject("#3 - ", -1, "-1");
            this.assertLogMessageObject("#4 - ", 1, "1");
            this.assertLogMessageObject("#5 - ", -12345678, "-12345678");
            this.assertLogMessageObject("#6 - ", 12345678, "12345678");
            this.assertLogMessageObject("#7 - ", System.Int64(-1), "-1");
            this.assertLogMessageObject("#8 - ", System.Int64(1), "1");
            this.assertLogMessageObject("#9 - ", System.Int64(-12345678), "-12345678");
            this.assertLogMessageObject("#10 - ", System.Int64(12345678), "12345678");
            this.assertLogMessageObject("#11 - ", System.UInt64(1), "1");
            this.assertLogMessageObject("#12 - ", System.UInt64(12345678), "12345678");
            this.assertLogMessageObject("#13 - ", -1.0, "-1");
            this.assertLogMessageObject("#14 - ", 1.0, "1");
            this.assertLogMessageObject("#15 - ", -12345678.0, "-12345678");
            this.assertLogMessageObject("#16 - ", 12345678.0, "12345678");
            this.assertLogMessageObject("#17 - ", -1.12345678, "-1.12345678");
            this.assertLogMessageObject("#18 - ", 1.12345678, "1.12345678");
            this.assertLogMessageObject("#19 - ", -12345678.12345678, "-12345678.12345678");
            this.assertLogMessageObject("#20 - ", 12345678.12345678, "12345678.12345678");
            this.assertLogMessageObject("#21 - ", System.Decimal(-1.0), "-1");
            this.assertLogMessageObject("#22 - ", System.Decimal(1.0), "1");
            this.assertLogMessageObject("#23 - ", System.Decimal(-12345678.0), "-12345678");
            this.assertLogMessageObject("#24 - ", System.Decimal(12345678.0), "12345678");
            this.assertLogMessageObject("#25 - ", System.Decimal(-1.12345678), "-1.12345678");
            this.assertLogMessageObject("#26 - ", System.Decimal(1.12345678), "1.12345678");
            this.assertLogMessageObject("#27 - ", System.Decimal("-12345678.12345678"), "-12345678.12345678");
            this.assertLogMessageObject("#28 - ", System.Decimal("12345678.12345678"), "12345678.12345678");
            this.assertLogMessageObject("#29 - ", null, "null");
            this.assertLogMessageObject("#30 - ", {  }, "[object Object]");
            this.assertLogMessageObject("#31 - ", new Bridge.ClientTest.BridgeConsoleTests.ClassA(), "I'm ClassA");
            this.assertLogMessageObject("#32 - ", new Bridge.ClientTest.BridgeConsoleTests.ClassB(), "[object Object]");
        },
        testLogMessageString: function () {
            this.assertLogMessageObject("#1 - ", "Test Bridge Console Log Message String", "Test Bridge Console Log Message String");
            this.assertLogMessageObject("#2 - ", null, "null");
        },
        testDebugMessageString: function () {
            this.assertDebugMessageString("#1 - ", "Test Bridge Console Debug Message String", "Test Bridge Console Debug Message String");
            this.assertDebugMessageString("#2 - ", null, "null");
        },
        testErrorMessageString: function () {
            this.assertErrorMessageString("#1 - ", "Test Bridge Console Error Message String", "Test Bridge Console Error Message String");
            this.assertErrorMessageString("#2 - ", null, "null");
        },
        testToggling: function () {
            Bridge.Console.hide();
            Bridge.Console.log("Hide/Log");
            this.assertMessage("#1 - ", "Hide/Log");

            Bridge.Console.getInstance().close();
            Bridge.Console.getInstance().close();
            Bridge.Console.hide();
            Bridge.Console.log("Close/Close/Hide/Log");
            this.assertMessage("#2 - ", "Close/Close/Hide/Log");

            Bridge.Console.getInstance().close();
            Bridge.Console.hide();
            Bridge.Console.hide();
            Bridge.Console.log("Close/Hide/Hide/Log");
            this.assertMessage("#3 - ", "Close/Hide/Hide/Log");

            Bridge.Console.getInstance().close();
            Bridge.Console.hide();
            Bridge.Console.show();
            Bridge.Console.show();
            Bridge.Console.log("Close/Hide/Show/Show/Log");
            this.assertMessage("#4 - ", "Close/Hide/Show/Show/Log");

            Bridge.Console.hide();
            Bridge.Console.show();
            this.assertMessage("#5 Messages preserved after - ", "Close/Hide/Show/Show/Log");
            Bridge.Console.hide();
            Bridge.Console.show();
            Bridge.Console.log("Hide/Show/Hide/Show/Log");
            this.assertMessage("#6 - ", "Hide/Show/Hide/Show/Log");
        },
        assertLogMessageObject: function (description, message, expected) {
            Bridge.Console.log(message);
            this.assertMessage(description, expected);
        },
        assertLogMessageString: function (description, message, expected) {
            Bridge.Console.log(message);
            this.assertMessage(description, expected);
        },
        assertDebugMessageString: function (description, message, expected) {
            Bridge.Console.debug(message);
            this.assertMessage(description, expected, "#1800FF");
        },
        assertErrorMessageString: function (description, message, expected) {
            Bridge.Console.error(message);
            this.assertMessage(description, expected, "#d65050");
        },
        assertMessage: function (description, expected, color) {
            if (color === void 0) { color = "#555"; }
            var el = Bridge.as(Bridge.Console.getInstance().currentMessageElement, HTMLLIElement);

            if (el == null) {
                Bridge.Test.Assert.fail$1(System.String.concat(description, "Could not get current message as HTMLLIElement"));
                return;
            }

            Bridge.Test.Assert.true$1(true, System.String.concat(description, "Message <li> element exists"));

            var span = System.Linq.Enumerable.from(el.getElementsByTagName("span")).firstOrDefault(null, null);

            if (span == null) {
                Bridge.Test.Assert.fail$1(System.String.concat(description, "Could not get message span element"));
                return;
            }

            Bridge.Test.Assert.true$1(true, System.String.concat(description, "Message <span> element exists"));
            Bridge.Test.Assert.areEqual$1(expected, span.innerHTML, System.String.concat(description, "Message is correct"));
            Bridge.Test.Assert.areEqual$1(this.normalizeHexStyleColor(color), this.convertStyleColor(span.style.color), System.String.concat(description, "Message <span> color (", span.style.color, ") should be ", color));
        },
        convertStyleColor: function (styleColor) {
            var r = new RegExp("^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$");

            var items = r.exec(styleColor);

            if (items != null && items.length >= 4) {
                styleColor = this.rgbToHex(items[1], items[2], items[3]);
            }

            return this.normalizeHexStyleColor(styleColor);
        },
        normalizeHexStyleColor: function (styleColor) {
            if (System.String.isNullOrEmpty(styleColor) || !System.String.startsWith(styleColor, "#")) {
                return styleColor;
            }

            var subColor = styleColor.substr(1);
            if (subColor.length < 1) {
                return styleColor;
            } else if (subColor.length === 3) {
                subColor = this.duplicate$1(subColor);
            }

            if (subColor.length < 6) {
                var toAdd = ("000000").substr(0, ((6 - subColor.length) | 0));
                subColor = System.String.concat(toAdd, subColor);
            }

            styleColor = (System.String.concat(String.fromCharCode(styleColor.charCodeAt(0)), subColor)).toUpperCase();

            return styleColor;
        },
        duplicate: function (c) {
            return System.String.concat(String.fromCharCode(c), String.fromCharCode(c));
        },
        duplicate$1: function (s) {
            if (s == null) {
                return null;
            }

            var r = "";
            for (var i = 0; i < s.length; i = (i + 1) | 0) {
                r = System.String.concat(r, (this.duplicate(s.charCodeAt(i))));
            }

            return r;
        },
        rgbToHex: function (r, g, b) {
            return System.String.concat("#", this.toHexNumber(r), this.toHexNumber(g), this.toHexNumber(b));
        },
        toHexNumber: function (n) {
            var i = { v : 0 };
            System.Int32.tryParse(n, i);

            var r = System.Int32.format(i.v, "X2");

            return r;
        }
    });

    Bridge.define("Bridge.ClientTest.BridgeConsoleTests.ClassA", {
        toString: function () {
            return "I'm ClassA";
        }
    });

    Bridge.define("Bridge.ClientTest.BridgeConsoleTests.ClassB");

    Bridge.define("Bridge.ClientTest.CheckedUncheckedTests", {
        statics: {
            assertEqual: function (expected, actual, message) {
                if (message === void 0) { message = null; }
                Bridge.Test.Assert.areEqual$1(expected.toString(), actual.toString(), message);
            },
            bypass: function (o) {
                return o;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests", {
        statics: {
            testInt32: function () {
                var max = 2147483647;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(max + 1, System.Int32);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(max2, (max2 = Bridge.Int.check(max2 + 1, System.Int32)));
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((max3 = Bridge.Int.check(max3 + 1, System.Int32)));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(2 * max, System.Int32);
                }, "Through identifier *");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(max + 1, System.Int32));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = Bridge.Int.check(max3 + 1, System.Int32))));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = Bridge.Int.check(max4 + 1, System.Int32))));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(2 * max, System.Int32));
                }, "Through parameter *");

                var min = -2147483648;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(min - 1, System.Int32);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(min1, (min1 = Bridge.Int.check(min1 - 1, System.Int32)));
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((min2 = Bridge.Int.check(min2 - 1, System.Int32)));
                }, "Through identifier pre--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(-min, System.Int32);
                }, "Through identifier unary -");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(min - 1, System.Int32));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = Bridge.Int.check(min3 - 1, System.Int32))));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = Bridge.Int.check(min4 - 1, System.Int32))));
                }, "Through parameter --pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(-min, System.Int32));
                }, "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(max + 1, System.UInt32);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(max1, (max1 = Bridge.Int.check(max1 + 1, System.UInt32)));
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((max2 = Bridge.Int.check(max2 + 1, System.UInt32)));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(2 * max, System.UInt32);
                }, "Through identifier *");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(max + 1, System.UInt32));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = Bridge.Int.check(max3 + 1, System.UInt32))));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = Bridge.Int.check(max4 + 1, System.UInt32))));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(2 * max, System.UInt32));
                }, "Through parameter *");

                var min = 0;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(min - 1, System.UInt32);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(min1, (min1 = Bridge.Int.check(min1 - 1, System.UInt32)));
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((min2 = Bridge.Int.check(min2 - 1, System.UInt32)));
                }, "Through identifier pre--");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(min - 1, System.UInt32));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = Bridge.Int.check(min3 - 1, System.UInt32))));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = Bridge.Int.check(min4 - 1, System.UInt32))));
                }, "Through parameter --pre");
            },
            testLong: function () {
                var max = System.Int64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = max.add(System.Int64(1), 1);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = max1, max1 = max1.inc(1), $t);
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (max2 = max2.inc(1));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = System.Int64(2).mul(max, 1);
                }, "Through identifier *");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1), 1));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(1), $t));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc(1)));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max, 1));
                }, "Through parameter *");

                var min = System.Int64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.sub(System.Int64(1), 1);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = min1, min1 = min1.dec(1), $t);
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (min2 = min2.dec(1));
                }, "Through identifier pre--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.neg(1);
                }, "Through identifier unary -");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1), 1));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(1), $t));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec(1)));
                }, "Through parameter --pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg(1));
                }, "Through parameter unary -");
            },
            testULong: function () {
                var max = System.UInt64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = max.add(System.UInt64(1), 1);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = max1, max1 = max1.inc(1), $t);
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (max2 = max2.inc(1));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = System.UInt64(2).mul(max, 1);
                }, "Through identifier *");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1), 1));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(1), $t));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc(1)));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max, 1));
                }, "Through parameter *");

                var min = System.UInt64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.sub(System.UInt64(1), 1);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = min1, min1 = min1.dec(1), $t);
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (min2 = min2.dec(1));
                }, "Through identifier pre--");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1), 1));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(1), $t));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec(1)));
                }, "Through parameter --pre");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CheckedUncheckedTests.CheckedTests", {
        statics: {
            testInt32: function () {
                var max = 2147483647;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(max + 1, System.Int32);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(max2, (max2 = Bridge.Int.check(max2 + 1, System.Int32)));
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((max3 = Bridge.Int.check(max3 + 1, System.Int32)));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(2 * max, System.Int32);
                }, "Through identifier *");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(max + 1, System.Int32));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = Bridge.Int.check(max3 + 1, System.Int32))));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = Bridge.Int.check(max4 + 1, System.Int32))));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(2 * max, System.Int32));
                }, "Through parameter *");

                var min = -2147483648;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(min - 1, System.Int32);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(min1, (min1 = Bridge.Int.check(min1 - 1, System.Int32)));
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((min2 = Bridge.Int.check(min2 - 1, System.Int32)));
                }, "Through identifier pre--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(-min, System.Int32);
                }, "Through identifier unary -");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(min - 1, System.Int32));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = Bridge.Int.check(min3 - 1, System.Int32))));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = Bridge.Int.check(min4 - 1, System.Int32))));
                }, "Through parameter --pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(-min, System.Int32));
                }, "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(max + 1, System.UInt32);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(max1, (max1 = Bridge.Int.check(max1 + 1, System.UInt32)));
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((max2 = Bridge.Int.check(max2 + 1, System.UInt32)));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(2 * max, System.UInt32);
                }, "Through identifier *");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(max + 1, System.UInt32));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = Bridge.Int.check(max3 + 1, System.UInt32))));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = Bridge.Int.check(max4 + 1, System.UInt32))));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(2 * max, System.UInt32));
                }, "Through parameter *");

                var min = 0;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(min - 1, System.UInt32);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(min1, (min1 = Bridge.Int.check(min1 - 1, System.UInt32)));
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((min2 = Bridge.Int.check(min2 - 1, System.UInt32)));
                }, "Through identifier pre--");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(min - 1, System.UInt32));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = Bridge.Int.check(min3 - 1, System.UInt32))));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = Bridge.Int.check(min4 - 1, System.UInt32))));
                }, "Through parameter --pre");
            },
            testLong: function () {
                var max = System.Int64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = max.add(System.Int64(1), 1);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = max1, max1 = max1.inc(1), $t);
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (max2 = max2.inc(1));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = System.Int64(2).mul(max, 1);
                }, "Through identifier *");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1), 1));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(1), $t));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc(1)));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max, 1));
                }, "Through parameter *");

                var min = System.Int64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.sub(System.Int64(1), 1);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = min1, min1 = min1.dec(1), $t);
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (min2 = min2.dec(1));
                }, "Through identifier pre--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.neg(1);
                }, "Through identifier unary -");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1), 1));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(1), $t));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec(1)));
                }, "Through parameter --pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg(1));
                }, "Through parameter unary -");
            },
            testULong: function () {
                var max = System.UInt64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = max.add(System.UInt64(1), 1);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = max1, max1 = max1.inc(1), $t);
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (max2 = max2.inc(1));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = System.UInt64(2).mul(max, 1);
                }, "Through identifier *");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1), 1));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(1), $t));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc(1)));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max, 1));
                }, "Through parameter *");

                var min = System.UInt64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.sub(System.UInt64(1), 1);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = min1, min1 = min1.dec(1), $t);
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (min2 = min2.dec(1));
                }, "Through identifier pre--");

                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1), 1));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(1), $t));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec(1)));
                }, "Through parameter --pre");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests", {
        statics: {
            testInt32: function () {
                var max = 2147483647;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = (max + 1) | 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) | 0));
                var rMax3 = ((max2 = (max2 + 1) | 0));
                var rMax4 = (2 * max) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) | 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) | 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) | 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) | 0)), "Through parameter *");

                var min = -2147483648;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = (min - 1) | 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) | 0));
                var rMin3 = ((min2 = (min2 - 1) | 0));
                var rMin4 = (-min) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) | 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) | 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) | 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((-min) | 0)), "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = (max + 1) >>> 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) >>> 0));
                var rMax3 = ((max2 = (max2 + 1) >>> 0));
                var rMax4 = (2 * max) >>> 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) >>> 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) >>> 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) >>> 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) >>> 0)), "Through parameter *");

                var min = 0;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = (min - 1) >>> 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) >>> 0));
                var rMin3 = ((min2 = (min2 - 1) >>> 0));
                var rMin4 = System.Int64(min).neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) >>> 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) >>> 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) >>> 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(min).neg()), "Through parameter unary -");
            },
            testLong: function () {
                var $t;
                var max = System.Int64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = max.add(System.Int64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.Int64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max)), "Through parameter *");

                var min = System.Int64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = min.sub(System.Int64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                var rMin4 = min.neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg()), "Through parameter unary -");
            },
            testULong: function () {
                var $t;
                var max = System.UInt64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = max.add(System.UInt64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.UInt64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max)), "Through parameter *");

                var min = System.UInt64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = min.sub(System.UInt64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin3, "Through identifier --pre");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests", {
        statics: {
            testInt32: function () {
                var max = 2147483647;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = (max + 1) | 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) | 0));
                var rMax3 = ((max2 = (max2 + 1) | 0));
                var rMax4 = (2 * max) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) | 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) | 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) | 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) | 0)), "Through parameter *");

                var min = -2147483648;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = (min - 1) | 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) | 0));
                var rMin3 = ((min2 = (min2 - 1) | 0));
                var rMin4 = (-min) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) | 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) | 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) | 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((-min) | 0)), "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = (max + 1) >>> 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) >>> 0));
                var rMax3 = ((max2 = (max2 + 1) >>> 0));
                var rMax4 = (2 * max) >>> 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) >>> 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) >>> 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) >>> 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) >>> 0)), "Through parameter *");

                var min = 0;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = (min - 1) >>> 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) >>> 0));
                var rMin3 = ((min2 = (min2 - 1) >>> 0));
                var rMin4 = System.Int64(min).neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) >>> 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) >>> 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) >>> 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(min).neg()), "Through parameter unary -");
            },
            testLong: function () {
                var $t;
                var max = System.Int64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = max.add(System.Int64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.Int64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max)), "Through parameter *");

                var min = System.Int64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = min.sub(System.Int64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                var rMin4 = min.neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg()), "Through parameter unary -");
            },
            testULong: function () {
                var $t;
                var max = System.UInt64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = max.add(System.UInt64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.UInt64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max)), "Through parameter *");

                var min = System.UInt64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = min.sub(System.UInt64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin3, "Through identifier --pre");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests", {
        statics: {
            testInt32: function () {
                var max = 2147483647;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = (max + 1) | 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) | 0));
                var rMax3 = ((max2 = (max2 + 1) | 0));
                var rMax4 = (2 * max) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) | 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) | 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) | 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) | 0)), "Through parameter *");

                var min = -2147483648;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = (min - 1) | 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) | 0));
                var rMin3 = ((min2 = (min2 - 1) | 0));
                var rMin4 = (-min) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) | 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) | 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) | 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((-min) | 0)), "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = (max + 1) >>> 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) >>> 0));
                var rMax3 = ((max2 = (max2 + 1) >>> 0));
                var rMax4 = (2 * max) >>> 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) >>> 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) >>> 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) >>> 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) >>> 0)), "Through parameter *");

                var min = 0;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = (min - 1) >>> 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) >>> 0));
                var rMin3 = ((min2 = (min2 - 1) >>> 0));
                var rMin4 = System.Int64(min).neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) >>> 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) >>> 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) >>> 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(min).neg()), "Through parameter unary -");
            },
            testLong: function () {
                var $t;
                var max = System.Int64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = max.add(System.Int64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.Int64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max)), "Through parameter *");

                var min = System.Int64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = min.sub(System.Int64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                var rMin4 = min.neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin4, "Through identifier unary -");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg()), "Through parameter unary -");
            },
            testULong: function () {
                var $t;
                var max = System.UInt64.MaxValue;

                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;

                var rMax1 = max.add(System.UInt64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.UInt64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", rMax4, "Through identifier *");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max)), "Through parameter *");

                var min = System.UInt64.MinValue;

                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;

                var rMin1 = min.sub(System.UInt64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin3, "Through identifier --pre");

                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ComparerTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Comparer$1[[Object]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.Comparer$1(Object)), "FullName");

            var comparer = new (System.Collections.Generic.Comparer$1(Object))(System.Collections.Generic.Comparer$1.$default.fn);
            Bridge.Test.Assert.true$1(Bridge.hasValue(comparer), "is Comparer<object> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(comparer, System.Collections.Generic.IComparer$1(Object)), "is IComparer<object> should be true");

            var comparer1 = new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn);
            Bridge.Test.Assert.true$1(Bridge.hasValue(comparer1), "is Comparer<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(comparer1, System.Collections.Generic.IComparer$1(System.Int32)), "is IComparer<int> should be true");
        },
        defaultComparerCanOrderNumbers: function () {
            Bridge.Test.Assert.areEqual$1(-1, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(3, 8), "Compare(3, 8) should be -1");
            Bridge.Test.Assert.areEqual$1(0, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(3, 3), "Compare(3, 3) should be 0");
            Bridge.Test.Assert.areEqual$1(1, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(8, 3), "Compare(8, 3) should be 1");
        },
        defaultComparerCanOrderNullValues: function () {
            Bridge.Test.Assert.areEqual$1(1, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(0, null), "Compare(0, null) should be 1");
            Bridge.Test.Assert.areEqual$1(-1, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(null, 0), "Compare(null, 0) should be -1");
            Bridge.Test.Assert.areEqual$1(0, new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn).compare(null, null), "Compare(null, null) should be 0");
        },
        defaultComparerUsesCompareMethodIfClassImplementsIComparable: function () {
            Bridge.Test.Assert.areEqual$1(-1, new (System.Collections.Generic.Comparer$1(Bridge.ClientTest.Collections.Generic.ComparerTests.C))(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Collections.Generic.ComparerTests.C(3), new Bridge.ClientTest.Collections.Generic.ComparerTests.C(8)), "Compare(3, 8) should be -1");
            Bridge.Test.Assert.areEqual$1(0, new (System.Collections.Generic.Comparer$1(Bridge.ClientTest.Collections.Generic.ComparerTests.C))(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Collections.Generic.ComparerTests.C(3), new Bridge.ClientTest.Collections.Generic.ComparerTests.C(3)), "Compare(3, 3) should be 0");
            Bridge.Test.Assert.areEqual$1(1, new (System.Collections.Generic.Comparer$1(Bridge.ClientTest.Collections.Generic.ComparerTests.C))(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Collections.Generic.ComparerTests.C(8), new Bridge.ClientTest.Collections.Generic.ComparerTests.C(3)), "Compare(8, 3) should be 1");
        },
        createWorks: function () {
            var comparer = new (System.Collections.Generic.Comparer$1(System.Int32))($_.Bridge.ClientTest.Collections.Generic.ComparerTests.f1);
            Bridge.Test.Assert.areEqual$1(42, comparer.compare(8, 3), "The result should be 42");
        }
    });

    Bridge.ns("Bridge.ClientTest.Collections.Generic.ComparerTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Collections.Generic.ComparerTests, {
        f1: function (x, y) {
            Bridge.Test.Assert.areEqual$1(8, x, "x should be 8");
            Bridge.Test.Assert.areEqual$1(3, y, "y should be 3");
            return 42;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ComparerTests.C", {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.Collections.Generic.ComparerTests.C)]; },
        value: 0,
        config: {
            alias: [
            "compareTo", "System$IComparable$1$Bridge$ClientTest$Collections$Generic$ComparerTests$C$compareTo"
            ]
        },
        ctor: function (value) {
            this.$initialize();
            this.value = value;
        },
        compareTo: function (other) {
            return Bridge.compare(this.value, other.value);
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.EqualityComparerTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.EqualityComparer$1[[Object]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.EqualityComparer$1(Object)), "FullName should be correct");
            var dict = System.Collections.Generic.EqualityComparer$1(Object).def;
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.EqualityComparer$1(Object)), "is EqualityComparer<object> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IEqualityComparer$1(Object)), "is IEqualityComparer<object> should be true");
        },
        defaultComparerCanGetHashCodeOfNumber: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((12345)), System.Collections.Generic.EqualityComparer$1(Object).def.getHashCode2(12345));
        },
        defaultComparerReturnsZeroAsHashCodeForNullAndUndefined: function () {
            Bridge.Test.Assert.areEqual(0, System.Collections.Generic.EqualityComparer$1(Object).def.getHashCode2(null));
            Bridge.Test.Assert.areEqual(0, System.Collections.Generic.EqualityComparer$1(Object).def.getHashCode2(undefined));
        },
        defaultComparerCanDetermineEquality: function () {
            var o1 = {  }, o2 = {  };

            Bridge.Test.Assert.true$1(System.Collections.Generic.EqualityComparer$1(Object).def.equals2(null, null), "null, null");
            Bridge.Test.Assert.false$1(System.Collections.Generic.EqualityComparer$1(Object).def.equals2(null, o1), "null, o1");
            Bridge.Test.Assert.false$1(System.Collections.Generic.EqualityComparer$1(Object).def.equals2(o1, null), "o1, null");
            Bridge.Test.Assert.true$1(System.Collections.Generic.EqualityComparer$1(Object).def.equals2(o1, o1), "o1, o1");
            Bridge.Test.Assert.false$1(System.Collections.Generic.EqualityComparer$1(Object).def.equals2(o1, o2), "o1, o2");
        },
        defaultComparerInvokesOverriddenGetHashCode: function () {
            Bridge.Test.Assert.areEqual(42158, System.Collections.Generic.EqualityComparer$1(Object).def.getHashCode2(Bridge.merge(new Bridge.ClientTest.Collections.Generic.EqualityComparerTests.MyClass(), {
                hashCode: 42158
            } )));
        },
        defaultComparerInvokesOverriddenEquals: function () {
            var c = new Bridge.ClientTest.Collections.Generic.EqualityComparerTests.MyClass();
            var other = new Bridge.ClientTest.Collections.Generic.EqualityComparerTests.MyClass();
            c.shouldEqual = false;
            Bridge.Test.Assert.false(System.Collections.Generic.EqualityComparer$1(Object).def.equals2(c, other));
            Bridge.Test.Assert.areStrictEqual(other, c.other);

            c.shouldEqual = true;
            c.other = null;
            Bridge.Test.Assert.true(System.Collections.Generic.EqualityComparer$1(Object).def.equals2(c, other));
            Bridge.Test.Assert.areStrictEqual(other, c.other);

            c.shouldEqual = true;
            c.other = other;
            Bridge.Test.Assert.false(System.Collections.Generic.EqualityComparer$1(Object).def.equals2(c, null)); // We should not invoke our own equals so its return value does not matter.
            Bridge.Test.Assert.areEqual(other, c.other); // We should not invoke our own equals so the 'other' member should not be set.
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.EqualityComparerTests.MyClass", {
        hashCode: 0,
        other: null,
        shouldEqual: false,
        getHashCode: function () {
            return this.hashCode;
        },
        equals: function (o) {
            this.other = o;
            return this.shouldEqual;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.GenericDictionaryTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Dictionary$2[[System.Int32, mscorlib],[String]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.Dictionary$2(System.Int32,String)), "FullName should be correct");
            var dict = new (System.Collections.Generic.Dictionary$2(System.Int32,String))();
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.Dictionary$2(System.Int32,String)), "is Dictionary<int,string> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IDictionary$2(System.Int32,String)), "is IDictionary<int,string> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IEnumerable$1(System.Collections.Generic.KeyValuePair$2(System.Int32,String))), "is IEnumerable<KeyValuePair<int,string>> should be true");
        },
        defaultConstructorWorks: function () {
            var d = new (System.Collections.Generic.Dictionary$2(System.Int32,String))();
            Bridge.Test.Assert.areEqual$1(0, d.getCount(), "Count is 0");
            Bridge.Test.Assert.areEqual$1("Bridge.CustomEnumerator", Bridge.Reflection.getTypeFullName(Bridge.getType(d.getEnumerator())), "Enumerator");
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.EqualityComparer$1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(d.getComparer())), "Comparer");
        },
        capacityConstructorWorks: function () {
            var d = new (System.Collections.Generic.Dictionary$2(System.Int32, String))();
            Bridge.Test.Assert.areEqual(0, d.getCount());
            Bridge.Test.Assert.areEqual$1("Bridge.CustomEnumerator", Bridge.Reflection.getTypeFullName(Bridge.getType(d.getEnumerator())), "Enumerator");
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.EqualityComparer$1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(d.getComparer())), "Comparer");
        },
        capacityAndEqualityComparerWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.TestEqualityComparer();
            var d = new (System.Collections.Generic.Dictionary$2(String, String))(null, c);
            Bridge.Test.Assert.areEqual(0, d.getCount());
            Bridge.Test.Assert.areStrictEqual(c, d.getComparer());
        },
        equalityComparerOnlyConstructorWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.TestEqualityComparer();
            var d = new (System.Collections.Generic.Dictionary$2(String, System.Int32))(null, c);
            Bridge.Test.Assert.areEqual(0, d.getCount());
            Bridge.Test.Assert.areStrictEqual(c, d.getComparer());
        },
        countWorks: function () {
            var d = new (System.Collections.Generic.Dictionary$2(System.Int32,String))();
            Bridge.Test.Assert.areEqual(0, d.getCount());
            d.add(1, "1");
            Bridge.Test.Assert.areEqual(1, d.getCount());
            d.add(2, "2");
            Bridge.Test.Assert.areEqual(2, d.getCount());
        },
        keysWorks: function () {
            var $t;
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f1(new (System.Collections.Generic.Dictionary$2(String,String))());
            var keys = d.getKeys();
            Bridge.Test.Assert.true(Bridge.is(keys, System.Collections.Generic.IEnumerable$1(String)));
            Bridge.Test.Assert.true(Bridge.is(keys, System.Collections.Generic.ICollection$1(String)));
            Bridge.Test.Assert.areEqual(2, System.Array.getCount(keys, String));
            Bridge.Test.Assert.true(System.Array.contains(keys, "1", String));
            Bridge.Test.Assert.true(System.Array.contains(keys, "2", String));
            Bridge.Test.Assert.false(System.Array.contains(keys, "a", String));

            var count = 0;
            $t = Bridge.getEnumerator(d.getKeys(), String);
            while ($t.moveNext()) {
                var key = $t.getCurrent();
                if (!Bridge.referenceEquals(key, "1") && !Bridge.referenceEquals(key, "2")) {
                    Bridge.Test.Assert.fail$1(System.String.concat("Unexpected key ", key));
                }
                count = (count + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(2, count);
        },
        valuesWorks: function () {
            var $t;
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f2(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            var values = d.getValues();
            Bridge.Test.Assert.true(Bridge.is(values, System.Collections.Generic.IEnumerable$1(String)));
            Bridge.Test.Assert.true(Bridge.is(values, System.Collections.Generic.ICollection$1(String)));
            Bridge.Test.Assert.areEqual(2, System.Array.getCount(values, String));
            Bridge.Test.Assert.true(System.Array.contains(values, "a", String));
            Bridge.Test.Assert.true(System.Array.contains(values, "b", String));
            Bridge.Test.Assert.false(System.Array.contains(values, "1", String));

            var count = 0;
            $t = Bridge.getEnumerator(d.getValues(), String);
            while ($t.moveNext()) {
                var value = $t.getCurrent();
                if (!Bridge.referenceEquals(value, "a") && !Bridge.referenceEquals(value, "b")) {
                    Bridge.Test.Assert.fail$1(System.String.concat("Unexpected key ", value));
                }
                count = (count + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(2, count);
        },
        indexerGetterWorksForExistingItems: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f3(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            Bridge.Test.Assert.areEqual("a", d.get(1));
        },
        indexerSetterWorks: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f4(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            d.set(2, "c");
            d.set(3, "d");
            Bridge.Test.Assert.areEqual(d.getCount(), 3);
            Bridge.Test.Assert.areEqual("a", d.get(1));
            Bridge.Test.Assert.areEqual("c", d.get(2));
            Bridge.Test.Assert.areEqual("d", d.get(3));
        },
        indexerGetterThrowsForNonExistingItems: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f5(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            try {
                var x = d.get(10);
                Bridge.Test.Assert.true(false);
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.Collections.Generic.KeyNotFoundException)) {
                } else {
                    throw $e1;
                }
            }
        },
        addWorks: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f6(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            d.add(3, "c");
            Bridge.Test.Assert.areEqual(d.getCount(), 3);
            Bridge.Test.Assert.areEqual("a", d.get(1));
            Bridge.Test.Assert.areEqual("b", d.get(2));
            Bridge.Test.Assert.areEqual("c", d.get(3));
        },
        addThrowsIfItemAlreadyExists: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f7(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            try {
                d.add(2, "b");
                Bridge.Test.Assert.true(false);
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.ArgumentException)) {
                } else {
                    throw $e1;
                }
            }
        },
        clearWorks: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f8(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            d.clear();
            Bridge.Test.Assert.areEqual(0, d.getCount());
        },
        containsKeyWorks: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f9(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            Bridge.Test.Assert.true(d.containsKey(1));
            Bridge.Test.Assert.false(d.containsKey(3));
        },
        enumeratingWorks: function () {
            var $t;
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f10(new (System.Collections.Generic.Dictionary$2(String,String))());
            var count = 0;
            $t = Bridge.getEnumerator(d);
            while ($t.moveNext()) {
                var kvp = $t.getCurrent();
                if (Bridge.referenceEquals(kvp.key, "1")) {
                    Bridge.Test.Assert.areEqual("a", kvp.value);
                } else if (Bridge.referenceEquals(kvp.key, "2")) {
                    Bridge.Test.Assert.areEqual("b", kvp.value);
                } else {
                    Bridge.Test.Assert.fail$1(System.String.concat("Invalid key ", kvp.key));
                }
                count = (count + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(2, count);
        },
        removeWorks: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f11(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
            Bridge.Test.Assert.areStrictEqual(true, d.remove(2));
            Bridge.Test.Assert.areStrictEqual(false, d.remove(3));
            Bridge.Test.Assert.areEqual(1, d.getCount());
            Bridge.Test.Assert.areEqual("a", d.get(1));
        },
        tryGetValueWithIntKeysWorks: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f12(new (System.Collections.Generic.Dictionary$2(String,System.Int32))());
            var i = { };

            Bridge.Test.Assert.true(d.tryGetValue("a", i));
            Bridge.Test.Assert.areEqual(1, i.v);
            Bridge.Test.Assert.false(d.tryGetValue("c", i));
            Bridge.Test.Assert.areEqual(0, i.v);
        },
        tryGetValueWithObjectKeysWorks: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f13(new (System.Collections.Generic.Dictionary$2(String,Object))());
            var o = { };

            Bridge.Test.Assert.true(d.tryGetValue("a", o));
            Bridge.Test.Assert.areEqual(1, o.v);
            Bridge.Test.Assert.false(d.tryGetValue("c", o));
            Bridge.Test.Assert.areStrictEqual(null, o.v);
        },
        canUseCustomComparer: function () {
            var d = $_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.f14(new (System.Collections.Generic.Dictionary$2(String, System.Int32))(null, new Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.TestEqualityComparer()));
            d.set("a2", 100);
            Bridge.Test.Assert.areEqual(100, d.get("a3"));
            Bridge.Test.Assert.areEqual(2, d.getCount());
        }
    });

    Bridge.ns("Bridge.ClientTest.Collections.Generic.GenericDictionaryTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Collections.Generic.GenericDictionaryTests, {
        f1: function (_o18) {
            _o18.add("1", "a");
            _o18.add("2", "b");
            return _o18;
        },
        f2: function (_o19) {
            _o19.add(1, "a");
            _o19.add(2, "b");
            return _o19;
        },
        f3: function (_o20) {
            _o20.add(1, "a");
            _o20.add(2, "b");
            return _o20;
        },
        f4: function (_o21) {
            _o21.add(1, "a");
            _o21.add(2, "b");
            return _o21;
        },
        f5: function (_o22) {
            _o22.add(1, "a");
            _o22.add(2, "b");
            return _o22;
        },
        f6: function (_o23) {
            _o23.add(1, "a");
            _o23.add(2, "b");
            return _o23;
        },
        f7: function (_o24) {
            _o24.add(1, "a");
            _o24.add(2, "b");
            return _o24;
        },
        f8: function (_o25) {
            _o25.add(1, "a");
            _o25.add(2, "b");
            return _o25;
        },
        f9: function (_o26) {
            _o26.add(1, "a");
            _o26.add(2, "b");
            return _o26;
        },
        f10: function (_o27) {
            _o27.add("1", "a");
            _o27.add("2", "b");
            return _o27;
        },
        f11: function (_o28) {
            _o28.add(1, "a");
            _o28.add(2, "b");
            return _o28;
        },
        f12: function (_o29) {
            _o29.add("a", 1);
            _o29.add("b", 2);
            return _o29;
        },
        f13: function (_o30) {
            _o30.add("a", 1);
            _o30.add("b", "X");
            return _o30;
        },
        f14: function (_o31) {
            _o31.add("a", 1);
            _o31.add("b", 2);
            return _o31;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.TestEqualityComparer", {
        inherits: [System.Collections.Generic.EqualityComparer$1(String)],
        config: {
            alias: [
            "equals2", "System$Collections$Generic$IEqualityComparer$1$String$equals2",
            "getHashCode2", "System$Collections$Generic$IEqualityComparer$1$String$getHashCode2"
            ]
        },
        equals2: function (x, y) {
            return x.charCodeAt(0) === y.charCodeAt(0);
        },
        getHashCode2: function (obj) {
            return obj.charCodeAt(0);
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ICollectionTests", {
        arrayImplementsICollection: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Array.init(1, 0), System.Collections.Generic.ICollection$1(System.Int32)));
        },
        customClassThatShouldImplementICollectionDoesSo: function () {
            Bridge.Test.Assert.true(Bridge.is(new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(0, null)), System.Collections.Generic.ICollection$1(String)));
        },
        arrayCastToICollectionCountWorks: function () {
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(Bridge.cast(["x", "y", "z"], System.Collections.Generic.ICollection$1(String)), String));
        },
        classImplementingICollectionCountWorks: function () {
            Bridge.Test.Assert.areEqual(2, new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]).getCount());
        },
        classImplementingICollectionCastToICollectionCountWorks: function () {
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(Bridge.cast(new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y", "z"]), System.Collections.Generic.ICollection$1(String)), String));
        },
        arrayCastToICollectionIsReadOnlyWorks: function () {
            Bridge.Test.Assert.areEqual(true, System.Array.getIsReadOnly(Bridge.cast(["x", "y", "z"], System.Collections.Generic.ICollection$1(String)), String));
        },
        classImplementingICollectionIsReadOnlyWorks: function () {
            Bridge.Test.Assert.areEqual(true, new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]).getIsReadOnly());
        },
        classImplementingICollectionCastToICollectionIsReadOnlyWorks: function () {
            Bridge.Test.Assert.areEqual(true, System.Array.getIsReadOnly(Bridge.cast(new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y", "z"]), System.Collections.Generic.ICollection$1(String)), String));
        },
        classImplementingICollectionAddWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            c.add("z");
            Bridge.Test.Assert.areEqual(3, c.getCount());
            Bridge.Test.Assert.true(c.contains("z"));
        },
        classImplementingICollectionCastToICollectionAddWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            System.Array.add(c, "z", String);
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(c, String));
            Bridge.Test.Assert.true(System.Array.contains(c, "z", String));
        },
        classImplementingICollectionClearWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            c.clear();
            Bridge.Test.Assert.areEqual(0, c.getCount());
        },
        classImplementingICollectionCastToICollectionClearWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            System.Array.clear(c, String);
            Bridge.Test.Assert.areEqual(0, System.Array.getCount(c, String));
        },
        arrayCastToICollectionContainsWorks: function () {
            var arr = [new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(1), new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(2), new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(3)];
            Bridge.Test.Assert.true(System.Array.contains(arr, new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(2), Bridge.ClientTest.Collections.Generic.ICollectionTests.C));
            Bridge.Test.Assert.false(System.Array.contains(arr, new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(4), Bridge.ClientTest.Collections.Generic.ICollectionTests.C));
        },
        classImplementingICollectionContainsWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            Bridge.Test.Assert.true(c.contains("x"));
            Bridge.Test.Assert.false(c.contains("z"));
        },
        classImplementingICollectionCastToICollectionContainsWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            Bridge.Test.Assert.true(System.Array.contains(c, "x", String));
            Bridge.Test.Assert.false(System.Array.contains(c, "z", String));
        },
        classImplementingICollectionRemoveWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            c.remove("x");
            Bridge.Test.Assert.areEqual(1, c.getCount());
            c.remove("y");
            Bridge.Test.Assert.areEqual(0, c.getCount());
        },
        classImplementingICollectionCastToICollectionRemoveWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            System.Array.remove(c, "x", String);
            Bridge.Test.Assert.areEqual(1, System.Array.getCount(c, String));
            System.Array.remove(c, "y", String);
            Bridge.Test.Assert.areEqual(0, System.Array.getCount(c, String));
        },
        classImplementingICollectionCopyToWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);

            var a1 = System.Array.init(2, null);
            l.copyTo(a1, 0);

            Bridge.Test.Assert.areEqual$1("x", a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1("y", a1[1], "1.Element 1");

            var a2 = System.Array.init(4, null);
            l.copyTo(a2, 1);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1("x", a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1("y", a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(null, a2[3], "2.Element 3");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                l.copyTo(null, 0);
            }, "null");

            var a3 = System.Array.init(1, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a3, 0);
            }, "Short array");

            var a4 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a4, 1);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                l.copyTo(a4, -1);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a4, 3);
            }, "Start index 3");
        },
        classImplementingICollectionCastToICollectionCopyToWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);

            var a1 = System.Array.init(2, null);
            System.Array.copyTo(l, a1, 0, String);

            Bridge.Test.Assert.areEqual$1("x", a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1("y", a1[1], "1.Element 1");

            var a2 = System.Array.init(4, null);
            System.Array.copyTo(l, a2, 1, String);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1("x", a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1("y", a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(null, a2[3], "2.Element 3");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, String);
            }, "null");

            var a3 = System.Array.init(1, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, String);
            }, "Short array");

            var a4 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, String);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, String);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, String);
            }, "Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ICollectionTests.C", {
        _i: 0,
        ctor: function (i) {
            this.$initialize();
            this._i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Collections.Generic.ICollectionTests.C) && this._i === Bridge.cast(o, Bridge.ClientTest.Collections.Generic.ICollectionTests.C)._i;
        },
        getHashCode: function () {
            return this._i;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection", {
        inherits: [System.Collections.Generic.ICollection$1(String)],
        config: {
            properties: {
                Items: null
            },
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$String$getEnumerator",
            "getCount", "System$Collections$Generic$ICollection$1$String$getCount",
            "getIsReadOnly", "System$Collections$Generic$ICollection$1$String$getIsReadOnly",
            "copyTo", "System$Collections$Generic$ICollection$1$String$copyTo",
            "add", "System$Collections$Generic$ICollection$1$String$add",
            "clear", "System$Collections$Generic$ICollection$1$String$clear",
            "contains", "System$Collections$Generic$ICollection$1$String$contains",
            "remove", "System$Collections$Generic$ICollection$1$String$remove"
            ]
        },
        ctor: function (items) {
            this.$initialize();
            this.setItems(new (System.Collections.Generic.List$1(String))(items));
        },
        getCount: function () {
            return this.getItems().getCount();
        },
        getIsReadOnly: function () {
            return true;
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            return this.getItems().getEnumerator();
        },
        copyTo: function (array, arrayIndex) {
            this.getItems().copyTo(array, arrayIndex);
        },
        add: function (item) {
            this.getItems().add(item);
        },
        clear: function () {
            this.getItems().clear();
        },
        contains: function (item) {
            return this.getItems().contains(item);
        },
        remove: function (item) {
            return this.getItems().remove(item);
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IDictionaryTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.IDictionary$2[[Object],[Object]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.IDictionary$2(Object,Object)), "FullName should be correct");
        },
        classImplementsInterfaces: function () {
            Bridge.Test.Assert.true(Bridge.is(new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.ctor(), System.Collections.Generic.IDictionary$2(System.Int32,String)));
        },
        countWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.ctor();
            Bridge.Test.Assert.areEqual(0, d.getCount());

            var d2 = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f1(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));
            Bridge.Test.Assert.areEqual(1, d2.getCount());

            var d3 = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.ctor();
            Bridge.Test.Assert.areEqual(0, d3.getCount());
        },
        keysWorks: function () {
            var $t;
            var actualKeys = [3, 6, 9];
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f2(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));
            var keys = d.getKeys();
            Bridge.Test.Assert.true$1(Bridge.is(keys, System.Collections.Generic.IEnumerable$1(System.Int32)), "IEnumerable<int>");
            Bridge.Test.Assert.true$1(Bridge.hasValue(keys), "ICollection<int>");

            var i = 0;
            $t = Bridge.getEnumerator(keys, System.Int32);
            while ($t.moveNext()) {
                var key = $t.getCurrent();
                Bridge.Test.Assert.areEqual(actualKeys[i], key);
                i = (i + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(actualKeys.length, i);
        },
        getItemWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f3(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));

            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));

            Bridge.Test.Assert.areEqual("x", d.getItem(9));
            Bridge.Test.Assert.areEqual("z", di2.System$Collections$Generic$IDictionary$2$System$Int32$String$getItem(6));

            try {
                var x = d.getItem(1);
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
            }

            try {
                var x1 = di2.System$Collections$Generic$IDictionary$2$System$Int32$String$getItem(1);
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e2) {
                $e2 = System.Exception.create($e2);
            }
        },
        valuesWorks: function () {
            var $t;
            var actualValues = ["b", "z", "x"];
            var d2 = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f4(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));
            var values = d2.getValues();
            Bridge.Test.Assert.true(Bridge.is(values, System.Collections.Generic.IEnumerable$1(String)));

            var i = 0;

            $t = Bridge.getEnumerator(values, String);
            while ($t.moveNext()) {
                var val = $t.getCurrent();
                Bridge.Test.Assert.areEqual(actualValues[i], val);
                i = (i + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(actualValues.length, i);
        },
        containsKeyWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f5(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));
            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));

            Bridge.Test.Assert.true(d.containsKey(9));
            Bridge.Test.Assert.true(di2.System$Collections$Generic$IDictionary$2$System$Int32$String$containsKey(3));

            Bridge.Test.Assert.false(d.containsKey(923));
            Bridge.Test.Assert.false(di2.System$Collections$Generic$IDictionary$2$System$Int32$String$containsKey(353));
        },
        tryGetValueWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f6(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));
            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));

            var outVal = { };

            Bridge.Test.Assert.true(d.tryGetValue(9, outVal));
            Bridge.Test.Assert.areEqual("x", outVal.v);

            Bridge.Test.Assert.true(di2.System$Collections$Generic$IDictionary$2$System$Int32$String$tryGetValue(3, outVal));
            Bridge.Test.Assert.areEqual("b", outVal.v);

            outVal.v = "!!!";
            Bridge.Test.Assert.false(d.tryGetValue(923, outVal));
            Bridge.Test.Assert.areEqual(null, outVal.v);

            outVal.v = "!!!";
            Bridge.Test.Assert.false(di2.System$Collections$Generic$IDictionary$2$System$Int32$String$tryGetValue(353, outVal));
            Bridge.Test.Assert.areEqual(null, outVal.v);
        },
        addWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.ctor();
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));

            d.add(5, "aa");
            Bridge.Test.Assert.areEqual("aa", d.getItem(5));
            Bridge.Test.Assert.areEqual(1, d.getCount());

            di.System$Collections$Generic$IDictionary$2$System$Int32$String$add(3, "bb");
            Bridge.Test.Assert.areEqual(di.System$Collections$Generic$IDictionary$2$System$Int32$String$getItem(3), "bb");

            var s = { };
            di.System$Collections$Generic$IDictionary$2$System$Int32$String$tryGetValue(3, s);
            Bridge.Test.Assert.areEqual("bb", s.v);
            Bridge.Test.Assert.areEqual(2, di.System$Collections$Generic$IDictionary$2$System$Int32$String$getCount());

            try {
                d.add(5, "zz");
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
            }
        },
        clearWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f7(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));

            Bridge.Test.Assert.areEqual(3, d.getCount());
            d.clear();
            Bridge.Test.Assert.areEqual(0, d.getCount());
        },
        removeWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f8(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));

            Bridge.Test.Assert.areStrictEqual(true, d.remove(6));
            Bridge.Test.Assert.areEqual(3, d.getCount());
            Bridge.Test.Assert.false(d.containsKey(6));

            Bridge.Test.Assert.areStrictEqual(true, di.System$Collections$Generic$IDictionary$2$System$Int32$String$remove(3));
            Bridge.Test.Assert.areEqual(2, di.System$Collections$Generic$IDictionary$2$System$Int32$String$getCount());
            Bridge.Test.Assert.false(di.System$Collections$Generic$IDictionary$2$System$Int32$String$containsKey(3));

            Bridge.Test.Assert.true(di.System$Collections$Generic$IDictionary$2$System$Int32$String$containsKey(13));
        },
        setItemWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests.f9(new (System.Collections.Generic.Dictionary$2(System.Int32,String))()));
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));

            d.setItem(3, "check");
            Bridge.Test.Assert.areEqual("check", d.getItem(3));
            Bridge.Test.Assert.false(d.containsKey(10));

            di.System$Collections$Generic$IDictionary$2$System$Int32$String$setItem(10, "stuff");
            Bridge.Test.Assert.areEqual("stuff", di.System$Collections$Generic$IDictionary$2$System$Int32$String$getItem(10));
            Bridge.Test.Assert.true(di.System$Collections$Generic$IDictionary$2$System$Int32$String$containsKey(10));
        }
    });

    Bridge.ns("Bridge.ClientTest.Collections.Generic.IDictionaryTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Collections.Generic.IDictionaryTests, {
        f1: function (_o9) {
            _o9.add(3, "c");
            return _o9;
        },
        f2: function (_o10) {
            _o10.add(3, "b");
            _o10.add(6, "z");
            _o10.add(9, "x");
            return _o10;
        },
        f3: function (_o11) {
            _o11.add(3, "b");
            _o11.add(6, "z");
            _o11.add(9, "x");
            return _o11;
        },
        f4: function (_o12) {
            _o12.add(3, "b");
            _o12.add(6, "z");
            _o12.add(9, "x");
            return _o12;
        },
        f5: function (_o13) {
            _o13.add(3, "b");
            _o13.add(6, "z");
            _o13.add(9, "x");
            return _o13;
        },
        f6: function (_o14) {
            _o14.add(3, "b");
            _o14.add(6, "z");
            _o14.add(9, "x");
            return _o14;
        },
        f7: function (_o15) {
            _o15.add(3, "b");
            _o15.add(6, "z");
            _o15.add(9, "x");
            return _o15;
        },
        f8: function (_o16) {
            _o16.add(3, "b");
            _o16.add(6, "z");
            _o16.add(9, "x");
            _o16.add(13, "y");
            return _o16;
        },
        f9: function (_o17) {
            _o17.add(3, "b");
            _o17.add(6, "z");
            _o17.add(9, "x");
            _o17.add(13, "y");
            return _o17;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary", {
        inherits: [System.Collections.Generic.IDictionary$2(System.Int32,String)],
        _backingDictionary: null,
        config: {
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$System$Int32$String$getEnumerator",
            "getItem", "System$Collections$Generic$IDictionary$2$System$Int32$String$getItem",
            "setItem", "System$Collections$Generic$IDictionary$2$System$Int32$String$setItem",
            "getKeys", "System$Collections$Generic$IDictionary$2$System$Int32$String$getKeys",
            "getValues", "System$Collections$Generic$IDictionary$2$System$Int32$String$getValues",
            "getCount", "System$Collections$Generic$IDictionary$2$System$Int32$String$getCount",
            "add", "System$Collections$Generic$IDictionary$2$System$Int32$String$add",
            "remove", "System$Collections$Generic$IDictionary$2$System$Int32$String$remove",
            "containsKey", "System$Collections$Generic$IDictionary$2$System$Int32$String$containsKey",
            "tryGetValue", "System$Collections$Generic$IDictionary$2$System$Int32$String$tryGetValue"
            ]
        },
        ctor: function () {
            Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.$ctor1.call(this, new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
        },
        $ctor1: function (initialValues) {
            this.$initialize();
            this._backingDictionary = initialValues;
        },
        getItem: function (key) {
            return this._backingDictionary.get(key);
        },
        setItem: function (key, value) {
            this._backingDictionary.set(key, value);
        },
        getKeys: function () {
            return this._backingDictionary.getKeys();
        },
        getValues: function () {
            return this._backingDictionary.getValues();
        },
        getCount: function () {
            return this._backingDictionary.getCount();
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            return this._backingDictionary.getEnumerator();
        },
        add: function (key, value) {
            this._backingDictionary.add(key, value);
        },
        remove: function (key) {
            return this._backingDictionary.remove(key);
        },
        containsKey: function (key) {
            return this._backingDictionary.containsKey(key);
        },
        tryGetValue: function (key, value) {
            return this._backingDictionary.tryGetValue(key, value);
        },
        clear: function () {
            this._backingDictionary.clear();
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IEnumerableTests", {
        arrayImplementsIEnumerable: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Array.init(1, 0), System.Collections.Generic.IEnumerable$1(System.Int32)));
        },
        customClassThatShouldImplementIEnumerableDoesSo: function () {
            Bridge.Test.Assert.true(Bridge.is(new Bridge.ClientTest.Collections.Generic.IEnumerableTests.MyEnumerable(), System.Collections.Generic.IEnumerable$1(String)));
        },
        arrayGetEnumeratorMethodWorks: function () {
            var e = Bridge.getEnumerator(["x", "y", "z"]);
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("x", e.System$Collections$IEnumerator$getCurrent());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("y", e.System$Collections$IEnumerator$getCurrent());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("z", e.System$Collections$IEnumerator$getCurrent());
            Bridge.Test.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        arrayCastToIEnumerableCanBeEnumerated: function () {
            var enm = ["x", "y", "z"];
            var e = Bridge.getEnumerator(enm, String);
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("z", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        classImplementingIEnumerableCanBeEnumerated: function () {
            var enm = new Bridge.ClientTest.Collections.Generic.IEnumerableTests.MyEnumerable();
            var e = enm.getEnumerator();
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("z", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        classImplementingIEnumerableCastToIEnumerableCanBeEnumerated: function () {
            var enm = new Bridge.ClientTest.Collections.Generic.IEnumerableTests.MyEnumerable();
            var e = Bridge.getEnumerator(enm, String);
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("z", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.false(e.System$Collections$IEnumerator$moveNext());
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IEnumerableTests.MyEnumerable", {
        inherits: [System.Collections.Generic.IEnumerable$1(String)],
        config: {
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$String$getEnumerator"
            ]
        },
        getEnumerator: function () {
            var $yield = [];
            $yield.push("x");
            $yield.push("y");
            $yield.push("z");
            return System.Array.toEnumerator($yield, String);
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IListTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.IList$1[[Object]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.IList$1(Object)), "FullName should be correct");

            var iList = new (System.Collections.Generic.List$1(Object))();

            Bridge.Test.Assert.true$1(Bridge.is(iList, System.Collections.Generic.IEnumerable$1(Object)), "Interfaces should contain IEnumerable");
            Bridge.Test.Assert.true$1(Bridge.is(iList, System.Collections.Generic.ICollection$1(Object)), "Interfaces should contain ICollection");
        },
        arrayImplementsIList: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Array.init(1, 0), System.Collections.Generic.IList$1(System.Int32)));
        },
        customClassThatShouldImplementIListDoesSo: function () {
            Bridge.Test.Assert.true(Bridge.is(new Bridge.ClientTest.Collections.Generic.IListTests.MyList(System.Array.init(0, null)), System.Collections.Generic.IList$1(String)));
        },
        arrayCastToIListGetItemWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1, String));
        },
        classImplementingIListGetItemWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            Bridge.Test.Assert.areEqual("y", l.getItem(1));
        },
        classImplementingIListCastToIListGetItemWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1, String));
        },
        arrayCastToIListSetItemWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.setItem(l, 1, "a", String);
            Bridge.Test.Assert.areEqual("a", System.Array.getItem(l, 1, String));
        },
        classImplementingIListSetItemWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            l.setItem(1, "a");
            Bridge.Test.Assert.areEqual("a", l.getItem(1));
        },
        classImplementingIListCastToIListSetItemWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            System.Array.setItem(l, 1, "a", String);
            Bridge.Test.Assert.areEqual("a", System.Array.getItem(l, 1, String));
        },
        arrayCastToIListIsReadOnlyWorks: function () {
            var arr = [new Bridge.ClientTest.Collections.Generic.IListTests.C(1), new Bridge.ClientTest.Collections.Generic.IListTests.C(2), new Bridge.ClientTest.Collections.Generic.IListTests.C(3)];
            Bridge.Test.Assert.areEqual(true, System.Array.getIsReadOnly(arr, Bridge.ClientTest.Collections.Generic.IListTests.C));
        },
        classImplementingIListIsReadOnlyWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            Bridge.Test.Assert.areEqual(true, c.getIsReadOnly());
        },
        classImplementingIListCastToIListIsReadOnlyWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            Bridge.Test.Assert.areEqual(true, System.Array.getIsReadOnly(l, String));
        },
        arrayCastToIListIndexOfWorks: function () {
            var arr = [new Bridge.ClientTest.Collections.Generic.IListTests.C(1), new Bridge.ClientTest.Collections.Generic.IListTests.C(2), new Bridge.ClientTest.Collections.Generic.IListTests.C(3)];
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(arr, new Bridge.ClientTest.Collections.Generic.IListTests.C(2), 0, null, Bridge.ClientTest.Collections.Generic.IListTests.C));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(arr, new Bridge.ClientTest.Collections.Generic.IListTests.C(4), 0, null, Bridge.ClientTest.Collections.Generic.IListTests.C));
        },
        classImplementingIListIndexOfWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            Bridge.Test.Assert.areEqual(1, c.indexOf("y"));
            Bridge.Test.Assert.areEqual(-1, c.indexOf("z"));
        },
        classImplementingIListCastToIListIndexOfWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, "y", 0, null, String));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, "z", 0, null, String));
        },
        classImplementingIListInsertWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            l.insert(1, "z");
            Bridge.Test.Assert.areDeepEqual(["x", "z", "y"], l.getItems().toArray());
        },
        classImplementingIListCastToIListInsertWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            System.Array.insert(l, 1, "z", String);
            Bridge.Test.Assert.areDeepEqual(["x", "z", "y"], Bridge.cast(l, Bridge.ClientTest.Collections.Generic.IListTests.MyList).getItems().toArray());
        },
        classImplementingIListRemoveAtWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            l.removeAt(1);
            Bridge.Test.Assert.areDeepEqual(["x", "z"], l.getItems().toArray());
        },
        classImplementingIListCastToIListRemoveAtWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            System.Array.removeAt(l, 1, String);
            Bridge.Test.Assert.areDeepEqual(["x", "z"], Bridge.cast(l, Bridge.ClientTest.Collections.Generic.IListTests.MyList).getItems().toArray());
        },
        classImplementingIListCopyToWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);

            var a1 = System.Array.init(2, null);
            l.copyTo(a1, 0);

            Bridge.Test.Assert.areEqual$1("x", a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1("y", a1[1], "1.Element 1");

            var a2 = System.Array.init(4, null);
            l.copyTo(a2, 1);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1("x", a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1("y", a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(null, a2[3], "2.Element 3");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                l.copyTo(null, 0);
            }, "null");

            var a3 = System.Array.init(1, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a3, 0);
            }, "Short array");

            var a4 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a4, 1);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                l.copyTo(a4, -1);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a4, 3);
            }, "Start index 3");
        },
        classImplementingIListCastToIListCopyToWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);

            var a1 = System.Array.init(2, null);
            System.Array.copyTo(l, a1, 0, String);

            Bridge.Test.Assert.areEqual$1("x", a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1("y", a1[1], "1.Element 1");

            var a2 = System.Array.init(4, null);
            System.Array.copyTo(l, a2, 1, String);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1("x", a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1("y", a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(null, a2[3], "2.Element 3");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, String);
            }, "null");

            var a3 = System.Array.init(1, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, String);
            }, "Short array");

            var a4 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, String);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, String);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, String);
            }, "Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IListTests.C", {
        _i: 0,
        ctor: function (i) {
            this.$initialize();
            this._i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Collections.Generic.IListTests.C) && this._i === Bridge.cast(o, Bridge.ClientTest.Collections.Generic.IListTests.C)._i;
        },
        getHashCode: function () {
            return this._i;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IListTests.MyList", {
        inherits: [System.Collections.Generic.IList$1(String)],
        config: {
            properties: {
                Items: null
            },
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$String$getEnumerator",
            "getCount", "System$Collections$Generic$ICollection$1$String$getCount",
            "getIsReadOnly", "System$Collections$Generic$ICollection$1$String$getIsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$String$add",
            "clear", "System$Collections$Generic$ICollection$1$String$clear",
            "contains", "System$Collections$Generic$ICollection$1$String$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$String$copyTo",
            "remove", "System$Collections$Generic$ICollection$1$String$remove",
            "getItem", "System$Collections$Generic$IList$1$String$getItem",
            "setItem", "System$Collections$Generic$IList$1$String$setItem",
            "indexOf", "System$Collections$Generic$IList$1$String$indexOf",
            "insert", "System$Collections$Generic$IList$1$String$insert",
            "removeAt", "System$Collections$Generic$IList$1$String$removeAt"
            ]
        },
        ctor: function (items) {
            this.$initialize();
            this.setItems(new (System.Collections.Generic.List$1(String))(items));
        },
        getCount: function () {
            return this.getItems().getCount();
        },
        getIsReadOnly: function () {
            return true;
        },
        getItem: function (index) {
            return this.getItems().getItem(index);
        },
        setItem: function (index, value) {
            this.getItems().setItem(index, value);
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            return this.getItems().getEnumerator();
        },
        add: function (item) {
            this.getItems().add(item);
        },
        clear: function () {
            this.getItems().clear();
        },
        contains: function (item) {
            return this.getItems().contains(item);
        },
        copyTo: function (array, arrayIndex) {
            this.getItems().copyTo(array, arrayIndex);
        },
        remove: function (item) {
            return this.getItems().remove(item);
        },
        indexOf: function (item) {
            return this.getItems().indexOf(item);
        },
        insert: function (index, item) {
            this.getItems().insert(index, item);
        },
        removeAt: function (index) {
            this.getItems().removeAt(index);
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IteratorBlockTests", {
        assertEqual: function (actual, expected, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.Assert.areEqual$1(System.String.replaceAll(expected, "\r\n", "\n"), System.String.replaceAll(actual, "\r\n", "\n"), message);
        },
        typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable: function () {
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(new System.Text.StringBuilder()).getEnumerator(0);
            Bridge.Test.Assert.true(Bridge.is(enm, System.Collections.IEnumerator));
        },
        enumeratingIEnumeratorIteratorToEndWorks: function () {
            //TODO expected for v1: yield iterator works with no state machine
            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerator(2);

            while (enm.System$Collections$IEnumerator$moveNext()) {
                sb.appendLine("got " + enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$getCurrent$1", "getCurrent$1")]());
            }

            this.assertEqual(sb.toString(), "yielding 0\nyielding 1\nyielding -1\nin finally\ngot 0\ngot 1\ngot -1\n");
        },
        prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks: function () {
            //TODO expected for v1: yield iterator works with no state machine

            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerator(5);

            for (var i = 0; i < 2; i = (i + 1) | 0) {
                enm.System$Collections$IEnumerator$moveNext();
                sb.appendLine("got " + enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$getCurrent$1", "getCurrent$1")]());
            }
            enm.System$IDisposable$dispose();

            this.assertEqual(sb.toString(), "yielding 0\nyielding 1\nyielding 2\nyielding 3\nyielding 4\nyielding -1\nin finally\ngot 0\ngot 1\n");
        },
        exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks: function () {
            //TODO expected for v1: yield iterator works with no state machine

            var sb = new System.Text.StringBuilder();

            try {
                var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumeratorThrows();
                for (var i = 0; i < 100; i = (i + 1) | 0) {
                    enm.System$Collections$IEnumerator$moveNext();
                    sb.appendLine("got " + enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$getCurrent$1", "getCurrent$1")]());
                }
                Bridge.Test.Assert.fail$1("Should have thrown an exception in the loop");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                sb.appendLine("caught exception");
            }

            this.assertEqual(sb.toString(), "yielding 1\nyielding 2\nthrowing\nin finally\ncaught exception\n");
        },
        typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface: function () {
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(new System.Text.StringBuilder()).getEnumerable(0);
            Bridge.Test.Assert.true(Bridge.is(enm, System.Collections.IEnumerable));
        },
        enumeratingIEnumerableIteratorToEndWorks: function () {
            var $t, $t1;
            //TODO expected for v1: yield iterator works with no state machine

            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerable(2);

            $t = Bridge.getEnumerator(enm, System.Int32);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                sb.appendLine("got " + i);
            }

            sb.appendLine("-");

            $t1 = Bridge.getEnumerator(enm, System.Int32);
            while ($t1.moveNext()) {
                var i1 = $t1.getCurrent();
                sb.appendLine("got " + i1);
            }

            this.assertEqual(sb.toString(), "yielding 0\nyielding 1\nyielding -1\nin finally\ngot 0\ngot 1\ngot -1\n-\ngot 0\ngot 1\ngot -1\n");
        },
        prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks: function () {
            var $t;
            //TODO expected for v1: yield iterator works with no state machine

            var sb = new System.Text.StringBuilder();
            var n = 0;
            $t = Bridge.getEnumerator(new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerable(5), System.Int32);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                sb.appendLine("got " + i);
                if (((n = (n + 1) | 0)) === 2) {
                    break;
                }
            }

            this.assertEqual(sb.toString(), "yielding 0\nyielding 1\nyielding 2\nyielding 3\nyielding 4\nyielding -1\nin finally\ngot 0\ngot 1\n");
        },
        exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks: function () {
            //TODO expected for v1: yield iterator works with no state machine

            var sb = new System.Text.StringBuilder();

            try {
                var enumerable = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableThrows(5);

                var enumerator = Bridge.getEnumerator(enumerable, System.Int32);
                for (var i = 0; i < 100; i = (i + 1) | 0) {
                    enumerator.System$Collections$IEnumerator$moveNext();
                    sb.appendLine("got " + enumerator[Bridge.geti(enumerator, "System$Collections$Generic$IEnumerator$1$System$Int32$getCurrent$1", "getCurrent$1")]());
                }
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                sb.appendLine("caught exception");
            }

            this.assertEqual(sb.toString(), "yielding 1\nyielding 2\nthrowing\nin finally\ncaught exception\n");
        },
        enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters: function () {
            var $t, $t1;
            var sb = new System.Text.StringBuilder();

            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableMutateParameter(3);
            $t = Bridge.getEnumerator(enm, System.Int32);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                sb.appendLine(i.toString());
            }
            $t1 = Bridge.getEnumerator(enm, System.Int32);
            while ($t1.moveNext()) {
                var i1 = $t1.getCurrent();
                sb.appendLine(i1.toString());
            }

            this.assertEqual(sb.toString(), "3\n2\n1\n3\n2\n1\n");
        },
        differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals: function () {
            var sb = new System.Text.StringBuilder();

            var enumerable = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableSimple(3);
            var enm1 = Bridge.getEnumerator(enumerable, System.Int32);
            var enm2 = Bridge.getEnumerator(enumerable, System.Int32);

            while (enm1.System$Collections$IEnumerator$moveNext()) {
                enm2.System$Collections$IEnumerator$moveNext();
                sb.appendLine(enm1[Bridge.geti(enm1, "System$Collections$Generic$IEnumerator$1$System$Int32$getCurrent$1", "getCurrent$1")]().toString());
                sb.appendLine(enm2[Bridge.geti(enm2, "System$Collections$Generic$IEnumerator$1$System$Int32$getCurrent$1", "getCurrent$1")]().toString());
            }

            this.assertEqual(sb.toString(), "0\n0\n1\n1\n2\n2\n-1\n-1\n");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C", {
        _sb: null,
        ctor: function (sb) {
            this.$initialize();
            this._sb = sb;
        },
        getEnumerator: function (n) {
            var $yield = [];
            try {
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    this._sb.appendLine("yielding " + i);
                    $yield.push(i);
                }
                this._sb.appendLine("yielding -1");
                $yield.push(-1);
            }
            finally {
                this._sb.appendLine("in finally");
            }
            return System.Array.toEnumerator($yield, System.Int32);
        },
        getEnumeratorThrows: function () {
            var $yield = [];
            try {
                this._sb.appendLine("yielding 1");
                $yield.push(1);
                this._sb.appendLine("yielding 2");
                $yield.push(2);
                this._sb.appendLine("throwing");
                throw new System.Exception("test");
                this._sb.appendLine("yielding 3");
                $yield.push(3);
            }
            finally {
                this._sb.appendLine("in finally");
            }
            return System.Array.toEnumerator($yield, System.Int32);
        },
        getEnumerable: function (n) {
            var $yield = [];
            try {
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    this._sb.appendLine("yielding " + i);
                    $yield.push(i);
                }
                this._sb.appendLine("yielding -1");
                $yield.push(-1);
            }
            finally {
                this._sb.appendLine("in finally");
            }
            n = 0; // Just to verify that the value of 'n' is not reused in the next call
            return System.Array.toEnumerable($yield);
        },
        getEnumerableThrows: function (n) {
            var $yield = [];
            try {
                this._sb.appendLine("yielding 1");
                $yield.push(1);
                this._sb.appendLine("yielding 2");
                $yield.push(2);
                this._sb.appendLine("throwing");
                throw new System.Exception("test");
                this._sb.appendLine("yielding 3");
                $yield.push(3);
            }
            finally {
                this._sb.appendLine("in finally");
            }
            return System.Array.toEnumerable($yield);
        },
        getEnumerableMutateParameter: function (n) {
            var $yield = [];
            for (; n > 0; n = (n - 1) | 0) {
                $yield.push(n);
            }
            return System.Array.toEnumerable($yield);
        },
        getEnumerableSimple: function (n) {
            var $yield = [];
            for (var i = 0; i < n; i = (i + 1) | 0) {
                $yield.push(i);
            }
            $yield.push(-1);
            return System.Array.toEnumerable($yield);
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ListTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.List$1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.Generic.List$1(System.Int32)), "FullName");
            var list = new (System.Collections.Generic.List$1(System.Int32))();
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.List$1(System.Int32)), "is int[] should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.IList$1(System.Int32)), "is IList<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.ICollection$1(System.Int32)), "is ICollection<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
        },
        defaultConstructorWorks: function () {
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            Bridge.Test.Assert.areEqual(0, l.getCount());
        },
        constructorWithCapacityWorks: function () {
            var l = new (System.Collections.Generic.List$1(System.Int32))(12);
            Bridge.Test.Assert.areEqual(0, l.getCount());
        },
        constructingFromArrayWorks: function () {
            var arr = [1, 4, 7, 8];
            var l = new (System.Collections.Generic.List$1(System.Int32))(arr);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, arr));
            Bridge.Test.Assert.areDeepEqual(arr, l.toArray());
        },
        constructingFromListWorks: function () {
            var arr = new (System.Collections.Generic.List$1(System.Int32))([1, 4, 7, 8]);
            var l = new (System.Collections.Generic.List$1(System.Int32))(arr);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, arr));
            Bridge.Test.Assert.areDeepEqual(arr, l);
        },
        constructingFromIEnumerableWorks: function () {
            var enm = Bridge.cast(new (System.Collections.Generic.List$1(System.Int32))([1, 4, 7, 8]), System.Collections.Generic.IEnumerable$1(System.Int32));
            var l = new (System.Collections.Generic.List$1(System.Int32))(enm);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, enm));
            Bridge.Test.Assert.areDeepEqual([1, 4, 7, 8], l.toArray());
        },
        countWorks: function () {
            Bridge.Test.Assert.areEqual(0, new (System.Collections.Generic.List$1(String))().getCount());
            Bridge.Test.Assert.areEqual(1, $_.Bridge.ClientTest.Collections.Generic.ListTests.f1(new (System.Collections.Generic.List$1(String))()).getCount());
            Bridge.Test.Assert.areEqual(2, $_.Bridge.ClientTest.Collections.Generic.ListTests.f2(new (System.Collections.Generic.List$1(String))()).getCount());
        },
        indexingWorks: function () {
            Bridge.Test.Assert.areEqual("x", $_.Bridge.ClientTest.Collections.Generic.ListTests.f3(new (System.Collections.Generic.List$1(String))()).getItem(0));
            Bridge.Test.Assert.areEqual("y", $_.Bridge.ClientTest.Collections.Generic.ListTests.f4(new (System.Collections.Generic.List$1(String))()).getItem(1));
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator($_.Bridge.ClientTest.Collections.Generic.ListTests.f5(new (System.Collections.Generic.List$1(String))()));
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result = System.String.concat(result, s);
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        getEnumeratorWorks: function () {
            var e = $_.Bridge.ClientTest.Collections.Generic.ListTests.f6(new (System.Collections.Generic.List$1(String))()).getEnumerator();
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        addWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f7(new (System.Collections.Generic.List$1(String))());
            l.add("a");
            Bridge.Test.Assert.areDeepEqual(["x", "y", "a"], l.toArray());
        },
        addRangeWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f8(new (System.Collections.Generic.List$1(String))());
            l.addRange(["a", "b", "c"]);
            Bridge.Test.Assert.areDeepEqual(["x", "y", "a", "b", "c"], l.toArray());
        },
        binarySearch1Works: function () {
            var arr = $_.Bridge.ClientTest.Collections.Generic.ListTests.f9(new (System.Collections.Generic.List$1(System.Int32))());

            Bridge.Test.Assert.areEqual(2, arr.binarySearch(3));
            Bridge.Test.Assert.true(arr.binarySearch(6) < 0);
        },
        binarySearch2Works: function () {
            var arr = $_.Bridge.ClientTest.Collections.Generic.ListTests.f10(new (System.Collections.Generic.List$1(System.Int32))());

            Bridge.Test.Assert.areEqual(3, arr.binarySearch(3, 2, 3));
            Bridge.Test.Assert.true(arr.binarySearch(2, 2, 4) < 0);
        },
        binarySearch3Works: function () {
            var arr = $_.Bridge.ClientTest.Collections.Generic.ListTests.f11(new (System.Collections.Generic.List$1(System.Int32))());

            Bridge.Test.Assert.areEqual(2, arr.binarySearch(3, new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer()));
            Bridge.Test.Assert.areEqual(-1, arr.binarySearch(6, new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer()));
        },
        binarySearch4Works: function () {
            var arr = $_.Bridge.ClientTest.Collections.Generic.ListTests.f12(new (System.Collections.Generic.List$1(System.Int32))());

            Bridge.Test.Assert.areEqual(3, arr.binarySearch(3, 2, 3, new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer()));
            Bridge.Test.Assert.true(arr.binarySearch(3, 2, 4, new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer()) < 0);
        },
        clearWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f13(new (System.Collections.Generic.List$1(String))());
            l.clear();
            Bridge.Test.Assert.areEqual(l.getCount(), 0);
        },
        containsWorks: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f14(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.true(list.contains("x"));
            Bridge.Test.Assert.false(list.contains("z"));
        },
        containsUsesEqualsMethod: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f15(new (System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C))());
            Bridge.Test.Assert.true(l.contains(new Bridge.ClientTest.Collections.Generic.ListTests.C(2)));
            Bridge.Test.Assert.false(l.contains(new Bridge.ClientTest.Collections.Generic.ListTests.C(4)));
        },
        copyToMethodSameBound: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f16(new (System.Collections.Generic.List$1(String))());

            var a1 = System.Array.init(3, null);
            l.copyTo(a1, 0);

            Bridge.Test.Assert.areEqual$1("0", a1[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("1", a1[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("2", a1[2], "Element 2");
        },
        copyToMethodOffsetBound: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f17(new (System.Collections.Generic.List$1(String))());

            var a2 = System.Array.init(5, null);
            l.copyTo(a2, 1);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("0", a2[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("1", a2[2], "Element 2");
            Bridge.Test.Assert.areEqual$1("2", a2[3], "Element 3");
            Bridge.Test.Assert.areEqual$1(null, a2[4], "Element 4");
        },
        copyToMethodIllegalBound: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f18(new (System.Collections.Generic.List$1(String))());

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                l.copyTo(null, 0);
            }, "null");

            var a1 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a1, 0);
            }, "Short array");

            var a2 = System.Array.init(3, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a2, 1);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                l.copyTo(a2, -1);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a2, 3);
            }, "Start index 3");
        },
        sliceWithoutEndWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["c", "d"], $_.Bridge.ClientTest.Collections.Generic.ListTests.f19(new (System.Collections.Generic.List$1(String))()).slice(2).toArray());
        },
        sliceWithEndWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["b", "c"], $_.Bridge.ClientTest.Collections.Generic.ListTests.f20(new (System.Collections.Generic.List$1(String))()).slice(1, 3).toArray());
        },
        foreachWithListItemCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from($_.Bridge.ClientTest.Collections.Generic.ListTests.f21(new (System.Collections.Generic.List$1(String))())).forEach(function (s) {
                    result = System.String.concat(result, s);
                });
            Bridge.Test.Assert.areEqual("abc", result);
        },
        foreachWithListCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from($_.Bridge.ClientTest.Collections.Generic.ListTests.f22(new (System.Collections.Generic.List$1(String))())).forEach(function (s, i) {
                    result = System.String.concat(result, (System.String.concat(s, i)));
                });
            Bridge.Test.Assert.areEqual("a0b1c2", result);
        },
        indexOfWithoutStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, ["a", "b", "c", "b"].indexOf("b"));
        },
        indexOfWithoutStartIndexUsesEqualsMethod: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f23(new (System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C))());
            Bridge.Test.Assert.areEqual(1, l.indexOf(new Bridge.ClientTest.Collections.Generic.ListTests.C(2)));
            Bridge.Test.Assert.areEqual(-1, l.indexOf(new Bridge.ClientTest.Collections.Generic.ListTests.C(4)));
        },
        indexOfWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(3, $_.Bridge.ClientTest.Collections.Generic.ListTests.f24(new (System.Collections.Generic.List$1(String))()).indexOf("b", 2));
        },
        indexOfWithStartIndexUsesEqualsMethod: function () {
            Bridge.Test.Assert.areEqual(3, $_.Bridge.ClientTest.Collections.Generic.ListTests.f25(new (System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C))()).indexOf(new Bridge.ClientTest.Collections.Generic.ListTests.C(2), 2));
        },
        insertWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f26(new (System.Collections.Generic.List$1(String))());
            l.insert(1, "a");
            Bridge.Test.Assert.areDeepEqual(["x", "a", "y"], l.toArray());
        },
        insertRangeWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f27(new (System.Collections.Generic.List$1(String))());

            l.insertRange(1, ["a", "b"]);
            Bridge.Test.Assert.areDeepEqual(["x", "a", "b", "y"], l.toArray());

            l.insertRange(0, ["q", "q"]);
            Bridge.Test.Assert.areDeepEqual(["q", "q", "x", "a", "b", "y"], l.toArray());
        },
        joinWithoutDelimiterWorks: function () {
            Bridge.Test.Assert.areEqual("a,b,c,b", $_.Bridge.ClientTest.Collections.Generic.ListTests.f28(new (System.Collections.Generic.List$1(String))()).join());
        },
        joinWithDelimiterWorks: function () {
            Bridge.Test.Assert.areEqual("a|b|c|b", $_.Bridge.ClientTest.Collections.Generic.ListTests.f29(new (System.Collections.Generic.List$1(String))()).join("|"));
        },
        removeWorks: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f30(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.true(list.remove("a"));
            Bridge.Test.Assert.areDeepEqual(["b", "c", "a"], list.toArray());
        },
        removeReturnsFalseIfTheElementWasNotFound: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f31(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.false(list.remove("d"));
            Bridge.Test.Assert.areDeepEqual(["a", "b", "c", "a"], list.toArray());
        },
        removeCanRemoveNullItem: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f32(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.true(list.remove(null));
            Bridge.Test.Assert.areDeepEqual(["a", "c", null], list.toArray());
        },
        removeUsesEqualsMethod: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f33(new (System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C))());
            list.remove(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            Bridge.Test.Assert.areEqual(2, list.getCount());
            Bridge.Test.Assert.areEqual(1, list.getItem(0).i);
            Bridge.Test.Assert.areEqual(3, list.getItem(1).i);
        },
        removeAtWorks: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f34(new (System.Collections.Generic.List$1(String))());
            list.removeAt(1);
            Bridge.Test.Assert.areDeepEqual(["a", "c", "a"], list.toArray());
        },
        removeRangeWorks: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f35(new (System.Collections.Generic.List$1(String))());
            list.removeRange(1, 2);
            Bridge.Test.Assert.areDeepEqual(["a", "d"], list.toArray());
        },
        reverseWorks: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f36(new (System.Collections.Generic.List$1(System.Int32))());
            list.reverse();
            Bridge.Test.Assert.areDeepEqual([2, 3, 1, 4, 3, 1], list.toArray());
        },
        sortWithDefaultCompareWorks: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f37(new (System.Collections.Generic.List$1(System.Int32))());
            list.sort();
            Bridge.Test.Assert.areDeepEqual([1, 2, 4, 6, 6], list.toArray());
        },
        sortWithCompareCallbackWorks: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f38(new (System.Collections.Generic.List$1(System.Int32))());
            list.sort($_.Bridge.ClientTest.Collections.Generic.ListTests.f39);
            Bridge.Test.Assert.areDeepEqual([6, 6, 4, 2, 1], list.toArray());
        },
        sortWithIComparerWorks: function () {
            var $t;
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f40(new (System.Collections.Generic.List$1(System.Int32))());
            ($t=new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer(), list.sort(Bridge.fn.bind($t, $t.compare)));
            Bridge.Test.Assert.areDeepEqual([6, 6, 4, 2, 1], list.toArray());
        },
        foreachWhenCastToIEnumerableWorks: function () {
            var $t;
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f41(new (System.Collections.Generic.List$1(String))());
            var result = "";
            $t = Bridge.getEnumerator(list, String);
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result = System.String.concat(result, s);
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var l = Bridge.cast($_.Bridge.ClientTest.Collections.Generic.ListTests.f42(new (System.Collections.Generic.List$1(String))()), System.Collections.Generic.IEnumerable$1(String));
            var e = Bridge.getEnumerator(l, String);
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        iCollectionCountWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f43(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(l, String));
        },
        iCollectionAddWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f44(new (System.Collections.Generic.List$1(String))());
            System.Array.add(l, "a", String);
            Bridge.Test.Assert.areDeepEqual(["x", "y", "z", "a"], Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        iCollectionClearWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f45(new (System.Collections.Generic.List$1(String))());
            System.Array.clear(l, String);
            Bridge.Test.Assert.areDeepEqual(System.Array.init(0, null), Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        iCollectionContainsWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f46(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.true(System.Array.contains(l, "y", String));
            Bridge.Test.Assert.false(System.Array.contains(l, "a", String));
        },
        iCollectionContainsUsesEqualsMethod: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f47(new (System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C))());
            Bridge.Test.Assert.true(System.Array.contains(l, new Bridge.ClientTest.Collections.Generic.ListTests.C(2), Bridge.ClientTest.Collections.Generic.ListTests.C));
            Bridge.Test.Assert.false(System.Array.contains(l, new Bridge.ClientTest.Collections.Generic.ListTests.C(4), Bridge.ClientTest.Collections.Generic.ListTests.C));
        },
        iCollectionRemoveWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f48(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.true(System.Array.remove(l, "y", String));
            Bridge.Test.Assert.false(System.Array.remove(l, "a", String));

            var ll = Bridge.as(l, System.Collections.Generic.List$1(String));
            Bridge.Test.Assert.areDeepEqual(["x", "z"], ll.toArray());
        },
        iCollectionRemoveCanRemoveNullItem: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f49(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.true(System.Array.remove(list, null, String));
            Bridge.Test.Assert.areDeepEqual(["a", "c", null], Bridge.cast(list, System.Collections.Generic.List$1(String)).toArray());
        },
        iCollectionRemoveUsesEqualsMethod: function () {
            var list = $_.Bridge.ClientTest.Collections.Generic.ListTests.f50(new (System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C))());
            System.Array.remove(list, new Bridge.ClientTest.Collections.Generic.ListTests.C(2), Bridge.ClientTest.Collections.Generic.ListTests.C);
            Bridge.Test.Assert.areEqual(2, System.Array.getCount(list, Bridge.ClientTest.Collections.Generic.ListTests.C));
            Bridge.Test.Assert.areEqual(1, System.Array.getItem(list, 0, Bridge.ClientTest.Collections.Generic.ListTests.C).i);
            Bridge.Test.Assert.areEqual(3, System.Array.getItem(list, 1, Bridge.ClientTest.Collections.Generic.ListTests.C).i);
        },
        iListIndexingWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f51(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1, String));
            System.Array.setItem(l, 1, "a", String);
            Bridge.Test.Assert.areDeepEqual(["x", "a", "z"], Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        iListIndexOfWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f52(new (System.Collections.Generic.List$1(String))());
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, "y", 0, null, String));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, "a", 0, null, String));
        },
        iListIndexOfUsesEqualsMethod: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f53(new (System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C))());
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, new Bridge.ClientTest.Collections.Generic.ListTests.C(2), 0, null, Bridge.ClientTest.Collections.Generic.ListTests.C));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, new Bridge.ClientTest.Collections.Generic.ListTests.C(4), 0, null, Bridge.ClientTest.Collections.Generic.ListTests.C));
        },
        iListInsertWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f54(new (System.Collections.Generic.List$1(String))());
            System.Array.insert(l, 1, "a", String);
            Bridge.Test.Assert.areDeepEqual(["x", "a", "y", "z"], Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        iListRemoveAtWorks: function () {
            var l = $_.Bridge.ClientTest.Collections.Generic.ListTests.f55(new (System.Collections.Generic.List$1(String))());
            System.Array.removeAt(l, 1, String);
            Bridge.Test.Assert.areDeepEqual(["x", "z"], Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        toArrayWorks: function () {
            var l = new (System.Collections.Generic.List$1(String))();
            l.add("a");
            l.add("b");
            var actual = l.toArray();
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, actual));
            Bridge.Test.Assert.true(Bridge.is(actual, Array));
            Bridge.Test.Assert.areDeepEqual(["a", "b"], actual);
        }
    });

    Bridge.ns("Bridge.ClientTest.Collections.Generic.ListTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Collections.Generic.ListTests, {
        f1: function (_o32) {
            _o32.add("x");
            return _o32;
        },
        f2: function (_o33) {
            _o33.add("x");
            _o33.add("y");
            return _o33;
        },
        f3: function (_o34) {
            _o34.add("x");
            _o34.add("y");
            return _o34;
        },
        f4: function (_o35) {
            _o35.add("x");
            _o35.add("y");
            return _o35;
        },
        f5: function (_o36) {
            _o36.add("x");
            _o36.add("y");
            return _o36;
        },
        f6: function (_o37) {
            _o37.add("x");
            _o37.add("y");
            return _o37;
        },
        f7: function (_o38) {
            _o38.add("x");
            _o38.add("y");
            return _o38;
        },
        f8: function (_o39) {
            _o39.add("x");
            _o39.add("y");
            return _o39;
        },
        f9: function (_o40) {
            _o40.add(1);
            _o40.add(2);
            _o40.add(3);
            _o40.add(3);
            _o40.add(4);
            _o40.add(5);
            return _o40;
        },
        f10: function (_o41) {
            _o41.add(1);
            _o41.add(2);
            _o41.add(3);
            _o41.add(3);
            _o41.add(4);
            _o41.add(5);
            return _o41;
        },
        f11: function (_o42) {
            _o42.add(1);
            _o42.add(2);
            _o42.add(3);
            _o42.add(3);
            _o42.add(4);
            _o42.add(5);
            return _o42;
        },
        f12: function (_o43) {
            _o43.add(1);
            _o43.add(2);
            _o43.add(3);
            _o43.add(3);
            _o43.add(4);
            _o43.add(5);
            return _o43;
        },
        f13: function (_o44) {
            _o44.add("x");
            _o44.add("y");
            return _o44;
        },
        f14: function (_o45) {
            _o45.add("x");
            _o45.add("y");
            return _o45;
        },
        f15: function (_o46) {
            _o46.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(1));
            _o46.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            _o46.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(3));
            return _o46;
        },
        f16: function (_o47) {
            _o47.add("0");
            _o47.add("1");
            _o47.add("2");
            return _o47;
        },
        f17: function (_o48) {
            _o48.add("0");
            _o48.add("1");
            _o48.add("2");
            return _o48;
        },
        f18: function (_o49) {
            _o49.add("0");
            _o49.add("1");
            _o49.add("2");
            return _o49;
        },
        f19: function (_o50) {
            _o50.add("a");
            _o50.add("b");
            _o50.add("c");
            _o50.add("d");
            return _o50;
        },
        f20: function (_o51) {
            _o51.add("a");
            _o51.add("b");
            _o51.add("c");
            _o51.add("d");
            return _o51;
        },
        f21: function (_o52) {
            _o52.add("a");
            _o52.add("b");
            _o52.add("c");
            return _o52;
        },
        f22: function (_o53) {
            _o53.add("a");
            _o53.add("b");
            _o53.add("c");
            return _o53;
        },
        f23: function (_o54) {
            _o54.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(1));
            _o54.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            _o54.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(3));
            return _o54;
        },
        f24: function (_o55) {
            _o55.add("a");
            _o55.add("b");
            _o55.add("c");
            _o55.add("b");
            return _o55;
        },
        f25: function (_o56) {
            _o56.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(1));
            _o56.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            _o56.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(3));
            _o56.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            return _o56;
        },
        f26: function (_o57) {
            _o57.add("x");
            _o57.add("y");
            return _o57;
        },
        f27: function (_o58) {
            _o58.add("x");
            _o58.add("y");
            return _o58;
        },
        f28: function (_o59) {
            _o59.add("a");
            _o59.add("b");
            _o59.add("c");
            _o59.add("b");
            return _o59;
        },
        f29: function (_o60) {
            _o60.add("a");
            _o60.add("b");
            _o60.add("c");
            _o60.add("b");
            return _o60;
        },
        f30: function (_o61) {
            _o61.add("a");
            _o61.add("b");
            _o61.add("c");
            _o61.add("a");
            return _o61;
        },
        f31: function (_o62) {
            _o62.add("a");
            _o62.add("b");
            _o62.add("c");
            _o62.add("a");
            return _o62;
        },
        f32: function (_o63) {
            _o63.add("a");
            _o63.add(null);
            _o63.add("c");
            _o63.add(null);
            return _o63;
        },
        f33: function (_o64) {
            _o64.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(1));
            _o64.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            _o64.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(3));
            return _o64;
        },
        f34: function (_o65) {
            _o65.add("a");
            _o65.add("b");
            _o65.add("c");
            _o65.add("a");
            return _o65;
        },
        f35: function (_o66) {
            _o66.add("a");
            _o66.add("b");
            _o66.add("c");
            _o66.add("d");
            return _o66;
        },
        f36: function (_o67) {
            _o67.add(1);
            _o67.add(3);
            _o67.add(4);
            _o67.add(1);
            _o67.add(3);
            _o67.add(2);
            return _o67;
        },
        f37: function (_o68) {
            _o68.add(1);
            _o68.add(6);
            _o68.add(6);
            _o68.add(4);
            _o68.add(2);
            return _o68;
        },
        f38: function (_o69) {
            _o69.add(1);
            _o69.add(6);
            _o69.add(6);
            _o69.add(4);
            _o69.add(2);
            return _o69;
        },
        f39: function (x, y) {
            return ((y - x) | 0);
        },
        f40: function (_o70) {
            _o70.add(1);
            _o70.add(6);
            _o70.add(6);
            _o70.add(4);
            _o70.add(2);
            return _o70;
        },
        f41: function (_o71) {
            _o71.add("x");
            _o71.add("y");
            return _o71;
        },
        f42: function (_o72) {
            _o72.add("x");
            _o72.add("y");
            return _o72;
        },
        f43: function (_o73) {
            _o73.add("x");
            _o73.add("y");
            _o73.add("z");
            return _o73;
        },
        f44: function (_o74) {
            _o74.add("x");
            _o74.add("y");
            _o74.add("z");
            return _o74;
        },
        f45: function (_o75) {
            _o75.add("x");
            _o75.add("y");
            _o75.add("z");
            return _o75;
        },
        f46: function (_o76) {
            _o76.add("x");
            _o76.add("y");
            _o76.add("z");
            return _o76;
        },
        f47: function (_o77) {
            _o77.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(1));
            _o77.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            _o77.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(3));
            return _o77;
        },
        f48: function (_o78) {
            _o78.add("x");
            _o78.add("y");
            _o78.add("z");
            return _o78;
        },
        f49: function (_o79) {
            _o79.add("a");
            _o79.add(null);
            _o79.add("c");
            _o79.add(null);
            return _o79;
        },
        f50: function (_o80) {
            _o80.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(1));
            _o80.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            _o80.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(3));
            return _o80;
        },
        f51: function (_o81) {
            _o81.add("x");
            _o81.add("y");
            _o81.add("z");
            return _o81;
        },
        f52: function (_o82) {
            _o82.add("x");
            _o82.add("y");
            _o82.add("z");
            return _o82;
        },
        f53: function (_o83) {
            _o83.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(1));
            _o83.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            _o83.add(new Bridge.ClientTest.Collections.Generic.ListTests.C(3));
            return _o83;
        },
        f54: function (_o84) {
            _o84.add("x");
            _o84.add("y");
            _o84.add("z");
            return _o84;
        },
        f55: function (_o85) {
            _o85.add("x");
            _o85.add("y");
            _o85.add("z");
            return _o85;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ListTests.C", {
        i: 0,
        ctor: function (i) {
            this.$initialize();
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Collections.Generic.ListTests.C) && this.i === Bridge.cast(o, Bridge.ClientTest.Collections.Generic.ListTests.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Int32)],
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Int32$compare"
            ]
        },
        compare: function (x, y) {
            return x === y ? 0 : (x > y ? -1 : 1);
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.ObjectModel.ReadOnlyCollection$1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32)), "FullName should be Array");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isClass(System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32)), "IsClass should be true");
            var list = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32))(System.Array.init(0, 0));
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32)), "is ReadOnlyCollection<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.IList$1(System.Int32)), "is IList<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.ICollection$1(System.Int32)), "is ICollection<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
        },
        constructorWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32))([41, 42, 43]);
            Bridge.Test.Assert.areEqual(3, l.getCount());
            Bridge.Test.Assert.areEqual(41, l.get(0));
            Bridge.Test.Assert.areEqual(42, l.get(1));
            Bridge.Test.Assert.areEqual(43, l.get(2));
        },
        countWorks: function () {
            Bridge.Test.Assert.areEqual(0, new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(System.Array.init(0, null)).getCount());
            Bridge.Test.Assert.areEqual(1, new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(System.Array.init(1, null)).getCount());
            Bridge.Test.Assert.areEqual(2, new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(System.Array.init(2, null)).getCount());
        },
        indexingWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y"]);
            Bridge.Test.Assert.areEqual("x", l.get(0));
            Bridge.Test.Assert.areEqual("y", l.get(1));
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator(new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y"]));
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result = System.String.concat(result, s);
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        getEnumeratorWorks: function () {
            var e = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y"]).getEnumerator();
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        containsWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y"]);
            Bridge.Test.Assert.true(l.contains("x"));
            Bridge.Test.Assert.false(l.contains("z"));
        },
        containsUsesEqualsMethod: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C))([new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(1), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(3)]);
            Bridge.Test.Assert.true(l.contains(new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2)));
            Bridge.Test.Assert.false(l.contains(new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(4)));
        },
        copyToMethodSameBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            var a1 = System.Array.init(3, null);
            l.copyTo(a1, 0);

            Bridge.Test.Assert.areEqual$1("0", a1[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("1", a1[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("2", a1[2], "Element 2");
        },
        copyToMethodOffsetBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            var a2 = System.Array.init(5, null);
            l.copyTo(a2, 1);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("0", a2[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("1", a2[2], "Element 2");
            Bridge.Test.Assert.areEqual$1("2", a2[3], "Element 3");
            Bridge.Test.Assert.areEqual$1(null, a2[4], "Element 4");
        },
        copyToMethodIllegalBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                l.copyTo(null, 0);
            }, "null");

            var a1 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a1, 0);
            }, "Short array");

            var a2 = System.Array.init(3, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a2, 1);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                l.copyTo(a2, -1);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                l.copyTo(a2, 3);
            }, "Start index 3");
        },
        copyToMethodWhenCastToIListSameBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            var a1 = System.Array.init(3, null);
            System.Array.copyTo(l, a1, 0, String);

            Bridge.Test.Assert.areEqual$1("0", a1[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("1", a1[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("2", a1[2], "Element 2");
        },
        copyToMethodWhenCastToIListOffsetBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            var a2 = System.Array.init(5, null);
            System.Array.copyTo(l, a2, 1, String);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("0", a2[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("1", a2[2], "Element 2");
            Bridge.Test.Assert.areEqual$1("2", a2[3], "Element 3");
            Bridge.Test.Assert.areEqual$1(null, a2[4], "Element 4");
        },
        copyToMethodWhenCastToIListIllegalBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, String);
            }, "null");

            var a1 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a1, 0, String);
            }, "Short array");

            var a2 = System.Array.init(3, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a2, 1, String);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a2, -1, String);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a2, 3, String);
            }, "Start index 3");
        },
        copyToMethodWhenCastToICollectionSameBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            var a1 = System.Array.init(3, null);
            System.Array.copyTo(l, a1, 0, String);

            Bridge.Test.Assert.areEqual$1("0", a1[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("1", a1[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("2", a1[2], "Element 2");
        },
        copyToMethodWhenCastToICollectionOffsetBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            var a2 = System.Array.init(5, null);
            System.Array.copyTo(l, a2, 1, String);

            Bridge.Test.Assert.areEqual$1(null, a2[0], "Element 0");
            Bridge.Test.Assert.areEqual$1("0", a2[1], "Element 1");
            Bridge.Test.Assert.areEqual$1("1", a2[2], "Element 2");
            Bridge.Test.Assert.areEqual$1("2", a2[3], "Element 3");
            Bridge.Test.Assert.areEqual$1(null, a2[4], "Element 4");
        },
        copyToMethodWhenCastToICollectionIllegalBound: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["0", "1", "2"]);

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, String);
            }, "null");

            var a1 = System.Array.init(2, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a1, 0, String);
            }, "Short array");

            var a2 = System.Array.init(3, null);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a2, 1, String);
            }, "Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a2, -1, String);
            }, "Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a2, 3, String);
            }, "Start index 3");
        },
        indexOfWorks: function () {
            Bridge.Test.Assert.areEqual(1, new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["a", "b", "c", "b"]).indexOf("b"));
            Bridge.Test.Assert.areEqual(1, new (System.Collections.ObjectModel.ReadOnlyCollection$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C))([new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(1), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(3), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2)]).indexOf(new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2)));
        },
        foreachWhenCastToIEnumerableWorks: function () {
            var $t;
            var list = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y"]);
            var result = "";
            $t = Bridge.getEnumerator(list, String);
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result = System.String.concat(result, s);
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var l = Bridge.cast(new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y"]), System.Collections.Generic.IEnumerable$1(String));
            var e = Bridge.getEnumerator(l, String);
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("x", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.true(e.System$Collections$IEnumerator$moveNext());
            Bridge.Test.Assert.areEqual("y", e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$String$getCurrent$1", "getCurrent$1")]());
            Bridge.Test.Assert.false(e.System$Collections$IEnumerator$moveNext());
        },
        iCollectionCountWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y", "z"]);
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(l, String));
        },
        iCollectionIsReadOnlyWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(System.Array.init(0, null));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(l, String));
        },
        iCollectionContainsWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y", "z"]);
            Bridge.Test.Assert.true(System.Array.contains(l, "y", String));
            Bridge.Test.Assert.false(System.Array.contains(l, "a", String));
        },
        iCollectionContainsUsesEqualsMethod: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C))([new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(1), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(3)]);
            Bridge.Test.Assert.true(System.Array.contains(l, new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2), Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C));
            Bridge.Test.Assert.false(System.Array.contains(l, new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(4), Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C));
        },
        iListIndexingWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y", "z"]);
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1, String));
        },
        iListIndexOfWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(["x", "y", "z"]);
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, "y", 0, null, String));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, "a", 0, null, String));
        },
        iListIndexOfUsesEqualsMethod: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C))([new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(1), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2), new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(3)]);
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(2), 0, null, Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, new Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C(4), 0, null, Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C));
        },
        iListIsReadOnlyWorks: function () {
            var l = new (System.Collections.ObjectModel.ReadOnlyCollection$1(String))(System.Array.init(0, null));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(l, String));
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C", {
        i: 0,
        ctor: function (i) {
            this.$initialize();
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C) && this.i === Bridge.cast(o, Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.WeakMapTests", {
        gettingSettingAndDeletingWorks: function () {
            // AppVeyor Chutzpah engine adjustment
            if (Bridge.ClientTest.Utilities.BrowserHelper.isPhantomJs()) {
                Bridge.Test.Assert.true$1(true, "Not running WeapMap tests as not supported in PhantomJS. See https://github.com/ariya/phantomjs/issues/13652");
                return;
            }

            var someValue = Bridge.merge(new Bridge.ClientTest.Collections.Generic.WeakMapTests.SomeCustomClass(), {
                setSomeProperty: 456
            } );

            var someKey = new Bridge.ClientTest.Collections.Generic.WeakMapTests.SomeCustomClass();
            var someOtherKey = new Bridge.ClientTest.Collections.Generic.WeakMapTests.SomeCustomClass();

            Bridge.Test.Assert.areEqual$1(someKey, someOtherKey, "Keys sanity check"); //sanity check

            var amap = new WeakMap();
            amap.set(someKey, someValue);

            Bridge.Test.Assert.true$1(amap.has(someKey), "Has someKey");
            Bridge.Test.Assert.false$1(amap.has(someOtherKey), "Does not have someOtherKey");
            var v = amap.get(someKey);
            Bridge.Test.Assert.notNull$1(v, "Get not null");
            var typedV = Bridge.as(v, Bridge.ClientTest.Collections.Generic.WeakMapTests.SomeCustomClass);
            Bridge.Test.Assert.notNull$1(typedV, "Get not null SomeCustomClass");
            Bridge.Test.Assert.areEqual$1(typedV.getSomeProperty(), 456, "Check SomeProperty");
            Bridge.Test.Assert.areEqual$1(someValue, v, "Check references");

            Bridge.Test.Assert.true$1(amap.delete(someKey), "Delete someKey");
            Bridge.Test.Assert.false$1(amap.delete(someKey), "Another delete someKey");
            Bridge.Test.Assert.false$1(amap.has(someKey), "Check if has deleted someKey");

            Bridge.Test.Assert.areEqual$1(undefined, amap.get(someKey), "Get deleted someKey");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Generic.WeakMapTests.SomeCustomClass", {
        config: {
            properties: {
                SomeProperty: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.ArrayBufferTests", {
        getArray: function (b) {
            var result = System.Array.init(b.byteLength, 0);
            var a = new Uint8Array(b);
            for (var i = 0; i < result.length; i = (i + 1) | 0) {
                result[i] = a[i];
            }
            return result;
        },
        typePropertiesAreCorrect: function () {
            if (!Bridge.ClientTest.Utilities.BrowserHelper.isPhantomJs()) {
                Bridge.Test.Assert.areEqual$1("ArrayBuffer", Bridge.Reflection.getTypeFullName(ArrayBuffer), "FullName");
            } else {
                Bridge.Test.Assert.areEqual$1("Object", Bridge.Reflection.getTypeFullName(ArrayBuffer), "FullName");
            }

            var interfaces = Bridge.Reflection.getInterfaces(DataView);
            Bridge.Test.Assert.areEqual$1(0, interfaces.length, "Interface count should be empty");
        },
        constructorWorks: function () {
            var buf = new ArrayBuffer(14);
            Bridge.Test.Assert.true$1(Bridge.is(buf, ArrayBuffer), "is ArrayBuffer");
            Bridge.Test.Assert.areEqual$1(14, buf.byteLength, "ByteLength");
        },
        byteLengthPropertyWorks: function () {
            var buf = new ArrayBuffer(10);
            Bridge.Test.Assert.areEqual$1(10, buf.byteLength, "ByteLength");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.DataViewTests", {
        getView: function (content) {
            var result = new Uint8Array(content.length);
            for (var i = 0; i < content.length; i = (i + 1) | 0) {
                result[i] = content[i];
            }
            return new DataView(result.buffer);
        },
        typePropertiesAreCorrect: function () {
            if (!Bridge.ClientTest.Utilities.BrowserHelper.isPhantomJs()) {
                Bridge.Test.Assert.areEqual$1("DataView", Bridge.Reflection.getTypeFullName(DataView), "FullName");
            } else {
                Bridge.Test.Assert.areEqual$1("Object", Bridge.Reflection.getTypeFullName(DataView), "FullName");
            }

            var interfaces = Bridge.Reflection.getInterfaces(DataView);
            Bridge.Test.Assert.areEqual$1(0, interfaces.length, "Interface count should be empty");
        },
        arrayBufferOnlyConstructorWorks: function () {
            var b = new Uint8Array([2, 3, 5]).buffer;
            var view = new DataView(b);
            Bridge.Test.Assert.true$1(Bridge.is(view, DataView), "Should be DataView");
            Bridge.Test.Assert.areEqual$1(3, view.getInt8(1), "StartIndex should be correct");
        },
        arrayBufferAndByteOffsetConstructorWorks: function () {
            var b = new Uint8Array([2, 3, 5]).buffer;
            var view = new DataView(b, 1);
            Bridge.Test.Assert.true$1(Bridge.is(view, DataView), "Should be DataView");
            Bridge.Test.Assert.areEqual$1(5, view.getInt8(1), "StartIndex should be correct");
        },
        arrayBufferAndByteOffsetAndByteLengthConstructorWorks: function () {
            var b = new Uint8Array([2, 3, 5, 7, 2, 0]).buffer;
            var view = new DataView(b, 1, 3);
            Bridge.Test.Assert.true$1(Bridge.is(view, DataView), "Should be DataView");
            Bridge.Test.Assert.areEqual$1(5, view.getInt8(1), "StartIndex should be correct");
            Bridge.Test.Assert.throws$5(function () {
                view.getInt8(4);
            }, "Length should be correct");
        },
        getInt8Works: function () {
            var b = this.getView([3, 253]);
            Bridge.Test.Assert.areEqual$1(3, b.getInt8(0), "0");
            Bridge.Test.Assert.areEqual$1(-3, b.getInt8(1), "1");
        },
        getUint8Works: function () {
            var b = this.getView([3, 253]);
            Bridge.Test.Assert.areEqual$1(3, b.getUint8(0), "0");
            Bridge.Test.Assert.areEqual$1(253, b.getUint8(1), "1");
        },
        getInt16Works: function () {
            var b = this.getView([3, 253, 3, 4, 253, 3]);
            Bridge.Test.Assert.areEqual$1(-765, b.getInt16(0, true), "0, true");
            Bridge.Test.Assert.areEqual$1(1027, b.getInt16(2, true), "2, true");
            Bridge.Test.Assert.areEqual$1(1021, b.getInt16(4, true), "4, true");
            Bridge.Test.Assert.areEqual$1(1021, b.getInt16(0, false), "0, false");
            Bridge.Test.Assert.areEqual$1(772, b.getInt16(2, false), "2, false");
            Bridge.Test.Assert.areEqual$1(-765, b.getInt16(4, false), "4, false");
            Bridge.Test.Assert.areEqual$1(1021, b.getInt16(0), "0, default");
            Bridge.Test.Assert.areEqual$1(772, b.getInt16(2), "2, default");
            Bridge.Test.Assert.areEqual$1(-765, b.getInt16(4), "4, default");
        },
        getUint16Works: function () {
            var b = this.getView([3, 253, 3, 4, 253, 3]);
            Bridge.Test.Assert.areEqual$1(64771, b.getUint16(0, true), "0, true");
            Bridge.Test.Assert.areEqual$1(1027, b.getUint16(2, true), "2, true");
            Bridge.Test.Assert.areEqual$1(1021, b.getUint16(4, true), "4, true");
            Bridge.Test.Assert.areEqual$1(1021, b.getUint16(0, false), "0, false");
            Bridge.Test.Assert.areEqual$1(772, b.getUint16(2, false), "2, false");
            Bridge.Test.Assert.areEqual$1(64771, b.getUint16(4, false), "4, false");
            Bridge.Test.Assert.areEqual$1(1021, b.getUint16(0), "0, default");
            Bridge.Test.Assert.areEqual$1(772, b.getUint16(2), "2, default");
            Bridge.Test.Assert.areEqual$1(64771, b.getUint16(4), "4, default");
        },
        getInt32Works: function () {
            var b = this.getView([3, 0, 0, 253, 3, 0, 0, 4, 253, 0, 0, 3]);
            Bridge.Test.Assert.areEqual$1(-50331645, b.getInt32(0, true), "0, true");
            Bridge.Test.Assert.areEqual$1(67108867, b.getInt32(4, true), "4, true");
            Bridge.Test.Assert.areEqual$1(50331901, b.getInt32(8, true), "8, true");
            Bridge.Test.Assert.areEqual$1(50331901, b.getInt32(0, false), "0, false");
            Bridge.Test.Assert.areEqual$1(50331652, b.getInt32(4, false), "4, false");
            Bridge.Test.Assert.areEqual$1(-50331645, b.getInt32(8, false), "8, false");
            Bridge.Test.Assert.areEqual$1(50331901, b.getInt32(0), "0, default");
            Bridge.Test.Assert.areEqual$1(50331652, b.getInt32(4), "4, default");
            Bridge.Test.Assert.areEqual$1(-50331645, b.getInt32(8), "8, default");
        },
        getUint32Works: function () {
            var b = this.getView([3, 0, 0, 253, 3, 0, 0, 4, 253, 0, 0, 3]);
            Bridge.Test.Assert.areEqual$1(4244635651, b.getUint32(0, true), "0, true");
            Bridge.Test.Assert.areEqual$1(67108867, b.getUint32(4, true), "4, true");
            Bridge.Test.Assert.areEqual$1(50331901, b.getUint32(8, true), "8, true");
            Bridge.Test.Assert.areEqual$1(50331901, b.getUint32(0, false), "0, false");
            Bridge.Test.Assert.areEqual$1(50331652, b.getUint32(4, false), "4, false");
            Bridge.Test.Assert.areEqual$1(4244635651, b.getUint32(8, false), "8, false");
            Bridge.Test.Assert.areEqual$1(50331901, b.getUint32(0), "0, default");
            Bridge.Test.Assert.areEqual$1(50331652, b.getUint32(4), "4, default");
            Bridge.Test.Assert.areEqual$1(4244635651, b.getUint32(8), "8, default");
        },
        getFloat32Works: function () {
            var b = this.getView([255, 255, 255, 255, 0, 0, 192, 63, 63, 192, 0, 0]);
            Bridge.Test.Assert.areEqual$1(1.5, b.getFloat32(4, true), "4, true");
            Bridge.Test.Assert.areEqual$1(1.5, b.getFloat32(8, false), "8, false");
            Bridge.Test.Assert.areEqual$1(1.5, b.getFloat32(8), "8, default");
        },
        getFloat64Works: function () {
            var b = this.getView([255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 248, 63, 63, 248, 0, 0, 0, 0, 0, 0]);
            Bridge.Test.Assert.areEqual$1(1.5, b.getFloat64(8, true), "8, true");
            Bridge.Test.Assert.areEqual$1(1.5, b.getFloat64(16, false), "16, false");
            Bridge.Test.Assert.areEqual$1(1.5, b.getFloat64(16), "16, default");
        },
        setTest: function (populator, expected) {
            var b = new ArrayBuffer(expected.length);
            var v = new DataView(b);
            populator(v);
            var actual = new (System.Collections.Generic.List$1(System.Byte))();
            var ub = new Uint8Array(b);
            for (var i = 0; i < ub.length; i = (i + 1) | 0) {
                actual.add(ub[i]);
            }

            Bridge.Test.Assert.areEqual(expected, actual.toArray());
        },
        setInt8Works: function () {
            this.setTest($_.Bridge.ClientTest.Collections.Native.DataViewTests.f1, [0, 14, 242]);
        },
        setUint8Works: function () {
            this.setTest($_.Bridge.ClientTest.Collections.Native.DataViewTests.f2, [0, 14, 242]);
        },
        setInt16Works: function () {
            this.setTest($_.Bridge.ClientTest.Collections.Native.DataViewTests.f3, [0, 0, 255, 252, 252, 255, 255, 252, 0, 14, 14, 0, 0, 14, 0]);
        },
        setUint16Works: function () {
            this.setTest($_.Bridge.ClientTest.Collections.Native.DataViewTests.f4, [0, 0, 140, 35, 35, 140, 140, 35, 0, 14, 14, 0, 0, 14, 0]);
        },
        setInt32Works: function () {
            this.setTest($_.Bridge.ClientTest.Collections.Native.DataViewTests.f5, [0, 0, 0, 0, 255, 255, 255, 252, 252, 255, 255, 255, 255, 255, 255, 252, 0, 0, 0, 14, 14, 0, 0, 0, 0, 0, 0, 14, 0, 0]);
        },
        setUint32Works: function () {
            this.setTest($_.Bridge.ClientTest.Collections.Native.DataViewTests.f6, [0, 0, 0, 0, 207, 224, 18, 143, 143, 18, 224, 207, 207, 224, 18, 143, 0, 0, 0, 14, 14, 0, 0, 0, 0, 0, 0, 14, 0, 0]);
        },
        setFloat32Works: function () {
            this.setTest($_.Bridge.ClientTest.Collections.Native.DataViewTests.f7, [0, 0, 0, 0, 63, 192, 0, 0, 0, 0, 192, 63, 63, 192, 0, 0]);
        },
        setFloat64Works: function () {
            this.setTest($_.Bridge.ClientTest.Collections.Native.DataViewTests.f8, [0, 0, 0, 0, 0, 0, 0, 0, 63, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 63, 63, 248, 0, 0, 0, 0, 0, 0]);
        }
    });

    Bridge.ns("Bridge.ClientTest.Collections.Native.DataViewTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Collections.Native.DataViewTests, {
        f1: function (v) {
            v.setInt8(1, 14);
            v.setInt8(2, -14);
        },
        f2: function (v) {
            v.setUint8(1, 14);
            v.setUint8(2, 242);
        },
        f3: function (v) {
            v.setInt16(2, -4, false);
            v.setInt16(4, -4, true);
            v.setInt16(6, -4);
            v.setInt16(8, 14, false);
            v.setInt16(10, 14, true);
            v.setInt16(12, 14);
        },
        f4: function (v) {
            v.setUint16(2, 35875, false);
            v.setUint16(4, 35875, true);
            v.setUint16(6, 35875);
            v.setUint16(8, 14, false);
            v.setUint16(10, 14, true);
            v.setUint16(12, 14);
        },
        f5: function (v) {
            v.setInt32(4, -4, false);
            v.setInt32(8, -4, true);
            v.setInt32(12, -4);
            v.setInt32(16, 14, false);
            v.setInt32(20, 14, true);
            v.setInt32(24, 14);
        },
        f6: function (v) {
            v.setUint32(4, 3487568527, false);
            v.setUint32(8, 3487568527, true);
            v.setUint32(12, 3487568527);
            v.setUint32(16, 14, false);
            v.setUint32(20, 14, true);
            v.setUint32(24, 14);
        },
        f7: function (v) {
            v.setFloat32(4, 1.5, false);
            v.setFloat32(8, 1.5, true);
            v.setFloat32(12, 1.5);
        },
        f8: function (v) {
            v.setFloat64(8, 1.5, false);
            v.setFloat64(16, 1.5, true);
            v.setFloat64(24, 1.5);
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Float32ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[i] !== expected[i]) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", System.Single.format(actual[i], 'G')));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        lengthConstructorWorks: function () {
            var arr = new Float32Array(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Float32Array), "is Float32Array");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Float32Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Float32Array), "is Float32Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Float32Array([3, 8, 4]);
            var arr = new Float32Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Float32Array), "is Float32Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float32Array(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Float32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(20, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float32Array(buf, 16);
            Bridge.Test.Assert.true(Bridge.is(arr, Float32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(16, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float32Array(buf, 16, 12);
            Bridge.Test.Assert.true(Bridge.is(arr, Float32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(4, Float32Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Float32Array(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Float32Array(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setFloat32ArrayWorks: function () {
            var arr = new Float32Array(4);
            arr.set(new Float32Array([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setFloat32ArrayWithOffsetWorks: function () {
            var arr = new Float32Array(6);
            arr.set(new Float32Array([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Float32Array(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Float32Array(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Float32Array(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Float32Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Float32Array(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Float32Array(buf, 32);
            Bridge.Test.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Float32Array(23);
            Bridge.Test.Assert.areEqual$1(92, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Float32Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Float32Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Float32Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Single))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Float32Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Single))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Single$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Float32Array([3, 6, 2, 9, 5]), System.Collections.Generic.IEnumerable$1(System.Single));
            var l = new (System.Collections.Generic.List$1(System.Single))();
            var enm = Bridge.getEnumerator(arr, System.Single);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Single$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual([3, 6, 2, 9, 5], l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Float32Array([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.Single), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.Single), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.Single), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws<NotSupportedException>(() => coll.Clear(), "Clear");
            //Assert.Throws<NotSupportedException>(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Float32Array([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.Single), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.Single), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.Single), "Get item");
            System.Array.setItem(list, 3, 4, System.Single);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.Single), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws<NotSupportedException>(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Float32Array(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Float32Array(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Float32Array([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.Single);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.Single);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.Single);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.Single);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.Single);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.Single);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.Single);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Float64ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[i] !== expected[i]) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", System.Double.format(actual[i], 'G')));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        lengthConstructorWorks: function () {
            var arr = new Float64Array(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Float64Array), "is Float64Array");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Float64Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Float64Array), "is Float64Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Float64Array([3, 8, 4]);
            var arr = new Float64Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Float64Array), "is Float64Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float64Array(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Float64Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(10, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float64Array(buf, 8);
            Bridge.Test.Assert.true(Bridge.is(arr, Float64Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(9, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Float64Array(buf, 16, 6);
            Bridge.Test.Assert.true(Bridge.is(arr, Float64Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(6, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(8, Float64Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Float64Array(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Float64Array(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setFloat64ArrayWorks: function () {
            var arr = new Float64Array(4);
            arr.set(new Float64Array([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setFloat64ArrayWithOffsetWorks: function () {
            var arr = new Float64Array(6);
            arr.set(new Float64Array([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Float64Array(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Float64Array(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Float64Array(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(24, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Float64Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(24, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(104);
            var arr = new Float64Array(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(104);
            var arr = new Float64Array(buf, 56);
            Bridge.Test.Assert.areEqual$1(56, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Float64Array(23);
            Bridge.Test.Assert.areEqual$1(184, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Float64Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Float64Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Float64Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Double))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Float64Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Double))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Double$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Float64Array([3, 6, 2, 9, 5]), System.Collections.Generic.IEnumerable$1(System.Double));
            var l = new (System.Collections.Generic.List$1(System.Double))();
            var enm = Bridge.getEnumerator(arr, System.Double);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Double$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual([3, 6, 2, 9, 5], l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Float64Array([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.Double));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.Double), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.Double), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.Double), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws<NotSupportedException>(() => coll.Clear(), "Clear");
            //Assert.Throws<NotSupportedException>(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Float64Array([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.Double));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.Double), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.Double), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.Double), "Get item");
            System.Array.setItem(list, 3, 4, System.Double);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.Double), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws<NotSupportedException>(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Float64Array(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Float64Array(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Float64Array([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.Double);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.Double);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.Double);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.Double);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.Double);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.Double);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.Double);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Int16ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[i] !== expected[i]) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", actual[i]));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        lengthConstructorWorks: function () {
            var arr = new Int16Array(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int16Array), "is Int16Array");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Int16Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int16Array), "is Int16Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Int16Array([3, 8, 4]);
            var arr = new Int16Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int16Array), "is Int16Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int16Array(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Int16Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(40, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int16Array(buf, 16);
            Bridge.Test.Assert.true(Bridge.is(arr, Int16Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(32, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int16Array(buf, 16, 12);
            Bridge.Test.Assert.true(Bridge.is(arr, Int16Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(2, Int16Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Int16Array(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Int16Array(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setInt16ArrayWorks: function () {
            var arr = new Int16Array(4);
            arr.set(new Int16Array([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setInt16ArrayWithOffsetWorks: function () {
            var arr = new Int16Array(6);
            arr.set(new Int16Array([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Int16Array(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Int16Array(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Int16Array(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(6, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Int16Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(6, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int16Array(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int16Array(buf, 32);
            Bridge.Test.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Int16Array(23);
            Bridge.Test.Assert.areEqual$1(46, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Int16Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Int16Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Int16Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Int16Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int16$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Int16Array([3, 6, 2, 9, 5]), System.Collections.Generic.IEnumerable$1(System.Int16));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.Int16);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int16$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual([3, 6, 2, 9, 5], l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Int16Array([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.Int16));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.Int16), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.Int16), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.Int16), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws<NotSupportedException>(() => coll.Clear(), "Clear");
            //Assert.Throws<NotSupportedException>(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Int16Array([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.Int16));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.Int16), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.Int16), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.Int16), "Get item");
            System.Array.setItem(list, 3, 4, System.Int16);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.Int16), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws<NotSupportedException>(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Int16Array(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Int16Array(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Int16Array([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.Int16);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.Int16);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.Int16);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.Int16);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.Int16);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.Int16);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.Int16);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Int32ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[i] !== expected[i]) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", actual[i]));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        lengthConstructorWorks: function () {
            var arr = new Int32Array(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int32Array), "is Int32Array");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Int32Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int32Array), "is Int32Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Int32Array([3, 8, 4]);
            var arr = new Int32Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int32Array), "is Int32Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int32Array(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Int32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(20, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int32Array(buf, 16);
            Bridge.Test.Assert.true(Bridge.is(arr, Int32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(16, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int32Array(buf, 16, 12);
            Bridge.Test.Assert.true(Bridge.is(arr, Int32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(4, Int32Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Int32Array(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Int32Array(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setInt32ArrayWorks: function () {
            var arr = new Int32Array(4);
            arr.set(new Int32Array([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setInt32ArrayWithOffsetWorks: function () {
            var arr = new Int32Array(6);
            arr.set(new Int32Array([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Int32Array(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Int32Array(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Int32Array(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Int32Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int32Array(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int32Array(buf, 32);
            Bridge.Test.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Int32Array(23);
            Bridge.Test.Assert.areEqual$1(92, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Int32Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Int32Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Int32Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Int32Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Int32Array([3, 6, 2, 9, 5]), System.Collections.Generic.IEnumerable$1(System.Int32));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.Int32);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Int32$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual([3, 6, 2, 9, 5], l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Int32Array([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.Int32));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.Int32), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.Int32), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.Int32), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws<NotSupportedException>(() => coll.Clear(), "Clear");
            //Assert.Throws<NotSupportedException>(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Int32Array([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.Int32));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.Int32), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.Int32), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.Int32), "Get item");
            System.Array.setItem(list, 3, 4, System.Int32);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.Int32), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws<NotSupportedException>(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Int32Array(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Int32Array(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Int32Array([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.Int32);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.Int32);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.Int32);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.Int32);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.Int32);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.Int32);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.Int32);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Int8ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[i] !== expected[i]) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", actual[i]));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        lengthConstructorWorks: function () {
            var arr = new Int8Array(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int8Array), "is Int8Array");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Int8Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int8Array), "is Int8Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Int8Array([3, 8, 4]);
            var arr = new Int8Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Int8Array), "is Int8Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int8Array(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Int8Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(80, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int8Array(buf, 16);
            Bridge.Test.Assert.true(Bridge.is(arr, Int8Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(64, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Int8Array(buf, 16, 12);
            Bridge.Test.Assert.true(Bridge.is(arr, Int8Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(1, Int8Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Int8Array(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Int8Array(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setInt8ArrayWorks: function () {
            var arr = new Int8Array(4);
            arr.set(new Int8Array([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setInt8ArrayWithOffsetWorks: function () {
            var arr = new Int8Array(6);
            arr.set(new Int8Array([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Int8Array(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Int8Array(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Int8Array(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Int8Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int8Array(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Int8Array(buf, 32);
            Bridge.Test.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Int8Array(23);
            Bridge.Test.Assert.areEqual$1(23, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Int8Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Int8Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Int8Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Int8Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$SByte$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Int8Array([3, 6, 2, 9, 5]), System.Collections.Generic.IEnumerable$1(System.SByte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.SByte);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$SByte$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual([3, 6, 2, 9, 5], l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Int8Array([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.SByte));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.SByte), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.SByte), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.SByte), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws<NotSupportedException>(() => coll.Clear(), "Clear");
            //Assert.Throws<NotSupportedException>(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Int8Array([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.SByte));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.SByte), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.SByte), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.SByte), "Get item");
            System.Array.setItem(list, 3, 4, System.SByte);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.SByte), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws<NotSupportedException>(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Int8Array(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Int8Array(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Int8Array([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.SByte);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.SByte);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.SByte);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.SByte);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.SByte);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.SByte);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.SByte);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Uint16ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[i] !== expected[i]) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", actual[i]));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        lengthConstructorWorks: function () {
            var arr = new Uint16Array(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint16Array), "is Uint16Array");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Uint16Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint16Array), "is Uint16Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Uint16Array([3, 8, 4]);
            var arr = new Uint16Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint16Array), "is Uint16Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint16Array(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint16Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(40, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint16Array(buf, 16);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint16Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(32, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint16Array(buf, 16, 12);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint16Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(2, Uint16Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Uint16Array(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Uint16Array(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setUint16ArrayWorks: function () {
            var arr = new Uint16Array(4);
            arr.set(new Uint16Array([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setUint16ArrayWithOffsetWorks: function () {
            var arr = new Uint16Array(6);
            arr.set(new Uint16Array([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Uint16Array(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Uint16Array(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Uint16Array(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(6, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Uint16Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(6, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint16Array(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint16Array(buf, 32);
            Bridge.Test.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Uint16Array(23);
            Bridge.Test.Assert.areEqual$1(46, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Uint16Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Uint16Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Uint16Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Uint16Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$UInt16$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Uint16Array([3, 6, 2, 9, 5]), System.Collections.Generic.IEnumerable$1(System.UInt16));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.UInt16);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$UInt16$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual([3, 6, 2, 9, 5], l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Uint16Array([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.UInt16));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.UInt16), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.UInt16), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.UInt16), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws(() => coll.Clear(), "Clear");
            //Assert.Throws(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Uint16Array([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.UInt16));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.UInt16), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.UInt16), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.UInt16), "Get item");
            System.Array.setItem(list, 3, 4, System.UInt16);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.UInt16), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Uint16Array(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Uint16Array(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Uint16Array([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.UInt16);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.UInt16);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.UInt16);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.UInt16);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.UInt16);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.UInt16);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.UInt16);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Uint32ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (System.Int64(actual[i]).ne(System.Int64(expected[i]))) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", actual[i]));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        lengthConstructorWorks: function () {
            var arr = new Uint32Array(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint32Array), "is Uint32Array");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Uint32Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint32Array), "is Uint32Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Uint32Array([3, 8, 4]);
            var arr = new Uint32Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint32Array), "is Uint32Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint32Array(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(20, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint32Array(buf, 16);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(16, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint32Array(buf, 16, 12);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint32Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(4, Uint32Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Uint32Array(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Uint32Array(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setUint32ArrayWorks: function () {
            var arr = new Uint32Array(4);
            arr.set(new Uint32Array([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setUint32ArrayWithOffsetWorks: function () {
            var arr = new Uint32Array(6);
            arr.set(new Uint32Array([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Uint32Array(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Uint32Array(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Uint32Array(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Uint32Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint32Array(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint32Array(buf, 32);
            Bridge.Test.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Uint32Array(23);
            Bridge.Test.Assert.areEqual$1(92, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Uint32Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Uint32Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Uint32Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.UInt32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Uint32Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.UInt32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$UInt32$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Uint32Array([3, 6, 2, 9, 5]), System.Collections.Generic.IEnumerable$1(System.UInt32));
            var l = new (System.Collections.Generic.List$1(System.UInt32))();
            var enm = Bridge.getEnumerator(arr, System.UInt32);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$UInt32$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual([3, 6, 2, 9, 5], l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Uint32Array([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.UInt32));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.UInt32), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.UInt32), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.UInt32), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws<NotSupportedException>(() => coll.Clear(), "Clear");
            //Assert.Throws<NotSupportedException>(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Uint32Array([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.UInt32));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.UInt32), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.UInt32), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.UInt32), "Get item");
            System.Array.setItem(list, 3, 4, System.UInt32);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.UInt32), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws<NotSupportedException>(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Uint32Array(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Uint32Array(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Uint32Array([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.UInt32);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.UInt32);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.UInt32);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.UInt32);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.UInt32);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.UInt32);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.UInt32);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Uint8ArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[i] !== expected[i]) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", actual[i]));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        lengthConstructorWorks: function () {
            var arr = new Uint8Array(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint8Array), "is Uint8Array");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Uint8Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint8Array), "is Uint8Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Uint8Array([3, 8, 4]);
            var arr = new Uint8Array(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint8Array), "is Uint8Array");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8Array(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint8Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(80, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8Array(buf, 16);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint8Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(64, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8Array(buf, 16, 12);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint8Array));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(1, Uint8Array.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Uint8Array(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Uint8Array(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setUint8ArrayWorks: function () {
            var arr = new Uint8Array(4);
            arr.set(new Uint8Array([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setUint8ArrayWithOffsetWorks: function () {
            var arr = new Uint8Array(6);
            arr.set(new Uint8Array([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Uint8Array(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Uint8Array(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Uint8Array(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Uint8Array(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint8Array(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint8Array(buf, 32);
            Bridge.Test.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Uint8Array(23);
            Bridge.Test.Assert.areEqual$1(23, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Uint8Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Uint8Array([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Uint8Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Uint8Array([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Byte$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var arr = Bridge.cast(new Uint8Array([3, 6, 2, 9, 5]), System.Collections.Generic.IEnumerable$1(System.Byte));
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            var enm = Bridge.getEnumerator(arr, System.Byte);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Byte$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual([3, 6, 2, 9, 5], l.toArray());
        },
        iCollectionMethodsWork_SPI_1559: function () {
            // #1559
            var coll = Bridge.cast(new Uint8Array([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.SByte));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.SByte), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.SByte), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.SByte), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws(() => coll.Clear(), "Clear");
            //Assert.Throws(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559: function () {
            // #1559
            var list = Bridge.cast(new Uint8Array([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.SByte));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.SByte), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.SByte), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.SByte), "Get item");
            System.Array.setItem(list, 3, 4, System.SByte);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.SByte), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Uint8Array(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Uint8Array(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Uint8Array([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.Byte);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.Byte);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.Byte);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.Byte);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.Byte);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.Byte);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.Byte);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests", {
        assertContent: function (actual, expected, message) {
            if (actual.length !== expected.length) {
                Bridge.Test.Assert.fail$1(System.String.concat(message, ": Expected length ", expected.length, ", actual: ", actual.length));
                return;
            }
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                if (actual[i] !== expected[i]) {
                    Bridge.Test.Assert.fail$1(System.String.concat(message, ": Position ", i, ": expected ", expected[i], ", actual: ", actual[i]));
                    return;
                }
            }
            Bridge.Test.Assert.true$1(true, message);
        },
        typePropertiesAreCorrect_SPI_1560: function () {
            var arr = new Uint8ClampedArray(0);
            // #1560
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Byte)), "Is IEnumerable<byte>");
        },
        lengthConstructorWorks: function () {
            var arr = new Uint8ClampedArray(13);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "is Uint8ClampedArray");
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        constructorFromIntWorks: function () {
            var source = [3, 8, 4];
            var arr = new Uint8ClampedArray(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "is Uint8ClampedArray");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        constructorFromUint8ArrayWorks_SPI_TODO: function () {
            var source = new Uint8Array([3, 8, 4]);
            var arr = new Uint8ClampedArray(source);
            //Assert.True(arr != source, "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "is Uint8ClampedArray");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        copyConstructorWorks: function () {
            var source = new Uint8ClampedArray([3, 8, 4]);
            var arr = new Uint8ClampedArray(source);
            Bridge.Test.Assert.true$1(!Bridge.referenceEquals(arr, source), "New object");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Uint8ClampedArray), "is Uint8ClampedArray");
            this.assertContent(arr, [3, 8, 4], "content");
        },
        arrayBufferConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8ClampedArray(buf);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint8ClampedArray));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(80, arr.length, "length");
        },
        arrayBufferWithOffsetConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8ClampedArray(buf, 16);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint8ClampedArray));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(64, arr.length, "length");
        },
        arrayBufferWithOffsetAndLengthConstructorWorks: function () {
            var buf = new ArrayBuffer(80);
            var arr = new Uint8ClampedArray(buf, 16, 12);
            Bridge.Test.Assert.true(Bridge.is(arr, Uint8ClampedArray));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "buffer");
            Bridge.Test.Assert.areEqual$1(12, arr.length, "length");
        },
        staticBytesPerElementWorks: function () {
            Bridge.Test.Assert.areEqual(1, Uint8ClampedArray.BYTES_PER_ELEMENT);
        },
        lengthWorks: function () {
            var arr = new Uint8ClampedArray(13);
            Bridge.Test.Assert.areEqual$1(13, arr.length, "Length");
        },
        indexingWorks: function () {
            var arr = new Uint8ClampedArray(3);
            arr[1] = 42;
            this.assertContent(arr, [0, 42, 0], "Content");
            Bridge.Test.Assert.areEqual$1(42, arr[1], "[1]");
        },
        setUint8ClampedArrayWorks: function () {
            var arr = new Uint8ClampedArray(4);
            arr.set(new Uint8ClampedArray([3, 6, 7]));
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setUint8ClampedArrayWithOffsetWorks: function () {
            var arr = new Uint8ClampedArray(6);
            arr.set(new Uint8ClampedArray([3, 6, 7]), 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        setNormalArrayWorks: function () {
            var arr = new Uint8ClampedArray(4);
            arr.set([3, 6, 7]);
            this.assertContent(arr, [3, 6, 7, 0], "Content");
        },
        setNormalArrayWithOffsetWorks: function () {
            var arr = new Uint8ClampedArray(6);
            arr.set([3, 6, 7], 2);
            this.assertContent(arr, [0, 0, 3, 6, 7, 0], "Content");
        },
        subarrayWithBeginWorks: function () {
            var source = new Uint8ClampedArray(10);
            var arr = source.subarray(3);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
        },
        subarrayWithBeginAndEndWorks: function () {
            var source = new Uint8ClampedArray(10);
            var arr = source.subarray(3, 7);
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(arr, source), "Should be a new array");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, source.buffer), "Should be the same buffer");
            Bridge.Test.Assert.areEqual$1(3, arr.byteOffset, "ByteOffset should be correct");
            Bridge.Test.Assert.areEqual$1(4, arr.length, "Length should be correct");
        },
        bufferPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint8ClampedArray(buf);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(arr.buffer, buf), "Should be correct");
        },
        byteOffsetPropertyWorks: function () {
            var buf = new ArrayBuffer(100);
            var arr = new Uint8ClampedArray(buf, 32);
            Bridge.Test.Assert.areEqual$1(32, arr.byteOffset, "Should be correct");
        },
        byteLengthPropertyWorks: function () {
            var arr = new Uint8ClampedArray(23);
            Bridge.Test.Assert.areEqual$1(23, arr.byteLength, "Should be correct");
        },
        indexOfWorks: function () {
            var arr = new Uint8ClampedArray([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.areEqual$1(3, System.Array.indexOf(arr, 9), "9");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(arr, 1), "1");
        },
        containsWorks: function () {
            var arr = new Uint8ClampedArray([3, 6, 2, 9, 5]);
            Bridge.Test.Assert.true$1(System.Array.contains(arr, 9), "9");
            Bridge.Test.Assert.false$1(System.Array.contains(arr, 1), "1");
        },
        foreachWorks_SPI_1401: function () {
            var $t;
            var arr = new Uint8ClampedArray([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                l.add(i);
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        getEnumeratorWorks_SPI_1401: function () {
            var arr = new Uint8ClampedArray([3, 6, 2, 9, 5]);
            var l = new (System.Collections.Generic.List$1(System.Int32))();
            // #1401
            var enm = Bridge.getEnumerator(arr);
            while (enm.System$Collections$IEnumerator$moveNext()) {
                l.add(enm[Bridge.geti(enm, "System$Collections$Generic$IEnumerator$1$System$Byte$getCurrent$1", "getCurrent$1")]());
            }
            Bridge.Test.Assert.areEqual(l.toArray(), [3, 6, 2, 9, 5]);
        },
        iCollectionMethodsWork_SPI_1559_1560: function () {
            // #1559 #1560
            var coll = Bridge.cast(new Uint8ClampedArray([3, 6, 2, 9, 5]), System.Collections.Generic.ICollection$1(System.SByte));
            Bridge.Test.Assert.areEqual$1(5, System.Array.getCount(coll, System.SByte), "Count");
            Bridge.Test.Assert.true$1(System.Array.contains(coll, 6, System.SByte), "Contains(6)");
            Bridge.Test.Assert.false$1(System.Array.contains(coll, 1, System.SByte), "Contains(1)");
            //Assert.Throws<NotSupportedException>(() => coll.Add(2), "Add");
            //Assert.Throws<NotSupportedException>(() => coll.Clear(), "Clear");
            //Assert.Throws<NotSupportedException>(() => coll.Remove(2), "Remove");
        },
        iListMethodsWork_SPI_1559_1560: function () {
            // #1559 #1560
            var list = Bridge.cast(new Uint8ClampedArray([3, 6, 2, 9, 5]), System.Collections.Generic.IList$1(System.SByte));
            Bridge.Test.Assert.areEqual$1(1, System.Array.indexOf(list, 6, 0, null, System.SByte), "IndexOf(6)");
            Bridge.Test.Assert.areEqual$1(-1, System.Array.indexOf(list, 1, 0, null, System.SByte), "IndexOf(1)");
            Bridge.Test.Assert.areEqual$1(9, System.Array.getItem(list, 3, System.SByte), "Get item");
            System.Array.setItem(list, 3, 4, System.SByte);
            Bridge.Test.Assert.areEqual$1(4, System.Array.getItem(list, 3, System.SByte), "Set item");

            //Assert.Throws<NotSupportedException>(() => list.Insert(2, 2), "Insert");
            //Assert.Throws<NotSupportedException>(() => list.RemoveAt(2), "RemoveAt");
        },
        iListIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Uint8ClampedArray(System.Array.init(0, 0)), System.Collections.Generic.IList$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionIsReadOnlyWorks: function () {
            var list = Bridge.cast(new Uint8ClampedArray(System.Array.init(0, 0)), System.Collections.Generic.ICollection$1(System.Single));
            Bridge.Test.Assert.true(System.Array.getIsReadOnly(list, System.Single));
        },
        iCollectionCopyTo: function () {
            var l = new Uint8ClampedArray([0, 1, 2]);

            var a1 = System.Array.init(3, 0);
            System.Array.copyTo(l, a1, 0, System.Byte);

            Bridge.Test.Assert.areEqual$1(0, a1[0], "1.Element 0");
            Bridge.Test.Assert.areEqual$1(1, a1[1], "1.Element 1");
            Bridge.Test.Assert.areEqual$1(2, a1[2], "1.Element 2");

            var a2 = System.Array.init(5, 0);
            System.Array.copyTo(l, a2, 1, System.Byte);

            Bridge.Test.Assert.areEqual$1(0, a2[0], "2.Element 0");
            Bridge.Test.Assert.areEqual$1(0, a2[1], "2.Element 1");
            Bridge.Test.Assert.areEqual$1(1, a2[2], "2.Element 2");
            Bridge.Test.Assert.areEqual$1(2, a2[3], "2.Element 3");
            Bridge.Test.Assert.areEqual$1(0, a2[4], "2.Element 4");

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                System.Array.copyTo(l, null, 0, System.Byte);
            }, "3.null");

            var a3 = System.Array.init(2, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a3, 0, System.Byte);
            }, "3.Short array");

            var a4 = System.Array.init(3, 0);
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 1, System.Byte);
            }, "3.Start index 1");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                System.Array.copyTo(l, a4, -1, System.Byte);
            }, "3.Negative start index");
            Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                System.Array.copyTo(l, a4, 3, System.Byte);
            }, "3.Start index 3");
        }
    });

    Bridge.define("Bridge.ClientTest.Constants", {
        statics: {
            MODULE_HTML5: "HTML5",
            PREFIX_SYSTEM_CLASSES: "Simple types",
            PREFIX_SYSTEM_INTERFACES: "System interface",
            PREFIX_COLLECTIONS: "Collections",
            PREFIX_UTILITIES: "Utilities",
            PREFIX_EXCEPTIONS: "Exceptions",
            MODULE_DECIMAL: "Simple types",
            MODULE_DOUBLE: "Simple types",
            MODULE_INT16: "Simple types",
            MODULE_INT64: "Simple types",
            MODULE_SBYTE: "Simple types",
            MODULE_FLOAT: "Simple types",
            MODULE_UINT64: "Simple types",
            MODULE_UINT32: "Simple types",
            MODULE_OBJECT: "Simple types",
            MODULE_CHAR: "Simple types",
            MODULE_INT32: "Simple types",
            MODULE_UINT16: "Simple types",
            MODULE_BYTE: "Simple types",
            MODULE_TUPLE: "Simple types",
            MODULE_VERSION: "Simple types",
            MODULE_BASIC_CSHARP: "C#",
            MODULE_LINQ: "LINQ",
            MODULE_LINQ_EXPRESSIONS: "LINQ Expressions",
            MODULE_DATETIME: "Date and time",
            MODULE_NULLABLE: "Nullable",
            MODULE_STRING: "String",
            MODULE_REGEX: "Regex",
            MODULE_REGEX_JS: "RegexJS",
            MODULE_ENUM: "Enum",
            MODULE_GUID: "Guid",
            MODULE_MATH: "Math",
            MODULE_DECIMAL_MATH: "Decimal Math",
            MODULE_CONVERT: "Convert",
            MODULE_RANDOM: "Random",
            MODULE_TYPEDARRAYS: "Typed Arrays",
            MODULE_ICOLLECTION: "Collections",
            MODULE_IDICTIONARY: "Collections",
            MODULE_WEAKCOLLECTION: "Collections",
            MODULE_LIST: "Collections",
            MODULE_ILIST: "Collections",
            MODULE_ITERATORBLOCK: "Collections",
            MODULE_ARRAY: "Collections",
            MODULE_IENUMERABLE: "Collections",
            MODULE_GENERICDICTIONARY: "Collections",
            MODULE_ICOMPARABLE: "System interface",
            MODULE_IEQUATABLE: "System interface",
            MODULE_COMPARER: "Comparer",
            MODULE_EQUALITYCOMPARER: "EqualityComparer",
            MODULE_NUMBERFORMATINFO: "NumberFormatInfo",
            MODULE_CULTUREINFO: "СultureInfo",
            MODULE_PROPERTYACCESSOR: "Property accessor",
            MODULE_NUMBERFORMATSPECIFIERS: "Number format specifiers",
            MODULE_RUNTIMEHELPERS: "Utilities",
            MODULE_ENVIRONMENT: "Utilities",
            MODULE_NOTSUPPORTEDEXCEPTION: "Exceptions",
            MODULE_KEYNOTFOUNDEXCEPTION: "Exceptions",
            MODULE_EXCEPTION: "Exceptions",
            MODULE_ARGUMENTNULLEXCEPTION: "Exceptions",
            MODULE_DIVIDEBYZEROEXCEPTION: "Exceptions",
            MODULE_NOTIMPLEMENTEDEXCEPTION: "Exceptions",
            MODULE_OVERFLOWEXCEPTION: "Exceptions",
            MODULE_OUTOFMEMORYEXCEPTION: "Exceptions",
            MODULE_INDEXOUTOFRANGEEXCEPTION: "Exceptions",
            MODULE_SYSTEMEXCEPTION: "Exceptions",
            MODULE_TIMOUTEXCEPTION: "Exceptions",
            MODULE_REGEXMATCHTIMEOUTEXCEPTION: "Exceptions",
            MODULE_ARITHMETICEXCEPTION: "Exceptions",
            MODULE_FORMATEXCEPTION: "Exceptions",
            MODULE_INVALIDOPERATIONEXCEPTION: "Exceptions",
            MODULE_INVALIDCASTEXCEPTION: "Exceptions",
            MODULE_ARGUMENTEXCEPTION: "Exceptions",
            MODULE_NULLREFERENCEEXCEPTION: "Exceptions",
            MODULE_ARGUMENTOUTOFRANGEEXCEPTION: "Exceptions",
            MODULE_THREADING: "Threading",
            MODULE_DIAGNOSTICS: "Diagnostics",
            MODULE_CHECKED_UNCKECKED: "Checked/Unckecked",
            MODULE_TYPE_SYSTEM: "Type system",
            MODULE_REFLECTION: "Reflection",
            MODULE_FUNCTIONS: "Functions",
            MODULE_SERIALIZATION: "Serialization",
            MODULE_BRIDGECONSOLE: "Bridge Console",
            MODULE_OBJECTLITERAL: "[ObjectLiteral]",
            IGNORE_DATE: null
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertConstants", {
        statics: {
            UINT64_MAX_STRING_BASE_16: "ffffffffffffffff",
            UINT64_MAX_STRING_BASE_8: "1777777777777777777777",
            UINT64_MAX_STRING_BASE_2: "1111111111111111111111111111111111111111111111111111111111111111",
            UINT64_OVERFLOW_MAX_STRING: "18446744073709551616",
            UINT64_OVERFLOW_MAX_STRING_BASE_16: "10000000000000000",
            UINT64_OVERFLOW_MAX_STRING_BASE_8: "7777777777777777777777777",
            UINT64_OVERFLOW_MAX_STRING_BASE_2: "11111111111111111111111111111111111111111111111111111111111111111",
            UINT64_OVERFLOW_MIN_STRING: "-1",
            INT64_MAX_STRING_BASE_16: "7fffffffffffffff",
            INT64_MAX_STRING_BASE_8: "777777777777777777777",
            INT64_MAX_STRING_BASE_2: "111111111111111111111111111111111111111111111111111111111111111",
            INT64_MIN_STRING_BASE_16: "8000000000000000",
            INT64_MIN_STRING_BASE_8: "1000000000000000000000",
            INT64_MIN_STRING_BASE_2: "1000000000000000000000000000000000000000000000000000000000000000",
            INT64_OVERFLOW_MAX_STRING: "9223372036854775808",
            INT64_OVERFLOW_MIN_STRING: "-9223372036854775809",
            UINT32_MAX_STRING_BASE_16: "ffffffff",
            UINT32_MAX_STRING_BASE_8: "37777777777",
            UINT32_MAX_STRING_BASE_2: "11111111111111111111111111111111",
            UINT32_OVERFLOW_MAX_STRING: "4294967296",
            UINT32_OVERFLOW_MAX_STRING_BASE_16: "100000000",
            UINT32_OVERFLOW_MAX_STRING_BASE_8: "77777777777",
            UINT32_OVERFLOW_MAX_STRING_BASE_2: "111111111111111111111111111111111",
            UINT32_OVERFLOW_MIN_STRING: "-1",
            INT32_MAX_STRING_BASE_16: "7fffffff",
            INT32_MAX_STRING_BASE_8: "17777777777",
            INT32_MAX_STRING_BASE_2: "1111111111111111111111111111111",
            INT32_MIN_STRING_BASE_16: "80000000",
            INT32_MIN_STRING_BASE_8: "20000000000",
            INT32_MIN_STRING_BASE_2: "10000000000000000000000000000000",
            INT32_OVERFLOW_MAX_STRING: "2147483648",
            INT32_OVERFLOW_MAX_STRING_BASE_16: "1ffffffff",
            INT32_OVERFLOW_MAX_STRING_BASE_8: "777777777777",
            INT32_OVERFLOW_MAX_STRING_BASE_2: "111111111111111111111111111111111",
            INT32_OVERFLOW_MIN_STRING: "-2147483649",
            UINT16_MAX_STRING_BASE_16: "ffff",
            UINT16_MAX_STRING_BASE_8: "177777",
            UINT16_MAX_STRING_BASE_2: "1111111111111111",
            UINT16_OVERFLOW_MAX_STRING: "65536",
            UINT16_OVERFLOW_MAX_STRING_BASE_16: "10000",
            UINT16_OVERFLOW_MAX_STRING_BASE_8: "777777",
            UINT16_OVERFLOW_MAX_STRING_BASE_2: "11111111111111111",
            UINT16_OVERFLOW_MIN_STRING: "-1",
            INT16_MAX_STRING_BASE_16: "7fff",
            INT16_MAX_STRING_BASE_8: "77777",
            INT16_MAX_STRING_BASE_2: "111111111111111",
            INT16_MIN_STRING_BASE_16: "8000",
            INT16_MIN_STRING_BASE_8: "100000",
            INT16_MIN_STRING_BASE_2: "1000000000000000",
            INT16_OVERFLOW_MAX_STRING: "32768",
            INT16_OVERFLOW_MAX_STRING_BASE_16: "1ffff",
            INT16_OVERFLOW_MAX_STRING_BASE_8: "777777",
            INT16_OVERFLOW_MAX_STRING_BASE_2: "11111111111111111",
            INT16_OVERFLOW_MIN_STRING: "-32769",
            UINT8_MAX_STRING_BASE_16: "ff",
            UINT8_MAX_STRING_BASE_8: "377",
            UINT8_MAX_STRING_BASE_2: "11111111",
            UINT8_OVERFLOW_MAX_STRING: "256",
            UINT8_OVERFLOW_MIN_STRING: "-1",
            INT8_MAX_STRING_BASE_16: "7f",
            INT8_MAX_STRING_BASE_8: "177",
            INT8_MAX_STRING_BASE_2: "1111111",
            INT8_MIN_STRING_BASE_16: "80",
            INT8_MIN_STRING_BASE_8: "200",
            INT8_MIN_STRING_BASE_2: "10000000",
            INT8_OVERFLOW_MAX_STRING: "128",
            INT8_OVERFLOW_MAX_STRING_BASE_16: "1ff",
            INT8_OVERFLOW_MAX_STRING_BASE_8: "777",
            INT8_OVERFLOW_MAX_STRING_BASE_2: "111111111",
            INT8_OVERFLOW_MIN_STRING: "-129",
            DECIMAL_MAX_STRING: "79228162514264337593543950335",
            DECIMAL_MIN_STRING: "-79228162514264337593543950335",
            DOUBLE_MAX_STRING: "1.7976931348623157e+308",
            DOUBLE_MIN_STRING: "-1.7976931348623157e+308",
            DOUBLE_EPSILON_STRING: "5e-324",
            SINGLE_MAX_STRING: "3.40282347e+38",
            SINGLE_MIN_STRING: "-3.40282347e+38",
            SINGLE_EPSILON_STRING: "1.401298e-45"
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests", {
        statics: {
            roundtrip1: function () {
                var input = "test";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, function (result) {
                    // See Freed, N. and N. Borenstein, RFC2045, Section 6.8 for a description of why this check is necessary.
                    Bridge.Test.Assert.areEqual(result.length, 3);

                    var triplet = (((result[0] << 16) | (result[1] << 8) | result[2])) >>> 0;
                    Bridge.Test.Assert.areEqual(triplet >>> 18, 45); // 't'
                    Bridge.Test.Assert.areEqual((((triplet << 14) >>> 0)) >>> 26, 30); // 'e'
                    Bridge.Test.Assert.areEqual((((triplet << 20) >>> 0)) >>> 26, 44); // 's'
                    Bridge.Test.Assert.areEqual((((triplet << 26) >>> 0)) >>> 26, 45); // 't'

                    Bridge.Test.Assert.areEqual(System.Convert.toBase64String(result, null, null, null), input);
                });
            },
            roundtrip2: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("AAAA");
            },
            roundtrip3: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("AAAAAAAA");
            },
            emptyString: function () {
                var input = "";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f1);
            },
            zeroLengthArray: function () {
                var input = "test";
                var inputChars = System.String.toCharArray(input, 0, input.length);
                var result = System.Convert.fromBase64CharArray(inputChars, 0, 0);

                Bridge.Test.Assert.notNull(result);
                Bridge.Test.Assert.areEqual(0, result.length);
            },
            roundtripWithPadding1: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("abc=");
            },
            roundtripWithPadding2: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("BQYHCA==");
            },
            partialRoundtripWithPadding1: function () {
                var input = "ab==";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, function (result) {
                    Bridge.Test.Assert.areEqual(1, result.length);

                    var roundtrippedString = System.Convert.toBase64String(result, null, null, null);
                    Bridge.Test.Assert.areNotEqual(roundtrippedString, input);
                    Bridge.Test.Assert.areEqual(input.charCodeAt(0), roundtrippedString.charCodeAt(0));
                });
            },
            partialRoundtripWithPadding2: function () {
                var input = "789=";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, function (result) {
                    Bridge.Test.Assert.areEqual(2, result.length);

                    var roundtrippedString = System.Convert.toBase64String(result, null, null, null);
                    Bridge.Test.Assert.areNotEqual(roundtrippedString, input);
                    Bridge.Test.Assert.areEqual(input.charCodeAt(0), roundtrippedString.charCodeAt(0));
                    Bridge.Test.Assert.areEqual(input.charCodeAt(1), roundtrippedString.charCodeAt(1));
                });
            },
            parseWithWhitespace: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("abc= \t \r\n =", "bQ==");
            },
            roundtripWithWhitespace2: function () {
                var input = "abc=  \t\n\t\r ";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, input.trim());
            },
            roundtripWithWhitespace3: function () {
                var input = "abc \r\n\t   =  \t\n\t\r ";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, "abc=");
            },
            roundtripWithWhitespace4: function () {
                var expected = "test";
                var input = System.String.alignString(System.String.alignString(System.String.insert(1, expected, System.String.fromCharCount(32, 17)), 31, 32), -12, 32);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, expected, 3);
            },
            roundtripWithWhitespace5: function () {
                var expected = "test";
                var input = System.String.alignString(System.String.alignString(System.String.insert(2, expected, System.String.fromCharCount(9, 9)), 37, 9), -8, 9);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, expected, 3);
            },
            roundtripWithWhitespace6: function () {
                var expected = "test";
                var input = System.String.alignString(System.String.alignString(System.String.insert(2, expected, System.String.fromCharCount(13, 13)), 7, 13), -29, 13);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, expected, 3);
            },
            roundtripWithWhitespace7: function () {
                var expected = "test";
                var input = System.String.alignString(System.String.alignString(System.String.insert(2, expected, System.String.fromCharCount(10, 23)), 17, 10), -34, 10);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, expected, 3);
            },
            roundtripLargeString: function () {
                var input = System.String.fromCharCount(97, 10000);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, input);
            },
            invalidOffset: function () {
                var input = "test";
                var inputChars = System.String.toCharArray(input, 0, input.length);

                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, -1, inputChars.length);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, inputChars.length, inputChars.length);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
            },
            invalidLength: function () {
                var input = "test";
                var inputChars = System.String.toCharArray(input, 0, input.length);

                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, 0, -1);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, 0, ((inputChars.length + 1) | 0));
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, 1, inputChars.length);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
            },
            invalidInput: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f3, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f4);

                // Input must be at least 4 characters long
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("No");

                // Length of input must be a multiple of 4
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("NoMore");

                // Input must not contain invalid characters
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("2-34");

                // Input must not contain 3 or more padding characters in a row
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("a===");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abc=====");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("a===\r  \t  \n");

                // Input must not contain padding characters in the middle of the string
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("No=n");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abcdabc=abcd");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abcdab==abcd");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abcda===abcd");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abcd====abcd");
            },
            invalidCharactersInInput: function () {
                var $t;
                var invalidChars = [30122, 62608, 13917, 19498, 2473, 40845, 35988, 2281, 51246, 36372];

                $t = Bridge.getEnumerator(invalidChars);
                while ($t.moveNext()) {
                    var ch = Bridge.cast($t.getCurrent(), System.Char);
                    var builder = "abc";
                    var addingStr = String.fromCharCode.apply(null, [ch]);
                    System.String.insert(1, builder, addingStr);
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput(builder);
                }
            },
            verifyRoundtrip: function (input, expected, expectedLengthBytes) {
                if (expected === void 0) { expected = null; }
                if (expectedLengthBytes === void 0) { expectedLengthBytes = null; }
                if (expected == null) {
                    expected = input;
                }

                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, function (result) {
                    if (System.Nullable.hasValue(expectedLengthBytes)) {
                        Bridge.Test.Assert.areEqual(System.Nullable.getValue(expectedLengthBytes), result.length);
                    }
                    Bridge.Test.Assert.areEqual(expected, System.Convert.toBase64String(result, null, null, null));
                    Bridge.Test.Assert.areEqual(expected, System.Convert.toBase64String(result, 0, result.length, null));
                });
            },
            verifyInvalidInput: function (input) {
                var inputChars = System.String.toCharArray(input, 0, input.length);

                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f5);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64String(input);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f5);
            },
            verify: function (input, action) {
                if (action === void 0) { action = null; }
                if (!Bridge.staticEquals(action, null)) {
                    action(System.Convert.fromBase64CharArray(System.String.toCharArray(input, 0, input.length), 0, input.length));
                    action(System.Convert.fromBase64String(input));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests", $_);

    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests, {
        f1: function (result) {
            Bridge.Test.Assert.notNull(result);
            Bridge.Test.Assert.areEqual(0, result.length);
        },
        f2: function (err) {
            return Bridge.is(err, System.ArgumentOutOfRangeException);
        },
        f3: function () {
            System.Convert.fromBase64CharArray(null, 0, 3);
        },
        f4: function (err) {
            return Bridge.is(err, System.ArgumentNullException);
        },
        f5: function (err) {
            return Bridge.is(err, System.FormatException);
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Func
     * @param   {TInput}     arg
     * @return  {TOutput}
     */

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertTestBase$1", function (TOutput) { return {
        /**
         * Verify that the provided convert delegate produces expectedValues given testValues.
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}           TInput            
         * @param   {System.Func}        convert           
         * @param   {Array.<TInput>}     testValues        
         * @param   {Array.<TOutput>}    expectedValues    
         * @param   {boolean}            useTrue
         * @return  {void}
         */
        verify: function (TInput, convert, testValues, expectedValues, useTrue) {
            if (useTrue === void 0) { useTrue = false; }
            if (expectedValues == null || testValues == null || expectedValues.length !== testValues.length) {
                Bridge.Test.Assert.fail$1("Test data should have the same lenght");
                return;
            }

            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                var testValue = testValues[i];

                try {
                    var result = convert(testValue);

                    var expected = expectedValues[i];

                    if (useTrue) {
                        Bridge.Test.Assert.true$1(Bridge.equals(expected, result), System.String.concat("Test: ", testValue, " Expected: ", expected.toString(), " Result: ", result.toString()));
                    } else {
                        Bridge.Test.Assert.areEqual$1(expected, result, System.String.concat("Test: ", testValue, " Expected: ", expected.toString(), " Result: ", result.toString()));
                    }
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.Test.Assert.fail$1(System.String.concat("Exception occurred while Verify ", testValue, " Exception: ", ex.toString()));
                }
            }
        },
        /**
         * Verify that the provided convert delegate produces expectedValues given testValues.
         The overloading should be used to test methods accepting objects.
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}           TInput            
         * @param   {System.Func}        convert           
         * @param   {Array.<TInput>}     testValues        
         * @param   {Array.<TOutput>}    expectedValues
         * @return  {void}
         */
        verifyViaObj: function (TInput, convert, testValues, expectedValues) {
            if (expectedValues == null || testValues == null || expectedValues.length !== testValues.length) {
                Bridge.Test.Assert.fail$1("Test data should have the same lenght");
                return;
            }

            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                var testValue = testValues[i];

                try {
                    var result = convert(testValue);

                    var expected = expectedValues[i];

                    Bridge.Test.Assert.areEqual(expected, result);
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.Test.Assert.fail$1(System.String.concat("Exception occurred while VerifyViaObj ", testValue, " Exception: ", ex.toString()));
                }
            }
        },
        /**
         * Verify that the provided convert delegates produce expectedValues given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {System.Func}        convert                      
         * @param   {System.Func}        convertWithFormatProvider    
         * @param   {Array.<string>}     testValues                   
         * @param   {Array.<TOutput>}    expectedValues               
         * @param   {boolean}            useTrue
         * @return  {void}
         */
        verifyFromString: function (convert, convertWithFormatProvider, testValues, expectedValues, useTrue) {
            if (useTrue === void 0) { useTrue = false; }
            this.verify(String, convert, testValues, expectedValues, useTrue);
            this.verify(String, function (input) {
                return convertWithFormatProvider(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput).s_instance);
            }, testValues, expectedValues, useTrue);
        },
        /**
         * Verify that the provided convert delegates produce expectedValues given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {System.Func}        convert                      
         * @param   {System.Func}        convertWithFormatProvider    
         * @param   {Array.<Object>}     testValues                   
         * @param   {Array.<TOutput>}    expectedValues
         * @return  {void}
         */
        verifyFromObject: function (convert, convertWithFormatProvider, testValues, expectedValues) {
            this.verify(Object, convert, testValues, expectedValues);
            this.verify(Object, function (input) {
                return convertWithFormatProvider(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput).s_instance);
            }, testValues, expectedValues);
        },
        /**
         * Verify that the provided convert delegate produces expectedValues given testValues and testBases
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {System.Func}        convert           
         * @param   {Array.<string>}     testValues        
         * @param   {Array.<number>}     testBases         
         * @param   {Array.<TOutput>}    expectedValues    
         * @param   {boolean}            useTrue
         * @return  {void}
         */
        verifyFromStringWithBase: function (convert, testValues, testBases, expectedValues, useTrue) {
            if (useTrue === void 0) { useTrue = false; }
            if (expectedValues == null || testBases == null || testValues == null || expectedValues.length !== testValues.length || testBases.length !== testValues.length) {
                Bridge.Test.Assert.fail$1("Test data should have the same lenghts");
                return;
            }

            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                var testValue = testValues[i];
                var radix = testBases[i];

                try {
                    var result = convert(testValue, radix);

                    var expected = expectedValues[i];

                    if (useTrue) {
                        Bridge.Test.Assert.true$1(Bridge.equals(expected, result), System.String.concat("Test: ", testValue, " Radix: ", radix, " Expected: ", expected.toString(), " Result: ", result.toString()));
                    } else {
                        Bridge.Test.Assert.areEqual(expected, result);
                    }
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.Test.Assert.fail$1(System.String.concat("Exception occurred while VerifyFromStringWithBase ", testValue, " Radix: ", radix, " Exception: ", ex.toString()));
                }
            }
        },
        /**
         * Verify that the provided convert delegate throws an exception of type TException given testValues and testBases
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException    
         * @param   {System.Func}       convert       
         * @param   {Array.<string>}    testValues    
         * @param   {Array.<number>}    testBases
         * @return  {void}
         */
        verifyFromStringWithBaseThrows: function (TException, convert, testValues, testBases) {
            if (testBases == null || testValues == null || testBases.length !== testValues.length) {
                Bridge.Test.Assert.fail$1("Test data should have the same lenght");
                return;
            }

            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                (function () {
                    try {
                        Bridge.Test.Assert.throws$2(function () {
                            convert(testValues[i], testBases[i]);
                        }, function (err) {
                            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(TException));
                        }, System.String.concat("Value ", testValues[i], " base ", testBases[i]));
                    }
                    catch (e) {
                        e = System.Exception.create(e);
                        var message = System.String.format("Expected {0} converting '{1}' (base {2}) to '{3}'", Bridge.Reflection.getTypeFullName(TException), testValues[i], testBases[i], Bridge.Reflection.getTypeFullName(TOutput));
                        throw new System.AggregateException(message, [e]);
                    }
                }).call(this);
            }
        },
        /**
         * Verify that the provided convert delegate throws an exception of type TException given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException    
         * @param   {Function}          TInput        
         * @param   {System.Func}       convert       
         * @param   {Array.<TInput>}    testValues
         * @return  {void}
         */
        verifyThrows: function (TException, TInput, convert, testValues) {
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                (function () {
                    try {
                        Bridge.Test.Assert.throws$2(function () {
                            convert(testValues[i]);
                        }, function (err) {
                            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(TException));
                        }, System.String.concat("Value ", testValues[i]));
                    }
                    catch (e) {
                        e = System.Exception.create(e);
                        var message = System.String.format("Expected {0} converting '{1}' ({2}) to {3}", Bridge.Reflection.getTypeFullName(TException), testValues[i], Bridge.Reflection.getTypeFullName(TInput), Bridge.Reflection.getTypeFullName(TOutput));
                        throw new System.AggregateException(message, [e]);
                    }
                }).call(this);
            }
        },
        /**
         * Verify that the provided convert delegate throws an exception of type TException given testValues
         The overloading should be used to test methods accepting objects.
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException    
         * @param   {Function}          TInput        
         * @param   {System.Func}       convert       
         * @param   {Array.<TInput>}    testValues
         * @return  {void}
         */
        verifyThrowsViaObj: function (TException, TInput, convert, testValues) {
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                (function () {
                    try {
                        Bridge.Test.Assert.throws$2(function () {
                            convert(testValues[i]);
                        }, function (err) {
                            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(TException));
                        }, System.String.concat("Value ", testValues[i]));
                    }
                    catch (e) {
                        e = System.Exception.create(e);
                        var message = System.String.format("Expected {0} converting '{1}' ({2}) to {3}", Bridge.Reflection.getTypeFullName(TException), testValues[i], Bridge.Reflection.getTypeFullName(TInput), Bridge.Reflection.getTypeFullName(TOutput));
                        throw new System.AggregateException(message, [e]);
                    }
                }).call(this);
            }
        },
        /**
         * Verify that the provided convert delegates throws an exception of type TException given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException                   
         * @param   {System.Func}       convert                      
         * @param   {System.Func}       convertWithFormatProvider    
         * @param   {Array.<string>}    testValues
         * @return  {void}
         */
        verifyFromStringThrows: function (TException, convert, convertWithFormatProvider, testValues) {
            this.verifyThrows(TException, String, convert, testValues);
            this.verifyThrows(TException, String, function (input) {
                return convertWithFormatProvider(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput).s_instance);
            }, testValues);
        },
        /**
         * Verify that the provided convert delegates throw exception of type TException given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException                   
         * @param   {System.Func}       convert                      
         * @param   {System.Func}       convertWithFormatProvider    
         * @param   {Array.<Object>}    testValues
         * @return  {void}
         */
        verifyFromObjectThrows: function (TException, convert, convertWithFormatProvider, testValues) {
            this.verifyThrows(TException, Object, convert, testValues);
            this.verifyThrows(TException, Object, function (input) {
                return convertWithFormatProvider(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput).s_instance);
            }, testValues);
        }
    }; });

    /** @namespace Bridge.ClientTest.ConvertTests */

    /**
     * Helper class to test that the IFormatProvider is being called.
     *
     * @protected
     * @class Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider
     * @implements  System.IFormatProvider
     */
    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider", function (TOutput) { return {
        inherits: [System.IFormatProvider],
        statics: {
            s_instance: null,
            config: {
                init: function () {
                    this.s_instance = new (Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput))();
                }
            }
        },
        config: {
            alias: [
            "getFormat", "System$IFormatProvider$getFormat"
            ]
        },
        ctor: function () {
            this.$initialize();
        },
        getFormat: function (formatType) {
            return this;
        },
        format: function (format, arg, formatProvider) {
            return arg.toString();
        },
        getAllDateTimePatterns: function (format, returnNull) {
            return "G";
        }
    }; });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests", {
        statics: {
            validOffsetIn: function () {
                var input = "test";
                var inputBytes = System.Convert.fromBase64String(input);
                var resultChars = System.Array.init(4, function (){
                    return new System.Char();
                });
                var fillCharCount = System.Convert.toBase64CharArray(inputBytes, 0, ((inputBytes.length - 1) | 0), resultChars, 0, null);
                Bridge.Test.Assert.areEqual(input.length, fillCharCount);
            },
            shortInputArray: function () {
                // Regression test for bug where a short input array caused an exception to be thrown
                var inputBuffer = [97, 98, 99];
                var ouputBuffer = System.Array.init(4, function (){
                    return new System.Char();
                });
                var c1 = System.Convert.toBase64CharArray(inputBuffer, 0, 3, ouputBuffer, 0, null);
                Bridge.Test.Assert.areEqual(4, c1);

                var c2 = System.Convert.toBase64CharArray(inputBuffer, 0, 2, ouputBuffer, 0, null);
                Bridge.Test.Assert.areEqual(4, c2);
            },
            validOffsetOut: function () {
                // Regression test for bug where offsetOut parameter was ignored
                var outputBuffer = System.String.toCharArray(("........"), 0, ("........").length);
                var inputBuffer = System.Array.init(6, 0);
                for (var i = 0; i < inputBuffer.length; inputBuffer[i] = (Bridge.identity(i, (i = (i + 1) | 0))) & 255) {
                    ;
                }

                // Convert the first half of the byte array, write to the first half of the char array
                var c = System.Convert.toBase64CharArray(inputBuffer, 0, 3, outputBuffer, 0, null);
                Bridge.Test.Assert.areEqual(4, c);
                Bridge.Test.Assert.areEqual("AAEC....", String.fromCharCode.apply(null, outputBuffer));

                // Convert the second half of the byte array, write to the second half of the char array
                c = System.Convert.toBase64CharArray(inputBuffer, 3, 3, outputBuffer, 4, null);
                Bridge.Test.Assert.areEqual(4, c);
                Bridge.Test.Assert.areEqual("AAECAwQF", String.fromCharCode.apply(null, outputBuffer));
            },
            invalidInputBuffer: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f1, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f2);
            },
            invalidOutputBuffer: function () {
                var inputChars = System.String.toCharArray(("test"), 0, ("test").length);
                var inputBytes = System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, inputBytes.length, null, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f2);
            },
            invalidOffsetIn: function () {
                var inputChars = System.String.toCharArray(("test"), 0, ("test").length);
                var inputBytes = System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                var outputBuffer = System.Array.init(4, function (){
                    return new System.Char();
                });

                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, -1, inputBytes.length, outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, inputBytes.length, inputBytes.length, outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
            },
            invalidOffsetOut: function () {
                var inputChars = System.String.toCharArray(("test"), 0, ("test").length);
                var inputBytes = System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                var outputBuffer = System.Array.init(4, function (){
                    return new System.Char();
                });

                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, inputBytes.length, outputBuffer, -1, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, inputBytes.length, outputBuffer, 1, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
            },
            invalidInputLength: function () {
                var inputChars = System.String.toCharArray(("test"), 0, ("test").length);
                var inputBytes = System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                var outputBuffer = System.Array.init(4, function (){
                    return new System.Char();
                });

                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, -1, outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, ((inputBytes.length + 1) | 0), outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 1, inputBytes.length, outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests", $_);

    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests, {
        f1: function () {
            System.Convert.toBase64CharArray(null, 0, 1, System.Array.init(1, function (){
                    return new System.Char();
                }), 0, null);
        },
        f2: function (err) {
            return Bridge.is(err, System.ArgumentNullException);
        },
        f3: function (err) {
            return Bridge.is(err, System.ArgumentOutOfRangeException);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests", {
        statics: {
            knownByteSequence: function () {
                var inputBytes = System.Array.init(4, 0);
                for (var i = 0; i < 4; i = (i + 1) | 0) {
                    inputBytes[i] = ((((i + 5) | 0))) & 255;
                }

                // The sequence of bits for this byte array is
                // 00000101000001100000011100001000
                // Encoding adds 16 bits of trailing bits to make this a multiple of 24 bits.
                // |        +         +         +         +
                // 000001010000011000000111000010000000000000000000
                // which is, (Interesting, how do we distinguish between '=' and 'A'?)
                // 000001 010000 011000 000111 000010 000000 000000 000000
                // B      Q      Y      H      C      A      =      =

                Bridge.Test.Assert.areEqual("BQYHCA==", System.Convert.toBase64String(inputBytes, null, null, null));
            },
            zeroLength: function () {
                var inputBytes = System.Convert.fromBase64String("test");
                Bridge.Test.Assert.areEqual("", System.Convert.toBase64String(inputBytes, 0, 0, null));
            },
            invalidInputBuffer: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f1, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f2);
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f3, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f2);
            },
            invalidOffset: function () {
                var inputBytes = System.Convert.fromBase64String("test");

                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, -1, inputBytes.length, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, inputBytes.length, inputBytes.length, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
            },
            invalidLength: function () {
                var inputBytes = System.Convert.fromBase64String("test");

                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, 0, -1, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, 0, ((inputBytes.length + 1) | 0), null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, 1, inputBytes.length, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests", $_);

    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests, {
        f1: function () {
            System.Convert.toBase64String(null, null, null, null);
        },
        f2: function (err) {
            return Bridge.is(err, System.ArgumentNullException);
        },
        f3: function () {
            System.Convert.toBase64String(null, 0, 0, null);
        },
        f4: function (err) {
            return Bridge.is(err, System.ArgumentOutOfRangeException);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToStringTests", {
        statics: {
            fromBoxedObject: function () {
                var testValues = [true, false, System.Decimal.Zero, System.Decimal.One, System.Decimal.MinusOne, System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal("1.234567890123456789012345678", System.Globalization.NumberFormatInfo.invariantInfo), System.Decimal("1234.56", System.Globalization.NumberFormatInfo.invariantInfo), System.Decimal("-1234.56", System.Globalization.NumberFormatInfo.invariantInfo), -12.2364, -12.236465923406483, -1.7753E-83, 1.2345E+235, 120.0, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NaN, -12.2364, 0.0, 120.0, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NaN, -128, 0, 127, -32768, 0, 32767, -2147483648, 0, 2147483647, System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue, 0, 100, 255, 0, 100, 65535, 0, 100, 4294967295, System.UInt64.MinValue, System.UInt64(100), System.UInt64.MaxValue];

                var expectedValues = ["True", "False", "0", "1", "-1", Bridge.ClientTest.ConvertTests.ConvertConstants.DECIMAL_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.DECIMAL_MIN_STRING, "1.234567890123456789012345678", "1234.56", "-1234.56", "-12.2364", "-12.2364659234065", "-1.7753e-83", "1.2345e+235", "120", "-Infinity", "Infinity", "NaN", "-12.2364", "0", "120", "-Infinity", "Infinity", "NaN", (-128).toString(), "0", (127).toString(), (-32768).toString(), "0", (32767).toString(), (-2147483648).toString(), "0", (2147483647).toString(), System.Int64.MinValue.toString(), "0", System.Int64.MaxValue.toString(), (0).toString(), "100", (255).toString(), (0).toString(), "100", (65535).toString(), (0).toString(), "100", (4294967295).toString(), System.UInt64.MinValue.toString(), "100", System.UInt64.MaxValue.toString()];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual$1(expectedValues[i].toLowerCase(), System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.invariantInfo).toLowerCase(), "Index in testValues " + i);
                }
            },
            fromObject: function () {
                Bridge.Test.Assert.areEqual("Bridge.ClientTest.ConvertTests.ConvertToStringTests", System.Convert.toString(new Bridge.ClientTest.ConvertTests.ConvertToStringTests()));
            },
            fromDateTime: function () {
                var testValues = [new Date(2000, 8 - 1, 15, 16, 59, 59), new Date(1901, 1 - 1, 1, 1, 1, 1)];
                var expectedValues = ["08/15/2000 16:59:59", "01/01/1901 01:01:01"];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(Bridge.Date.format(testValues[i]), System.Convert.toString(testValues[i]));
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toString(testValues[i], System.Globalization.DateTimeFormatInfo.invariantInfo));
                }
            },
            fromChar: function () {
                var testValues = [97, 65, 64, 10];
                var expectedValues = ["a", "A", "@", "\n"];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toString(testValues[i], null, 4));
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toString(testValues[i], System.Globalization.CultureInfo.invariantCulture, 4));
                }
            },
            fromByteBase2: function () {
                var testValues = [0, 100, 255];
                var expectedValues = [(0).toString(), "1100100", Bridge.ClientTest.ConvertTests.ConvertConstants.UINT8_MAX_STRING_BASE_2];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 2, 6));
                }
            },
            fromByteBase8: function () {
                var testValues = [0, 100, 255];
                var expectedValues = [(0).toString(), "144", Bridge.ClientTest.ConvertTests.ConvertConstants.UINT8_MAX_STRING_BASE_8];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 8, 6));
                }
            },
            fromByteBase10: function () {
                var testValues = [0, 100, 255];
                var expectedValues = [(0).toString(), "100", (255).toString()];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 10, 6));
                }
            },
            fromByteBase16: function () {
                var testValues = [0, 100, 255];
                var expectedValues = [(0).toString(), "64", Bridge.ClientTest.ConvertTests.ConvertConstants.UINT8_MAX_STRING_BASE_16];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 16, 6));
                }
            },
            fromByteInvalidBase: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f1, $_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f2);
            },
            fromInt16Base2: function () {
                var testValues = [-32768, 0, 32767];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_2, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_2];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 2, 7));
                }
            },
            fromInt16Base8: function () {
                var testValues = [-32768, 0, 32767];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_8, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_8];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 8, 7));
                }
            },
            fromInt16Base10: function () {
                var testValues = [-32768, 0, 32767];
                var expectedValues = [(-32768).toString(), "0", (32767).toString()];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 10, 7));
                }
            },
            fromInt16Base16: function () {
                var testValues = [-32768, 0, 32767];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_16, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_16];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 16, 7));
                }
            },
            fromInt16InvalidBase: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f3, $_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f2);
            },
            fromInt32Base2: function () {
                var testValues = [-2147483648, 0, 2147483647];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_2, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_2];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 2, 9));
                }
            },
            fromInt32Base8: function () {
                var testValues = [-2147483648, 0, 2147483647];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_8, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_8];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 8, 9));
                }
            },
            fromInt32Base10: function () {
                var testValues = [-2147483648, 0, 2147483647];
                var expectedValues = [System.Int32.format(-2147483648, null), "0", System.Int32.format(2147483647, null)];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 10, 9));
                }
            },
            fromInt32Base16: function () {
                var testValues = [-2147483648, 0, 2147483647];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_16, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_16];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 16, 9));
                }
            },
            fromInt32InvalidBase: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f4, $_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f2);
            },
            fromInt64Base2: function () {
                var testValues = [System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_2, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_2];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 2, 11));
                }
            },
            fromInt64Base8: function () {
                var testValues = [System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_8, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_8];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 8, 11));
                }
            },
            fromInt64Base10: function () {
                var testValues = [System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue];
                var expectedValues = [System.Int64.MinValue.toString(), "0", System.Int64.MaxValue.toString()];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 10, 11));
                }
            },
            fromInt64Base16: function () {
                var testValues = [System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_16, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_16];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 16, 11));
                }
            },
            fromInt64InvalidBase: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f5, $_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f2);
            },
            fromBoolean: function () {
                var testValues = [true, false];
                var expectedValues = ["True", "False"];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var expected = expectedValues[i];
                    var actual = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(expected, actual);
                    actual = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(expected, actual);
                }
            },
            fromSByte: function () {
                var testValues = [-128, -1, 0, 1, 127];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.SByte.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromByte: function () {
                var testValues = [0, 0, 1, 100, 255];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.Byte.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromInt16Array: function () {
                var testValues = [-32768, -1000, -1, 0, 1, 1000, 32767];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.Int16.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromUInt16Array: function () {
                var testValues = [0, 0, 1, 1000, 65535];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.UInt16.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromInt32Array: function () {
                var testValues = [-2147483648, -1000, -1, 0, 1, 1000, 2147483647];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.Int32.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromUInt32Array: function () {
                var testValues = [0, 0, 1, 1000, 4294967295];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.UInt32.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromInt64Array: function () {
                var testValues = [System.Int64.MinValue, System.Int64(-1000), System.Int64(-1), System.Int64(0), System.Int64(1), System.Int64(1000), System.Int64.MaxValue];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(testValues[i].format(null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromUInt64Array: function () {
                var testValues = [System.UInt64.MinValue, System.UInt64(0), System.UInt64(1), System.UInt64(1000), System.UInt64.MaxValue];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(testValues[i].format(null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromSingleArray: function () {
                var testValues = [-3.40282347E+38, 0.0, 1.0, 1000.0, 3.40282347E+38, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 1.401298E-45, Number.NaN];
                var expectedValues1 = [Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_MIN_STRING, "0", "1", "1000", Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_MAX_STRING, "-Infinity", "Infinity", Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_EPSILON_STRING, "NaN"];
                var expectedValues2 = [Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_MIN_STRING, "0", "1", "1000", Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_MAX_STRING, "-Infinity", "Infinity", Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_EPSILON_STRING, "NaN"];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(expectedValues1[i], result);

                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(expectedValues2[i], result);
                }
            },
            fromDoubleArray: function () {
                var testValues = [-System.Double.max, 0.0, 1.0, 1000.0, System.Double.max, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 4.94065645841247E-324, Number.NaN];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.DOUBLE_MIN_STRING, "0", "1", "1000", Bridge.ClientTest.ConvertTests.ConvertConstants.DOUBLE_MAX_STRING, "-Infinity", "Infinity", Bridge.ClientTest.ConvertTests.ConvertConstants.DOUBLE_EPSILON_STRING, "NaN"];

                // Vanila Test Cases
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(expectedValues[i], result);
                }
            },
            fromDecimalArray: function () {
                var testValues = [System.Decimal.MinValue, System.Decimal("-1.234567890123456789012345678", System.Globalization.NumberFormatInfo.invariantInfo), System.Decimal(0.0), System.Decimal(1.0), System.Decimal(1000.0), System.Decimal.MaxValue, System.Decimal.One, System.Decimal.Zero, System.Decimal.MinusOne];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.DECIMAL_MIN_STRING, "-1.234567890123456789012345678", "0", "1", "1000", Bridge.ClientTest.ConvertTests.ConvertConstants.DECIMAL_MAX_STRING, "1", "0", "-1"];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(expectedValues[i], result);
                }
            },
            fromDateTimeArray: function () {
                var testValues = [Bridge.Date.parse("08/15/2000 16:59:59", System.Globalization.DateTimeFormatInfo.invariantInfo), Bridge.Date.parse("01/01/0001 01:01:01", System.Globalization.DateTimeFormatInfo.invariantInfo)];

                var formatProvider = System.Globalization.DateTimeFormatInfo.invariantInfo;

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(Bridge.Date.format(testValues[i]), result);
                    result = System.Convert.toString(testValues[i], formatProvider);
                    var expected = Bridge.Date.format(testValues[i], null, formatProvider);
                    Bridge.Test.Assert.areEqual(expected, result);
                }
            },
            fromString: function () {
                var testValues = ["Hello", " ", "", "\u0000"];

                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                }
            },
            fromIFormattable: function () {
                var foo = new Bridge.ClientTest.ConvertTests.ConvertToStringTests.FooFormattable(3);
                var result = System.Convert.toString(foo);
                Bridge.Test.Assert.areEqual("FooFormattable: 3", result);
                result = System.Convert.toString(foo, System.Globalization.NumberFormatInfo.currentInfo);
                Bridge.Test.Assert.areEqual("System.Globalization.NumberFormatInfo: 3", result);

                foo = null;
                result = System.Convert.toString(foo, System.Globalization.NumberFormatInfo.currentInfo);
                Bridge.Test.Assert.areEqual("", result);
            },
            fromNonIConvertible: function () {
                var foo = new Bridge.ClientTest.ConvertTests.ConvertToStringTests.Foo(3);
                var result = System.Convert.toString(foo);
                Bridge.Test.Assert.areEqual("Bridge.ClientTest.ConvertTests.ConvertToStringTests.Foo", result);
                result = System.Convert.toString(foo, System.Globalization.NumberFormatInfo.currentInfo);
                Bridge.Test.Assert.areEqual("Bridge.ClientTest.ConvertTests.ConvertToStringTests.Foo", result);

                foo = null;
                result = System.Convert.toString(foo, System.Globalization.NumberFormatInfo.currentInfo);
                Bridge.Test.Assert.areEqual("", result);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToStringTests", $_);

    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests, {
        f1: function () {
            System.Convert.toStringInBase(255, 13, 6);
        },
        f2: function (err) {
            return Bridge.is(err, System.ArgumentException);
        },
        f3: function () {
            System.Convert.toStringInBase(32767, 0, 7);
        },
        f4: function () {
            System.Convert.toStringInBase(2147483647, 9, 9);
        },
        f5: function () {
            System.Convert.toStringInBase(System.Int64.MaxValue, 1, 11);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToStringTests.Foo", {
        _value: 0,
        ctor: function (value) {
            this.$initialize();
            this._value = value;
        },
        toString$1: function (provider) {
            if (provider != null) {
                return System.String.format("{0}: {1}", provider, this._value);
            } else {
                return System.String.format("Foo: {0}", this._value);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToStringTests.FooFormattable", {
        inherits: [System.IFormattable],
        _value: 0,
        config: {
            alias: [
            "format", "System$IFormattable$format"
            ]
        },
        ctor: function (value) {
            this.$initialize();
            this._value = value;
        },
        format: function (format, formatProvider) {
            if (formatProvider != null) {
                return System.String.format("{0}: {1}", Bridge.Reflection.getTypeFullName(Bridge.getType(formatProvider)), this._value);
            } else {
                return System.String.format("FooFormattable: {0}", (this._value));
            }
        },
        format$1: function (format, formatProvider) {
            return this.format(format, formatProvider);
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestAutoProps", {
        statics: {
            testBasic: function () {
                var c = new Bridge.ClientTest.CSharp6.TestAutoProps.Customer("A", "B");

                Bridge.Test.Assert.areEqual("A B", c.getName());
                Bridge.Test.Assert.areEqual("Jane", c.getFirst());
                Bridge.Test.Assert.areEqual("Doe", c.getLast());
                Bridge.Test.Assert.areEqual("test1", c.getProp1());
                Bridge.Test.Assert.areEqual("test12", c.getProp2());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestAutoProps.Customer", {
        statics: {
            staticField: "test1"
        },
        config: {
            properties: {
                First: "Jane",
                Last: "Doe",
                Name: null,
                Prop1: null,
                Prop2: null
            },
            init: function () {
                Bridge.property(this, "Prop1", Bridge.ClientTest.CSharp6.TestAutoProps.Customer.staticField);
                Bridge.property(this, "Prop2", System.String.concat(Bridge.ClientTest.CSharp6.TestAutoProps.Customer.staticField, "2"));
            }
        },
        ctor: function (first, last) {
            this.$initialize();
            this.setName(System.String.concat(first, " ", last));
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally", {
        statics: {
            testBasic: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $returnValue, 
                    done, 
                    sb, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.Assert.async();
                                            sb = new System.Text.StringBuilder();

                                            sb.append("1");
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        sb.append("2");
                                            throw new System.Exception();
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        sb.append("3");
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 3;
                                            $task1.continueWith($asyncBody, true);
                                            return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        sb.append("4");
                                            $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        sb.append("5");
                                            $task2 = System.Threading.Tasks.Task.delay(1);
                                            $step = 5;
                                            $task2.continueWith($asyncBody, true);
                                            return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        sb.append("6");

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                throw $async_e;
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        sb.append("7");

                                            Bridge.Test.Assert.areEqual("1234567", sb.toString());
                                            done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 1 ){
                                $step = 2;
                                $asyncBody();
                                return;
                            }
                            if ($step >= 1 && $step <= 3){

                                $step = 4;
                                $asyncBody();
                                return;
                            }
                            throw $async_e;
                        }
                    }, arguments);

                $asyncBody();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestConditionAccess", {
        statics: {
            testBasic: function () {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60;
                var customers1 = null;
                var customers2 = [new Bridge.ClientTest.CSharp6.TestConditionAccess.Customer(null), new Bridge.ClientTest.CSharp6.TestConditionAccess.Customer(["1", "2"]), null];

                Bridge.Test.Assert.null(customers1 != null && ($t = customers1[0].method1(customers1 != null ? System.Linq.Enumerable.from(customers1[0].getOrders()).count() : null)) != null ? $t.length : null);
                Bridge.Test.Assert.null(($t1 = customers2[2]) != null && ($t2 = $t1.method1(customers2 != null ? System.Linq.Enumerable.from(customers2[0].getOrders()).count() : null)) != null ? $t2.length : null);
                Bridge.Test.Assert.areEqual(1, customers2 != null && ($t3 = customers2[1].method1(customers2 != null ? System.Linq.Enumerable.from(customers2[1].getOrders()).count() : null)) != null ? $t3.length : null);

                Bridge.Test.Assert.null(($t4 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers1)) != null && ($t5 = $t4[0].method1(customers1 != null ? System.Linq.Enumerable.from(customers1[0].getOrders()).count() : null)) != null ? $t5.length : null);
                Bridge.Test.Assert.null(($t6 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers2)[2]) != null && ($t7 = $t6.method1(customers2 != null ? System.Linq.Enumerable.from(customers2[0].getOrders()).count() : null)) != null ? $t7.length : null);
                Bridge.Test.Assert.areEqual(1, ($t8 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers2)) != null && ($t9 = $t8[1].method1(($t10 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers2)) != null ? System.Linq.Enumerable.from($t10[1].getOrders()).count() : null)) != null ? $t9.length : null);

                Bridge.Test.Assert.null(customers1 != null && ($t11 = customers1[0].getOrders()) != null && ($t12 = $t11.concat.apply($t11, null)) != null ? $t12.length : null);
                Bridge.Test.Assert.null(($t13 = customers2[2]) != null && ($t14 = $t13.getOrders()) != null && ($t15 = $t14.concat.apply($t14, null)) != null ? $t15.length : null);
                Bridge.Test.Assert.null(($t16 = customers2[0]) != null && ($t17 = $t16.getOrders()) != null && ($t18 = $t17.concat.apply($t17, null)) != null ? $t18.length : null);
                Bridge.Test.Assert.areEqual(2, ($t19 = customers2[1]) != null && ($t20 = $t19.getOrders()) != null && ($t21 = $t20.concat.apply($t20, null)) != null ? $t21.length : null);

                Bridge.Test.Assert.null(customers1 != null && ($t22 = customers1[0].getOrders()) != null ? $t22.length : null);
                Bridge.Test.Assert.null(($t23 = customers2[2]) != null && ($t24 = $t23.getOrders()) != null ? $t24.length : null);
                Bridge.Test.Assert.null(($t25 = customers2[0]) != null && ($t26 = $t25.getOrders()) != null ? $t26.length : null);
                Bridge.Test.Assert.areEqual(2, customers2 != null && customers2[1] != null && ($t27 = customers2[1].getOrders()) != null ? $t27.length : null);

                Bridge.Test.Assert.null(customers1 != null && ($t28 = customers1[0].getOrders()) != null ? System.Linq.Enumerable.from($t28).count() : null);
                Bridge.Test.Assert.null(($t29 = customers2[2]) != null && ($t30 = $t29.getOrders()) != null ? System.Linq.Enumerable.from($t30).count() : null);
                Bridge.Test.Assert.null(($t31 = customers2[0].getOrders()) != null ? System.Linq.Enumerable.from($t31).count() : null);
                Bridge.Test.Assert.areEqual(2, customers2 != null && ($t32 = customers2[1].getOrders()) != null ? System.Linq.Enumerable.from($t32).count() : null);

                Bridge.Test.Assert.null(customers1 != null && ($t33 = customers1[0].getOrders()) != null && ($t34 = $t33.concat.apply($t33, null).concat.apply($t33.concat.apply($t33, null), null)) != null ? $t34.length : null);
                Bridge.Test.Assert.null(($t35 = customers2[2]) != null && ($t36 = $t35.getOrders()) != null && ($t37 = $t36.concat.apply($t36, null).concat.apply($t36.concat.apply($t36, null), null)) != null ? $t37.length : null);
                Bridge.Test.Assert.null(customers2 != null && ($t38 = customers2[0].getOrders()) != null && ($t39 = $t38.concat.apply($t38, null).concat.apply($t38.concat.apply($t38, null), null)) != null ? $t39.length : null);
                Bridge.Test.Assert.areEqual(2, customers2 != null && ($t40 = customers2[1].getOrders()) != null && ($t41 = $t40.concat.apply($t40, null).concat.apply($t40.concat.apply($t40, null), null)) != null ? $t41.length : null);

                Bridge.Test.Assert.null(customers1 != null ? customers1[0].method1("getStrings") : null);
                Bridge.Test.Assert.null(($t42 = customers2[2]) != null ? $t42.method1("getStrings") : null);
                Bridge.Test.Assert.areEqual("getStrings", customers2 != null ? customers2[1].method1("getStrings") : null);

                Bridge.Test.Assert.null(($t43 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers1)) != null && ($t44 = System.Linq.Enumerable.from($t43).select($_.Bridge.ClientTest.CSharp6.TestConditionAccess.f1)) != null && ($t45 = $t44.select($_.Bridge.ClientTest.CSharp6.TestConditionAccess.f2)) != null ? $t45.count() : null);
                Bridge.Test.Assert.areEqual(3, ($t46 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers2)) != null && ($t47 = System.Linq.Enumerable.from($t46).select($_.Bridge.ClientTest.CSharp6.TestConditionAccess.f1)) != null && ($t48 = $t47.select($_.Bridge.ClientTest.CSharp6.TestConditionAccess.f2)) != null ? $t48.count() : null);

                Bridge.Test.Assert.null(($t49 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers1)) != null && $t49[0].fields != null ? $t49[0].fields.length : null);
                Bridge.Test.Assert.null(($t50 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers1)) != null && $t50[0] != null ? System.Linq.Enumerable.from($t50[0].getOrders()).count() : null);
                Bridge.Test.Assert.null(($t51 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers1)) != null && $t51[0] != null && ($t52 = $t51[0].getOrders()) != null ? System.Linq.Enumerable.from($t52).count() : null);
                Bridge.Test.Assert.null(customers1 != null ? System.Linq.Enumerable.from(customers1[0].getOrders()).count() : null);
                Bridge.Test.Assert.null(customers1 != null && customers1[0] != null && ($t53 = customers1[0].getOrders()) != null ? System.Linq.Enumerable.from($t53).count() : null);
                Bridge.Test.Assert.null(customers1 != null && customers1[0] != null && customers1[0].fields != null ? customers1[0].fields.length : null);
                Bridge.Test.Assert.null(($t54 = Bridge.ClientTest.CSharp6.TestConditionAccess.getCustomers(customers1)) != null && ($t55 = $t54[0].getOrders()) != null ? System.Linq.Enumerable.from($t55).count() : null);

                Bridge.Test.Assert.null(customers1 != null && customers1[0] != null && customers1[0].fields != null ? customers1[0].fields.length : null);
                Bridge.Test.Assert.null(customers1 != null && customers1[0] != null && ($t56 = customers1[0].getOrders()) != null ? System.Linq.Enumerable.from($t56).count() : null);
                customers1 != null ? customers1[0].method2() : null;
                customers1 != null && customers1[0] != null ? customers1[0].method2() : null;

                var strings = System.Array.init(1, null);
                Bridge.Test.Assert.null(($t57 = Bridge.ClientTest.CSharp6.TestConditionAccess.getStrings(null)) != null ? $t57.length : null);
                Bridge.Test.Assert.areEqual(1, strings != null ? strings.length : ($t58 = null, $t58 != null ? $t58 : 0));
                Bridge.Test.Assert.null(strings != null ? strings[0] : null);

                var action1 = $_.Bridge.ClientTest.CSharp6.TestConditionAccess.f3;
                var action2 = null;
                Bridge.Test.Assert.areEqual("test", !Bridge.staticEquals(action1, null) ? action1() : null);
                Bridge.Test.Assert.null(!Bridge.staticEquals(action2, null) ? action2() : null);

                var o1 = "test";
                var o2 = null;
                Bridge.Test.Assert.areEqual(4, ($t59 = (Bridge.as(o1, String))) != null ? $t59.length : null);
                Bridge.Test.Assert.null(($t60 = (Bridge.as(o2, String))) != null ? $t60.length : null);
            },
            getStrings: function (strings) {
                return strings;
            },
            getCustomers: function (customers) {
                return customers;
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.CSharp6.TestConditionAccess", $_);

    Bridge.apply($_.Bridge.ClientTest.CSharp6.TestConditionAccess, {
        f1: function (c) {
            return c;
        },
        f2: function (c2) {
            return c2;
        },
        f3: function () {
            return "test";
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestConditionAccess.Customer", {
        fields: null,
        config: {
            properties: {
                Orders: null
            }
        },
        ctor: function (values) {
            this.$initialize();
            this.fields = values;
            this.setOrders(values);
        },
        method1: function (s) {
            return s.toString();
        },
        method2: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestExceptionFilter", {
        statics: {
            logParameter: null,
            testFalseFilter: function () {
                var isCaught = false;
                try {
                    try {
                        throw new Bridge.ClientTest.CSharp6.TestExceptionFilter.MyException();
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, Bridge.ClientTest.CSharp6.TestExceptionFilter.MyException)) {
                            if (Bridge.ClientTest.CSharp6.TestExceptionFilter.log(null, false)) {
                                Bridge.Test.Assert.fail$1("Flow should not be in catch block");
                            } else {
                                throw $e1;
                            }
                        } else {
                            throw $e1;
                        }
                    }
                }
                catch ($e2) {
                    $e2 = System.Exception.create($e2);
                    if (Bridge.is($e2, Bridge.ClientTest.CSharp6.TestExceptionFilter.MyException)) {
                        isCaught = true;
                    } else {
                        throw $e2;
                    }
                }

                Bridge.Test.Assert.true(isCaught);
            },
            testTrueFilter: function () {
                var isCaught = false;

                Bridge.ClientTest.CSharp6.TestExceptionFilter.logParameter = null;

                try {
                    throw new Bridge.ClientTest.CSharp6.TestExceptionFilter.MyException();
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var e;
                    if (Bridge.is($e1, Bridge.ClientTest.CSharp6.TestExceptionFilter.MyException)) {
                        e = $e1;
                        if (Bridge.ClientTest.CSharp6.TestExceptionFilter.log(e, true)) {
                            isCaught = true;
                        } else {
                            throw $e1;
                        }
                    } else {
                        throw $e1;
                    }
                }
                Bridge.Test.Assert.true(isCaught);
                Bridge.Test.Assert.notNull$1(Bridge.ClientTest.CSharp6.TestExceptionFilter.logParameter, "Log() parameter was MyException");
            },
            log: function (e, result) {
                if (e != null) {
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.logParameter = Bridge.as(e, Bridge.ClientTest.CSharp6.TestExceptionFilter.MyException);
                }

                return result;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestExceptionFilter.MyException", {
        inherits: [System.Exception]
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestExpressionBodyFunction", {
        statics: {
            testBasic: function () {
                var point = new Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Point(1, 2);
                point = point.move(3, 4);
                Bridge.Test.Assert.areEqual(4, point.v1);
                Bridge.Test.Assert.areEqual(6, point.v2);

                var person = new Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Person();
                var s = Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Person.op_Implicit(person);
                Bridge.Test.Assert.areEqual("Jane Doe", s);
                Bridge.Test.Assert.areEqual("Jane Doe", person.getName());
                Bridge.Test.Assert.null(person.getItem(0));
                Bridge.Test.Assert.notNull(person.getItem(1));

                var complex1 = new Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Complex(1);
                var complex2 = new Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Complex(2);

                Bridge.Test.Assert.areEqual(2, (Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Complex.op_Addition(complex1, complex2)).v);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Complex", {
        statics: {
            op_Addition: function (a, b) {
                return a.add(b);
            }
        },
        v: 0,
        ctor: function (v) {
            this.$initialize();
            this.v = v;
        },
        add: function (b) {
            return b;
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Person", {
        statics: {
            op_Implicit: function (p) {
                return System.String.concat(p.getFirst(), " ", p.getLast());
            }
        },
        config: {
            properties: {
                First: "Jane",
                Last: "Doe"
            }
        },
        getName: function () {
            return System.String.concat(this.getFirst(), " ", this.getLast());
        },
        getItem: function (id) {
            return id > 0 ? new Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Person() : null;
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Point", {
        v1: 0,
        v2: 0,
        ctor: function (v1, v2) {
            this.$initialize();
            this.v1 = v1;
            this.v2 = v2;
        },
        move: function (dx, dy) {
            return new Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.Point(((this.v1 + dx) | 0), ((this.v2 + dy) | 0));
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestIndexInitializer", {
        statics: {
            testBasic: function () {
                var bitinator = $_.Bridge.ClientTest.CSharp6.TestIndexInitializer.f1(new Bridge.ClientTest.CSharp6.TestIndexInitializer.BitFlipinator());

                Bridge.Test.Assert.areEqual(239, bitinator.getValue());

                var numbers = $_.Bridge.ClientTest.CSharp6.TestIndexInitializer.f2(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
                Bridge.Test.Assert.areEqual("seven", numbers.get(7));
                Bridge.Test.Assert.areEqual("nine", numbers.get(9));
                Bridge.Test.Assert.areEqual("thirteen", numbers.get(13));

                numbers = $_.Bridge.ClientTest.CSharp6.TestIndexInitializer.f3(new (System.Collections.Generic.Dictionary$2(System.Int32, String))());
                Bridge.Test.Assert.areEqual("seven", numbers.get(7));
                Bridge.Test.Assert.areEqual("nine", numbers.get(9));
                Bridge.Test.Assert.areEqual("thirteen", numbers.get(13));

                numbers = $_.Bridge.ClientTest.CSharp6.TestIndexInitializer.f4(new (System.Collections.Generic.Dictionary$2(System.Int32,String))());
                Bridge.Test.Assert.areEqual("seven", numbers.get(7));
                Bridge.Test.Assert.areEqual("nine", numbers.get(9));
                Bridge.Test.Assert.areEqual("thirteen", numbers.get(13));
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.CSharp6.TestIndexInitializer", $_);

    Bridge.apply($_.Bridge.ClientTest.CSharp6.TestIndexInitializer, {
        f1: function (_o1) {
            _o1.setValue(255);
            _o1.setItem(4, 0);
            return _o1;
        },
        f2: function (_o2) {
            _o2.set(7, "seven");
            _o2.set(9, "nine");
            _o2.set(13, "thirteen");
            return _o2;
        },
        f3: function (_o3) {
            _o3.set(7, "seven");
            _o3.set(9, "nine");
            _o3.set(13, "thirteen");
            return _o3;
        },
        f4: function (_o4) {
            _o4.set(7, "seven");
            _o4.set(9, "nine");
            _o4.set(13, "thirteen");
            return _o4;
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestIndexInitializer.BitFlipinator", {
        config: {
            properties: {
                Value: 0
            }
        },
        setItem: function (bit, value) {
            this.set(bit, value);
        },
        set: function (bit, value) {
            if (value < 0 || value > 1) {
                throw new System.ArgumentOutOfRangeException();
            }
            if (bit < 1 || bit > 32) {
                throw new System.ArgumentOutOfRangeException();
            }

            var filterBit = 1 << bit;
            this.setValue((value === 1) ? this.getValue() | filterBit : this.getValue() & ~filterBit);
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestInterpolatedStrings", {
        statics: {
            config: {
                properties: {
                    P: 0
                }
            },
            F1: function () {
                return 0;
            },
            F2: function () {
                return 0;
            },
            F3: function () {
                return 0;
            },
            testBasic: function () {
                var $t;
                var p = new Bridge.ClientTest.CSharp6.TestInterpolatedStrings.Person();

                Bridge.Test.Assert.areEqual("Jane is 10 year{s} old", System.String.format("{0} is {1} year{{s}} old", p.getName(), p.getAge()));
                Bridge.Test.Assert.areEqual("                Jane is 010 year{s} old", System.String.format("{0,20} is {1:D3} year{{s}} old", p.getName(), p.getAge()));

                Bridge.Test.Assert.areEqual("Jane is 10 years old", System.String.format("{0} is {1} year{2} old", p.getName(), p.getAge(), (p.getAge() === 1 ? "" : "s")));
                p.setAge(1);
                Bridge.Test.Assert.areEqual("Jane is 1 year old", System.String.format("{0} is {1} year{2} old", p.getName(), p.getAge(), (p.getAge() === 1 ? "" : "s")));

                var i = 0, j = 1, k = 2;
                Bridge.Test.Assert.areEqual("i = 0, j = 1", System.String.format("i = {0}, j = {1}", i, j));
                Bridge.Test.Assert.areEqual("{0, 1}", System.String.format("{{{0}, {1}}}", i, j));
                Bridge.Test.Assert.areEqual("i = 00, j = 1, k =            2", System.String.format("i = {0:00}, j = {1:##}, k = {2,12:#0}", i, j, k));
                Bridge.Test.Assert.areEqual("0, 0, 0", System.String.format("{0}, {1}, {2}", Bridge.ClientTest.CSharp6.TestInterpolatedStrings.F1(), ($t = Bridge.ClientTest.CSharp6.TestInterpolatedStrings.F2(), Bridge.ClientTest.CSharp6.TestInterpolatedStrings.setP($t), $t), Bridge.ClientTest.CSharp6.TestInterpolatedStrings.F3()));

                var f1 = System.Runtime.CompilerServices.FormattableStringFactory.create("i = {0}, j = {1}", [i, j]);
                var f2 = System.Runtime.CompilerServices.FormattableStringFactory.create("i = {0}, j = {1}", [i, j]);
                Bridge.Test.Assert.areEqual(2, f2.getArgumentCount());
                Bridge.Test.Assert.areEqual("i = {0}, j = {1}", f2.getFormat());
                Bridge.Test.Assert.areEqual(0, f2.getArgument(0));
                Bridge.Test.Assert.areEqual(1, f2.getArgument(1));
                Bridge.Test.Assert.areEqual(2, f2.getArguments().length);
                Bridge.Test.Assert.areEqual("i = 0, j = 1", f2.toString());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestInterpolatedStrings.Person", {
        config: {
            properties: {
                Name: "Jane",
                Age: 10
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestNameOf", {
        statics: {
            testBasic: function () {
                var c = new Bridge.ClientTest.CSharp6.TestNameOf.C();

                Bridge.Test.Assert.areEqual("C", "C");
                Bridge.Test.Assert.areEqual("method1", "method1");
                Bridge.Test.Assert.areEqual("method2", "method2");
                Bridge.Test.Assert.areEqual("method1", "method1");
                Bridge.Test.Assert.areEqual("method2", "method2");
                Bridge.Test.Assert.areEqual("x", Bridge.ClientTest.CSharp6.TestNameOf.C.method1("", 0));
                Bridge.Test.Assert.areEqual("Y", Bridge.ClientTest.CSharp6.TestNameOf.C.method1$1("", ""));
                Bridge.Test.Assert.areEqual("z", c.method2(0));
                Bridge.Test.Assert.areEqual("Stuff", "Stuff");
                Bridge.Test.Assert.areEqual("f", "f");
                Bridge.Test.Assert.areEqual("T", c.f(System.Int32));
                Bridge.Test.Assert.areEqual("CSharp6", "CSharp6");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestNameOf.C", {
        statics: {
            method1: function (x, y) {
                return "x";
            },
            method1$1: function (x, Y) {
                return "Y";
            }
        },
        method2: function (z) {
            return "z";
        },
        f: function (T) {
            return "T";
        }
    });

    Bridge.define("Bridge.ClientTest.CSharp6.TestUsingStatic", {
        statics: {
            testBasic: function () {
                Bridge.Test.Assert.areEqual(5, Math.sqrt(25));
                Bridge.Test.Assert.areEqual(4, 4);

                var range = System.Linq.Enumerable.range(5, 17);
                var even = range.where($_.Bridge.ClientTest.CSharp6.TestUsingStatic.f1);
                Bridge.Test.Assert.areEqual(8, even.count());
                Bridge.Test.Assert.areEqual(6, even.first());
                Bridge.Test.Assert.areEqual(20, even.last());
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.CSharp6.TestUsingStatic", $_);

    Bridge.apply($_.Bridge.ClientTest.CSharp6.TestUsingStatic, {
        f1: function (i) {
            return i % 2 === 0;
        }
    });

    Bridge.define("Bridge.ClientTest.CultureInfoTests", {
        typePropertiesAreCorrect: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.Assert.areEqual("System.Globalization.CultureInfo", Bridge.Reflection.getTypeFullName(System.Globalization.CultureInfo));
            Bridge.Test.Assert.true(Bridge.hasValue(culture));
        },
        getFormatWorks: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.Assert.areEqual(null, culture.getFormat(System.Int32));
            Bridge.Test.Assert.areEqual(culture.numberFormat, culture.getFormat(System.Globalization.NumberFormatInfo));
            Bridge.Test.Assert.areEqual(culture.dateTimeFormat, culture.getFormat(System.Globalization.DateTimeFormatInfo));
        },
        invariantWorks: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.Assert.areEqual("iv", culture.name);
            Bridge.Test.Assert.areEqual(System.Globalization.DateTimeFormatInfo.invariantInfo, culture.dateTimeFormat);
            Bridge.Test.Assert.areEqual(System.Globalization.NumberFormatInfo.invariantInfo, culture.numberFormat);
        }
    });

    Bridge.define("Bridge.ClientTest.DecimalMathTests", {
        statics: {
            useLogging: false,
            jSMode: true,
            NoDotNetDiff: false,
            HasDotNetDiff: true,
            maxValue: System.Decimal(0.0),
            minValue: System.Decimal(0.0),
            inputAdd: null,
            inputSubtract: null,
            inputMultiply: null,
            inputDivide: null,
            inputRemainder: null,
            config: {
                init: function () {
                    this.maxValue = System.Decimal.MaxValue;
                    this.minValue = System.Decimal.MinValue;
                    this.inputAdd = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(-47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(-47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.33478923476"), System.Decimal(47.0), System.Decimal("443534569034923.33478923476")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal("443534569034923.12345678901335")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal("452971474759022.42132912943788")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(17.0), System.Decimal("4435345690348766678656790470")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.2345324), System.Decimal("4435345690348766678656790453"), System.Decimal("4435345690348766678656790470.2")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "0.00000000000005", System.Decimal("-943456769034871.4234"), System.Decimal("47.00000000003455"), System.Decimal("-943456769034824.4233999999654")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal(-13.0), System.Decimal("6999545690348766678656790440")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(11.0), System.Decimal("-6435345690348766678656790453"), System.Decimal("-6435345690348766678656790442")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal("79228162514264337593543950334")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.MinusOne, System.Decimal("79228162514264337593543950334")]], 15, 5);
                    this.inputSubtract = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(-47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(-47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.33478923476"), System.Decimal(47.0), System.Decimal("443534569034829.33478923476")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal("443534569034829.12345678901135")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal("434097663310729.82558444858682")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(17.0), System.Decimal("4435345690348766678656790436")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.2345324), System.Decimal("4435345690348766678656790453"), System.Decimal("-4435345690348766678656790435.8")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal("-5E-14"), System.Decimal("-943456769034871.4234"), System.Decimal("47.00000000003455"), System.Decimal("-943456769034918.4234000000346")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal(-13.0), System.Decimal("6999545690348766678656790466")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(11.0), System.Decimal("-6435345690348766678656790453"), System.Decimal("6435345690348766678656790464")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal("79228162514264337593543950334")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.One, System.Decimal("79228162514264337593543950334")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne, System.Decimal("-79228162514264337593543950334")]], 16, 5);
                    this.inputMultiply = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(0.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.33478923476"), System.Decimal(0.47), System.Decimal("208461247446391.8773509403372")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("43534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal("2046124744639221.3370381184566")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("44.353456903487612345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal("418559391338198.38088395328596")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(0.17), System.Decimal("754008767359290335371654377.01")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.2345324), System.Decimal("443534569034876667865679045.37"), System.Decimal("7644110900551618662335084355.4")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-943456769034871.4234"), System.Decimal("0.4700000000003455"), System.Decimal("-443424681446715.53331170154808")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal(-0.01), System.Decimal("6999545690348766678656790453"), System.Decimal(-0.13), System.Decimal("-909940939745339668225382758.9")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal(0.0001), System.Decimal(0.11), System.Decimal("-64353456903487666786567904.535"), System.Decimal("-7078880259383643346522469.4988")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue, Bridge.ClientTest.DecimalMathTests.maxValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.One, Bridge.ClientTest.DecimalMathTests.maxValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.maxValue]], 17, 5);
                    this.inputDivide = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.One, System.Decimal(2.0), System.Decimal(0.5)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(3.0), System.Decimal(4.0), System.Decimal(0.75)], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "-0.00000000000000000000000000003", System.Decimal(5.0), System.Decimal(6.0), System.Decimal("0.8333333333333333333333333333")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(7.0), System.Decimal(8.0), System.Decimal(0.875)], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "-0.0000000000000005", System.Decimal("443534569034876.33478923476"), System.Decimal(47.0), System.Decimal("9436905724146.304995515633191")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "0.0000000000000002", System.Decimal("443534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal("9436905724146.099713852443963")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal("47.000000000000013082337857467")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(17.0), System.Decimal("260902687667574510509222967.82")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "0.0000000000000000000000000000142752779107986686908967873", System.Decimal(17.2345324), System.Decimal("4435345690348766678656790453"), System.Decimal("3.9000000000000004E-27")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-943456769034871.4234"), System.Decimal("47.00000000003455"), System.Decimal("-20073548277322.933666106776439")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal(-13.0), System.Decimal("-538426591565289744512060804.08")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "0.0000000000000000000000000000093098847039324132480985641", System.Decimal(11.0), System.Decimal("-6435345690348766678656790453"), System.Decimal("-1.7000000000000002E-27")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "-0.000000000000000000000000000012621774483536188886587657045", System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.maxValue]], 20, 5);
                    this.inputRemainder = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.33478923476"), System.Decimal(47.0), System.Decimal(14.33478923476)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal(4.68655106486635)], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal("4E-15"), System.Decimal("443534569034876.12345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal(0.12345678901235)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(17.0), System.Decimal(14.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.2345324), System.Decimal("4435345690348766678656790453"), System.Decimal(17.2345324)], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal("1E-13"), System.Decimal("-943456769034871.4234"), System.Decimal("47.00000000003455"), System.Decimal(-43.8823070185248)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal(-13.0), System.Decimal.One], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(11.0), System.Decimal("-6435345690348766678656790453"), System.Decimal(11.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.One, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne, System.Decimal(0.0)]], 16, 5);
                }
            },
            testSubtractOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputSubtract, "SubtractOperator", $_.Bridge.ClientTest.DecimalMathTests.f1);
            },
            testRemainderOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputRemainder, "RemainderOperator", $_.Bridge.ClientTest.DecimalMathTests.f2);
            },
            testMultiplyOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputMultiply, "MultiplyOperator", $_.Bridge.ClientTest.DecimalMathTests.f3);
            },
            testDivideOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputDivide, "DivideOperator", $_.Bridge.ClientTest.DecimalMathTests.f4);
            },
            testAddOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputAdd, "AddOperator", $_.Bridge.ClientTest.DecimalMathTests.f5);
            },
            testAddMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputAdd, "AddMethod", $_.Bridge.ClientTest.DecimalMathTests.f5);
            },
            testDivideMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputDivide, "DivideMethod", $_.Bridge.ClientTest.DecimalMathTests.f4);
            },
            testMultiplyMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputMultiply, "MiltiplyMethod", $_.Bridge.ClientTest.DecimalMathTests.f3);
            },
            testRemainderMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputRemainder, "RemainderMethod", $_.Bridge.ClientTest.DecimalMathTests.f2);
            },
            testSubtractMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputSubtract, "SubtractMethod", $_.Bridge.ClientTest.DecimalMathTests.f1);
            },
            testCeilingMethod: function () {
                var input = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-443534569034876.12345678901235"), System.Decimal(-443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-443534569034876.82345678901235"), System.Decimal(-443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.62345678901235"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.49999999999999"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.50000000000001"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.99999999999999"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal("4435345690348766678656790453")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.9345324), System.Decimal(18.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-0.9434567690348714234"), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal("6999545690348766678656790453")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.maxValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, Bridge.ClientTest.DecimalMathTests.minValue]], 15, 4);

                Bridge.ClientTest.DecimalMathTests.runOperationSet(input, "CeilingMethod", $_.Bridge.ClientTest.DecimalMathTests.f6);
            },
            testFloorMethod: function () {
                var input = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-443534569034876.12345678901235"), System.Decimal(-443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-443534569034876.82345678901235"), System.Decimal(-443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.62345678901235"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.49999999999999"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.50000000000001"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.99999999999999"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal("4435345690348766678656790453")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.9345324), System.Decimal(17.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-0.9434567690348714234"), System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal("6999545690348766678656790453")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.maxValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, Bridge.ClientTest.DecimalMathTests.minValue]], 15, 4);

                Bridge.ClientTest.DecimalMathTests.runOperationSet(input, "FloorMethod", $_.Bridge.ClientTest.DecimalMathTests.f7);
            },
            runOperationSet$1: function (input, name, operation) {
                var logger = new Bridge.ClientTest.DecimalMathTests.Logger();
                logger.onLogBegin(name);

                for (var i = System.Array.getLower(input, 0); i <= (System.Array.getLength(input, 0) - 1); i = (i + 1) | 0) {
                    var lowerBound = System.Array.getLower(input, 1);
                    var dotNetDiff = Bridge.ClientTest.DecimalMathTests.parseDotNetDiff(input, i, lowerBound);

                    var a = input.get([i, ((lowerBound + 2) | 0)]);
                    var b = input.get([i, ((lowerBound + 3) | 0)]);
                    var expected = input.get([i, ((lowerBound + 4) | 0)]);
                    var result = Bridge.ClientTest.DecimalMathTests.runOperation(System.Nullable.getValue(Bridge.cast(a, System.Decimal)), System.Nullable.getValue(Bridge.cast(b, System.Decimal)), operation);

                    logger.onLog([dotNetDiff, a, b, result]);

                    var diff = Bridge.ClientTest.DecimalMathTests.getDifference(expected, result);
                    var diffReport = Bridge.ClientTest.DecimalMathTests.getDifferenceReport(diff);

                    Bridge.ClientTest.DecimalMathTests.assertDecimal(dotNetDiff, expected, result, diffReport, System.String.format("{0} for row {1} with operand {2} and {3} .NetDiff {4}{5}", name, i, a, b, dotNetDiff, diffReport));
                }

                logger.onLogEnd();
            },
            runOperationSet: function (input, name, operation) {
                var logger = new Bridge.ClientTest.DecimalMathTests.Logger();
                logger.onLogBegin(name);

                for (var i = System.Array.getLower(input, 0); i <= (System.Array.getLength(input, 0) - 1); i = (i + 1) | 0) {
                    var lowerBound = System.Array.getLower(input, 1);
                    var dotNetDiff = Bridge.ClientTest.DecimalMathTests.parseDotNetDiff(input, i, lowerBound);
                    var a = input.get([i, ((lowerBound + 2) | 0)]);
                    var expected = input.get([i, ((lowerBound + 3) | 0)]);
                    var result = Bridge.ClientTest.DecimalMathTests.runOperation$1(System.Nullable.getValue(Bridge.cast(a, System.Decimal)), operation);

                    logger.onLog([dotNetDiff, a, result]);

                    var diff = Bridge.ClientTest.DecimalMathTests.getDifference(expected, result);
                    var diffReport = Bridge.ClientTest.DecimalMathTests.getDifferenceReport(diff);

                    Bridge.ClientTest.DecimalMathTests.assertDecimal(dotNetDiff, expected, result, diffReport, System.String.format("{0} for row {1} with operand {2} .NetDiff {3}{4}", name, i, a, dotNetDiff, diffReport));
                }

                logger.onLogEnd();
            },
            parseDotNetDiff: function (input, i, lowerBound) {
                var o = input.get([i, ((lowerBound + 1) | 0)]);
                if (o == null) {
                    return System.Decimal.lift(null);
                }

                if (Bridge.is(o, String)) {
                    return System.Decimal(o.toString());
                }

                var dotNetDiff = Bridge.cast(input.get([i, ((lowerBound + 1) | 0)]), System.Decimal, true);
                return dotNetDiff;
            },
            assertDecimal: function (dotNetDiff, expected, result, differenceReport, message) {
                if (Bridge.ClientTest.DecimalMathTests.jSMode) {
                    Bridge.ClientTest.DecimalMathTests.assertIsDecimalAndEqualTo(result, System.Nullable.getValue(Bridge.cast(expected, System.Decimal)).sub((System.Nullable.hasValue(dotNetDiff) ? System.Nullable.getValue(dotNetDiff) : System.Decimal(0.0))), message);
                } else {
                    Bridge.ClientTest.DecimalMathTests.assertIsDecimalAndEqualTo(result, expected, message);
                }
            },
            assertIsDecimalAndEqualTo: function (actual, expected, message) {
                Bridge.Test.Assert.true$1(Bridge.is(actual, System.Decimal), System.String.concat("isDecimal ", message));
                Bridge.Test.Assert.areStrictEqual$1(expected.toString(), actual.toString(), System.String.concat("StrictEqual ", message));
            },
            getDifferenceReport: function (difference) {
                var differenceReport = difference.ne(System.Decimal(0.0)) ? System.String.concat("; result diff is ", Bridge.Int.format(difference, 'G')) : "";
                return differenceReport;
            },
            getDifference: function (expected, result) {
                var difference;
                if ((Bridge.is(result, System.Decimal) || Bridge.is(result, System.Int32)) && (Bridge.is(expected, System.Decimal) || Bridge.is(expected, System.Int32))) {
                    difference = System.Nullable.getValue(Bridge.cast(expected, System.Decimal)).sub(System.Nullable.getValue(Bridge.cast(result, System.Decimal)));
                } else {
                    difference = System.Decimal(0.0);
                }

                return difference;
            },
            runOperation: function (a, b, operation) {
                return operation(a, b);
            },
            runOperation$1: function (a, operation) {
                return operation(a);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.DecimalMathTests", $_);

    Bridge.apply($_.Bridge.ClientTest.DecimalMathTests, {
        f1: function (a, b) {
            return a.sub(b);
        },
        f2: function (a, b) {
            return a.mod(b);
        },
        f3: function (a, b) {
            return a.mul(b);
        },
        f4: function (a, b) {
            return a.div(b);
        },
        f5: function (a, b) {
            return a.add(b);
        },
        f6: function (a) {
            return a.ceil();
        },
        f7: function (a) {
            return a.floor();
        }
    });

    Bridge.define("Bridge.ClientTest.DecimalMathTests.Logger", {
        statics: {
            convertParameters: function (parameters) {
                if (parameters === void 0) { parameters = []; }
                var result = System.Array.init(((parameters.length + 1) | 0), null);

                for (var i = 0; i < parameters.length; i = (i + 1) | 0) {
                    if (i === 0) {
                        var d = Bridge.cast(parameters[0], System.Decimal, true);
                        result[0] = System.Nullable.hasValue(d) ? "HasDotNetDiff" : "NoDotNetDiff";
                        result[1] = System.Nullable.hasValue(d) ? System.String.concat(System.Nullable.toString(d, function ($t) { return Bridge.Int.format($t, 'G'); }), "m") : "null";

                        continue;
                    }

                    var o = parameters[i];
                    var j = (i + 1) | 0;
                    if (Bridge.is(o, System.Decimal)) {
                        var d1 = System.Nullable.getValue(Bridge.cast(o, System.Decimal));
                        if (d1.equalsT(Bridge.ClientTest.DecimalMathTests.maxValue)) {
                            result[j] = "DecimalMathTests.MaxValue";
                        } else {
                            if (d1.equalsT(Bridge.ClientTest.DecimalMathTests.minValue)) {
                                result[j] = "DecimalMathTests.MinValue";
                            } else {
                                if (d1.equalsT(System.Decimal.MinusOne)) {
                                    result[j] = "decimal.MinusOne";
                                } else {
                                    if (d1.equalsT(System.Decimal.One)) {
                                        result[j] = "decimal.One";
                                    } else {
                                        result[j] = System.String.concat(Bridge.Int.format(d1, 'G'), "m");
                                    }
                                }
                            }
                        }
                    } else {
                        result[j] = o;
                    }
                }

                return result;
            }
        },
        config: {
            properties: {
                Text: null
            }
        },
        ctor: function () {
            this.$initialize();
            if (Bridge.ClientTest.DecimalMathTests.useLogging) {
                this.setText(new System.Text.StringBuilder());
            }
        },
        onLogBegin: function (name) {
            if (!Bridge.ClientTest.DecimalMathTests.useLogging) {
                return;
            }

            this.getText().appendLine(System.String.concat("//------------------------------", name, "------------------------------"));
            this.getText().appendLine("object[,] input = new object[,]");
            this.getText().append("{");
        },
        onLog: function (parameters) {
            if (parameters === void 0) { parameters = []; }
            if (!Bridge.ClientTest.DecimalMathTests.useLogging) {
                return;
            }

            var sb = new System.Text.StringBuilder("{{");
            for (var i = 0; i < ((parameters.length + 1) | 0); i = (i + 1) | 0) {
                sb.append(" {");
                sb.append(i);
                sb.append("},");
            }
            sb.remove(((sb.getLength() - 1) | 0), 1);
            sb.append(" }},");

            var format = sb.toString();

            this.getText().appendLine();
            //Fix
            //this.Text.AppendFormat(format, ConvertParameters(parameters));
            var convertedParams = Bridge.ClientTest.DecimalMathTests.Logger.convertParameters(parameters);
            if (convertedParams.length === 4) {
                this.getText().appendFormat(format, convertedParams[0], convertedParams[1], convertedParams[2], convertedParams[3]);
            }
            if (convertedParams.length === 5) {
                this.getText().appendFormat(format, convertedParams[0], convertedParams[1], convertedParams[2], convertedParams[3], convertedParams[4]);
            }
        },
        onLogEnd: function () {
            if (!Bridge.ClientTest.DecimalMathTests.useLogging) {
                return;
            }

            var sb = this.getText();

            sb.remove(((sb.getLength() - 1) | 0), 1);
            sb.appendLine();
            sb.append("};");

            Bridge.Console.log(sb.toString());
        }
    });

    Bridge.define("Bridge.ClientTest.Diagnostics.Contracts.ContractTests", {
        assertNoExceptions: function (block) {
            try {
                block();
                Bridge.Test.Assert.true$1(true, "No Exception thrown.");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.Assert.fail$1(System.String.concat("Unexpected Exception ", ex));
            }
        },
        assertException: function (block, expectedKind, expectedMessage, expectedUserMessage, expectedInnerException) {
            try {
                block();
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                var cex = Bridge.as(ex, System.Diagnostics.Contracts.ContractException);
                if (cex == null) {
                    Bridge.Test.Assert.fail$1("Unexpected Exception");
                }

                Bridge.Test.Assert.true$1(cex.getKind() === expectedKind, "Kind");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(cex.getMessage(), expectedMessage), "Message");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(cex.getUserMessage(), expectedUserMessage), "UserMessage");
                if (cex.getInnerException() != null) {
                    Bridge.Test.Assert.true$1(Bridge.equals(cex.getInnerException(), expectedInnerException), "InnerException");
                } else {
                    if (cex.getInnerException() == null && expectedInnerException != null) {
                        Bridge.Test.Assert.fail$1("InnerException");
                    }
                }
            }
        },
        assume: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a !== 0; });
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.assume, "Contract 'a === 99' failed", null, null);
        },
        assumeWithUserMessage: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a !== 0; }, "is not zero");
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 0; }, "is zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 99; }, "is 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.assume, "Contract 'a === 99' failed: is 99", "is 99", null);
        },
        _Assert: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a !== 0; });
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.assert, "Contract 'a === 99' failed", null, null);
        },
        assertWithUserMessage: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a !== 0; }, "is not zero");
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 0; }, "is zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 99; }, "is 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.assert, "Contract 'a === 99' failed: is 99", "is 99", null);
        },
        requires: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a !== 0; });
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.precondition, "Contract 'a === 99' failed", null, null);
        },
        requiresWithUserMessage: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a !== 0; }, "must not be zero");
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 0; }, "can only be zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 99; }, "can only be 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.precondition, "Contract 'a === 99' failed: can only be 99", "can only be 99", null);
        },
        requiresWithTypeException: function () {
            var a = 0;
            Bridge.Test.Assert.throws$5(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a !== 0; });
            }, "Exception");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a === 0; });
            });
        },
        requiredWithTypeExceptionAndUserMessage: function () {
            var a = 0;
            Bridge.Test.Assert.throws$5(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a !== 0; }, "must not be zero");
            }, "Exception");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a === 0; }, "can only be zero");
            });
        },
        forAll: function () {
            Bridge.Test.Assert.throws$2($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f2, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f3, "ArgumentNullException");
            this.assertNoExceptions($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f5);
            Bridge.Test.Assert.false(System.Diagnostics.Contracts.Contract.forAll(2, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f4));
            Bridge.Test.Assert.true(System.Diagnostics.Contracts.Contract.forAll(2, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f6));
        },
        forAllWithCollection: function () {
            Bridge.Test.Assert.throws$2($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f7, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f3, "ArgumentNullException");
            this.assertNoExceptions($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f8);
            Bridge.Test.Assert.false(System.Diagnostics.Contracts.Contract.forAll$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f4));
            Bridge.Test.Assert.true(System.Diagnostics.Contracts.Contract.forAll$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f6));
        },
        exists: function () {
            Bridge.Test.Assert.throws$2($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f9, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f3, "ArgumentNullException");
            this.assertNoExceptions($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f11);
            Bridge.Test.Assert.true(System.Diagnostics.Contracts.Contract.exists(1, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f10));
            Bridge.Test.Assert.false(System.Diagnostics.Contracts.Contract.exists(1, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f12));
        },
        existsWithCollection: function () {
            Bridge.Test.Assert.throws$2($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f13, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f3, "ArgumentNullException");
            this.assertNoExceptions($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f14);
            Bridge.Test.Assert.true(System.Diagnostics.Contracts.Contract.exists$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f10));
            Bridge.Test.Assert.false(System.Diagnostics.Contracts.Contract.exists$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f12));
        }
    });

    Bridge.ns("Bridge.ClientTest.Diagnostics.Contracts.ContractTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests, {
        f1: function (error) {
            return Bridge.is(error, System.Diagnostics.Contracts.ContractException);
        },
        f2: function () {
            System.Diagnostics.Contracts.Contract.forAll(2, 5, null);
        },
        f3: function (error) {
            return Bridge.is(error, System.ArgumentNullException);
        },
        f4: function (s) {
            return s !== 3;
        },
        f5: function () {
            System.Diagnostics.Contracts.Contract.forAll(2, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f4);
        },
        f6: function (s) {
            return s !== 6;
        },
        f7: function () {
            System.Diagnostics.Contracts.Contract.forAll$1([1, 2, 3], null);
        },
        f8: function () {
            System.Diagnostics.Contracts.Contract.forAll$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f4);
        },
        f9: function () {
            System.Diagnostics.Contracts.Contract.exists(1, 5, null);
        },
        f10: function (s) {
            return s === 3;
        },
        f11: function () {
            System.Diagnostics.Contracts.Contract.exists(1, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f10);
        },
        f12: function (s) {
            return s === 6;
        },
        f13: function () {
            System.Diagnostics.Contracts.Contract.exists$1([1, 2, 3], null);
        },
        f14: function () {
            System.Diagnostics.Contracts.Contract.exists$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f10);
        }
    });

    Bridge.define("Bridge.ClientTest.Diagnostics.StopwatchTests", {
        defaultConstructorWorks: function () {
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.Assert.true$1(Bridge.is(watch, System.Diagnostics.Stopwatch), "is Stopwatch");
            Bridge.Test.Assert.false$1(watch.isRunning, "IsRunning");
        },
        constantsWorks: function () {
            Bridge.Test.Assert.true$1(System.Diagnostics.Stopwatch.frequency.gte(System.Int64(1000)), "Frequency");
            Bridge.Test.Assert.areEqual$1("boolean", typeof System.Diagnostics.Stopwatch.isHighResolution, "IsHighResolution");
        },
        startNewWorks: function () {
            var watch = System.Diagnostics.Stopwatch.startNew();
            Bridge.Test.Assert.true$1(Bridge.is(watch, System.Diagnostics.Stopwatch), "is Stopwatch");
            Bridge.Test.Assert.true$1(watch.isRunning, "IsRunning");
        },
        startAndStopWork: function () {
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.Assert.false(watch.isRunning);
            watch.start();
            Bridge.Test.Assert.true(watch.isRunning);
            watch.stop();
            Bridge.Test.Assert.false(watch.isRunning);
        },
        elapsedWorks: function () {
            var watch = new System.Diagnostics.Stopwatch();

            Bridge.Test.Assert.true(System.Int64(0).equals(watch.ticks()));
            Bridge.Test.Assert.true(System.Int64(0).equals(watch.milliseconds()));
            Bridge.Test.Assert.areEqual(new System.TimeSpan(), watch.timeSpan());

            watch.start();

            var before = new Date();

            var hasIncreased = false;

            while (System.TimeSpan.lt((Bridge.Date.subdd(new Date(), before)), System.TimeSpan.fromMilliseconds(200))) {
                if (watch.ticks().gt(System.Int64(0))) {
                    hasIncreased = true;
                }
            }

            watch.stop();

            Bridge.Test.Assert.true$1(hasIncreased, "Times should increase inside the loop");
            Bridge.Test.Assert.true$1(watch.milliseconds().gt(System.Int64(150)), "ElapsedMilliseconds > 150 Actual: " + watch.milliseconds());
            Bridge.Test.Assert.true$1(System.TimeSpan.eq(watch.timeSpan(), new System.TimeSpan(0, 0, 0, 0, System.Int64.clip32(watch.milliseconds()))), "Elapsed");

            var value = watch.ticks() / System.Int64.toNumber(System.Diagnostics.Stopwatch.frequency);

            Bridge.Test.Assert.true$1(value > 0.15 && value < 0.25, System.String.format("value > 0.15 && value < 0.25 Actual: {0}, Ticks: {1}", value, watch.ticks()));
        },
        getTimestampWorks: function () {
            var t1 = System.Diagnostics.Stopwatch.getTimestamp();

            Bridge.Test.Assert.true$1(Bridge.is(t1, System.Int64), "is long");

            var before = new Date();

            while (System.TimeSpan.lt((Bridge.Date.subdd(new Date(), before)), System.TimeSpan.fromMilliseconds(50))) {
            }

            var t2 = System.Diagnostics.Stopwatch.getTimestamp();

            Bridge.Test.Assert.true$1(t2.gt(t1), "Should increase");
        }
    });

    Bridge.define("Bridge.ClientTest.EnvironmentTests", {
        newLineIsAStringContainingOnlyTheNewLineChar: function () {
            Bridge.Test.Assert.areEqual("\n", '\n');
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.AggregateExceptionTests", {
        statics: {
            DefaultMessage: "One or more errors occurred."
        },
        makeEnumerable: function (T, arr) {
            var $t;
            if (arr === void 0) { arr = []; }
            var $yield = [];
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var x = $t.getCurrent();
                $yield.push(x);
            }
            return System.Array.toEnumerable($yield);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.AggregateException", Bridge.Reflection.getTypeFullName(System.AggregateException), "Name");
            var d = new System.AggregateException();
            Bridge.Test.Assert.true(Bridge.is(d, System.AggregateException));
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.AggregateException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.AggregateException), "is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.is(ex.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex.innerExceptions.getCount(), "InnerExceptions.Length");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex.getMessage(), "Message");
        },
        constructorWithIEnumerableInnerExceptionsWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");

            var ex1 = new System.AggregateException(null, this.makeEnumerable(System.Exception));
            Bridge.Test.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.Assert.true$1(ex1.getInnerException() == null, "ex1 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex1.innerExceptions.getCount(), "ex1 InnerExceptions.Length");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex1.getMessage(), "ex1 Message");

            var ex2 = new System.AggregateException(null, this.makeEnumerable(System.Exception, [inner1]));
            Bridge.Test.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.getInnerException(), inner1), "ex2 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(1, ex2.innerExceptions.getCount(), "ex2 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex2.getMessage(), "ex2 Message");

            var ex3 = new System.AggregateException(null, this.makeEnumerable(System.Exception, [inner1, inner2]));
            Bridge.Test.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.getInnerException(), inner1), "ex3 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(2, ex3.innerExceptions.getCount(), "ex3 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex3.getMessage(), "ex3 Message");
        },
        constructorWithInnerExceptionArrayWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");

            var ex1 = new System.AggregateException(null, System.Array.init(0, null));
            Bridge.Test.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.Assert.true$1(ex1.getInnerException() == null, "ex1 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex1.innerExceptions.getCount(), "ex1 InnerExceptions.Length");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex1.getMessage(), "ex1 Message");

            var ex2 = new System.AggregateException(null, [inner1]);
            Bridge.Test.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.getInnerException(), inner1), "ex2 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(1, ex2.innerExceptions.getCount(), "ex2 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex2.getMessage(), "ex2 Message");

            var ex3 = new System.AggregateException(null, [inner1, inner2]);
            Bridge.Test.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.getInnerException(), inner1), "ex3 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(2, ex3.innerExceptions.getCount(), "ex3 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex3.getMessage(), "ex3 Message");
        },
        constructorWithMessageWorks: function () {
            var ex = new System.AggregateException("Some message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.AggregateException), "is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.is(ex.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex.innerExceptions.getCount(), "InnerExceptions.Length");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
        },
        constructorWithMessageAndIEnumerableInnerExceptionsWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");

            var ex1 = new System.AggregateException("Message #1", this.makeEnumerable(System.Exception));
            Bridge.Test.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.Assert.true$1(ex1.getInnerException() == null, "ex1 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex1.innerExceptions.getCount(), "ex1 InnerExceptions.Length");
            Bridge.Test.Assert.areEqual$1("Message #1", ex1.getMessage(), "ex1 Message");

            var ex2 = new System.AggregateException("Message #2", this.makeEnumerable(System.Exception, [inner1]));
            Bridge.Test.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.getInnerException(), inner1), "ex2 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(1, ex2.innerExceptions.getCount(), "ex2 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.Assert.areEqual$1("Message #2", ex2.getMessage(), "ex2 Message");

            var ex3 = new System.AggregateException("Message #3", this.makeEnumerable(System.Exception, [inner1, inner2]));
            Bridge.Test.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.getInnerException(), inner1), "ex3 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(2, ex3.innerExceptions.getCount(), "ex3 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.Assert.areEqual$1("Message #3", ex3.getMessage(), "ex3 Message");
        },
        constructorWithMessageAndInnerExceptionArrayWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");

            var ex1 = new System.AggregateException("Message #1", System.Array.init(0, null));
            Bridge.Test.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.Assert.true$1(ex1.getInnerException() == null, "ex1 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex1.innerExceptions.getCount(), "ex1 InnerExceptions.Length");
            Bridge.Test.Assert.areEqual$1("Message #1", ex1.getMessage(), "ex1 Message");

            var ex2 = new System.AggregateException("Message #2", [inner1]);
            Bridge.Test.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.getInnerException(), inner1), "ex2 InnerException");
            Bridge.Test.Assert.areEqual$1(1, ex2.innerExceptions.getCount(), "ex2 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.Assert.areEqual$1("Message #2", ex2.getMessage(), "ex2 Message");

            var ex3 = new System.AggregateException("Message #3", [inner1, inner2]);
            Bridge.Test.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.getInnerException(), inner1), "ex3 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(2, ex3.innerExceptions.getCount(), "ex3 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.Assert.areEqual$1("Message #3", ex3.getMessage(), "ex3 Message");
        },
        flattenWorks: function () {
            var ex0 = new System.Exception("ex0"), ex1 = new System.Exception("ex1"), ex2 = new System.Exception("ex2"), ex3 = new System.Exception("ex3"), ex4 = new System.Exception("ex4"), ex5 = new System.Exception("ex5"), ex6 = new System.Exception("ex6");

            var ae = new System.AggregateException("The message", [ex0, ex1, new System.AggregateException(null, [ex2, new System.AggregateException(null, [new System.AggregateException("X"), new System.AggregateException(null, [ex3, ex4])])]), new System.AggregateException(null, [ex5, ex6])]);

            var actual = ae.flatten();

            Bridge.Test.Assert.true$1(Bridge.is(actual, System.AggregateException), "is AggregateException");
            Bridge.Test.Assert.areEqual$1("The message", actual.getMessage(), "message");
            Bridge.Test.Assert.areEqual$1(7, actual.innerExceptions.getCount(), "Count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(0), ex0), "0");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(1), ex1), "1");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(2), ex2), "2");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(3), ex5), "5");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(4), ex6), "6");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(5), ex3), "3");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(6), ex4), "4");
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Reflection.AmbiguousMatchException", Bridge.Reflection.getTypeFullName(System.Reflection.AmbiguousMatchException), "Name");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isClass(System.Reflection.AmbiguousMatchException), "IsClass");
            Bridge.Test.Assert.areEqual$1(System.Exception, Bridge.Reflection.getBaseType(System.Reflection.AmbiguousMatchException), "BaseType");
            var d = new System.Reflection.AmbiguousMatchException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Reflection.AmbiguousMatchException), "is AmbiguousMatchException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");

            var interfaces = Bridge.Reflection.getInterfaces(System.Reflection.AmbiguousMatchException);
            Bridge.Test.Assert.areEqual$1(0, interfaces.length, "Interfaces length");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Reflection.AmbiguousMatchException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Reflection.AmbiguousMatchException), "is AmbiguousMatchException");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual("Ambiguous match.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Reflection.AmbiguousMatchException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Reflection.AmbiguousMatchException), "is AmbiguousMatchException");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Reflection.AmbiguousMatchException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Reflection.AmbiguousMatchException), "is AmbiguousMatchException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.ArgumentExceptionTests", {
        statics: {
            DefaultMessage: "Value does not fall within the expected range."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.ArgumentException", Bridge.Reflection.getTypeFullName(System.ArgumentException), "Name");
            var d = new System.ArgumentException();
            Bridge.Test.Assert.true(Bridge.is(d, System.ArgumentException));
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.ArgumentExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.ArgumentException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentException("The message", null, inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndParamNameWorks: function () {
            var ex = new System.ArgumentException("The message", "someParam");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndParamNameAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentException("The message", "someParam", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.ArgumentNullException", Bridge.Reflection.getTypeFullName(System.ArgumentNullException), "Name");
            var d = new System.ArgumentNullException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentNullException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Value cannot be null.", ex.getMessage());
        },
        constructorWithParamNameWorks: function () {
            var ex = new System.ArgumentNullException("someParam");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Value cannot be null.\nParameter name: someParam", ex.getMessage());
        },
        constructorWithParamNameAndMessageWorks: function () {
            var ex = new System.ArgumentNullException("someParam", "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentNullException(null, "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.ArgumentOutOfRangeException", Bridge.Reflection.getTypeFullName(System.ArgumentOutOfRangeException), "Name");
            var d = new System.ArgumentOutOfRangeException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentOutOfRangeException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1(null, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("Value is out of range.", ex.getMessage());
        },
        constructorWithParamNameWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1(null, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("Value is out of range.\nParameter name: someParam", ex.getMessage());
        },
        constructorWithParamNameAndMessageWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam", "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1(null, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentOutOfRangeException(null, "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.null$1(ex.getParamName(), "ParamName");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(null, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithParamNameAndActualValueAndMessageWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam", "The message", null, 42);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1(42, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        rangeErrorIsConvertedToArgumentOutOfRangeException: function () {
            var size = -1;
            try {
                var arr = System.Array.init(size, 0);
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.ArgumentOutOfRangeException)) {
                    ex = $e1;
                    var inner = ex.getInnerException();
                    Bridge.Test.Assert.notNull$1(inner, "Inner Exception");
                } else {
                    ex = $e1;
                    Bridge.Test.Assert.fail$1(System.String.concat("Expected ArgumentOutOfRangeException, got ", Bridge.getType(ex)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.ArithmeticExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.ArithmeticException", Bridge.Reflection.getTypeFullName(System.ArithmeticException), "Name");
            var d = new System.ArithmeticException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArithmeticException), "is DivideByZeroException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArithmeticException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is ArithmeticException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Overflow or underflow in the arithmetic operation.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.ArithmeticException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is OverflowException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArithmeticException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is OverflowException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.CommonExceptionTests", {
        throwingAndCatchingExceptionsWorks: function () {
            try {
                throw new Bridge.ClientTest.Exceptions.CommonExceptionTests.E2("The message");
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E2)) {
                    e = $e1;
                    Bridge.Test.Assert.areEqual("The message", e.getMessage());
                    return;
                } else {
                    throw $e1;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        },
        exceptionOfWrongTypeIsNotCaught: function () {
            try {
                throw new Bridge.ClientTest.Exceptions.CommonExceptionTests.E1("The message");
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E2)) {
                    Bridge.Test.Assert.fail$1("Should not catch E2");
                } else if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E1)) {
                    e = $e1;
                    Bridge.Test.Assert.areEqual("The message", e.getMessage());
                    return;
                } else {
                    throw $e1;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        },
        canCatchExceptionAsBaseType: function () {
            try {
                throw new Bridge.ClientTest.Exceptions.CommonExceptionTests.E2("The message");
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E1)) {
                    e = $e1;
                    Bridge.Test.Assert.areEqual("The message", e.getMessage());
                    return;
                } else {
                    throw $e1;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        },
        canCatchStringAsException: function () {
            try {
                (function() {{ throw 'The message'; }})();
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E1)) {
                    Bridge.Test.Assert.fail$1("Should not catch E1");
                } else {
                    e = $e1;
                    Bridge.Test.Assert.areEqual("The message", e.getMessage());
                    return;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        },
        canCatchStringAsCatchAll: function () {
            try {
                (function() {{ throw 'The message'; }})();
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E1)) {
                    Bridge.Test.Assert.fail$1("Should not catch E1");
                } else {
                    Bridge.Test.Assert.true(true);
                    return;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.CommonExceptionTests.E1", {
        inherits: [System.Exception],
        ctor: function (message) {
            this.$initialize();
            System.Exception.ctor.call(this, message);
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests", {
        statics: {
            DefaultMessage: "Culture is not supported."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Globalization.CultureNotFoundException", Bridge.Reflection.getTypeFullName(System.Globalization.CultureNotFoundException), "Name");
            var d = new System.Globalization.CultureNotFoundException();
            Bridge.Test.Assert.true(Bridge.is(d, System.Globalization.CultureNotFoundException));
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.Globalization.CultureNotFoundException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Globalization.CultureNotFoundException(null, null, "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Globalization.CultureNotFoundException(null, null, "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithMessageAndParamNameWorks: function () {
            var ex = new System.Globalization.CultureNotFoundException("someParam", null, "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithMessageAndCultureNameAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Globalization.CultureNotFoundException(null, "fru", "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1("fru", ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.null$1(ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithParamNameAndCultureNameAndMessage: function () {
            var ex = new System.Globalization.CultureNotFoundException("SomeParam", "fru", "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1("SomeParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1("fru", ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithMessageAndCultureIdAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Globalization.CultureNotFoundException(null, null, "The message", inner, 1);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(1, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithParamNameAndCultureIdAndMessage: function () {
            var ex = new System.Globalization.CultureNotFoundException("SomeParam", null, "The message", null, 2);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1("SomeParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(2, ex.getInvalidCultureId(), "InvalidCultureId");
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.DivideByZeroException", Bridge.Reflection.getTypeFullName(System.DivideByZeroException), "Name");
            var d = new System.DivideByZeroException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.DivideByZeroException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Division by 0.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.DivideByZeroException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.DivideByZeroException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.ExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Exception", Bridge.Reflection.getTypeFullName(System.Exception), "Name");
            var d = new System.Exception();
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.Exception();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Exception of type 'System.Exception' was thrown.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Exception("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Exception("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        messagePropertyCanBeOverridden: function () {
            var ex = Bridge.cast(new Bridge.ClientTest.Exceptions.ExceptionTests.MyException("Test message", null), System.Exception);
            Bridge.Test.Assert.areEqual("Test message", ex.getMessage());
        },
        innerExceptionPropertyCanBeOverridden: function () {
            var inner = new System.Exception("a");
            var ex = Bridge.cast(new Bridge.ClientTest.Exceptions.ExceptionTests.MyException("Test message", inner), System.Exception);
            Bridge.Test.Assert.true(Bridge.referenceEquals(ex.getInnerException(), inner));
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.ExceptionTests.MyException", {
        inherits: [System.Exception],
        _message: null,
        _innerException: null,
        ctor: function (message, innerException) {
            this.$initialize();
            System.Exception.ctor.call(this);
            this._message = message;
            this._innerException = innerException;
        },
        getMessage: function () {
            return this._message;
        },
        getInnerException: function () {
            return this._innerException;
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.FormatExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.FormatException", Bridge.Reflection.getTypeFullName(System.FormatException), "Name");
            var d = new System.FormatException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.FormatException), "is FormatException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.FormatException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Invalid format.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.FormatException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.FormatException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests", {
        statics: {
            DefaultMessage: "Index was outside the bounds of the array."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.IndexOutOfRangeException", Bridge.Reflection.getTypeFullName(System.IndexOutOfRangeException), "Name");
            var d = new System.IndexOutOfRangeException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.IndexOutOfRangeException), "is IndexOutOfRangeException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.IndexOutOfRangeException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.IndexOutOfRangeException), "is IndexOutOfRangeException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.IndexOutOfRangeException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.IndexOutOfRangeException), "is IndexOutOfRangeException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.IndexOutOfRangeException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.IndexOutOfRangeException), "is IndexOutOfRangeException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.InvalidCastExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.InvalidCastException", Bridge.Reflection.getTypeFullName(System.InvalidCastException), "Name");
            var d = new System.InvalidCastException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.InvalidCastException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The cast is not valid.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.InvalidCastException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.InvalidCastException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.InvalidOperationException", Bridge.Reflection.getTypeFullName(System.InvalidOperationException), "Name");
            var d = new System.InvalidOperationException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.InvalidOperationException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Operation is not valid due to the current state of the object.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.InvalidOperationException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.InvalidOperationException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.KeyNotFoundException", Bridge.Reflection.getTypeFullName(System.Collections.Generic.KeyNotFoundException), "Name");
            var d = new System.Collections.Generic.KeyNotFoundException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Collections.Generic.KeyNotFoundException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Key not found.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Collections.Generic.KeyNotFoundException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Collections.Generic.KeyNotFoundException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.NotImplementedExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.NotImplementedException", Bridge.Reflection.getTypeFullName(System.NotImplementedException), "Name");
            var d = new System.NotImplementedException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NotImplementedException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The method or operation is not implemented.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NotImplementedException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NotImplementedException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.NotSupportedExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.NotSupportedException", Bridge.Reflection.getTypeFullName(System.NotSupportedException), "Name");
            var d = new System.NotSupportedException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NotSupportedException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Specified method is not supported.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NotSupportedException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NotSupportedException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.NullReferenceExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.NullReferenceException", Bridge.Reflection.getTypeFullName(System.NullReferenceException), "Name");
            var d = new System.NullReferenceException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NullReferenceException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Object is null.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NullReferenceException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NullReferenceException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        accessingAFieldOnANullObjectCausesANullReferenceException: function () {
            try {
                var d = null;
                var x = d.someField;
                Bridge.Test.Assert.fail$1("A NullReferenceException should have been thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.NullReferenceException)) {
                    ex = $e1;
                    var inner = ex.getInnerException();
                    Bridge.Test.Assert.notNull$1(inner, "Inner Exception");
                } else {
                    ex = $e1;
                    Bridge.Test.Assert.fail$1(System.String.concat("Expected NullReferenceException, got type ", Bridge.getType(ex)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.OperationCanceledException", Bridge.Reflection.getTypeFullName(System.OperationCanceledException), "Name");
            var d = new System.OperationCanceledException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.OperationCanceledException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Operation was canceled.", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        cancellationTokenOnlyConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var ex = new System.OperationCanceledException(null, ct);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Operation was canceled.", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageOnlyConstructorWorks: function () {
            var ex = new System.OperationCanceledException("Some message", System.Threading.CancellationToken.none);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageAndInnerExceptionConstructorWorks: function () {
            var innerException = new System.Exception();
            var ex = new System.OperationCanceledException("Some message", System.Threading.CancellationToken.none, innerException);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), innerException), "InnerException");
        },
        messageAndCancellationTokenConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var ex = new System.OperationCanceledException("Some message", ct);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageAndInnerExceptionAndCancellationTokenConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var innerException = new System.Exception();
            var ex = new System.OperationCanceledException("Some message", ct, innerException);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), innerException), "InnerException");
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests", {
        statics: {
            DefaultMessage: "Insufficient memory to continue the execution of the program."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.OutOfMemoryException", Bridge.Reflection.getTypeFullName(System.OutOfMemoryException), "Name");
            var d = new System.OutOfMemoryException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.OutOfMemoryException), "is OutOfMemoryException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.OutOfMemoryException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OutOfMemoryException), "is OutOfMemoryException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.OutOfMemoryException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OutOfMemoryException), "is OutOfMemoryException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.OutOfMemoryException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OutOfMemoryException), "is OutOfMemoryException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.OverflowExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.OverflowException", Bridge.Reflection.getTypeFullName(System.OverflowException), "Name");
            var d = new System.OverflowException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.OverflowException), "is OverflowException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.OverflowException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Arithmetic operation resulted in an overflow.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.OverflowException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.OverflowException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.PromiseExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("Bridge.PromiseException", Bridge.Reflection.getTypeFullName(Bridge.PromiseException), "Name");
            var d = new Bridge.PromiseException(System.Array.init(0, null));
            Bridge.Test.Assert.true$1(Bridge.is(d, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        argumentsOnlyConstructorWorks: function () {
            var args = ["a", 1];
            var ex = new Bridge.PromiseException(args);
            Bridge.Test.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.Assert.areEqual$1(args, ex.arguments, "Arguments");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            // #1528
            Bridge.Test.Assert.areEqual$1("Promise exception: [a, 1]", ex.getMessage(), "Message");
        },
        argumentsAndMessageConstructorWorks: function () {
            var args = ["a", 1];
            var ex = new Bridge.PromiseException(args, "Some message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual$1(args, ex.arguments, "Arguments");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
        },
        argumentsAndMessageAndInnerExceptionConstructorWorks: function () {
            var inner = new System.Exception("a");
            var args = ["a", 1];
            var ex = new Bridge.PromiseException(args, "Some message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(args, ex.arguments, "Arguments");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.RankExceptionTests", {
        statics: {
            DefaultMessage: "Attempted to operate on an array with the incorrect number of dimensions."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.RankException", Bridge.Reflection.getTypeFullName(System.RankException), "Name");
            var d = new System.RankException();
            Bridge.Test.Assert.true(Bridge.is(d, System.RankException));
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.RankException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RankException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.RankExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.RankException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RankException), "is RankException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests", {
        statics: {
            DefaultMessage1: "The operation has timed out.",
            DefaultMessage2: "The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.RegexMatchTimeoutException", Bridge.Reflection.getTypeFullName(System.RegexMatchTimeoutException), "Name");
            var d = new System.RegexMatchTimeoutException.ctor();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.RegexMatchTimeoutException.ctor();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests.DefaultMessage1, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.RegexMatchTimeoutException.$ctor1("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.RegexMatchTimeoutException.$ctor2("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithExceptionDetailsWorks: function () {
            var ex = new System.RegexMatchTimeoutException.$ctor3("testInput", "testPattern", System.TimeSpan.fromSeconds(77));
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1("testInput", ex.getInput(), "Input");
            Bridge.Test.Assert.areEqual$1("testPattern", ex.getPattern(), "Pattern");
            Bridge.Test.Assert.areEqual$1(System.TimeSpan.fromSeconds(77), ex.getMatchTimeout(), "MatchTimeout");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests.DefaultMessage2, ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.SystemExceptionTests", {
        statics: {
            DefaultMessage: "System error."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.SystemException", Bridge.Reflection.getTypeFullName(System.SystemException), "Name");
            var d = new System.SystemException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.SystemException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.SystemException), "is SystemException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.SystemExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.SystemException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.SystemException), "is SystemException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.SystemException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.Tasks.TaskCanceledException", Bridge.Reflection.getTypeFullName(System.Threading.Tasks.TaskCanceledException), "Name");
            var d = new System.Threading.Tasks.TaskCanceledException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Threading.Tasks.TaskCanceledException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.areEqual$1("A task was canceled.", ex.getMessage(), "Message");
            Bridge.Test.Assert.null$1(ex.task, "Task");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageOnlyConstructorWorks: function () {
            var ex = new System.Threading.Tasks.TaskCanceledException("Some message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.null$1(ex.task, "Task");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        taskOnlyConstructorWorks: function () {
            var task = new System.Threading.Tasks.TaskCompletionSource().task;
            var ex = new System.Threading.Tasks.TaskCanceledException(null, task);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.areEqual$1("A task was canceled.", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.task, task), "Task");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageAndInnerExceptionConstructorWorks: function () {
            var innerException = new System.Exception();
            var ex = new System.Threading.Tasks.TaskCanceledException("Some message", null, innerException);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.null$1(ex.task, "Task");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), innerException), "InnerException");
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.TimeoutExceptionTests", {
        statics: {
            DefaultMessage: "The operation has timed out."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.TimeoutException", Bridge.Reflection.getTypeFullName(System.TimeoutException), "Name");
            var d = new System.TimeoutException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.TimeoutException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.TimeoutExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.TimeoutException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.TimeoutException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });

    Bridge.define("Bridge.ClientTest.Format.DateTimeFormatInfoTests", {
        typePropertiesAreCorrect: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual("System.Globalization.DateTimeFormatInfo", Bridge.Reflection.getTypeFullName(System.Globalization.DateTimeFormatInfo));
            Bridge.Test.Assert.true(Bridge.hasValue(format));
        },
        getFormatWorks: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual(null, format.getFormat(System.Int32));
            Bridge.Test.Assert.areEqual(format, format.getFormat(System.Globalization.DateTimeFormatInfo));
        },
        invariantWorks: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual("AM", format.amDesignator);
            Bridge.Test.Assert.areEqual("PM", format.pmDesignator);

            Bridge.Test.Assert.areEqual("/", format.dateSeparator);
            Bridge.Test.Assert.areEqual(":", format.timeSeparator);

            Bridge.Test.Assert.areEqual("dddd, dd MMMM yyyy HH:mm:ss", format.fullDateTimePattern);
            Bridge.Test.Assert.areEqual("yyyy MMMM", format.yearMonthPattern);

            Bridge.Test.Assert.areEqual("yyyy'-'MM'-'dd'T'HH':'mm':'ss", format.sortableDateTimePattern);

            Bridge.Test.Assert.areEqual("dddd, dd MMMM yyyy", format.longDatePattern);
            Bridge.Test.Assert.areEqual("MM/dd/yyyy", format.shortDatePattern);

            Bridge.Test.Assert.areEqual("HH:mm:ss", format.longTimePattern);
            Bridge.Test.Assert.areEqual("HH:mm", format.shortTimePattern);

            Bridge.Test.Assert.areEqual(0, format.firstDayOfWeek);
            Bridge.Test.Assert.areDeepEqual(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], format.dayNames);

            Bridge.Test.Assert.areDeepEqual(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], format.monthNames);
        }
    });

    Bridge.define("Bridge.ClientTest.Format.NumberFormatInfoTests", {
        typePropertiesAreCorrect: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual("System.Globalization.NumberFormatInfo", Bridge.Reflection.getTypeFullName(System.Globalization.NumberFormatInfo));
            Bridge.Test.Assert.true(Bridge.hasValue(format));
        },
        getFormatWorks: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual(null, format.getFormat(System.Int32));
            Bridge.Test.Assert.areEqual(format, format.getFormat(System.Globalization.NumberFormatInfo));
        },
        invariantWorks: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual("NaN", format.nanSymbol);
            Bridge.Test.Assert.areEqual("-", format.negativeSign);
            Bridge.Test.Assert.areEqual("+", format.positiveSign);
            Bridge.Test.Assert.areEqual("-Infinity", format.negativeInfinitySymbol);
            Bridge.Test.Assert.areEqual("Infinity", format.positiveInfinitySymbol);

            Bridge.Test.Assert.areEqual("%", format.percentSymbol);
            Bridge.Test.Assert.areDeepEqual([3], format.percentGroupSizes);
            Bridge.Test.Assert.areEqual(2, format.percentDecimalDigits);
            Bridge.Test.Assert.areEqual(".", format.percentDecimalSeparator);
            Bridge.Test.Assert.areEqual(",", format.percentGroupSeparator);
            Bridge.Test.Assert.areEqual(0, format.percentPositivePattern);
            Bridge.Test.Assert.areEqual(0, format.percentNegativePattern);

            Bridge.Test.Assert.areEqual("¤", format.currencySymbol);
            Bridge.Test.Assert.areDeepEqual([3], format.currencyGroupSizes);
            Bridge.Test.Assert.areEqual(2, format.currencyDecimalDigits);
            Bridge.Test.Assert.areEqual(".", format.currencyDecimalSeparator);
            Bridge.Test.Assert.areEqual(",", format.currencyGroupSeparator);
            Bridge.Test.Assert.areEqual(0, format.currencyNegativePattern);
            Bridge.Test.Assert.areEqual(0, format.currencyPositivePattern);

            Bridge.Test.Assert.areDeepEqual([3], format.numberGroupSizes);
            Bridge.Test.Assert.areEqual(2, format.numberDecimalDigits);
            Bridge.Test.Assert.areEqual(".", format.numberDecimalSeparator);
            Bridge.Test.Assert.areEqual(",", format.numberGroupSeparator);
        }
    });

    Bridge.define("Bridge.ClientTest.Format.NumberFormatSpecifiersTests", {
        currencyFormatSpecifierWorks: function () {
            var value = 12345.6789;
            Bridge.Test.Assert.areEqual("¤12,345.68", System.Double.format(value, "C"));
            Bridge.Test.Assert.areEqual("¤12,345.68", System.Double.format(value, "C2"));
            Bridge.Test.Assert.areEqual("¤12,345.679", System.Double.format(value, "C3"));
            Bridge.Test.Assert.areEqual("12 345,679 ₽", System.Double.format(value, "C3", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
        },
        decimalFormatSpecifierWorks: function () {
            var value = 12345;
            Bridge.Test.Assert.areEqual("12345", System.Double.format(value, "D"));
            Bridge.Test.Assert.areEqual("00012345", System.Double.format(value, "D8"));
            value = -12345;
            Bridge.Test.Assert.areEqual("-12345", System.Double.format(value, "D"));
            Bridge.Test.Assert.areEqual("-00012345", System.Double.format(value, "D8"));
        },
        exponentialFormatSpecifierWorks: function () {
            var value = 12345.6789;
            Bridge.Test.Assert.areEqual("1.234568E+004", System.Double.format(value, "E"));
            Bridge.Test.Assert.areEqual("1.2345678900E+004", System.Double.format(value, "E10"));
            Bridge.Test.Assert.areEqual("1.2346e+004", System.Double.format(value, "e4"));
            Bridge.Test.Assert.areEqual("1,234568E+004", System.Double.format(value, "E", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
        },
        fixedPointFormatSpecifierWorks: function () {
            var integerNumber = 17843;
            Bridge.Test.Assert.areEqual("17843.00", System.Int32.format(integerNumber, "F"));

            integerNumber = -29541;
            Bridge.Test.Assert.areEqual("-29541.000", System.Int32.format(integerNumber, "F3"));

            var doubleNumber = 18934.1879;
            Bridge.Test.Assert.areEqual("18934.19", System.Double.format(doubleNumber, "F"));
            Bridge.Test.Assert.areEqual("18934", System.Double.format(doubleNumber, "F0"));

            doubleNumber = -1898300.1987;
            Bridge.Test.Assert.areEqual("-1898300.2", System.Double.format(doubleNumber, "F1"));
            Bridge.Test.Assert.areEqual("-1898300,199", System.Double.format(doubleNumber, "F3", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
        },
        generalFormatSpecifierWorks: function () {
            var number = 12345.6789;
            Bridge.Test.Assert.areEqual("12345.6789", System.Double.format(number, "G"));
            Bridge.Test.Assert.areEqual("12345,6789", System.Double.format(number, "G", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
            Bridge.Test.Assert.areEqual("12345.68", System.Double.format(number, "G7"));

            number = 2.3E-06;
            Bridge.Test.Assert.areEqual("2.3E-06", System.Double.format(number, "G"));
            Bridge.Test.Assert.areEqual("2,3E-06", System.Double.format(number, "G", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));

            number = 0.0023;
            Bridge.Test.Assert.areEqual("0.0023", System.Double.format(number, "G"));

            number = 1234;
            Bridge.Test.Assert.areEqual("1.2E+03", System.Double.format(number, "G2"));

            number = Math.PI;
            Bridge.Test.Assert.areEqual("3.1416", System.Double.format(number, "G5"));
        },
        numericFormatSpecifierWorks: function () {
            var dblValue = -12445.6789;
            Bridge.Test.Assert.areEqual("-12,445.68", System.Double.format(dblValue, "N"));
            Bridge.Test.Assert.areEqual("-12 445,7", System.Double.format(dblValue, "N1", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));

            var intValue = 123456789;
            Bridge.Test.Assert.areEqual("123,456,789.0", System.Int32.format(intValue, "N1"));
        },
        percentFormatSpecifierWorks: function () {
            var number = 0.2468013;
            Bridge.Test.Assert.areEqual("24.68 %", System.Double.format(number, "P"));
            Bridge.Test.Assert.areEqual("24,68%", System.Double.format(number, "P", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
            Bridge.Test.Assert.areEqual("24.7 %", System.Double.format(number, "P1"));
        },
        roundTripFormatSpecifierWorks: function () {
            var value = Math.PI;
            Bridge.Test.Assert.areEqual("3.141592653589793", System.Double.format(value, "r"));
            Bridge.Test.Assert.areEqual("3,141592653589793", System.Double.format(value, "r", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));

            value = 1.623E-21;
            Bridge.Test.Assert.areEqual("1.623E-21", System.Double.format(value, "r"));
        },
        hexadecimalFormatSpecifierWorks: function () {
            var value = 132190;
            Bridge.Test.Assert.areEqual("2045e", System.Int32.format(value, "x"));
            Bridge.Test.Assert.areEqual("2045E", System.Int32.format(value, "X"));
            Bridge.Test.Assert.areEqual("0002045E", System.Int32.format(value, "X8"));

            value = 123456789;
            Bridge.Test.Assert.areEqual("75BCD15", System.Int32.format(value, "X"));
            Bridge.Test.Assert.areEqual("75BCD15", System.Int32.format(value, "X2"));
        },
        customZeroFormatSpecifierWorks: function () {
            var value = 123;
            Bridge.Test.Assert.areEqual("00123", System.Double.format(value, "00000"));

            value = 1.2;
            Bridge.Test.Assert.areEqual("1.20", System.Double.format(value, "0.00"));
            Bridge.Test.Assert.areEqual("01.20", System.Double.format(value, "00.00"));
            Bridge.Test.Assert.areEqual("01,20", System.Double.format(value, "00.00", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));

            value = 0.56;
            Bridge.Test.Assert.areEqual("0.6", System.Double.format(value, "0.0"));

            value = 1234567890;
            Bridge.Test.Assert.areEqual("1,234,567,890", System.Double.format(value, "0,0"));
            Bridge.Test.Assert.areEqual("1 234 567 890", System.Double.format(value, "0,0", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));

            value = 1234567890.123456;
            Bridge.Test.Assert.areEqual("1,234,567,890.1", System.Double.format(value, "0,0.0"));

            value = 1234.56789;
            Bridge.Test.Assert.areEqual("1,234.57", System.Double.format(value, "0,0.00"));
        },
        customHashFormatSpecifierWorks: function () {
            var value = 1.2;
            Bridge.Test.Assert.areEqual("1.2", System.Double.format(value, "#.##"));

            value = 123;
            Bridge.Test.Assert.areEqual("123", System.Double.format(value, "#####"));

            value = 123456;
            Bridge.Test.Assert.areEqual("[12-34-56]", System.Double.format(value, "[##-##-##]"));

            value = 1234567890;
            Bridge.Test.Assert.areEqual("1234567890", System.Double.format(value, "#"));
            Bridge.Test.Assert.areEqual("(123) 456-7890", System.Double.format(value, "(###) ###-####"));

            value = 42;
            Bridge.Test.Assert.areEqual("My Number = 42", System.Double.format(value, "My Number = #"));
        },
        customDotFormatSpecifierWorks: function () {
            var value = 1.2;
            Bridge.Test.Assert.areEqual("1.20", System.Double.format(value, "0.00"));
            Bridge.Test.Assert.areEqual("01.20", System.Double.format(value, "00.00"));
            Bridge.Test.Assert.areEqual("01,20", System.Double.format(value, "00.00", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));

            value = 0.086;
            Bridge.Test.Assert.areEqual("8.6%", System.Double.format(value, "#0.##%"));
        },
        customCommaFormatSpecifierWorks: function () {
            var value = 1234567890;
            Bridge.Test.Assert.areEqual("1,234,567,890", System.Double.format(value, "#,#"));
            Bridge.Test.Assert.areEqual("1,235", System.Double.format(value, "#,##0,,"));

            value = 1234567890;
            Bridge.Test.Assert.areEqual("1235", System.Double.format(value, "#,,"));
            Bridge.Test.Assert.areEqual("1", System.Double.format(value, "#,,,"));
            Bridge.Test.Assert.areEqual("1,235", System.Double.format(value, "#,##0,,"));
        },
        customPercentFormatSpecifierWorks: function () {
            var value = 0.086;
            Bridge.Test.Assert.areEqual("8.6%", System.Double.format(value, "#0.##%"));
        },
        customPerMileFormatSpecifierWorks: function () {
            var value = 0.00354;
            Bridge.Test.Assert.areEqual("3.54 ‰", System.Double.format(value, "#0.## " + String.fromCharCode(8240)));
        },
        customEscapeFormatSpecifierWorks: function () {
            var value = 123;
            Bridge.Test.Assert.areEqual("### 123 dollars and 00 cents ###", System.Int32.format(value, "\\#\\#\\# ##0 dollars and \\0\\0 cents \\#\\#\\#"));
            Bridge.Test.Assert.areEqual("### 123 dollars and 00 cents ###", System.Int32.format(value, "\\#\\#\\# ##0 dollars and \\0\\0 cents \\#\\#\\#"));
            Bridge.Test.Assert.areEqual("\\\\\\ 123 dollars and 00 cents \\\\\\", System.Int32.format(value, "\\\\\\\\\\\\ ##0 dollars and \\0\\0 cents \\\\\\\\\\\\"));
            Bridge.Test.Assert.areEqual("\\\\\\ 123 dollars and 00 cents \\\\\\", System.Int32.format(value, "\\\\\\\\\\\\ ##0 dollars and \\0\\0 cents \\\\\\\\\\\\"));
        },
        customSemicolonFormatSpecifierWorks: function () {
            var posValue = 1234;
            var negValue = -1234;
            var zeroValue = 0;

            var fmt2 = "##;(##)";
            var fmt3 = "##;(##);**Zero**";

            Bridge.Test.Assert.areEqual("1234", System.Double.format(posValue, fmt2));
            Bridge.Test.Assert.areEqual("(1234)", System.Double.format(negValue, fmt2));
            Bridge.Test.Assert.areEqual("**Zero**", System.Double.format(zeroValue, fmt3));
        }
    });

    Bridge.define("Bridge.ClientTest.Format.StringFormatTests", {
        simple: function () {
            var pricePerOunce = System.Decimal(17.36);
            var s = System.String.format("The current price is {0} per ounce.", pricePerOunce);
            Bridge.Test.Assert.areEqual("The current price is 17.36 per ounce.", s);
        },
        valueFormating: function () {
            var pricePerOunce = System.Decimal(17.36);
            var s = System.String.format("The current price is {0:C2} per ounce.", pricePerOunce);
            Bridge.Test.Assert.areEqual("The current price is ¤17.36 per ounce.", s);
        },
        spaceControlling: function () {
            var years = [2013, 2014, 2015];
            var population = [1025632, 1105967, 1148203];
            var s = System.String.format("{0,6} {1,15}", "Year", "Population");
            Bridge.Test.Assert.areEqual("  Year      Population", s);

            s = System.String.format("{0,6} {1,15:N0}", years[0], population[0]);
            Bridge.Test.Assert.areEqual("  2013       1,025,632", s);

            s = System.String.format("{0,6} {1,15:N0}", years[1], population[1]);
            Bridge.Test.Assert.areEqual("  2014       1,105,967", s);

            s = System.String.format("{0,6} {1,15:N0}", years[2], population[2]);
            Bridge.Test.Assert.areEqual("  2015       1,148,203", s);
        },
        aligment: function () {
            // Create array of 5-tuples with population data for three U.S. cities, 1940-1950.
            var cities = [{ item1: "Los Angeles", item2: new Date(1940, 1 - 1, 1), item3: 1504277, item4: new Date(1950, 1 - 1, 1), item5: 1970358 }, { item1: "New York", item2: new Date(1940, 1 - 1, 1), item3: 7454995, item4: new Date(1950, 1 - 1, 1), item5: 7891957 }, { item1: "Chicago", item2: new Date(1940, 1 - 1, 1), item3: 3396808, item4: new Date(1950, 1 - 1, 1), item5: 3620962 }, { item1: "Detroit", item2: new Date(1940, 1 - 1, 1), item3: 1623452, item4: new Date(1950, 1 - 1, 1), item5: 1849568 }];

            // Display header
            var header = System.String.format("{0,-12}{1,8}{2,12}{1,8}{2,12}{3,14}", "City", "Year", "Population", "Change (%)");
            Bridge.Test.Assert.areEqual("City            Year  Population    Year  Population    Change (%)", header);

            var output = System.String.format("{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}", cities[0].item1, cities[0].item2, cities[0].item3, cities[0].item4, cities[0].item5, (((cities[0].item5 - cities[0].item3) | 0)) / cities[0].item3);
            Bridge.Test.Assert.areEqual("Los Angeles     1940   1,504,277    1950   1,970,358        31.0 %", output);

            output = System.String.format("{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}", cities[1].item1, cities[1].item2, cities[1].item3, cities[1].item4, cities[1].item5, (((cities[1].item5 - cities[1].item3) | 0)) / cities[1].item3);
            Bridge.Test.Assert.areEqual("New York        1940   7,454,995    1950   7,891,957         5.9 %", output);

            output = System.String.format("{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}", cities[2].item1, cities[2].item2, cities[2].item3, cities[2].item4, cities[2].item5, (((cities[2].item5 - cities[2].item3) | 0)) / cities[2].item3);
            Bridge.Test.Assert.areEqual("Chicago         1940   3,396,808    1950   3,620,962         6.6 %", output);

            output = System.String.format("{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}", cities[3].item1, cities[3].item2, cities[3].item3, cities[3].item4, cities[3].item5, (((cities[3].item5 - cities[3].item3) | 0)) / cities[3].item3);
            Bridge.Test.Assert.areEqual("Detroit         1940   1,623,452    1950   1,849,568        13.9 %", output);
        },
        padIntegerWithLeadingZeros: function () {
            var byteValue = 254;
            var shortValue = 10342;
            var intValue = 1023983;
            var lngValue = System.Int64(6985321);
            var ulngValue = System.UInt64.MaxValue;

            Bridge.Test.Assert.areEqual("              00000254               000000FE", System.String.format("{0,22} {1,22}", System.Byte.format(byteValue, "D8"), System.Byte.format(byteValue, "X8")));
            Bridge.Test.Assert.areEqual("              00010342               00002866", System.String.format("{0,22} {1,22}", System.Int16.format(shortValue, "D8"), System.Int16.format(shortValue, "X8")));
            Bridge.Test.Assert.areEqual("              01023983               000F9FEF", System.String.format("{0,22} {1,22}", System.Int32.format(intValue, "D8"), System.Int32.format(intValue, "X8")));
            Bridge.Test.Assert.areEqual("              06985321               006A9669", System.String.format("{0,22} {1,22}", lngValue.toString("D8"), lngValue.toString("X8")));
            Bridge.Test.Assert.areEqual("  18446744073709551615       FFFFFFFFFFFFFFFF", System.String.format("{0,22} {1,22}", ulngValue.toString("D8"), ulngValue.toString("X8")));
            Bridge.Test.Assert.areEqual("              00000254               000000FE", System.String.format("{0,22:D8} {0,22:X8}", byteValue));
            Bridge.Test.Assert.areEqual("              00010342               00002866", System.String.format("{0,22:D8} {0,22:X8}", shortValue));
            Bridge.Test.Assert.areEqual("              01023983               000F9FEF", System.String.format("{0,22:D8} {0,22:X8}", intValue));
            Bridge.Test.Assert.areEqual("              06985321               006A9669", System.String.format("{0,22:D8} {0,22:X8}", lngValue));
            Bridge.Test.Assert.areEqual("  18446744073709551615       FFFFFFFFFFFFFFFF", System.String.format("{0,22:D8} {0,22:X8}", ulngValue));
        },
        padIntegerWithSpecificNumberLeadingZeros: function () {
            var value = 160934;
            var decimalLength = (System.Int32.format(value, "D").length + 5) | 0;
            var hexLength = (System.Int32.format(value, "X").length + 5) | 0;
            Bridge.Test.Assert.areEqual("00000160934", System.String.format(System.Int32.format(value, System.String.concat("D", decimalLength.toString())), null));
            Bridge.Test.Assert.areEqual("00000274A6", System.String.format(System.Int32.format(value, System.String.concat("X", hexLength.toString())), null));
        },
        padNumericWithLeadingZerosToLength: function () {
            var fmt = "00000000.##";
            var intValue = 1053240;
            var decValue = System.Decimal(103932.52);
            var dblValue = 9034521202.9321747;

            // Display the numbers using composite formatting.
            var formatString = System.String.concat(" {0,15:", fmt, "}");
            Bridge.Test.Assert.areEqual("        01053240", System.String.format(formatString, intValue));
            Bridge.Test.Assert.areEqual("     00103932.52", System.String.format(formatString, decValue));
            Bridge.Test.Assert.areEqual("   9034521202.93", System.String.format(formatString, dblValue));
        },
        padNumericWithSpecificNumberOfLeadingZeros: function () {
            var $t;
            var dblValues = [9034521202.9321747, System.Int64.toNumber(System.Int64([444586610,2]))];
            var result = ["  000009034521202.93", "          9034521202"];
            var i = 0;
            $t = Bridge.getEnumerator(dblValues);
            while ($t.moveNext()) {
                var dblValue = $t.getCurrent();
                var decSeparator = System.Globalization.NumberFormatInfo.currentInfo.numberDecimalSeparator;
                var fmt, formatString;

                if (System.String.contains(System.Double.format(dblValue, 'G'),decSeparator)) {
                    var digits = System.String.indexOf(System.Double.format(dblValue, 'G'), decSeparator);
                    fmt = System.String.concat(System.String.fromCharCount(48, 5), System.String.fromCharCount(35, digits), ".##");
                } else {
                    fmt = System.String.fromCharCount(48, System.Double.format(dblValue, 'G').length);
                }
                formatString = System.String.concat("{0,20:", fmt, "}");

                Bridge.Test.Assert.areEqual(result[Bridge.identity(i, (i = (i + 1) | 0))], System.String.format(formatString, dblValue));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.FormattableStringTests", {
        typePropertiesAreCorrect: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("s");
            Bridge.Test.Assert.true$1(Bridge.is(s, System.FormattableString), "is FormattableString");
            Bridge.Test.Assert.true$1(Bridge.is(s, System.IFormattable), "is IFormattable");

            Bridge.Test.Assert.true$1(Bridge.Reflection.isClass(System.FormattableString), "IsClass");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(System.IFormattable, System.FormattableString), "IFormattable.IsAssignableFrom");
            var interfaces = Bridge.Reflection.getInterfaces(System.FormattableString);
            Bridge.Test.Assert.areEqual$1(1, interfaces.length, "interfaces length");
            Bridge.Test.Assert.true$1(System.Array.contains(interfaces, System.IFormattable, Function), "interfaces contains IFormattable");
        },
        argumentCountWorks: function () {
            var s1 = System.Runtime.CompilerServices.FormattableStringFactory.create("{0}", ["x"]);
            Bridge.Test.Assert.areEqual$1(1, s1.getArgumentCount(), "#1");
            var s2 = System.Runtime.CompilerServices.FormattableStringFactory.create("{0}, {1}", ["x", "y"]);
            Bridge.Test.Assert.areEqual$1(2, s2.getArgumentCount(), "#2");
        },
        formatWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1}", ["x", "y"]);
            Bridge.Test.Assert.areEqual("x = {0}, y = {1}", s.getFormat());
        },
        getArgumentWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1}", ["x", "y"]);
            Bridge.Test.Assert.areEqual$1("x", s.getArgument(0), "0");
            Bridge.Test.Assert.areEqual$1("y", s.getArgument(1), "1");
        },
        getArgumentsWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1}", ["x", "y"]);
            var args = s.getArguments();
            Bridge.Test.Assert.areEqual$1("x", args[0], "0");
            Bridge.Test.Assert.areEqual$1("y", args[1], "1");
        },
        arrayReturnedByGetArgumentsCanBeModified: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1}", ["x", "y"]);
            var args = s.getArguments();
            Bridge.Test.Assert.areEqual$1("x", args[0], "#1");
            args[0] = "z";
            var args2 = s.getArguments();
            Bridge.Test.Assert.areEqual$1("z", args2[0], "#2");
            Bridge.Test.Assert.areEqual$1("x = z, y = y", s.toString(), "#3");
        },
        toStringWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1:x}", ["x", 291]);
            Bridge.Test.Assert.areEqual("x = x, y = 123", s.toString());
        },
        invariantWorks: function () {
            var s = System.Runtime.CompilerServices.FormattableStringFactory.create("x = {0}, y = {1:x}", ["x", 291]);
            Bridge.Test.Assert.areEqual("x = x, y = 123", System.FormattableString.invariant(s));
        }
    });

    Bridge.define("Bridge.ClientTest.FormattableStringTests.MyFormatProvider", {
        inherits: [System.IFormatProvider],
        config: {
            alias: [
            "getFormat", "System$IFormatProvider$getFormat"
            ]
        },
        getFormat: function (type) {
            return System.Globalization.CultureInfo.invariantCulture.getFormat(type);
        }
    });

    Bridge.define("Bridge.ClientTest.FormattableStringTests.MyFormattable", {
        inherits: [System.IFormattable],
        config: {
            alias: [
            "format", "System$IFormattable$format"
            ]
        },
        format: function (format, formatProvider) {
            return System.String.concat("Formatted: ", (!System.String.isNullOrEmpty(format) ? System.String.concat(format, ", ") : ""), Bridge.Reflection.getTypeName(Bridge.getType(formatProvider)));
        }
    });

    Bridge.define("Bridge.ClientTest.FunctionTests", {
        statics: {
            IntFunctionBody: "  if (this) {\n  if (this.sv1) { p1 = this.sv1; }\n  if (this.sv2) { p2 = this.sv2; }\n}\nif (sc) { p1 = sc.v1; p2 = sc.v2; }\nif (p1 === undefined) { p1 = 100; }\nif (p2 === undefined) { p2 = -55; }\nreturn p1 + p2;"
        },
        testConstructorArgumentsBodyInOneParameter: function () {
            var f = new Function("p1", "p2", "sc", Bridge.ClientTest.FunctionTests.IntFunctionBody);

            this.testSetInt(f);
        },
        testConstructorArgumentsBodyInTwoParameters: function () {
            var f = new Function("p1,p2,sc", Bridge.ClientTest.FunctionTests.IntFunctionBody);

            this.testSetInt(f);
        },
        testConstructorArgumentsInArray: function () {
            var ps = ["p1", "p2", "sc"];
            var f = new Function(ps, Bridge.ClientTest.FunctionTests.IntFunctionBody);

            this.testSetInt(f);
        },
        testSetInt: function (f) {
            Bridge.Test.Assert.notNull$1(f, "Function not null");

            Bridge.Test.Assert.areEqual$1(3, f.length, "Length");

            this.applySetInt(f);

            this.callSetInt(f);
        },
        applySetInt: function (f) {
            var a1 = f.apply(null);
            var i1 = System.Nullable.getValue(Bridge.cast(a1, System.Int32));
            Bridge.Test.Assert.areEqual$1(45, i1, "Apply1");

            var a2 = f.apply(null, [1, 2]);
            var i2 = System.Nullable.getValue(Bridge.cast(a2, System.Int32));
            Bridge.Test.Assert.areEqual$1(3, i2, "Apply2");

            var s3 = new $_.$AnonymousType$1(3, 5);
            var a3 = f.apply(null, [null, null, s3]);
            var i3 = System.Nullable.getValue(Bridge.cast(a3, System.Int32));
            Bridge.Test.Assert.areEqual$1(8, i3, "Apply3");

            var s4 = new $_.$AnonymousType$2(7);
            var a4 = f.apply(null, [1, 2, s4]);
            var i4 = System.Nullable.getValue(Bridge.cast(a4, System.Int32));
            Bridge.Test.Assert.areEqual$1(-48, i4, "Apply4");

            var s5 = new $_.$AnonymousType$3(9, undefined);
            var a5 = f.apply(null, [undefined, 10, s5]);
            var i5 = System.Nullable.getValue(Bridge.cast(a5, System.Int32));
            Bridge.Test.Assert.areEqual$1(-46, i5, "Apply5");

            var scope = new $_.$AnonymousType$4(70, 51);

            var a6 = f.apply(scope);
            var i6 = System.Nullable.getValue(Bridge.cast(a6, System.Int32));
            Bridge.Test.Assert.areEqual$1(121, i6, "Apply6");

            var a7 = f.apply(scope, [1, 2]);
            var i7 = System.Nullable.getValue(Bridge.cast(a7, System.Int32));
            Bridge.Test.Assert.areEqual$1(121, i7, "Apply7");

            var s8 = new $_.$AnonymousType$1(3, 5);
            var a8 = f.apply(scope, [null, null, s8]);
            var i8 = System.Nullable.getValue(Bridge.cast(a8, System.Int32));
            Bridge.Test.Assert.areEqual$1(8, i8, "Apply8");

            var s9 = new $_.$AnonymousType$2(7);
            var a9 = f.apply(scope, [1, 2, s9]);
            var i9 = System.Nullable.getValue(Bridge.cast(a9, System.Int32));
            Bridge.Test.Assert.areEqual$1(-48, i9, "Apply9");

            var s10 = new $_.$AnonymousType$3(9, undefined);
            var a10 = f.apply(scope, [undefined, 10, s10]);
            var i10 = System.Nullable.getValue(Bridge.cast(a10, System.Int32));
            Bridge.Test.Assert.areEqual$1(-46, i10, "Apply10");
        },
        callSetInt: function (f) {
            var a1 = f.call(null);
            var i1 = System.Nullable.getValue(Bridge.cast(a1, System.Int32));
            Bridge.Test.Assert.areEqual$1(45, i1, "Call1");

            var a2 = f.call(null, 1, 2);
            var i2 = System.Nullable.getValue(Bridge.cast(a2, System.Int32));
            Bridge.Test.Assert.areEqual$1(3, i2, "Call2");

            var s3 = new $_.$AnonymousType$1(3, 5);
            var a3 = f.call(null, null, null, s3);
            var i3 = System.Nullable.getValue(Bridge.cast(a3, System.Int32));
            Bridge.Test.Assert.areEqual$1(8, i3, "Call3");

            var s4 = new $_.$AnonymousType$2(7);
            var a4 = f.call(null, 1, 2, s4);
            var i4 = System.Nullable.getValue(Bridge.cast(a4, System.Int32));
            Bridge.Test.Assert.areEqual$1(-48, i4, "Call4");

            var s5 = new $_.$AnonymousType$3(9, undefined);
            var a5 = f.call(null, undefined, 10, s5);
            var i5 = System.Nullable.getValue(Bridge.cast(a5, System.Int32));
            Bridge.Test.Assert.areEqual$1(-46, i5, "Call5");

            var scope = new $_.$AnonymousType$4(70, 51);

            var a6 = f.call(scope);
            var i6 = System.Nullable.getValue(Bridge.cast(a6, System.Int32));
            Bridge.Test.Assert.areEqual$1(121, i6, "Call6");

            var a7 = f.call(scope, 1, 2);
            var i7 = System.Nullable.getValue(Bridge.cast(a7, System.Int32));
            Bridge.Test.Assert.areEqual$1(121, i7, "Call7");

            var s8 = new $_.$AnonymousType$1(3, 5);
            var a8 = f.call(scope, null, null, s8);
            var i8 = System.Nullable.getValue(Bridge.cast(a8, System.Int32));
            Bridge.Test.Assert.areEqual$1(8, i8, "Call8");

            var s9 = new $_.$AnonymousType$2(7);
            var a9 = f.call(scope, 1, 2, s9);
            var i9 = System.Nullable.getValue(Bridge.cast(a9, System.Int32));
            Bridge.Test.Assert.areEqual$1(-48, i9, "Call9");

            var s10 = new $_.$AnonymousType$3(9, undefined);
            var a10 = f.call(scope, undefined, 10, s10);
            var i10 = System.Nullable.getValue(Bridge.cast(a10, System.Int32));
            Bridge.Test.Assert.areEqual$1(-46, i10, "Call10");
        }
    });

    Bridge.define("$AnonymousType$1", $_, {
        $kind: "anonymous",
        ctor: function (v1, v2) {
            this.v1 = v1;
            this.v2 = v2;
        },
        getv1 : function () {
            return this.v1;
        },
        getv2 : function () {
            return this.v2;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$1)) {
                return false;
            }
            return Bridge.equals(this.v1, o.v1) && Bridge.equals(this.v2, o.v2);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320272310, this.v1, this.v2]);
            return h;
        },
        toJSON: function () {
            return {
                v1 : this.v1,
                v2 : this.v2
            };
        }
    });

    Bridge.define("$AnonymousType$2", $_, {
        $kind: "anonymous",
        ctor: function (v1) {
            this.v1 = v1;
        },
        getv1 : function () {
            return this.v1;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$2)) {
                return false;
            }
            return Bridge.equals(this.v1, o.v1);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320337846, this.v1]);
            return h;
        },
        toJSON: function () {
            return {
                v1 : this.v1
            };
        }
    });

    Bridge.define("$AnonymousType$3", $_, {
        $kind: "anonymous",
        ctor: function (v1, v2) {
            this.v1 = v1;
            this.v2 = v2;
        },
        getv1 : function () {
            return this.v1;
        },
        getv2 : function () {
            return this.v2;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$3)) {
                return false;
            }
            return Bridge.equals(this.v1, o.v1) && Bridge.equals(this.v2, o.v2);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320403382, this.v1, this.v2]);
            return h;
        },
        toJSON: function () {
            return {
                v1 : this.v1,
                v2 : this.v2
            };
        }
    });

    Bridge.define("$AnonymousType$4", $_, {
        $kind: "anonymous",
        ctor: function (sv1, sv2) {
            this.sv1 = sv1;
            this.sv2 = sv2;
        },
        getsv1 : function () {
            return this.sv1;
        },
        getsv2 : function () {
            return this.sv2;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$4)) {
                return false;
            }
            return Bridge.equals(this.sv1, o.sv1) && Bridge.equals(this.sv2, o.sv2);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320468918, this.sv1, this.sv2]);
            return h;
        },
        toJSON: function () {
            return {
                sv1 : this.sv1,
                sv2 : this.sv2
            };
        }
    });

    Bridge.define("Bridge.ClientTest.GuidTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(System.Guid), "System.Guid");

            var o = new System.Guid.ctor();
            Bridge.Test.Assert.true(Bridge.is(o, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(o, System.IComparable$1(System.Guid)));
            Bridge.Test.Assert.true(Bridge.is(o, System.IEquatable$1(System.Guid)));

            Bridge.Test.Assert.false(Bridge.is(1, System.Guid));
            Bridge.Test.Assert.false(Bridge.is("abcd", System.Guid));
            Bridge.Test.Assert.false(Bridge.is("{00000000-0000-0000-0000-000000000000}", System.Guid));
        },
        defaultValueWorks: function () {
            var result = Bridge.getDefaultValue(System.Guid);
            Bridge.Test.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.Assert.areEqual(result.toString(), "00000000-0000-0000-0000-000000000000");
        },
        createInstanceWorks: function () {
            var result = Bridge.createInstance(System.Guid);
            Bridge.Test.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.Assert.areEqual(result.toString(), "00000000-0000-0000-0000-000000000000");
        },
        defaultConstructorWorks: function () {
            var result = new System.Guid.ctor();
            Bridge.Test.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.Assert.areEqual(result.toString(), "00000000-0000-0000-0000-000000000000");
        },
        emptyWorks: function () {
            Bridge.Test.Assert.areEqual(System.Guid.empty.toString(), "00000000-0000-0000-0000-000000000000");
        },
        toStringWithoutArgumentsWorks: function () {
            var guid = new System.Guid.$ctor4("223310CC-1F48-4489-B87E-88C779C77CB3");
            Bridge.Test.Assert.areEqual(guid.toString(), "223310cc-1f48-4489-b87e-88c779c77cb3");
        },
        byteArrayConstructorWorks: function () {
            var g = new System.Guid.$ctor1([120, 149, 98, 168, 38, 122, 69, 97, 144, 50, 217, 26, 61, 84, 189, 104]);
            Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.Assert.areEqual$1(g.toString(), "a8629578-7a26-6145-9032-d91a3d54bd68", "value");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f1, System.ArgumentException, "Invalid array should throw");
        },
        int32Int16Int16ByteArrayConstructorWorks: function () {
            var g = new System.Guid.$ctor3(2023056040, 9850, 17761, [144, 50, 217, 26, 61, 84, 189, 104]);
            Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.Assert.areEqual$1(g.toString(), "789562a8-267a-4561-9032-d91a3d54bd68", "value");
        },
        int32Int16Int16BytesConstructorWorks: function () {
            var g = new System.Guid.$ctor2(2023056040, 9850, 17761, 144, 50, 217, 26, 61, 84, 189, 104);
            Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.Assert.areEqual$1(g.toString(), "789562a8-267a-4561-9032-d91a3d54bd68", "value");
        },
        uInt32UInt16UInt16BytesConstructorWorks: function () {
            var g = new System.Guid.$ctor5(2023056040, 9850, 17761, 144, 50, 217, 26, 61, 84, 189, 104);
            Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.Assert.areEqual$1(g.toString(), "789562a8-267a-4561-9032-d91a3d54bd68", "value");
        },
        stringConstructorWorks: function () {
            var g1 = new System.Guid.$ctor4("A6993C0A-A8CB-45D9-994B-90E7203E4FC6");
            var g2 = new System.Guid.$ctor4("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}");
            var g3 = new System.Guid.$ctor4("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)");
            var g4 = new System.Guid.$ctor4("A6993C0AA8CB45D9994B90E7203E4FC6");
            Bridge.Test.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.Assert.areEqual$1(g1.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f2, System.FormatException, "Invalid should throw");
        },
        parseWorks: function () {
            var g1 = System.Guid.parse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6");
            var g2 = System.Guid.parse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}");
            var g3 = System.Guid.parse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)");
            var g4 = System.Guid.parse("A6993C0AA8CB45D9994B90E7203E4FC6");
            Bridge.Test.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.Assert.areEqual$1(g1.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f3, System.FormatException, "Invalid should throw");
        },
        parseExactWorks: function () {
            var g1 = System.Guid.parseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "D");
            var g2 = System.Guid.parseExact("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", "B");
            var g3 = System.Guid.parseExact("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", "P");
            var g4 = System.Guid.parseExact("A6993C0AA8CB45D9994B90E7203E4FC6", "N");
            Bridge.Test.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.Assert.areEqual$1(g1.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f4, System.FormatException, "Invalid B should throw");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f5, System.FormatException, "Invalid P should throw");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f6, System.FormatException, "Invalid N should throw");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f7, System.FormatException, "Invalid D should throw");
        },
        tryParseWorks: function () {
            var g1 = { v : new System.Guid() }, g2 = { v : new System.Guid() }, g3 = { v : new System.Guid() }, g4 = { v : new System.Guid() }, g5 = { v : new System.Guid() };
            Bridge.Test.Assert.true$1(System.Guid.tryParse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", g1), "g1 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", g2), "g2 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", g3), "g3 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("A6993C0AA8CB45D9994B90E7203E4FC6", g4), "g4 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParse("x", g5), "Invalid should throw");
            Bridge.Test.Assert.true$1(Bridge.is(g1.v, System.Guid), "g1 is Guid");
            Bridge.Test.Assert.true$1(Bridge.is(g2.v, System.Guid), "g2 is Guid");
            Bridge.Test.Assert.true$1(Bridge.is(g3.v, System.Guid), "g3 is Guid");
            Bridge.Test.Assert.true$1(Bridge.is(g4.v, System.Guid), "g4 is Guid");
            Bridge.Test.Assert.true$1(Bridge.is(g5.v, System.Guid), "g5 is Guid");
            Bridge.Test.Assert.areEqual$1(g1.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.areEqual$1(g5.v.toString(), "00000000-0000-0000-0000-000000000000", "g5");
        },
        tryParseExactWorks: function () {
            var g1 = { v : new System.Guid() }, g2 = { v : new System.Guid() }, g3 = { v : new System.Guid() }, g4 = { v : new System.Guid() }, g5 = { v : new System.Guid() }, g6 = { v : new System.Guid() }, g7 = { v : new System.Guid() }, g8 = { v : new System.Guid() };
            Bridge.Test.Assert.true$1(System.Guid.tryParseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "D", g1), "g1 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParseExact("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", "B", g2), "g2 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParseExact("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", "P", g3), "g3 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParseExact("A6993C0AA8CB45D9994B90E7203E4FC6", "N", g4), "g4 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "B", g5), "g5 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "P", g6), "g6 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "N", g7), "g7 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParseExact("A6993C0AA8CB45D9994B90E7203E4FC6", "D", g8), "g8 result");
            Bridge.Test.Assert.true(Bridge.is(g1.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g2.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g3.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g4.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g5.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g6.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g7.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g8.v, System.Guid));
            Bridge.Test.Assert.areEqual$1(g1.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.areEqual$1(g5.v.toString(), "00000000-0000-0000-0000-000000000000", "g5");
            Bridge.Test.Assert.areEqual$1(g6.v.toString(), "00000000-0000-0000-0000-000000000000", "g6");
            Bridge.Test.Assert.areEqual$1(g7.v.toString(), "00000000-0000-0000-0000-000000000000", "g7");
            Bridge.Test.Assert.areEqual$1(g8.v.toString(), "00000000-0000-0000-0000-000000000000", "g8");
        },
        compareToWorks: function () {
            var g = new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.Assert.areEqual$1(g.compareTo(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C")), 0, "equal");
            Bridge.Test.Assert.areNotEqual$1(g.compareTo(new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), 0, "not equal");
        },
        iComparableCompareToWorks: function () {
            var g = Bridge.cast(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C"), System.IComparable$1(System.Guid));
            Bridge.Test.Assert.areEqual$1(Bridge.compare(g, new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C"), false, System.Guid), 0, "Equal");
            Bridge.Test.Assert.areNotEqual$1(Bridge.compare(g, new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0"), false, System.Guid), 0, "Not equal");
        },
        equalsObjectWorks: function () {
            var g = new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.Assert.true$1(Bridge.equals(g, new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C")), "Equal");
            Bridge.Test.Assert.false$1(Bridge.equals(g, new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), "Not equal");
            Bridge.Test.Assert.false$1(Bridge.equals(g, "X"), "Not equal");
        },
        equalsGuidWorks: function () {
            var g = new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.Assert.true$1(g.equalsT(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C")), "Equal");
            Bridge.Test.Assert.false$1(g.equalsT(new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), "Not equal");
        },
        iEquatableEqualsWorks: function () {
            var g = Bridge.cast(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C"), System.IEquatable$1(System.Guid));
            Bridge.Test.Assert.true$1(Bridge.equalsT(g, new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C"), System.Guid), "Equal");
            Bridge.Test.Assert.false$1(Bridge.equalsT(g, new System.Guid.$ctor4("E4C221BE-9B39-4398-B82A-48BA4648CAE0"), System.Guid), "Not equal");
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C")), Bridge.getHashCode(new System.Guid.$ctor4("f3d8b3c0-88f0-4148-844c-232ed03c153c")));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153C")), Bridge.getHashCode(new System.Guid.$ctor4("F3D8B3C0-88F0-4148-844C-232ED03C153D")));
        },
        equalityOperatorWorks: function () {
            Bridge.Test.Assert.true$1(System.Guid.op_Equality(new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628")), "Equal");
            Bridge.Test.Assert.false$1(System.Guid.op_Equality(new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), new System.Guid.$ctor4("A317804C-A583-4857-804F-A0D276008C82")), "Not equal");
        },
        inequalityOperatorWorks: function () {
            Bridge.Test.Assert.false$1(System.Guid.op_Inequality(new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628")), "Equal");
            Bridge.Test.Assert.true$1(System.Guid.op_Inequality(new System.Guid.$ctor4("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), new System.Guid.$ctor4("A317804C-A583-4857-804F-A0D276008C82")), "Not equal");
        },
        toStringWithFormatWorks: function () {
            var g = new System.Guid.$ctor4("DE33AC65-09CB-465C-AD7E-53124B2104E8");
            Bridge.Test.Assert.areEqual$1(g.toString$1("N"), "de33ac6509cb465cad7e53124b2104e8", "N");
            Bridge.Test.Assert.areEqual$1(g.toString$1("D"), "de33ac65-09cb-465c-ad7e-53124b2104e8", "D");
            Bridge.Test.Assert.areEqual$1(g.toString$1("B"), "{de33ac65-09cb-465c-ad7e-53124b2104e8}", "B");
            Bridge.Test.Assert.areEqual$1(g.toString$1("P"), "(de33ac65-09cb-465c-ad7e-53124b2104e8)", "P");
            Bridge.Test.Assert.areEqual$1(g.toString$1(""), "de33ac65-09cb-465c-ad7e-53124b2104e8", "empty");
            Bridge.Test.Assert.areEqual$1(g.toString$1(null), "de33ac65-09cb-465c-ad7e-53124b2104e8", "null");
        },
        newGuidWorks: function () {
            var d = new (System.Collections.Generic.Dictionary$2(String,Object))();
            for (var i = 0; i < 1000; i = (i + 1) | 0) {
                var g = System.Guid.newGuid();
                Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Generated Guid should be Guid");
                var s = g.toString$1("N");
                Bridge.Test.Assert.true$1(s.charCodeAt(16) === 56 || s.charCodeAt(16) === 57 || s.charCodeAt(16) === 97 || s.charCodeAt(16) === 98, "Should be standard guid");
                Bridge.Test.Assert.true$1(s.charCodeAt(12) === 52, "Should be type 4 guid");
                d.set(s, null);
            }
            Bridge.Test.Assert.areEqual$1(d.getCount(), 1000, "No duplicates should have been generated");
        },
        toByteArrayWorks: function () {
            var g = new System.Guid.$ctor4("8440F854-0C0B-4355-9722-1608D62E8F87");
            Bridge.Test.Assert.areEqual(g.toByteArray(), [84, 248, 64, 132, 11, 12, 85, 67, 151, 34, 22, 8, 214, 46, 143, 135]);
        }
    });

    Bridge.ns("Bridge.ClientTest.GuidTests", $_);

    Bridge.apply($_.Bridge.ClientTest.GuidTests, {
        f1: function () {
            new System.Guid.$ctor1([120, 149, 98, 168, 38, 122]);
        },
        f2: function () {
            new System.Guid.$ctor4("x");
        },
        f3: function () {
            System.Guid.parse("x");
        },
        f4: function () {
            System.Guid.parseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "B");
        },
        f5: function () {
            System.Guid.parseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "P");
        },
        f6: function () {
            System.Guid.parseExact("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "N");
        },
        f7: function () {
            System.Guid.parseExact("A6993C0AA8CB45D9994B90E7203E4FC6", "D");
        }
    });

    Bridge.define("Bridge.ClientTest.IComparableTests", {
        callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function () {
            var a = new Bridge.ClientTest.IComparableTests.MyComparable(), b = new Bridge.ClientTest.IComparableTests.MyComparable();
            a.result = 534;
            Bridge.Test.Assert.areEqual(534, Bridge.compare(Bridge.cast(a, System.IComparable$1(Bridge.ClientTest.IComparableTests.MyComparable)), b, false, Bridge.ClientTest.IComparableTests.MyComparable));
            Bridge.Test.Assert.areStrictEqual(b, a.other);

            a.result = -42;
            Bridge.Test.Assert.areEqual(-42, Bridge.compare(Bridge.cast(a, System.IComparable$1(Bridge.ClientTest.IComparableTests.MyComparable)), null, false, Bridge.ClientTest.IComparableTests.MyComparable));
            Bridge.Test.Assert.areStrictEqual(null, a.other);

            a.result = -534;
            Bridge.Test.Assert.areEqual(-534, a.compareTo(b));
            Bridge.Test.Assert.areStrictEqual(b, a.other);

            a.result = 42;
            Bridge.Test.Assert.areEqual(42, a.compareTo(null));
            Bridge.Test.Assert.areStrictEqual(null, a.other);
        }
    });

    Bridge.define("Bridge.ClientTest.IComparableTests.MyComparable", {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.IComparableTests.MyComparable)]; },
        result: 0,
        other: null,
        config: {
            alias: [
            "compareTo", "System$IComparable$1$Bridge$ClientTest$IComparableTests$MyComparable$compareTo"
            ]
        },
        compareTo: function (other) {
            this.other = other;
            return this.result;
        }
    });

    Bridge.define("Bridge.ClientTest.IEquatableTests", {
        callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function () {
            var a = new Bridge.ClientTest.IEquatableTests.MyEquatable(), b = new Bridge.ClientTest.IEquatableTests.MyEquatable();
            a.result = true;
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)), b, Bridge.ClientTest.IEquatableTests.MyEquatable));
            Bridge.Test.Assert.areStrictEqual(b, a.other);
            a.result = false;
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)), b, Bridge.ClientTest.IEquatableTests.MyEquatable));

            a.result = true;
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)), null, Bridge.ClientTest.IEquatableTests.MyEquatable));
            Bridge.Test.Assert.areStrictEqual(null, a.other);
            a.result = false;
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)), null, Bridge.ClientTest.IEquatableTests.MyEquatable));

            a.result = true;
            Bridge.Test.Assert.true(a.equalsT(b));
            Bridge.Test.Assert.areStrictEqual(b, a.other);
            a.result = false;
            Bridge.Test.Assert.false(a.equalsT(b));

            a.result = true;
            Bridge.Test.Assert.true(a.equalsT(null));
            Bridge.Test.Assert.areStrictEqual(null, a.other);
            a.result = false;
            Bridge.Test.Assert.false(a.equalsT(null));
        }
    });

    Bridge.define("Bridge.ClientTest.IEquatableTests.MyEquatable", {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)]; },
        result: false,
        other: null,
        config: {
            alias: [
            "equalsT", "System$IEquatable$1$Bridge$ClientTest$IEquatableTests$MyEquatable$equalsT"
            ]
        },
        equalsT: function (other) {
            this.other = other;
            return this.result;
        }
    });

    Bridge.define("Bridge.ClientTest.JsonTests", {
        nonGenericParseWorks: function () {
            var o = JSON.parse("{ \"i\": 3, \"s\": \"test\" }");
            Bridge.Test.Assert.areEqual(3, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        genericParseWorks: function () {
            var o = Bridge.merge(Bridge.createInstance(Object), JSON.parse("{ \"i\": 3, \"s\": \"test\" }"));
            Bridge.Test.Assert.areEqual(3, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        nonGenericParseWithCallbackWorks: function () {
            var o = JSON.parse("{ \"i\": 3, \"s\": \"test\" }", $_.Bridge.ClientTest.JsonTests.f1);
            Bridge.Test.Assert.areEqual(100, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        genericParseWithCallbackWorks: function () {
            var o = Bridge.merge(Bridge.createInstance(Object), JSON.parse("{ \"i\": 3, \"s\": \"test\" }", $_.Bridge.ClientTest.JsonTests.f1));
            Bridge.Test.Assert.areEqual(100, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        nonGenericParseWorks3: function () {
            var o = JSON.parse("{ \"i\": 3, \"s\": \"test\" }");
            Bridge.Test.Assert.areEqual(3, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.JsonTests.TestClass3.prototype.inc.call(o));
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.JsonTests.TestClass3.inc(10));
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        genericParseWorks3: function () {
            var o = Bridge.merge(Bridge.createInstance(Bridge.ClientTest.JsonTests.TestClass3), JSON.parse("{ \"i\": 3, \"s\": \"test\" }"));
            Bridge.Test.Assert.areEqual(3, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.JsonTests.TestClass3.prototype.inc.call(o));
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.JsonTests.TestClass3.inc(10));
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        nonGenericParseWithCallbackWorks3: function () {
            var o = JSON.parse("{ \"i\": 3, \"s\": \"test\" }", $_.Bridge.ClientTest.JsonTests.f1);
            Bridge.Test.Assert.areEqual(100, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.areEqual(101, Bridge.ClientTest.JsonTests.TestClass3.prototype.inc.call(o));
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.JsonTests.TestClass3.inc(10));
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        genericParseWithCallbackWorks3: function () {
            var o = Bridge.merge(Bridge.createInstance(Bridge.ClientTest.JsonTests.TestClass3), JSON.parse("{ \"i\": 3, \"s\": \"test\" }", $_.Bridge.ClientTest.JsonTests.f1));
            Bridge.Test.Assert.areEqual(100, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.areEqual(101, Bridge.ClientTest.JsonTests.TestClass3.prototype.inc.call(o));
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.JsonTests.TestClass3.inc(10));
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        nonGenericParseWorks4: function () {
            var o = JSON.parse("{ \"i\": 3, \"s\": \"test\" }");
            Bridge.Test.Assert.areEqual(3, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.JsonTests.TestClass4.prototype.inc.call(o));
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.JsonTests.TestClass4.inc(10));
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        genericParseWorks4: function () {
            var o = Bridge.merge(Bridge.createInstance(Bridge.ClientTest.JsonTests.TestClass4), JSON.parse("{ \"i\": 3, \"s\": \"test\" }"));
            Bridge.Test.Assert.areEqual(3, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.JsonTests.TestClass4.prototype.inc.call(o));
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.JsonTests.TestClass4.inc(10));
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        nonGenericParseWithCallbackWorks4: function () {
            var o = JSON.parse("{ \"i\": 3, \"s\": \"test\" }", $_.Bridge.ClientTest.JsonTests.f1);
            Bridge.Test.Assert.areEqual(100, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.areEqual(101, Bridge.ClientTest.JsonTests.TestClass4.prototype.inc.call(o));
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.JsonTests.TestClass4.inc(10));
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        genericParseWithCallbackWorks4: function () {
            var o = Bridge.merge(Bridge.createInstance(Bridge.ClientTest.JsonTests.TestClass4), JSON.parse("{ \"i\": 3, \"s\": \"test\" }", $_.Bridge.ClientTest.JsonTests.f1));
            Bridge.Test.Assert.areEqual(100, o.i);
            Bridge.Test.Assert.areEqual("test", o.s);
            Bridge.Test.Assert.areEqual(101, Bridge.ClientTest.JsonTests.TestClass4.prototype.inc.call(o));
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.JsonTests.TestClass4.inc(10));
            Bridge.Test.Assert.true$1(Bridge.isPlainObject(o), "IsPlainObject");
        },
        stringifyWorks: function () {
            Bridge.Test.Assert.areEqual("{\"i\":3}", JSON.stringify({ i: 3 }));
        },
        stringifyWithSerializableMembersArrayWorks: function () {
            Bridge.Test.Assert.areEqual("{\"i\":3}", JSON.stringify({ i: 3, s: "test" }, ["i"]));
        },
        stringifyWithSerializableMembersArrayAndIntentCountWorks: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify({ i: 3, s: "test" }, ["i"], 4));
        },
        stringifyWithSerializableMembersArrayAndIntentTextWorks: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify({ i: 3, s: "test" }, ["i"], "    "));
        },
        stringifyWithCallbackWorks: function () {
            Bridge.Test.Assert.areEqual("{\"i\":3}", JSON.stringify({ i: 3, s: "test" }, $_.Bridge.ClientTest.JsonTests.f2));
        },
        stringifyWithCallbackAndIndentCountWorks: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify({ i: 3, s: "test" }, $_.Bridge.ClientTest.JsonTests.f2, 4));
        },
        stringifyWithCallbackAndIndentTextWorks: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify({ i: 3, s: "test" }, $_.Bridge.ClientTest.JsonTests.f2, "    "));
        },
        stringifyWithSerializableMembersArrayWorks3: function () {
            Bridge.Test.Assert.areEqual("{\"i\":3}", JSON.stringify({ i: 3, s: "test" }, ["i"]));
        },
        stringifyWithSerializableMembersArrayAndIntentCountWorks3: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify({ i: 3, s: "test" }, ["i"], 4));
        },
        stringifyWithSerializableMembersArrayAndIntentTextWorks3: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify({ i: 3, s: "test" }, ["i"], "    "));
        },
        stringifyWithCallbackWorks3: function () {
            Bridge.Test.Assert.areEqual("{\"i\":3}", JSON.stringify({ i: 3, s: "test" }, $_.Bridge.ClientTest.JsonTests.f2));
        },
        stringifyWithCallbackAndIndentCountWorks3: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify({ i: 3, s: "test" }, $_.Bridge.ClientTest.JsonTests.f2, 4));
        },
        stringifyWithCallbackAndIndentTextWorks3: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify({ i: 3, s: "test" }, $_.Bridge.ClientTest.JsonTests.f2, "    "));
        },
        stringifyWithSerializableMembersArrayWorks4: function () {
            Bridge.Test.Assert.areEqual("{\"i\":3}", JSON.stringify(Bridge.merge(Bridge.ClientTest.JsonTests.TestClass4.ctor(), {
                i: 3, s: "test"
            } ), ["i"]));
        },
        stringifyWithSerializableMembersArrayAndIntentCountWorks4: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify(Bridge.merge(Bridge.ClientTest.JsonTests.TestClass4.ctor(), {
                i: 3, s: "test"
            } ), ["i"], 4));
        },
        stringifyWithSerializableMembersArrayAndIntentTextWorks4: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify(Bridge.merge(Bridge.ClientTest.JsonTests.TestClass4.ctor(), {
                i: 3, s: "test"
            } ), ["i"], "    "));
        },
        stringifyWithCallbackWorks4: function () {
            Bridge.Test.Assert.areEqual("{\"i\":3}", JSON.stringify(Bridge.merge(Bridge.ClientTest.JsonTests.TestClass4.ctor(), {
                i: 3, s: "test"
            } ), $_.Bridge.ClientTest.JsonTests.f2));
        },
        stringifyWithCallbackAndIndentCountWorks4: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify(Bridge.merge(Bridge.ClientTest.JsonTests.TestClass4.ctor(), {
                i: 3, s: "test"
            } ), $_.Bridge.ClientTest.JsonTests.f2, 4));
        },
        stringifyWithCallbackAndIndentTextWorks4: function () {
            Bridge.Test.Assert.areEqual("{\n    \"i\": 3\n}", JSON.stringify(Bridge.merge(Bridge.ClientTest.JsonTests.TestClass4.ctor(), {
                i: 3, s: "test"
            } ), $_.Bridge.ClientTest.JsonTests.f2, "    "));
        }
    });

    Bridge.ns("Bridge.ClientTest.JsonTests", $_);

    Bridge.apply($_.Bridge.ClientTest.JsonTests, {
        f1: function (s, x) {
            if (Bridge.referenceEquals(s, "i")) {
                return 100;
            }
            return x;
        },
        f2: function (key, value) {
            return Bridge.referenceEquals(key, "s") ? undefined : value;
        }
    });

    Bridge.define("Bridge.ClientTest.JsonTests.TestClass3", {
        $literal: true,
        statics: {
            inc: function (i) {
                return ((i = (i + 1) | 0));
            }
        },
        inc: function () {
            return ((this.i = (this.i + 1) | 0));
        }
    });

    Bridge.define("Bridge.ClientTest.JsonTests.TestClass4", {
        $literal: true,
        statics: {
            inc: function (i) {
                return ((i = (i + 1) | 0));
            }
        },
        ctor: function () {
            var $this = {};
            (function(){
                this.i = 0;
                this.s = null;
            }).call($this);
            return $this;
        },
        inc: function () {
            return ((this.i = (this.i + 1) | 0));
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.AnagramEqualityComparer", {
        inherits: [System.Collections.Generic.EqualityComparer$1(String)],
        config: {
            alias: [
            "equals2", "System$Collections$Generic$IEqualityComparer$1$String$equals2",
            "getHashCode2", "System$Collections$Generic$IEqualityComparer$1$String$getHashCode2"
            ]
        },
        equals2: function (x, y) {
            return Bridge.referenceEquals(this.getCanonicalString(x), this.getCanonicalString(y));
        },
        getHashCode2: function (obj) {
            return Bridge.getHashCode(this.getCanonicalString(obj));
        },
        getCanonicalString: function (word) {
            if (word == null) {
                return null;
            }

            var wordChars = System.String.toCharArray(word, 0, word.length);
            wordChars.sort();

            return String.fromCharCode.apply(null, wordChars);
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.Expressions.ExpressionTests", {
        statics: {
            f: function (f) {
                return 0;
            }
        },
        expressionProtectedConstructorWorks: function () {
            var expr = new Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyExpression();
            Bridge.Test.Assert.areEqual$1(expr.ntype, 9999, "NodeType");
            Bridge.Test.Assert.areEqual$1(expr.t, String, "Type");
        },
        simpleExpressionTreeWorks: function () {
            var $t, $t1;
            var f = ($t={ ntype: 9, t: System.Int32, value: 42 }, { ntype: 18, t: Function, rt: $t.t, body: $t, p: Bridge.toList([]) });
            Bridge.Test.Assert.areEqual(f.ntype, 18);
            Bridge.Test.Assert.areEqual(f.t, Function);
            Bridge.Test.Assert.areEqual(f.rt, System.Int32);
            Bridge.Test.Assert.areEqual(f.body.ntype, 9);
            Bridge.Test.Assert.areEqual(f.body.t, System.Int32);
            Bridge.Test.Assert.areEqual(($t1 = f.body, Bridge.cast($t1, Bridge.hasValue($t1) && ($t1.ntype === 9))).value, 42);
        },
        lambdaWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f1;

            var f1 = ($t={ ntype: 9, t: System.Int32, value: 42 }, { ntype: 18, t: Function, rt: $t.t, body: $t, p: Bridge.toList([]) });
            var f2 = ($t1 = { ntype: 38, t: System.Int32, n: "a" }, ($t2={ ntype: 9, t: String, value: "X" }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t1]) }));
            var f3 = ($t3 = { ntype: 38, t: System.Int32, n: "x" }, $t4 = { ntype: 38, t: String, n: "y" }, ($t5={ ntype: 9, t: System.Double, value: 42.0 }, { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t3,$t4]) }));
            var f4 = ($t6={ ntype: 9, t: System.Double, value: 42 }, { ntype: 18, t: Function, rt: $t6.t, body: $t6, p: Bridge.toList([{ ntype: 38, t: System.Int32, n: "x1" }, { ntype: 38, t: String, n: "x2" }]) });
            var f5 = ($t7={ ntype: 9, t: System.Double, value: 42 }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "x1" }, { ntype: 38, t: String, n: "x2" }])) });
            var f6 = ($t8={ ntype: 9, t: System.Double, value: 42 }, { ntype: 18, t: Function, rt: $t8.t, body: $t8, p: Bridge.toList([{ ntype: 38, t: System.Int32, n: "x1" }, { ntype: 38, t: String, n: "x2" }]) });
            var f7 = ($t9={ ntype: 9, t: System.Double, value: 42 }, { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "x1" }, { ntype: 38, t: String, n: "x2" }])) });

            asserter(f1, System.Int32, System.Array.init(0, null), System.Array.init(0, null), "f1");
            asserter(f2, String, ["a"], [System.Int32], "f2");
            asserter(f3, System.Double, ["x", "y"], [System.Int32, String], "f3");
            asserter(f4, System.Double, ["x1", "x2"], [System.Int32, String], "f4");
            asserter(f5, System.Double, ["x1", "x2"], [System.Int32, String], "f5");
            asserter(f6, System.Double, ["x1", "x2"], [System.Int32, String], "f6");
            asserter(f7, System.Double, ["x1", "x2"], [System.Int32, String], "f7");
        },
        parameterAndVariableWork: function () {
            var $t;
            var p1 = { ntype: 38, t: System.Int32 };
            var p2 = { ntype: 38, t: String, n: "par" };
            var p3 = { ntype: 38, t: System.Int32 };
            var p4 = { ntype: 38, t: String, n: "var" };
            Bridge.Test.Assert.true$1(($t = p1, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "p1 is ParameterExpression");
            Bridge.Test.Assert.true$1(($t = p2, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "p2 is ParameterExpression");
            Bridge.Test.Assert.true$1(($t = p3, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "p3 is ParameterExpression");
            Bridge.Test.Assert.true$1(($t = p4, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "p4 is ParameterExpression");
            Bridge.Test.Assert.areEqual$1(p1.ntype, 38, "p1.NodeType");
            Bridge.Test.Assert.areEqual$1(p2.ntype, 38, "p2.NodeType");
            Bridge.Test.Assert.areEqual$1(p3.ntype, 38, "p3.NodeType");
            Bridge.Test.Assert.areEqual$1(p4.ntype, 38, "p4.NodeType");
            Bridge.Test.Assert.areEqual$1(p1.t, System.Int32, "p1.Type");
            Bridge.Test.Assert.areEqual$1(p2.t, String, "p2.Type");
            Bridge.Test.Assert.areEqual$1(p3.t, System.Int32, "p3.Type");
            Bridge.Test.Assert.areEqual$1(p4.t, String, "p4.Type");
            Bridge.Test.Assert.true$1(p1.n == null, "p1.Name");
            Bridge.Test.Assert.areEqual$1(p2.n, "par", "p2.Name");
            Bridge.Test.Assert.true$1(p3.n == null, "p3.Name");
            Bridge.Test.Assert.areEqual$1(p4.n, "var", "p4.Name");

            Bridge.Test.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))), "Constant is ParameterExpression");
        },
        constantWorks: function () {
            var $t;
            var c1 = { ntype: 9, t: System.Int32, value: 42 };
            var c2 = { ntype: 9, t: String, value: "Hello, world" };
            var c3 = { ntype: 9, t: System.Int32, value: 17 };

            Bridge.Test.Assert.true$1(($t = c1, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 9))), "c1 is ConstantExpression");
            Bridge.Test.Assert.true$1(($t = c2, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 9))), "c2 is ConstantExpression");
            Bridge.Test.Assert.true$1(($t = c3, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 9))), "c3 is ConstantExpression");
            Bridge.Test.Assert.areEqual$1(c1.ntype, 9, "c1.NodeType");
            Bridge.Test.Assert.areEqual$1(c2.ntype, 9, "c2.NodeType");
            Bridge.Test.Assert.areEqual$1(c3.ntype, 9, "c3.NodeType");
            Bridge.Test.Assert.areEqual$1(c1.t, System.Int32, "c1.Type");
            Bridge.Test.Assert.areEqual$1(c2.t, String, "c2.Type");
            Bridge.Test.Assert.areEqual$1(c3.t, System.Int32, "c3.Type");
            Bridge.Test.Assert.areEqual$1(c1.value, 42, "c1.Value");
            Bridge.Test.Assert.areEqual$1(c2.value, "Hello, world", "c2.Value");
            Bridge.Test.Assert.areEqual$1(c3.value, 17, "c3.Value");

            Bridge.Test.Assert.false$1(($t = { ntype: 38, t: System.Int32 }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 9))), "Parameter is ConstantExpression");
        },
        binaryExpressionsWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89, $t90, $t91, $t92, $t93, $t94, $t95, $t96, $t97, $t98, $t99, $t100, $t101, $t102, $t103, $t104, $t105, $t106, $t107, $t108, $t109, $t110, $t111, $t112, $t113, $t114, $t115, $t116, $t117, $t118, $t119, $t120, $t121, $t122, $t123, $t124, $t125, $t126, $t127, $t128, $t129, $t130, $t131, $t132, $t133, $t134, $t135, $t136, $t137, $t138, $t139, $t140, $t141, $t142, $t143, $t144, $t145, $t146, $t147, $t148, $t149, $t150, $t151, $t152, $t153, $t154, $t155, $t156, $t157, $t158, $t159, $t160, $t161, $t162, $t163, $t164, $t165, $t166, $t167, $t168, $t169, $t170, $t171, $t172, $t173, $t174, $t175, $t176, $t177;
            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f2;

            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t2={ ntype: 26, t: System.Int32, left: $t, right: $t1 }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t,$t1]) }));
            var e2 = ($t3 = { ntype: 38, t: System.Int32, n: "a" }, $t4 = { ntype: 38, t: System.Int32, n: "b" }, ($t5={ ntype: 25, t: System.Int32, left: $t3, right: $t4 }, { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t3,$t4]) }));
            var e3 = ($t6 = { ntype: 38, t: System.Int32, n: "a" }, $t7 = { ntype: 38, t: System.Int32, n: "b" }, ($t8={ ntype: 12, t: System.Int32, left: $t6, right: $t7 }, { ntype: 18, t: Function, rt: $t8.t, body: $t8, p: Bridge.toList([$t6,$t7]) }));
            var e4 = ($t9 = { ntype: 38, t: System.Int32, n: "a" }, $t10 = { ntype: 38, t: System.Int32, n: "b" }, ($t11={ ntype: 0, t: System.Int32, left: $t9, right: $t10 }, { ntype: 18, t: Function, rt: $t11.t, body: $t11, p: Bridge.toList([$t9,$t10]) }));
            var e5 = ($t12 = { ntype: 38, t: System.Int32, n: "a" }, $t13 = { ntype: 38, t: System.Int32, n: "b" }, ($t14={ ntype: 42, t: System.Int32, left: $t12, right: $t13 }, { ntype: 18, t: Function, rt: $t14.t, body: $t14, p: Bridge.toList([$t12,$t13]) }));
            var e6 = ($t15 = { ntype: 38, t: System.Int32, n: "a" }, $t16 = { ntype: 38, t: System.Int32, n: "b" }, ($t17={ ntype: 19, t: System.Int32, left: $t15, right: $t16 }, { ntype: 18, t: Function, rt: $t17.t, body: $t17, p: Bridge.toList([$t15,$t16]) }));
            var e7 = ($t18 = { ntype: 38, t: System.Int32, n: "a" }, $t19 = { ntype: 38, t: System.Int32, n: "b" }, ($t20={ ntype: 41, t: System.Int32, left: $t18, right: $t19 }, { ntype: 18, t: Function, rt: $t20.t, body: $t20, p: Bridge.toList([$t18,$t19]) }));
            var e8 = ($t21 = { ntype: 38, t: System.Int32, n: "a" }, $t22 = { ntype: 38, t: System.Int32, n: "b" }, ($t23={ ntype: 20, t: Boolean, left: $t21, right: $t22 }, { ntype: 18, t: Function, rt: $t23.t, body: $t23, p: Bridge.toList([$t21,$t22]) }));
            var e9 = ($t24 = { ntype: 38, t: System.Int32, n: "a" }, $t25 = { ntype: 38, t: System.Int32, n: "b" }, ($t26={ ntype: 15, t: Boolean, left: $t24, right: $t25 }, { ntype: 18, t: Function, rt: $t26.t, body: $t26, p: Bridge.toList([$t24,$t25]) }));
            var e10 = ($t27 = { ntype: 38, t: System.Int32, n: "a" }, $t28 = { ntype: 38, t: System.Int32, n: "b" }, ($t29={ ntype: 21, t: Boolean, left: $t27, right: $t28 }, { ntype: 18, t: Function, rt: $t29.t, body: $t29, p: Bridge.toList([$t27,$t28]) }));
            var e11 = ($t30 = { ntype: 38, t: System.Int32, n: "a" }, $t31 = { ntype: 38, t: System.Int32, n: "b" }, ($t32={ ntype: 16, t: Boolean, left: $t30, right: $t31 }, { ntype: 18, t: Function, rt: $t32.t, body: $t32, p: Bridge.toList([$t30,$t31]) }));
            var e12 = ($t33 = { ntype: 38, t: System.Int32, n: "a" }, $t34 = { ntype: 38, t: System.Int32, n: "b" }, ($t35={ ntype: 13, t: Boolean, left: $t33, right: $t34 }, { ntype: 18, t: Function, rt: $t35.t, body: $t35, p: Bridge.toList([$t33,$t34]) }));
            var e13 = ($t36 = { ntype: 38, t: System.Int32, n: "a" }, $t37 = { ntype: 38, t: System.Int32, n: "b" }, ($t38={ ntype: 35, t: Boolean, left: $t36, right: $t37 }, { ntype: 18, t: Function, rt: $t38.t, body: $t38, p: Bridge.toList([$t36,$t37]) }));
            var e14 = ($t39 = { ntype: 38, t: System.Int32, n: "a" }, $t40 = { ntype: 38, t: System.Int32, n: "b" }, ($t41={ ntype: 2, t: System.Int32, left: $t39, right: $t40 }, { ntype: 18, t: Function, rt: $t41.t, body: $t41, p: Bridge.toList([$t39,$t40]) }));
            var e15 = ($t42 = { ntype: 38, t: System.Int32, n: "a" }, $t43 = { ntype: 38, t: System.Int32, n: "b" }, ($t44={ ntype: 14, t: System.Int32, left: $t42, right: $t43 }, { ntype: 18, t: Function, rt: $t44.t, body: $t44, p: Bridge.toList([$t42,$t43]) }));
            var e16 = ($t45 = { ntype: 38, t: System.Int32, n: "a" }, $t46 = { ntype: 38, t: System.Int32, n: "b" }, ($t47={ ntype: 36, t: System.Int32, left: $t45, right: $t46 }, { ntype: 18, t: Function, rt: $t47.t, body: $t47, p: Bridge.toList([$t45,$t46]) }));
            var e17 = ($t48 = { ntype: 38, t: Boolean, n: "a" }, $t49 = { ntype: 38, t: Boolean, n: "b" }, ($t50={ ntype: 3, t: Boolean, left: $t48, right: $t49 }, { ntype: 18, t: Function, rt: $t50.t, body: $t50, p: Bridge.toList([$t48,$t49]) }));
            var e18 = ($t51 = { ntype: 38, t: Boolean, n: "a" }, $t52 = { ntype: 38, t: Boolean, n: "b" }, ($t53={ ntype: 37, t: Boolean, left: $t51, right: $t52 }, { ntype: 18, t: Function, rt: $t53.t, body: $t53, p: Bridge.toList([$t51,$t52]) }));
            var e19 = ($t54 = { ntype: 38, t: System.Int32, n: "a" }, $t55 = { ntype: 38, t: System.Int32, n: "b" }, ($t56={ ntype: 27, t: System.Int32, left: $t54, right: $t55 }, { ntype: 18, t: Function, rt: $t56.t, body: $t56, p: Bridge.toList([$t54,$t55]) }));
            var e20 = ($t57 = { ntype: 38, t: System.Int32, n: "a" }, $t58 = { ntype: 38, t: System.Int32, n: "b" }, ($t59={ ntype: 1, t: System.Int32, left: $t57, right: $t58 }, { ntype: 18, t: Function, rt: $t59.t, body: $t59, p: Bridge.toList([$t57,$t58]) }));
            var e21 = ($t60 = { ntype: 38, t: System.Int32, n: "a" }, $t61 = { ntype: 38, t: System.Int32, n: "b" }, ($t62={ ntype: 43, t: System.Int32, left: $t60, right: $t61 }, { ntype: 18, t: Function, rt: $t62.t, body: $t62, p: Bridge.toList([$t60,$t61]) }));
            var e22 = ($t63 = { ntype: 38, t: System.Nullable$1(System.Int32), n: "a" }, $t64 = { ntype: 38, t: System.Int32, n: "b" }, ($t65={ ntype: 7, t: System.Int32, left: $t63, right: $t64 }, { ntype: 18, t: Function, rt: $t65.t, body: $t65, p: Bridge.toList([$t63,$t64]) }));

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };
            var e31 = { ntype: 26, t: System.Int32, left: pa, right: pb };
            var e32 = { ntype: 25, t: System.Int32, left: pa, right: pb };
            var e33 = { ntype: 12, t: System.Int32, left: pa, right: pb };
            var e34 = { ntype: 0, t: System.Int32, left: pa, right: pb };
            var e35 = { ntype: 42, t: System.Int32, left: pa, right: pb };
            var e36 = { ntype: 19, t: System.Int32, left: pa, right: pb };
            var e37 = { ntype: 41, t: System.Int32, left: pa, right: pb };
            var e38 = { ntype: 20, t: Boolean, left: pa, right: pb };
            var e39 = { ntype: 15, t: Boolean, left: pa, right: pb };
            var e40 = { ntype: 21, t: Boolean, left: pa, right: pb };
            var e41 = { ntype: 16, t: Boolean, left: pa, right: pb };
            var e42 = { ntype: 13, t: Boolean, left: pa, right: pb };
            var e43 = { ntype: 35, t: Boolean, left: pa, right: pb };
            var e44 = { ntype: 2, t: System.Int32, left: pa, right: pb };
            var e45 = { ntype: 14, t: System.Int32, left: pa, right: pb };
            var e46 = { ntype: 36, t: System.Int32, left: pa, right: pb };
            var e47 = { ntype: 3, t: Boolean, left: { ntype: 38, t: Boolean, n: "a" }, right: { ntype: 38, t: Boolean, n: "b" } };
            var e48 = { ntype: 37, t: Boolean, left: { ntype: 38, t: Boolean, n: "a" }, right: { ntype: 38, t: Boolean, n: "b" } };
            var e49 = { ntype: 27, t: System.Int32, left: pa, right: pb };
            var e50 = { ntype: 1, t: System.Int32, left: pa, right: pb };
            var e51 = { ntype: 43, t: System.Int32, left: pa, right: pb };
            var e52 = { ntype: 7, t: System.Int32, left: { ntype: 38, t: System.Nullable$1(System.Int32), n: "a" }, right: pb };
            var e53 = { ntype: 39, t: System.Int32, left: pa, right: pb };

            var e61 = ($t66 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t67 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t69=($t68=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[23], { ntype: 26, t: $t68.rt, left: $t66, right: $t67, method: $t68 }), { ntype: 18, t: Function, rt: $t69.t, body: $t69, p: Bridge.toList([$t66,$t67]) }));
            var e62 = ($t70 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t71 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t73=($t72=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[22], { ntype: 25, t: $t72.rt, left: $t70, right: $t71, method: $t72 }), { ntype: 18, t: Function, rt: $t73.t, body: $t73, p: Bridge.toList([$t70,$t71]) }));
            var e63 = ($t74 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t75 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t77=($t76=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[9], { ntype: 12, t: $t76.rt, left: $t74, right: $t75, method: $t76 }), { ntype: 18, t: Function, rt: $t77.t, body: $t77, p: Bridge.toList([$t74,$t75]) }));
            var e64 = ($t78 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t79 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t81=($t80=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[5], { ntype: 0, t: $t80.rt, left: $t78, right: $t79, method: $t80 }), { ntype: 18, t: Function, rt: $t81.t, body: $t81, p: Bridge.toList([$t78,$t79]) }));
            var e65 = ($t82 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t83 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t85=($t84=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[27], { ntype: 42, t: $t84.rt, left: $t82, right: $t83, method: $t84 }), { ntype: 18, t: Function, rt: $t85.t, body: $t85, p: Bridge.toList([$t82,$t83]) }));
            var e66 = ($t86 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t87 = { ntype: 38, t: System.Int32, n: "b" }, ($t89=($t88=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[18], { ntype: 19, t: $t88.rt, left: $t86, right: $t87, method: $t88 }), { ntype: 18, t: Function, rt: $t89.t, body: $t89, p: Bridge.toList([$t86,$t87]) }));
            var e67 = ($t90 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t91 = { ntype: 38, t: System.Int32, n: "b" }, ($t93=($t92=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[26], { ntype: 41, t: $t92.rt, left: $t90, right: $t91, method: $t92 }), { ntype: 18, t: Function, rt: $t93.t, body: $t93, p: Bridge.toList([$t90,$t91]) }));
            var e68 = ($t94 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t95 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t97=($t96=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[19], { ntype: 20, t: $t96.rt, left: $t94, right: $t95, method: $t96 }), { ntype: 18, t: Function, rt: $t97.t, body: $t97, p: Bridge.toList([$t94,$t95]) }));
            var e69 = ($t98 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t99 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t101=($t100=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[14], { ntype: 15, t: $t100.rt, left: $t98, right: $t99, method: $t100 }), { ntype: 18, t: Function, rt: $t101.t, body: $t101, p: Bridge.toList([$t98,$t99]) }));
            var e70 = ($t102 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t103 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t105=($t104=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[20], { ntype: 21, t: $t104.rt, left: $t102, right: $t103, method: $t104 }), { ntype: 18, t: Function, rt: $t105.t, body: $t105, p: Bridge.toList([$t102,$t103]) }));
            var e71 = ($t106 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t107 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t109=($t108=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[15], { ntype: 16, t: $t108.rt, left: $t106, right: $t107, method: $t108 }), { ntype: 18, t: Function, rt: $t109.t, body: $t109, p: Bridge.toList([$t106,$t107]) }));
            var e72 = ($t110 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t111 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t113=($t112=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[10], { ntype: 13, t: $t112.rt, left: $t110, right: $t111, method: $t112 }), { ntype: 18, t: Function, rt: $t113.t, body: $t113, p: Bridge.toList([$t110,$t111]) }));
            var e73 = ($t114 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t115 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t117=($t116=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[17], { ntype: 35, t: $t116.rt, left: $t114, right: $t115, method: $t116 }), { ntype: 18, t: Function, rt: $t117.t, body: $t117, p: Bridge.toList([$t114,$t115]) }));
            var e74 = ($t118 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t119 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t121=($t120=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[6], { ntype: 2, t: $t120.rt, left: $t118, right: $t119, method: $t120 }), { ntype: 18, t: Function, rt: $t121.t, body: $t121, p: Bridge.toList([$t118,$t119]) }));
            var e75 = ($t122 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t123 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t125=($t124=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[11], { ntype: 14, t: $t124.rt, left: $t122, right: $t123, method: $t124 }), { ntype: 18, t: Function, rt: $t125.t, body: $t125, p: Bridge.toList([$t122,$t123]) }));
            var e76 = ($t126 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t127 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t129=($t128=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[7], { ntype: 36, t: $t128.rt, left: $t126, right: $t127, method: $t128 }), { ntype: 18, t: Function, rt: $t129.t, body: $t129, p: Bridge.toList([$t126,$t127]) }));
            var e79 = ($t130 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t131 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t133=($t132=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[23], { ntype: 27, t: $t132.rt, left: $t130, right: $t131, method: $t132 }), { ntype: 18, t: Function, rt: $t133.t, body: $t133, p: Bridge.toList([$t130,$t131]) }));
            var e80 = ($t134 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t135 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t137=($t136=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[5], { ntype: 1, t: $t136.rt, left: $t134, right: $t135, method: $t136 }), { ntype: 18, t: Function, rt: $t137.t, body: $t137, p: Bridge.toList([$t134,$t135]) }));
            var e81 = ($t138 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t139 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" }, ($t141=($t140=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[27], { ntype: 43, t: $t140.rt, left: $t138, right: $t139, method: $t140 }), { ntype: 18, t: Function, rt: $t141.t, body: $t141, p: Bridge.toList([$t138,$t139]) }));

            var pa2 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" };
            var pb2 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "b" };
            var e91 = ($t142=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Multiply"), { ntype: 26, t: $t142.rt, left: pa2, right: pb2, method: $t142 });
            var e92 = ($t143=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Modulus"), { ntype: 25, t: $t143.rt, left: pa2, right: pb2, method: $t143 });
            var e93 = ($t144=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Division"), { ntype: 12, t: $t144.rt, left: pa2, right: pb2, method: $t144 });
            var e94 = ($t145=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Addition"), { ntype: 0, t: $t145.rt, left: pa2, right: pb2, method: $t145 });
            var e95 = ($t146=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Subtraction"), { ntype: 42, t: $t146.rt, left: pa2, right: pb2, method: $t146 });
            var e96 = ($t147=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LeftShift"), { ntype: 19, t: $t147.rt, left: pa2, right: pb2, method: $t147 });
            var e97 = ($t148=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_RightShift"), { ntype: 41, t: $t148.rt, left: pa2, right: pb2, method: $t148 });
            var e98 = ($t149=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LessThan"), { ntype: 20, t: $t149.rt, left: pa2, right: pb2, method: $t149 });
            var e99 = ($t150=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_GreaterThan"), { ntype: 15, t: $t150.rt, left: pa2, right: pb2, method: $t150 });
            var e100 = ($t151=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LessThanOrEqual"), { ntype: 21, t: $t151.rt, left: pa2, right: pb2, method: $t151 });
            var e101 = ($t152=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_GreaterThanOrEqual"), { ntype: 16, t: $t152.rt, left: pa2, right: pb2, method: $t152 });
            var e102 = ($t153=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Equality"), { ntype: 13, t: $t153.rt, left: pa2, right: pb2, method: $t153 });
            var e103 = ($t154=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Inequality"), { ntype: 35, t: $t154.rt, left: pa2, right: pb2, method: $t154 });
            var e104 = ($t155=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_BitwiseAnd"), { ntype: 2, t: $t155.rt, left: pa2, right: pb2, method: $t155 });
            var e105 = ($t156=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_ExclusiveOr"), { ntype: 14, t: $t156.rt, left: pa2, right: pb2, method: $t156 });
            var e106 = ($t157=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_BitwiseOr"), { ntype: 36, t: $t157.rt, left: pa2, right: pb2, method: $t157 });
            var e109 = ($t158=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Multiply"), { ntype: 27, t: $t158.rt, left: pa2, right: pb2, method: $t158 });
            var e110 = ($t159=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Addition"), { ntype: 1, t: $t159.rt, left: pa2, right: pb2, method: $t159 });
            var e111 = ($t160=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Subtraction"), { ntype: 43, t: $t160.rt, left: pa2, right: pb2, method: $t160 });
            var e113 = ($t161=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Power"), { ntype: 39, t: $t161.rt, left: pa2, right: pb2, method: $t161 });

            var e121 = { ntype: 69, t: System.Int32, left: pa, right: pb };
            var e122 = { ntype: 68, t: System.Int32, left: pa, right: pb };
            var e123 = { ntype: 65, t: System.Int32, left: pa, right: pb };
            var e124 = { ntype: 63, t: System.Int32, left: pa, right: pb };
            var e125 = { ntype: 73, t: System.Int32, left: pa, right: pb };
            var e126 = { ntype: 67, t: System.Int32, left: pa, right: pb };
            var e127 = { ntype: 72, t: System.Int32, left: pa, right: pb };
            var e134 = { ntype: 64, t: System.Int32, left: pa, right: pb };
            var e135 = { ntype: 66, t: System.Int32, left: pa, right: pb };
            var e136 = { ntype: 70, t: System.Int32, left: pa, right: pb };
            var e139 = { ntype: 75, t: System.Int32, left: pa, right: pb };
            var e140 = { ntype: 74, t: System.Int32, left: pa, right: pb };
            var e141 = { ntype: 76, t: System.Int32, left: pa, right: pb };
            var e143 = { ntype: 71, t: System.Int32, left: pa, right: pb };
            var e144 = { ntype: 46, t: pb.t, left: pa, right: pb };

            var e151 = ($t162=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Multiply"), { ntype: 69, t: $t162.rt, left: pa2, right: pb2, method: $t162 });
            var e152 = ($t163=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Modulus"), { ntype: 68, t: $t163.rt, left: pa2, right: pb2, method: $t163 });
            var e153 = ($t164=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Division"), { ntype: 65, t: $t164.rt, left: pa2, right: pb2, method: $t164 });
            var e154 = ($t165=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Addition"), { ntype: 63, t: $t165.rt, left: pa2, right: pb2, method: $t165 });
            var e155 = ($t166=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Subtraction"), { ntype: 73, t: $t166.rt, left: pa2, right: pb2, method: $t166 });
            var e156 = ($t167=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LeftShift"), { ntype: 67, t: $t167.rt, left: pa2, right: pb2, method: $t167 });
            var e157 = ($t168=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_RightShift"), { ntype: 72, t: $t168.rt, left: pa2, right: pb2, method: $t168 });
            var e164 = ($t169=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_BitwiseAnd"), { ntype: 64, t: $t169.rt, left: pa2, right: pb2, method: $t169 });
            var e165 = ($t170=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_ExclusiveOr"), { ntype: 66, t: $t170.rt, left: pa2, right: pb2, method: $t170 });
            var e166 = ($t171=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_BitwiseOr"), { ntype: 70, t: $t171.rt, left: pa2, right: pb2, method: $t171 });
            var e169 = ($t172=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Multiply"), { ntype: 75, t: $t172.rt, left: pa2, right: pb2, method: $t172 });
            var e170 = ($t173=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Addition"), { ntype: 74, t: $t173.rt, left: pa2, right: pb2, method: $t173 });
            var e171 = ($t174=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Subtraction"), { ntype: 76, t: $t174.rt, left: pa2, right: pb2, method: $t174 });
            var e173 = ($t175=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Power"), { ntype: 71, t: $t175.rt, left: pa2, right: pb2, method: $t175 });

            var mkbin1 = { ntype: 42, t: pb.t, left: pa, right: pb };
            var mkbin2 = ($t176=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LessThan"), { ntype: 20, t: $t176.rt, left: pa2, right: pb2, method: $t176 });

            asserter(e1.body, 26, System.Int32, null, "e1");
            asserter(e2.body, 25, System.Int32, null, "e2");
            asserter(e3.body, 12, System.Int32, null, "e3");
            asserter(e4.body, 0, System.Int32, null, "e4");
            asserter(e5.body, 42, System.Int32, null, "e5");
            asserter(e6.body, 19, System.Int32, null, "e6");
            asserter(e7.body, 41, System.Int32, null, "e7");
            asserter(e8.body, 20, Boolean, null, "e8");
            asserter(e9.body, 15, Boolean, null, "e9");
            asserter(e10.body, 21, Boolean, null, "e10");
            asserter(e11.body, 16, Boolean, null, "e11");
            asserter(e12.body, 13, Boolean, null, "e12");
            asserter(e13.body, 35, Boolean, null, "e13");
            asserter(e14.body, 2, System.Int32, null, "e14");
            asserter(e15.body, 14, System.Int32, null, "e15");
            asserter(e16.body, 36, System.Int32, null, "e16");
            asserter(e17.body, 3, Boolean, null, "e17");
            asserter(e18.body, 37, Boolean, null, "e18");
            asserter(e19.body, 27, System.Int32, null, "e19");
            asserter(e20.body, 1, System.Int32, null, "e20");
            asserter(e21.body, 43, System.Int32, null, "e21");
            asserter(e22.body, 7, System.Int32, null, "e22");

            asserter(e31, 26, System.Int32, null, "e31");
            asserter(e32, 25, System.Int32, null, "e32");
            asserter(e33, 12, System.Int32, null, "e33");
            asserter(e34, 0, System.Int32, null, "e34");
            asserter(e35, 42, System.Int32, null, "e35");
            asserter(e36, 19, System.Int32, null, "e36");
            asserter(e37, 41, System.Int32, null, "e37");
            asserter(e38, 20, Boolean, null, "e38");
            asserter(e39, 15, Boolean, null, "e39");
            asserter(e40, 21, Boolean, null, "e40");
            asserter(e41, 16, Boolean, null, "e41");
            asserter(e42, 13, Boolean, null, "e42");
            asserter(e43, 35, Boolean, null, "e43");
            asserter(e44, 2, System.Int32, null, "e44");
            asserter(e45, 14, System.Int32, null, "e45");
            asserter(e46, 36, System.Int32, null, "e46");
            asserter(e47, 3, Boolean, null, "e47");
            asserter(e48, 37, Boolean, null, "e48");
            asserter(e49, 27, System.Int32, null, "e49");
            asserter(e50, 1, System.Int32, null, "e50");
            asserter(e51, 43, System.Int32, null, "e51");
            asserter(e52, 7, System.Int32, null, "e52");
            asserter(e53, 39, System.Int32, null, "e53");

            asserter(e61.body, 26, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e61");
            asserter(e62.body, 25, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Modulus", "e62");
            asserter(e63.body, 12, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Division", "e63");
            asserter(e64.body, 0, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Addition", "e64");
            asserter(e65.body, 42, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e65");
            asserter(e66.body, 19, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_LeftShift", "e66");
            asserter(e67.body, 41, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_RightShift", "e67");
            asserter(e68.body, 20, Boolean, "op_LessThan", "e68");
            asserter(e69.body, 15, Boolean, "op_GreaterThan", "e69");
            asserter(e70.body, 21, Boolean, "op_LessThanOrEqual", "e70");
            asserter(e71.body, 16, Boolean, "op_GreaterThanOrEqual", "e71");
            asserter(e72.body, 13, Boolean, "op_Equality", "e72");
            asserter(e73.body, 35, Boolean, "op_Inequality", "e73");
            asserter(e74.body, 2, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_BitwiseAnd", "e74");
            asserter(e75.body, 14, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_ExclusiveOr", "e75");
            asserter(e76.body, 36, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_BitwiseOr", "e76");
            asserter(e79.body, 27, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e79");
            asserter(e80.body, 1, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Addition", "e80");
            asserter(e81.body, 43, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e81");

            asserter(e91, 26, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e91");
            asserter(e92, 25, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Modulus", "e92");
            asserter(e93, 12, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Division", "e93");
            asserter(e94, 0, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Addition", "e94");
            asserter(e95, 42, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e95");
            asserter(e96, 19, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_LeftShift", "e96");
            asserter(e97, 41, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_RightShift", "e97");
            asserter(e98, 20, Boolean, "op_LessThan", "e98");
            asserter(e99, 15, Boolean, "op_GreaterThan", "e99");
            asserter(e100, 21, Boolean, "op_LessThanOrEqual", "e100");
            asserter(e101, 16, Boolean, "op_GreaterThanOrEqual", "e101");
            asserter(e102, 13, Boolean, "op_Equality", "e102");
            asserter(e103, 35, Boolean, "op_Inequality", "e103");
            asserter(e104, 2, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_BitwiseAnd", "e104");
            asserter(e105, 14, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_ExclusiveOr", "e105");
            asserter(e106, 36, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_BitwiseOr", "e106");
            asserter(e109, 27, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e109");
            asserter(e110, 1, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Addition", "e110");
            asserter(e111, 43, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e111");
            asserter(e113, 39, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Power", "e113");

            asserter(e121, 69, System.Int32, null, "e121");
            asserter(e122, 68, System.Int32, null, "e122");
            asserter(e123, 65, System.Int32, null, "e123");
            asserter(e124, 63, System.Int32, null, "e124");
            asserter(e125, 73, System.Int32, null, "e125");
            asserter(e126, 67, System.Int32, null, "e126");
            asserter(e127, 72, System.Int32, null, "e127");
            asserter(e134, 64, System.Int32, null, "e134");
            asserter(e135, 66, System.Int32, null, "e135");
            asserter(e136, 70, System.Int32, null, "e136");
            asserter(e139, 75, System.Int32, null, "e139");
            asserter(e140, 74, System.Int32, null, "e140");
            asserter(e141, 76, System.Int32, null, "e141");
            asserter(e143, 71, System.Int32, null, "e143");
            asserter(e144, 46, System.Int32, null, "e143");

            asserter(e151, 69, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e151");
            asserter(e152, 68, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Modulus", "e152");
            asserter(e153, 65, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Division", "e153");
            asserter(e154, 63, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Addition", "e154");
            asserter(e155, 73, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e155");
            asserter(e156, 67, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_LeftShift", "e156");
            asserter(e157, 72, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_RightShift", "e157");
            asserter(e164, 64, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_BitwiseAnd", "e164");
            asserter(e165, 66, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_ExclusiveOr", "e165");
            asserter(e166, 70, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_BitwiseOr", "e166");
            asserter(e169, 75, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Multiply", "e169");
            asserter(e170, 74, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Addition", "e170");
            asserter(e171, 76, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Subtraction", "e171");
            asserter(e173, 71, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Power", "e173");

            asserter(mkbin1, 42, System.Int32, null, "mkbin1");
            asserter(mkbin2, 20, Boolean, "op_LessThan", "mkbin2");

            Bridge.Test.Assert.false$1(($t177 = { ntype: 9, t: Object, value: null }, Bridge.is($t177, Bridge.hasValue($t177) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t177.ntype) >= 0))), "Constant should not be BinaryExpression");
        },
        unaryExpressionsWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39;
            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f3;

            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t1={ ntype: 29, t: System.Int32, operand: $t }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = ($t2 = { ntype: 38, t: System.Int32, n: "a" }, ($t3={ ntype: 28, t: System.Int32, operand: $t2 }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t2]) }));
            var e3 = ($t4 = { ntype: 38, t: System.Int32, n: "a" }, ($t5={ ntype: 82, t: System.Int32, operand: $t4 }, { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t4]) }));
            var e4 = ($t6 = { ntype: 38, t: Boolean, n: "a" }, ($t7={ ntype: 34, t: Boolean, operand: $t6 }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t6]) }));
            var e5 = ($t8 = { ntype: 38, t: System.Int32, n: "a" }, ($t9={ ntype: 30, t: System.Int32, operand: $t8 }, { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t8]) }));

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var e11 = { ntype: 29, t: System.Int32, operand: pa };
            var e12 = { ntype: 28, t: System.Int32, operand: pa };
            var e13 = { ntype: 82, t: System.Int32, operand: pa };
            var e14 = { ntype: 34, t: Boolean, operand: { ntype: 38, t: Boolean, n: "a" } };
            var e15 = { ntype: 30, t: System.Int32, operand: pa };
            var e16 = { ntype: 84, t: Boolean, operand: { ntype: 38, t: Boolean, n: "a" } };
            var e17 = { ntype: 83, t: Boolean, operand: { ntype: 38, t: Boolean, n: "a" } };
            var e18 = { ntype: 54, t: System.Int32, operand: pa };
            var e19 = { ntype: 49, t: System.Int32, operand: pa };

            var e21 = ($t10 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t12=($t11=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[30], { ntype: 29, t: $t11.rt, operand: $t10, method: $t11 }), { ntype: 18, t: Function, rt: $t12.t, body: $t12, p: Bridge.toList([$t10]) }));
            var e22 = ($t13 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t15=($t14=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[29], { ntype: 28, t: $t14.rt, operand: $t13, method: $t14 }), { ntype: 18, t: Function, rt: $t15.t, body: $t15, p: Bridge.toList([$t13]) }));
            var e23 = ($t16 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t18=($t17=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[24], { ntype: 82, t: $t17.rt, operand: $t16, method: $t17 }), { ntype: 18, t: Function, rt: $t18.t, body: $t18, p: Bridge.toList([$t16]) }));
            var e24 = ($t19 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t21=($t20=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[21], { ntype: 34, t: $t20.rt, operand: $t19, method: $t20 }), { ntype: 18, t: Function, rt: $t21.t, body: $t21, p: Bridge.toList([$t19]) }));
            var e25 = ($t22 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t24=($t23=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[29], { ntype: 30, t: $t23.rt, operand: $t22, method: $t23 }), { ntype: 18, t: Function, rt: $t24.t, body: $t24, p: Bridge.toList([$t22]) }));

            var pa2 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" };
            var e31 = ($t25=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_UnaryPlus"), { ntype: 29, t: $t25.rt, operand: pa2, method: $t25 });
            var e32 = ($t26=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_UnaryNegation"), { ntype: 28, t: $t26.rt, operand: pa2, method: $t26 });
            var e33 = ($t27=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_OnesComplement"), { ntype: 82, t: $t27.rt, operand: pa2, method: $t27 });
            var e34 = ($t28=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_LogicalNot"), { ntype: 34, t: $t28.rt, operand: pa2, method: $t28 });
            var e35 = ($t29=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_UnaryNegation"), { ntype: 30, t: $t29.rt, operand: pa2, method: $t29 });
            var e36 = ($t30=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_False"), { ntype: 84, t: $t30.rt, operand: pa2, method: $t30 });
            var e37 = ($t31=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_True"), { ntype: 83, t: $t31.rt, operand: pa2, method: $t31 });
            var e38 = ($t32=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Increment"), { ntype: 54, t: $t32.rt, operand: pa2, method: $t32 });
            var e39 = ($t33=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Decrement"), { ntype: 49, t: $t33.rt, operand: pa2, method: $t33 });

            var e41 = { ntype: 77, t: System.Int32, operand: pa };
            var e42 = { ntype: 78, t: System.Int32, operand: pa };
            var e43 = { ntype: 79, t: System.Int32, operand: pa };
            var e44 = { ntype: 80, t: System.Int32, operand: pa };

            var e51 = ($t34=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Increment"), { ntype: 77, t: $t34.rt, operand: pa, method: $t34 });
            var e52 = ($t35=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Decrement"), { ntype: 78, t: $t35.rt, operand: pa, method: $t35 });
            var e53 = ($t36=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Increment"), { ntype: 79, t: $t36.rt, operand: pa, method: $t36 });
            var e54 = ($t37=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Decrement"), { ntype: 80, t: $t37.rt, operand: pa, method: $t37 });

            var mkun1 = { ntype: 82, t: System.Int32, operand: pa };
            var mkun2 = ($t38=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_UnaryNegation"), { ntype: 28, t: null || $t38.rt, operand: pa2, method: $t38 });

            asserter(e1.body, 29, System.Int32, null, "e1");
            asserter(e2.body, 28, System.Int32, null, "e2");
            asserter(e3.body, 82, System.Int32, null, "e3");
            asserter(e4.body, 34, Boolean, null, "e4");
            asserter(e5.body, 30, System.Int32, null, "e5");

            asserter(e11, 29, System.Int32, null, "e11");
            asserter(e12, 28, System.Int32, null, "e12");
            asserter(e13, 82, System.Int32, null, "e13");
            asserter(e14, 34, Boolean, null, "e14");
            asserter(e15, 30, System.Int32, null, "e15");
            asserter(e16, 84, Boolean, null, "e16");
            asserter(e17, 83, Boolean, null, "e17");
            asserter(e18, 54, System.Int32, null, "e18");
            asserter(e19, 49, System.Int32, null, "e19");

            asserter(e21.body, 29, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_UnaryPlus", "e21");
            asserter(e22.body, 28, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "e22");
            asserter(e23.body, 82, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_OnesComplement", "e23");
            asserter(e24.body, 34, Boolean, "op_LogicalNot", "e24");
            asserter(e25.body, 30, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "e25");

            asserter(e31, 29, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_UnaryPlus", "e31");
            asserter(e32, 28, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "e32");
            asserter(e33, 82, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_OnesComplement", "e33");
            asserter(e34, 34, Boolean, "op_LogicalNot", "e34");
            asserter(e35, 30, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "e35");
            asserter(e36, 84, Boolean, "op_False", "e36");
            asserter(e37, 83, Boolean, "op_True", "e37");
            asserter(e38, 54, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Increment", "e38");
            asserter(e39, 49, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Decrement", "e39");

            asserter(e41, 77, System.Int32, null, "e41");
            asserter(e42, 78, System.Int32, null, "e42");
            asserter(e43, 79, System.Int32, null, "e43");
            asserter(e44, 80, System.Int32, null, "e44");

            asserter(e51, 77, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Increment", "e51");
            asserter(e52, 78, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Decrement", "e52");
            asserter(e53, 79, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Increment", "e53");
            asserter(e54, 80, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_Decrement", "e54");

            asserter(mkun1, 82, System.Int32, null, "mkun1");
            asserter(mkun2, 28, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "op_UnaryNegation", "mkun2");

            Bridge.Test.Assert.false$1(($t39 = { ntype: 9, t: Object, value: null }, Bridge.is($t39, Bridge.hasValue($t39) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t39.ntype) >= 0))), "Constant should not be UnaryExpression");
        },
        arrayLengthWorks: function () {
            var $t, $t1, $t2;
            var e1 = ($t = { ntype: 38, t: Array, n: "a" }, ($t1={ ntype: 4, t: System.Int32, operand: $t }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = { ntype: 4, t: System.Int32, operand: { ntype: 38, t: Array, n: "a" } };

            Bridge.Test.Assert.true$1(($t2 = e1.body, Bridge.is($t2, Bridge.hasValue($t2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t2.ntype) >= 0))), "e1 is UnaryExpression");
            Bridge.Test.Assert.areEqual$1(e1.body.ntype, 4, "e1 node type");
            Bridge.Test.Assert.areEqual$1(e1.body.t, System.Int32, "e1 type");
            Bridge.Test.Assert.true$1(($t2 = ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t2.ntype) >= 0))).operand, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t2.ntype) >= 0))).operand, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e1 operand");
            Bridge.Test.Assert.true$1(($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t2.ntype) >= 0))).method == null, "e1 method");

            Bridge.Test.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)), "e2 is UnaryExpression");
            Bridge.Test.Assert.areEqual$1(e2.ntype, 4, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.t, System.Int32, "e2 type");
            Bridge.Test.Assert.true$1(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)).operand, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)).operand, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e2 operand");
            Bridge.Test.Assert.true$1(Bridge.cast(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)).method == null, "e2 method");
        },
        conversionsWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13;
            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f3;

            var e1 = ($t = { ntype: 38, t: Object, n: "a" }, ($t1={ ntype: 10, t: System.Int32, operand: $t }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = ($t2 = { ntype: 38, t: Object, n: "a" }, ($t3={ ntype: 10, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, operand: $t2 }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t2]) }));
            var e3 = ($t4 = { ntype: 38, t: System.Double, n: "a" }, ($t5={ ntype: 10, t: System.Int32, operand: $t4 }, { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t4]) }));
            var e4 = ($t6 = { ntype: 38, t: System.Double, n: "a" }, ($t7={ ntype: 11, t: System.Int32, operand: $t6 }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t6]) }));
            var e5 = ($t8 = { ntype: 38, t: Object, n: "a" }, ($t9={ ntype: 44, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, operand: $t8 }, { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t8]) }));
            var e6 = ($t10 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t11={ ntype: 10, t: System.Int32, operand: $t10, method: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[12] }, { ntype: 18, t: Function, rt: $t11.t, body: $t11, p: Bridge.toList([$t10]) }));
            var e7 = ($t12 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t13={ ntype: 11, t: System.Int32, operand: $t12, method: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[12] }, { ntype: 18, t: Function, rt: $t13.t, body: $t13, p: Bridge.toList([$t12]) }));

            var e11 = { ntype: 62, t: System.Int32, operand: { ntype: 38, t: Object, n: "a" } };
            var e12 = { ntype: 10, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, operand: { ntype: 38, t: Object, n: "a" } };
            var e13 = { ntype: 10, t: System.Int32, operand: { ntype: 38, t: System.Double, n: "a" } };
            var e14 = { ntype: 11, t: System.Int32, operand: { ntype: 38, t: System.Double, n: "a" } };
            var e15 = { ntype: 44, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, operand: { ntype: 38, t: Object, n: "a" } };
            var e16 = { ntype: 10, t: System.Int32, operand: { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, method: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Explicit") };
            var e17 = { ntype: 11, t: System.Int32, operand: { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, method: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Explicit") };

            asserter(e1.body, 10, System.Int32, null, "e1");
            asserter(e2.body, 10, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, null, "e2");
            asserter(e3.body, 10, System.Int32, null, "e3");
            asserter(e4.body, 11, System.Int32, null, "e4");
            asserter(e5.body, 44, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, null, "e5");
            asserter(e6.body, 10, System.Int32, "op_Explicit", "e6");
            asserter(e7.body, 11, System.Int32, "op_Explicit", "e7");

            asserter(e11, 62, System.Int32, null, "e11");
            asserter(e12, 10, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, null, "e12");
            asserter(e13, 10, System.Int32, null, "e13");
            asserter(e14, 11, System.Int32, null, "e14");
            asserter(e15, 44, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, null, "e15");
            asserter(e16, 10, System.Int32, "op_Explicit", "e16");
            asserter(e17, 11, System.Int32, "op_Explicit", "e17");
        },
        arrayIndexWorks: function () {
            var $t, $t1, $t2, $t3;
            var e1 = ($t = { ntype: 38, t: Array, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t2={ ntype: 5, t: System.Double, left: $t, right: $t1 }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t,$t1]) }));
            var e2 = { ntype: 5, t: System.Double, left: { ntype: 38, t: Array, n: "a" }, right: { ntype: 38, t: System.Int32, n: "b" } };

            Bridge.Test.Assert.true$1(($t3 = e1.body, Bridge.is($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))), "e1 is BinaryExpression");
            Bridge.Test.Assert.areEqual$1(e1.body.ntype, 5, "e1 node type");
            Bridge.Test.Assert.areEqual$1(e1.body.t, System.Double, "e1 type");
            Bridge.Test.Assert.true$1(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).left, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).left, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "a"), "e1 left");
            Bridge.Test.Assert.true$1(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).right, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).right, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "b"), "e1 right");
            Bridge.Test.Assert.true$1(($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).method == null, "e1 method");

            Bridge.Test.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf(e2.ntype) >= 0)), "e2 is BinaryExpression");
            Bridge.Test.Assert.areEqual$1(e2.ntype, 5, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.t, System.Double, "e2 type");
            Bridge.Test.Assert.true$1(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).left, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).left, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "a"), "e2 left");
            Bridge.Test.Assert.true$1(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).right, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).right, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "b"), "e2 right");
            Bridge.Test.Assert.true$1(($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf($t3.ntype) >= 0))).method == null, "e2 method");
        },
        multiDimensionalArrayIndexWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
            var arr = System.Array.create(0, null, 4, 4);
            arr.set([1, 2], 2.5);
            var e1 = ($t = { ntype: 38, t: Array, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, $t2 = { ntype: 38, t: System.Int32, n: "c" }, ($t5=($t3=System.Double, $t4=[$t1,$t2], { ntype: 6, t: $t3, obj: $t, method: { t: 8, td: Array, n: 'Get', rt: $t3, p: System.Array.init($t4.length, System.Int32, true), def: function() { return System.Array.$get.call(this, arguments); } }, args: Bridge.toList($t4) }), { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t,$t1,$t2]) }));
            var e2 = ($t6=System.Double, $t7=[{ ntype: 38, t: System.Int32, n: "b" }, { ntype: 38, t: System.Int32, n: "c" }], { ntype: 6, t: $t6, obj: { ntype: 38, t: Array, n: "a" }, method: { t: 8, td: Array, n: 'Get', rt: $t6, p: System.Array.init($t7.length, System.Int32, true), def: function() { return System.Array.$get.call(this, arguments); } }, args: Bridge.toList($t7) });
            var e3 = (function(a, b, c) { return { ntype: 6, t: a, obj: b, method: { t: 8, td: Array, n: 'Get', rt: a, p: System.Array.init(c.getCount(), System.Int32, true), def: function() { return System.Array.$get.call(this, arguments); } }, args: c }; })(System.Double, { ntype: 38, t: Array, n: "a" }, Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "b" }, { ntype: 38, t: System.Int32, n: "c" }])));

            var asserter = function (expr, title) {
                var $t8;
                var me = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 6));
                Bridge.Test.Assert.true$1(me != null, System.String.concat(title, " is MethodCallExpression"));
                Bridge.Test.Assert.areEqual$1(me.ntype, 6, System.String.concat(title, " node type"));
                Bridge.Test.Assert.areEqual$1(me.t, System.Double, System.String.concat(title, " type"));
                Bridge.Test.Assert.true$1(($t8 = me.obj, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = me.obj, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), System.String.concat(title, " object"));
                Bridge.Test.Assert.areEqual$1(me.args.getCount(), 2, System.String.concat(title, " argument count"));
                Bridge.Test.Assert.true$1(($t8 = me.args.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = me.args.get(0), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "b"), System.String.concat(title, " argument 0"));
                Bridge.Test.Assert.true$1(($t8 = me.args.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = me.args.get(1), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "c"), System.String.concat(title, " argument 1"));
                Bridge.Test.Assert.areEqual$1(me.method.t, 8, System.String.concat(title, "method type"));
                Bridge.Test.Assert.false$1((me.method.t === 1), System.String.concat(title, "method is constructor"));
                Bridge.Test.Assert.false$1((me.method.is || false), System.String.concat(title, "method isstatic"));
                Bridge.Test.Assert.areEqual$1(me.method.rt, System.Double, System.String.concat(title, " method return value"));
                Bridge.Test.Assert.areEqual$1(me.method.n, "Get", System.String.concat(title, " method name"));
                Bridge.Test.Assert.areEqual$1(me.method.td, Array, System.String.concat(title, " method declaring type"));
                Bridge.Test.Assert.areEqual$1((me.method.p || []), [System.Int32, System.Int32], System.String.concat(title, " method parameter types"));
                Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(me.method, arr)(1, 2), 2.5, System.String.concat(title, " method invoke result"));
            };

            asserter(e1.body, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");
        },
        conditionWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var e1 = ($t = { ntype: 38, t: Boolean, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, $t2 = { ntype: 38, t: System.Int32, n: "c" }, ($t3={ ntype: 8, t: System.Int32, test: $t, ifTrue: $t1, ifFalse: $t2 }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t,$t1,$t2]) }));
            var e2 = { ntype: 8, t: System.Int32, test: { ntype: 38, t: Boolean, n: "a" }, ifTrue: { ntype: 38, t: System.Int32, n: "b" }, ifFalse: { ntype: 38, t: System.Int32, n: "c" } };

            Bridge.Test.Assert.true$1(($t4 = e1.body, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))), "e1 is ConditionalExpression");
            Bridge.Test.Assert.areEqual$1(e1.body.ntype, 8, "e1 node type");
            Bridge.Test.Assert.areEqual$1(e1.body.t, System.Int32, "e1 type");
            Bridge.Test.Assert.true$1(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).test, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).test, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "a"), "e1 test");
            Bridge.Test.Assert.true$1(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).ifTrue, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).ifTrue, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "b"), "e1 iftrue");
            Bridge.Test.Assert.true$1(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).ifFalse, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ($t4 = e1.body, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))).ifFalse, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "c"), "e1 iffalse");

            Bridge.Test.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 8)), "e2 is ConditionalExpression");
            Bridge.Test.Assert.areEqual$1(e2.ntype, 8, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.t, System.Int32, "e2 type");
            Bridge.Test.Assert.true$1(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).test, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).test, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "a"), "e2 test");
            Bridge.Test.Assert.true$1(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).ifTrue, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).ifTrue, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "b"), "e2 iftrue");
            Bridge.Test.Assert.true$1(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).ifFalse, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 8)).ifFalse, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "c"), "e2 iffalse");

            Bridge.Test.Assert.false$1(($t4 = { ntype: 9, t: Object, value: null }, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 8))), "Constant should not be ConditionalExpression");
        },
        callWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21;
            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f4;

            var e1 = ($t = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "i" }, $t1 = { ntype: 38, t: System.Int32, n: "a" }, $t2 = { ntype: 38, t: String, n: "b" }, ($t4=($t3=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[2], { ntype: 6, t: $t3.rt, obj: $t, method: $t3, args: Bridge.toList([$t1,$t2]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1,$t2]) }));
            var e2 = ($t5 = { ntype: 38, t: System.Int32, n: "a" }, $t6 = { ntype: 38, t: String, n: "b" }, ($t8=($t7=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[3], { ntype: 6, t: $t7.rt, obj: null, method: $t7, args: Bridge.toList([$t5,$t6]) }), { ntype: 18, t: Function, rt: $t8.t, body: $t8, p: Bridge.toList([$t5,$t6]) }));
            var e3 = ($t9=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "M1"), { ntype: 6, t: $t9.rt, obj: { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "i" }, method: $t9, args: Bridge.toList([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: String, n: "b" }]) });
            var e4 = ($t10=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "M2"), { ntype: 6, t: $t10.rt, obj: null, method: $t10, args: Bridge.toList([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: String, n: "b" }]) });
            var e5 = ($t11=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "M1"), { ntype: 6, t: $t11.rt, obj: { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "i" }, method: $t11, args: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: String, n: "b" }])) });
            var e6 = ($t12=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "M2"), { ntype: 6, t: $t12.rt, obj: null, method: $t12, args: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: String, n: "b" }])) });
            var e7 = ($t13=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "M2"), { ntype: 6, t: $t13.rt, method: $t13, args: Bridge.toList([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: String, n: "b" }]) });
            var e8 = ($t14=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "M2"), { ntype: 6, t: $t14.rt, method: $t14, args: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: String, n: "b" }])) });
            var e9 = ($t15 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t17=($t16=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[2], { ntype: 6, t: $t16.rt, obj: $t15, method: $t16, args: Bridge.toList([{ ntype: 9, t: System.Int32, value: 0 },{ ntype: 9, t: String, value: null }]) }), { ntype: 18, t: Function, rt: $t17.t, body: $t17, p: Bridge.toList([$t15]) }));
            var e10 = ($t18 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t20=($t19={"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests.C,"a":2,"n":"M3","t":8,"pi":[{"n":"a","pt":System.Int32,"ps":0}],"sn":"M3","rt":System.Int32,"p":[System.Int32]}, { ntype: 6, t: $t19.rt, obj: $t18, method: $t19, args: Bridge.toList([{ ntype: 9, t: System.Int32, value: 0 }]) }), { ntype: 18, t: Function, rt: $t20.t, body: $t20, p: Bridge.toList([$t18]) }));

            asserter(e1.body, "M1", false, "e1");
            asserter(e2.body, "M2", true, "e2");
            asserter(e3, "M1", false, "e3");
            asserter(e4, "M2", true, "e4");
            asserter(e5, "M1", false, "e5");
            asserter(e6, "M2", true, "e6");
            asserter(e7, "M2", true, "e7");
            asserter(e8, "M2", true, "e8");

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(($t21 = e9.body, Bridge.cast($t21, Bridge.hasValue($t21) && ($t21.ntype === 6))).method, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "M1")), "e9 member");
            Bridge.Test.Assert.areEqual$1(($t21 = e10.body, Bridge.cast($t21, Bridge.hasValue($t21) && ($t21.ntype === 6))).method.n, "M3", "e10 member name");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(($t21 = e10.body, Bridge.cast($t21, Bridge.hasValue($t21) && ($t21.ntype === 6))).method, new Bridge.ClientTest.Linq.Expressions.ExpressionTests.C.ctor())(39), 73, "e10 member result");

            Bridge.Test.Assert.false$1(($t21 = { ntype: 9, t: Object, value: null }, Bridge.is($t21, Bridge.hasValue($t21) && ($t21.ntype === 6))), "Constant should not be MethodCallExpression");
        },
        methodGroupConversionWorks: function () {
            var $t, $t1, $t2, $t3;
            var e1 = ($t = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t2={ ntype: 10, t: Function, operand: ($t1={"td":System.Reflection.MethodInfo,"a":2,"n":"CreateDelegate","t":8,"pi":[{"n":"delegateType","pt":Function,"ps":0},{"n":"target","pt":Object,"ps":1}],"tpc":0,"def":function (delegateType, target) { return Bridge.Reflection.midel(this, target); },"rt":Function,"p":[Function,Object]}, { ntype: 6, t: $t1.rt, obj: { ntype: 9, t: System.Reflection.MethodInfo, value: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[4] }, method: $t1, args: Bridge.toList([Function,$t]) }) }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t]) }));

            Bridge.Test.Assert.true$1(e1.body.ntype === 10, "e1 body node type");
            var e2 = ($t3 = e1.body, Bridge.cast($t3, Bridge.hasValue($t3) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t3.ntype) >= 0)));
            Bridge.Test.Assert.areEqual$1(e2.t, Function, "e2 type");
            Bridge.Test.Assert.areEqual$1(e2.operand.ntype, 6, "2 operand type");
            var e3 = ($t3 = e2.operand, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 6)));
            Bridge.Test.Assert.areEqual$1(e3.obj.ntype, 9, "e3 object node type");
            var e4 = ($t3 = e3.obj, Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 9)));
            Bridge.Test.Assert.areEqual$1(e4.t, System.Reflection.MethodInfo, "e4 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(e4.value, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "M4")), "e4 value");
            Bridge.Test.Assert.areEqual$1(e3.method.td, System.Reflection.MethodInfo, "e3 method declaring type");
            Bridge.Test.Assert.areEqual$1(e3.method.n, "CreateDelegate", "e3 method name");
            Bridge.Test.Assert.areEqual$1((e3.method.p || []), [Function, Object], "e3 method parameters");
            Bridge.Test.Assert.areEqual$1(e3.args.getCount(), 2, "e3 arguments");
            Bridge.Test.Assert.areEqual$1(e3.args.get(0), Function, "e3 argument 0");
            Bridge.Test.Assert.true$1(($t3 = e3.args.get(1), Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))) && Bridge.referenceEquals(($t3 = e3.args.get(1), Bridge.cast($t3, Bridge.hasValue($t3) && ($t3.ntype === 38))).n, "a"), "e3 argument 1");
        },
        invokeWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var e1 = ($t = { ntype: 38, t: Function, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, $t2 = { ntype: 38, t: String, n: "c" }, ($t3={ ntype: 17, t: String, expression: $t, args: Bridge.toList([$t1,$t2]) }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t,$t1,$t2]) }));
            var e2 = { ntype: 17, t: String, expression: { ntype: 38, t: Function, n: "a" }, args: Bridge.toList([{ ntype: 38, t: System.Int32, n: "b" }, { ntype: 38, t: String, n: "c" }]) };
            var e3 = { ntype: 17, t: String, expression: { ntype: 38, t: Function, n: "a" }, args: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "b" }, { ntype: 38, t: String, n: "c" }])) };

            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f5;

            asserter(e1.body, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");

            Bridge.Test.Assert.false$1(($t4 = { ntype: 9, t: Object, value: null }, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 17))), "Constant should not be InvocationExpression");
        },
        arrayCreationWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t1={ ntype: 33, t: Array, expressions: Bridge.toList([$t]) }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = ($t2 = { ntype: 38, t: System.Int32, n: "a" }, $t3 = { ntype: 38, t: System.Int32, n: "b" }, ($t4={ ntype: 33, t: Array, expressions: Bridge.toList([$t2,$t3]) }, { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t2,$t3]) }));
            var e3 = ($t5 = { ntype: 38, t: System.Int32, n: "a" }, $t6 = { ntype: 38, t: System.Int32, n: "b" }, ($t7={ ntype: 32, t: Array, expressions: Bridge.toList([$t5,$t6]) }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t5,$t6]) }));
            var e4 = { ntype: 33, t: Array, expressions: Bridge.toList([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }]) };
            var e5 = { ntype: 33, t: Array, expressions: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }])) };
            var e6 = { ntype: 32, t: Array, expressions: Bridge.toList([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }]) };
            var e7 = { ntype: 32, t: Array, expressions: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }])) };

            Bridge.Test.Assert.true$1(($t8 = e1.body, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))), "e1 is NewArrayExpression");
            Bridge.Test.Assert.areEqual$1(e1.body.ntype, 33, "e1 node type");
            Bridge.Test.Assert.areEqual$1(e1.body.t, Array, "e1 type");
            Bridge.Test.Assert.areEqual$1(($t8 = e1.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.getCount(), 1, "e1 expression count");
            Bridge.Test.Assert.true$1(($t8 = ($t8 = e1.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ($t8 = e1.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(0), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "e1 expression 0");

            Bridge.Test.Assert.true$1(($t8 = e2.body, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))), "e2 is NewArrayExpression");
            Bridge.Test.Assert.areEqual$1(e2.body.ntype, 33, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.body.t, Array, "e2 type");
            Bridge.Test.Assert.areEqual$1(($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.getCount(), 2, "e2 expression count");
            Bridge.Test.Assert.true$1(($t8 = ($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(0), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "e2 expression 0");
            Bridge.Test.Assert.true$1(($t8 = ($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(1), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "b"), "e2 expression 1");

            Bridge.Test.Assert.true$1(($t8 = e3.body, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))), "e3 is NewArrayExpression");
            Bridge.Test.Assert.areEqual$1(e3.body.ntype, 32, "e3 node type");
            Bridge.Test.Assert.areEqual$1(e3.body.t, Array, "e3 type");
            Bridge.Test.Assert.areEqual$1(($t8 = e3.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.getCount(), 2, "e3 expression count");
            Bridge.Test.Assert.true$1(($t8 = ($t8 = e3.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ($t8 = e3.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(0), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "e3 expression 0");
            Bridge.Test.Assert.true$1(($t8 = ($t8 = e3.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ($t8 = e3.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))).expressions.get(1), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "b"), "e3 expression 1");

            Bridge.Test.Assert.true$1(Bridge.is(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)), "e4 is NewArrayExpression");
            Bridge.Test.Assert.areEqual$1(e4.ntype, 33, "e4 node type");
            Bridge.Test.Assert.areEqual$1(e4.t, Array, "e4 type");
            Bridge.Test.Assert.areEqual$1(Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.getCount(), 2, "e4 expression count");
            Bridge.Test.Assert.true$1(($t8 = Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.get(0), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "e4 expression 0");
            Bridge.Test.Assert.true$1(($t8 = Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 32 || e4.ntype === 33)).expressions.get(1), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "b"), "e4 expression 1");

            Bridge.Test.Assert.true$1(Bridge.is(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)), "e5 is NewArrayExpression");
            Bridge.Test.Assert.areEqual$1(e5.ntype, 33, "e5 node type");
            Bridge.Test.Assert.areEqual$1(e5.t, Array, "e5 type");
            Bridge.Test.Assert.areEqual$1(Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.getCount(), 2, "e5 expression count");
            Bridge.Test.Assert.true$1(($t8 = Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.get(0), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "e5 expression 0");
            Bridge.Test.Assert.true$1(($t8 = Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = Bridge.cast(e5, Bridge.hasValue(e5) && (e5.ntype === 32 || e5.ntype === 33)).expressions.get(1), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "b"), "e5 expression 1");

            Bridge.Test.Assert.true$1(Bridge.is(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)), "e6 is NewArrayExpression");
            Bridge.Test.Assert.areEqual$1(e6.ntype, 32, "e6 node type");
            Bridge.Test.Assert.areEqual$1(e6.t, Array, "e6 type");
            Bridge.Test.Assert.areEqual$1(Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.getCount(), 2, "e6 expression count");
            Bridge.Test.Assert.true$1(($t8 = Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.get(0), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "e6 expression 0");
            Bridge.Test.Assert.true$1(($t8 = Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = Bridge.cast(e6, Bridge.hasValue(e6) && (e6.ntype === 32 || e6.ntype === 33)).expressions.get(1), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "b"), "e6 expression 1");

            Bridge.Test.Assert.true$1(Bridge.is(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)), "e7 is NewArrayExpression");
            Bridge.Test.Assert.areEqual$1(e7.ntype, 32, "e7 node type");
            Bridge.Test.Assert.areEqual$1(e7.t, Array, "e7 type");
            Bridge.Test.Assert.areEqual$1(Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.getCount(), 2, "e7 expression count");
            Bridge.Test.Assert.true$1(($t8 = Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.get(0), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "e7 expression 0");
            Bridge.Test.Assert.true$1(($t8 = Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = Bridge.cast(e7, Bridge.hasValue(e7) && (e7.ntype === 32 || e7.ntype === 33)).expressions.get(1), Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "b"), "e7 expression 1");

            Bridge.Test.Assert.false$1(($t8 = { ntype: 9, t: Object, value: null }, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 32 || $t8.ntype === 33))), "Constant should not be NewArrayExpression");
        },
        propertiesAndFieldsWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22;
            var e1 = ($t = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t2=($t1=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[36], { ntype: 23, t: $t1.rt, expression: $t, member: $t1 }), { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t]) }));
            var e2 = ($t3 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t5=($t4={"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests.C,"a":2,"n":"F2","t":4,"rt":System.Int32,"sn":"F2"}, { ntype: 23, t: $t4.rt, expression: $t3, member: $t4 }), { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t3]) }));
            var e3 = ($t6 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t8=($t7=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[34], { ntype: 23, t: $t7.rt, expression: $t6, member: $t7 }), { ntype: 18, t: Function, rt: $t8.t, body: $t8, p: Bridge.toList([$t6]) }));
            var e4 = ($t9 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, ($t11=($t10={"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests.C,"a":2,"n":"P2","t":16,"rt":System.Int32,"g":{"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests.C,"a":2,"n":"get_P2","t":8,"sn":"getP2","rt":System.Int32},"s":{"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests.C,"a":2,"n":"set_P2","t":8,"pi":[{"n":"value","pt":System.Int32,"ps":0}],"sn":"setP2","rt":Object,"p":[System.Int32]}}, { ntype: 23, t: $t10.rt, expression: $t9, member: $t10 }), { ntype: 18, t: Function, rt: $t11.t, body: $t11, p: Bridge.toList([$t9]) }));
            var e5 = ($t12=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), { ntype: 23, t: $t12.rt, expression: { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, member: $t12 });
            var e6 = ($t13=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), { ntype: 23, t: $t13.rt, expression: { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, member: $t13 });
            var e7 = ($t14={ ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: Bridge.Reflection.getMembers($t14.t, 4, 284, "F1").rt, expression: $t14, member: Bridge.Reflection.getMembers($t14.t, 4, 284, "F1") });
            var e8 = ($t15={ ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: Bridge.Reflection.getMembers($t15.t, 16, 284, "P1").rt, expression: $t15, member: Bridge.Reflection.getMembers($t15.t, 16, 284, "P1") });
            var e9 = ($t16={ ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: System.Int32, expression: $t16, member: Bridge.Reflection.getMembers($t16.t, 4, 284, "F1") });
            var e10 = ($t17={ ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: System.Int32, expression: $t17, member: Bridge.Reflection.getMembers($t17.t, 16, 284, "P1") });
            var e11 = ($t18={ ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: Bridge.Reflection.getMembers($t18.t, 20, 284, "F1").rt, expression: $t18, member: Bridge.Reflection.getMembers($t18.t, 20, 284, "F1") });
            var e12 = ($t19={ ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, { ntype: 23, t: Bridge.Reflection.getMembers($t19.t, 20, 284, "P1").rt, expression: $t19, member: Bridge.Reflection.getMembers($t19.t, 20, 284, "P1") });
            var e13 = ($t20=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), { ntype: 23, t: $t20.rt, expression: { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, member: $t20 });
            var e14 = ($t21=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), { ntype: 23, t: $t21.rt, expression: { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, member: $t21 });

            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f6;

            asserter(e1.body, "F1", 234, "e1");
            asserter(e2.body, "F2", 24, "e2");
            asserter(e3.body, "P1", 42, "e3");
            asserter(e4.body, "P2", 17, "e4");
            asserter(e5, "F1", 234, "e5");
            asserter(e6, "P1", 42, "e6");
            asserter(e7, "F1", 234, "e7");
            asserter(e8, "P1", 42, "e8");
            asserter(e9, "F1", 234, "e9");
            asserter(e10, "P1", 42, "e10");
            asserter(e11, "F1", 234, "e11");
            asserter(e12, "P1", 42, "e12");
            asserter(e13, "F1", 234, "e11");
            asserter(e14, "P1", 42, "e12");

            Bridge.Test.Assert.false$1(($t22 = { ntype: 9, t: Object, value: null }, Bridge.is($t22, Bridge.hasValue($t22) && ($t22.ntype === 23))), "Constant should not be MemberExpression");
        },
        indexersWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5;
            var e1 = ($t = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, $t2 = { ntype: 38, t: String, n: "c" }, ($t4=($t3=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[32].g, { ntype: 6, t: $t3.rt, obj: $t, method: $t3, args: Bridge.toList([$t1,$t2]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1,$t2]) }));

            var ie = ($t5 = e1.body, Bridge.as($t5, Bridge.hasValue($t5) && ($t5.ntype === 6)));
            Bridge.Test.Assert.true$1(ie != null, "is MethodCallExpression");
            Bridge.Test.Assert.areEqual$1(ie.ntype, 6, "node type");
            Bridge.Test.Assert.areEqual$1(ie.t, String, "type");
            Bridge.Test.Assert.true$1(($t5 = ie.obj, Bridge.is($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))) && Bridge.referenceEquals(($t5 = ie.obj, Bridge.cast($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))).n, "a"), "expression");
            Bridge.Test.Assert.areEqual$1(ie.args.getCount(), 2, "argument count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ie.method, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "Item").g), "get method");
            Bridge.Test.Assert.true$1(($t5 = ie.args.get(0), Bridge.is($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))) && Bridge.referenceEquals(($t5 = ie.args.get(0), Bridge.cast($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))).n, "b"), "argument 0");
            Bridge.Test.Assert.true$1(($t5 = ie.args.get(1), Bridge.is($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))) && Bridge.referenceEquals(($t5 = ie.args.get(1), Bridge.cast($t5, Bridge.hasValue($t5) && ($t5.ntype === 38))).n, "c"), "argument 1");
        },
        indexExpressionsWork: function () {
            var $t, $t1, $t2;
            var pa1 = { ntype: 38, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, n: "a" };
            var pb1 = { ntype: 38, t: System.Int32, n: "b" };
            var pc1 = { ntype: 38, t: String, n: "c" };
            var pa2 = { ntype: 38, t: Array, n: "a" };
            var pb2 = { ntype: 38, t: System.Int32, n: "b" };
            var pc2 = { ntype: 38, t: System.Int32, n: "c" };

            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f7;

            var e1 = ($t=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "Item"), { ntype: 55, t: $t.rt, obj: pa1, indexer: $t, arguments: Bridge.toList([pb1, pc1]) });
            var e2 = ($t1=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "Item"), { ntype: 55, t: $t1.rt, obj: pa1, indexer: $t1, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([pb1, pc1])) });
            var e3 = { ntype: 55, t: System.Double, obj: pa2, arguments: Bridge.toList([pb2, pc2]) };
            var e4 = { ntype: 55, t: System.Double, obj: pa2, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([pb2, pc2])) };

            asserter(e1, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "Item"), String, "e1");
            asserter(e2, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "Item"), String, "e2");
            asserter(e3, null, System.Double, "e3");
            asserter(e4, null, System.Double, "e4");

            Bridge.Test.Assert.false$1(($t2 = { ntype: 9, t: Object, value: null }, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 55))), "Constant should not be IndexExpression");
        },
        objectConstructionWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13;
            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f8;

            var e1 = ($t1=($t=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t.td, constructor: $t, arguments: Bridge.toList([]) }), { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([]) });
            var e2 = ($t2 = { ntype: 38, t: System.Int32, n: "a" }, $t3 = { ntype: 38, t: System.Int32, n: "b" }, ($t5=($t4=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[1], { ntype: 31, t: $t4.td, constructor: $t4, arguments: Bridge.toList([$t2,$t3]) }), { ntype: 18, t: Function, rt: $t5.t, body: $t5, p: Bridge.toList([$t2,$t3]) }));
            var e3 = ($t6 = { ntype: 38, t: System.Int32, n: "a" }, $t7 = { ntype: 38, t: String, n: "b" }, ($t9=($t8={"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests.C,"a":2,"n":".ctor","t":1,"p":[System.Int32,String],"pi":[{"n":"a","pt":System.Int32,"ps":0},{"n":"b","pt":String,"ps":1}],"sn":"$ctor2"}, { ntype: 31, t: $t8.td, constructor: $t8, arguments: Bridge.toList([$t6,$t7]) }), { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t6,$t7]) }));
            var e4 = ($t10=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, [System.Int32, System.Int32]), { ntype: 31, t: $t10.td, constructor: $t10, arguments: Bridge.toList([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }]) });
            var e5 = ($t11=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, [System.Int32, System.Int32]), { ntype: 31, t: $t11.td, constructor: $t11, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ ntype: 38, t: System.Int32, n: "a" }, { ntype: 38, t: System.Int32, n: "b" }])) });
            var e6 = ($t12=Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, { ntype: 31, t: $t12, constructor: Bridge.Reflection.getMembers($t12, 1, 284, null, []), arguments: Bridge.toList([]) });

            asserter(e1.body, System.Array.init(0, null), true, "e1");
            asserter(e2.body, [System.Int32, System.Int32], true, "e2");
            asserter(e3.body, [System.Int32, String], false, "e3");
            asserter(e4, [System.Int32, System.Int32], true, "e4");
            asserter(e5, [System.Int32, System.Int32], true, "e5");
            asserter(e6, System.Array.init(0, null), true, "e6");

            Bridge.Test.Assert.false$1(($t13 = { ntype: 9, t: Object, value: null }, Bridge.is($t13, Bridge.hasValue($t13) && ($t13.ntype === 31))), "Constant should not be NewExpression");
        },
        anonymousTypeConstructionWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var e = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t3={ ntype: 10, t: Object, operand: ($t2={"td":$_.$AnonymousType$5,"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}, { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList([$t,$t1]), m: Bridge.toList([{"td":$_.$AnonymousType$5,"a":2,"n":"A","t":16,"rt":System.Int32,"g":{"td":$_.$AnonymousType$5,"a":2,"n":"get_A","t":8,"sn":"getA","rt":System.Int32}},{"td":$_.$AnonymousType$5,"a":2,"n":"B","t":16,"rt":System.Int32,"g":{"td":$_.$AnonymousType$5,"a":2,"n":"get_B","t":8,"sn":"getB","rt":System.Int32}}]) }) }, { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t,$t1]) }));
            Bridge.Test.Assert.areEqual(e.body.ntype, 10);

            var ne = ($t4 = ($t4 = e.body, Bridge.cast($t4, Bridge.hasValue($t4) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf($t4.ntype) >= 0))).operand, Bridge.as($t4, Bridge.hasValue($t4) && ($t4.ntype === 31)));
            Bridge.Test.Assert.true$1(ne != null, "is NewExpression");
            Bridge.Test.Assert.areEqual$1(ne.ntype, 31, "node type");
            Bridge.Test.Assert.true$1(System.String.contains(Bridge.Reflection.getTypeFullName(ne.t),"$AnonymousType$"), "type");
            Bridge.Test.Assert.areEqual$1(ne.arguments.getCount(), 2, "argument count");
            Bridge.Test.Assert.true$1(($t4 = ne.arguments.get(0), Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ne.arguments.get(0), Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "a"), "argument 0");
            Bridge.Test.Assert.true$1(($t4 = ne.arguments.get(1), Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ne.arguments.get(1), Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "b"), "argument 1");
            Bridge.Test.Assert.areEqual$1(ne.m.getCount(), 2, "member count");
            var propA = ne.m.get(0);
            var propB = ne.m.get(1);
            Bridge.Test.Assert.true$1(Bridge.is(propA, System.Reflection.PropertyInfo), "A should be property");
            Bridge.Test.Assert.areEqual$1(propA.n, "A", "A name");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(Bridge.cast(propA, System.Reflection.PropertyInfo).g, new $_.$AnonymousType$5(42, 17))(null), 42, "A getter result");
            Bridge.Test.Assert.true$1(Bridge.is(propB, System.Reflection.PropertyInfo), "B should be property");
            Bridge.Test.Assert.areEqual$1(propB.n, "B", "B name");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(Bridge.cast(propB, System.Reflection.PropertyInfo).g, new $_.$AnonymousType$5(42, 17))(null), 17, "B getter result");

            var instance = Bridge.Reflection.invokeCI(ne.constructor, [42, 17]);
            Bridge.Test.Assert.areEqual$1(instance.a, 42, "Constructor invocation result A");
            Bridge.Test.Assert.areEqual$1(instance.b, 17, "Constructor invocation result B");
        },
        transparentIdentifiersWork: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10;
            var c = new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32))(42);
            var f = ($t9=($t8={"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1($_.$AnonymousType$6),"a":2,"n":"Select","t":8,"pi":[{"n":"f","pt":Function,"ps":0}],"tpc":1,"sn":"select","rt":Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"p":[Function]}, { ntype: 6, t: $t8.rt, obj: ($t3={"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"a":2,"n":"Select","t":8,"pi":[{"n":"f","pt":Function,"ps":0}],"tpc":1,"sn":"select","rt":Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(Object),"p":[Function]}, { ntype: 6, t: $t3.rt, obj: {"ntype":23,"t":Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"expression":{"ntype":9,"t":Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"value":{}},"member":{"td":Object,"n":"c","t":16,"rt":Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"g":{"td":Object,"n":"getc","t":8,"rt":Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32),"p":[],"def":function(){ return c}},"s":{"td":Object,"n":"setc","t":8,"rt":Object,"p":[Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(System.Int32)],"def":function($){ c = $; }}}}, method: $t3, args: Bridge.toList([($t = { ntype: 38, t: System.Int32, n: "a" }, ($t2=($t1={"td":$_.$AnonymousType$6,"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}, { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList([$t,{ ntype: 0, t: System.Int32, left: $t, right: { ntype: 9, t: System.Int32, value: 1 } }]), m: Bridge.toList([{"td":$_.$AnonymousType$6,"a":2,"n":"a","t":16,"rt":System.Int32,"g":{"td":$_.$AnonymousType$6,"a":2,"n":"get_a","t":8,"sn":"geta","rt":System.Int32}},{"td":$_.$AnonymousType$6,"a":2,"n":"b","t":16,"rt":System.Int32,"g":{"td":$_.$AnonymousType$6,"a":2,"n":"get_b","t":8,"sn":"getb","rt":System.Int32}}]) }), { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t]) }))]) }), method: $t8, args: Bridge.toList([($t4 = { ntype: 38, t: $_.$AnonymousType$6, n: "x0" }, ($t7={ ntype: 0, t: System.Int32, left: ($t5={"td":$_.$AnonymousType$6,"a":2,"n":"a","t":16,"rt":System.Int32,"g":{"td":$_.$AnonymousType$6,"a":2,"n":"get_a","t":8,"sn":"geta","rt":System.Int32}}, { ntype: 23, t: $t5.rt, expression: $t4, member: $t5 }), right: ($t6={"td":$_.$AnonymousType$6,"a":2,"n":"b","t":16,"rt":System.Int32,"g":{"td":$_.$AnonymousType$6,"a":2,"n":"get_b","t":8,"sn":"getb","rt":System.Int32}}, { ntype: 23, t: $t6.rt, expression: $t4, member: $t6 }) }, { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t4]) }))]) }), { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([]) });
            var outer = ($t10 = f.body, Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 6)));
            //var outerLambda = (LambdaExpression)outer.Arguments[0];
            var inner = ($t10 = outer.obj, Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 6)));
            Bridge.Test.Assert.areEqual(inner.method.n, "Select");
            var innerLambda = ($t10 = inner.args.get(0), Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 18)));
            var ne = ($t10 = innerLambda.body, Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 31)));

            Bridge.Test.Assert.true$1(ne != null, "is NewExpression");
            Bridge.Test.Assert.areEqual$1(ne.ntype, 31, "node type");
            Bridge.Test.Assert.true$1(System.String.contains(Bridge.Reflection.getTypeFullName(ne.t),"$AnonymousType$"), "type");
            Bridge.Test.Assert.areEqual$1(ne.arguments.getCount(), 2, "argument count");
            Bridge.Test.Assert.true$1(($t10 = ne.arguments.get(0), Bridge.is($t10, Bridge.hasValue($t10) && ($t10.ntype === 38))) && Bridge.referenceEquals(($t10 = ne.arguments.get(0), Bridge.cast($t10, Bridge.hasValue($t10) && ($t10.ntype === 38))).n, "a"), "argument 0");
            Bridge.Test.Assert.areEqual$1(ne.arguments.get(1).ntype, 0, "argument 1");
            Bridge.Test.Assert.areEqual$1(ne.m.getCount(), 2, "member count");
            var propA = ne.m.get(0);
            var propB = ne.m.get(1);
            Bridge.Test.Assert.true$1(Bridge.is(propA, System.Reflection.PropertyInfo), "A should be property");
            Bridge.Test.Assert.areEqual$1(propA.n, "a", "a name");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(Bridge.cast(propA, System.Reflection.PropertyInfo).g, new $_.$AnonymousType$6(42, 17))(null), 42, "a getter result");
            Bridge.Test.Assert.true$1(Bridge.is(propB, System.Reflection.PropertyInfo), "B should be property");
            Bridge.Test.Assert.areEqual$1(propB.n, "b", "b name");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(Bridge.cast(propB, System.Reflection.PropertyInfo).g, new $_.$AnonymousType$6(42, 17))(null), 17, "b getter result");

            var instance = Bridge.Reflection.invokeCI(ne.constructor, [42, 17]);
            Bridge.Test.Assert.areEqual$1(instance.a, 42, "Constructor invocation result a");
            Bridge.Test.Assert.areEqual$1(instance.b, 17, "Constructor invocation result b");
        },
        newExpressionWithMembersWork: function () {
            var $t, $t1, $t2;
            var a = { ntype: 38, t: System.Int32, n: "a" };
            var b = { ntype: 38, t: System.Int32, n: "b" };

            var asserter = function (expr, title) {
                var ne = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 31));
                Bridge.Test.Assert.true$1(ne != null, System.String.concat(title, " is NewExpression"));
                Bridge.Test.Assert.areEqual$1(ne.ntype, 31, System.String.concat(title, " node type"));
                Bridge.Test.Assert.areEqual$1(ne.t, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, System.String.concat(title, " type"));
                Bridge.Test.Assert.areEqual$1(ne.arguments.getCount(), 2, System.String.concat(title, " argument count"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ne.constructor, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, [System.Int32, System.Int32])), System.String.concat(title, " constructor reference"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ne.arguments.get(0), a), System.String.concat(title, " argument 0"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ne.arguments.get(1), b), System.String.concat(title, " argument 1"));
                Bridge.Test.Assert.areEqual$1(ne.m.getCount(), 2, System.String.concat(title, " member count"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ne.m.get(0), Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), System.String.concat(title, " member 0"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ne.m.get(1), Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1").g), System.String.concat(title, " member 1"));
            };

            var e1 = ($t=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, [System.Int32, System.Int32]), { ntype: 31, t: $t.td, constructor: $t, arguments: Bridge.toList([a, b]), m: Bridge.toList([Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1").g]) });
            var e2 = ($t1=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, [System.Int32, System.Int32]), { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([a, b])), m: Bridge.toList([Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1").g]) });
            var e3 = ($t2=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, [System.Int32, System.Int32]), { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([a, b])), m: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1").g])) });

            asserter(e1, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");
        },
        bindWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t3=($t2=($t1=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList([]) }), { ntype: 24, t: $t2.t, newExpression: $t2, bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[36], expression: $t }]) }), { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t]) }));
            var e2 = ($t4 = { ntype: 38, t: System.Int32, n: "a" }, ($t7=($t6=($t5=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t5.td, constructor: $t5, arguments: Bridge.toList([]) }), { ntype: 24, t: $t6.t, newExpression: $t6, bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[34], expression: $t4 }]) }), { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t4]) }));

            var b1 = ($t8 = e1.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 24))).bindings.get(0);
            var b2 = ($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 24))).bindings.get(0);
            var b3 = { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: pa };
            var b4 = { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), expression: pa };

            var ma1 = Bridge.as(b1, Bridge.hasValue(b1) && (b1.btype === 0));
            Bridge.Test.Assert.true$1(ma1 != null, "b1 should be MemberAssignment");
            Bridge.Test.Assert.areEqual$1(ma1.btype, 0, "b1 BindingType");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ma1.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), "b1 member");
            Bridge.Test.Assert.true$1(($t8 = ma1.expression, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ma1.expression, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "b1 expression");

            var ma2 = Bridge.as(b2, Bridge.hasValue(b2) && (b2.btype === 0));
            Bridge.Test.Assert.true$1(ma2 != null, "b2 should be MemberAssignment");
            Bridge.Test.Assert.areEqual$1(ma2.btype, 0, "b2 BindingType");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ma2.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), "b2 member");
            Bridge.Test.Assert.true$1(($t8 = ma2.expression, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ma2.expression, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "b2 expression");

            var ma3 = Bridge.as(b3, Bridge.hasValue(b3) && (b3.btype === 0));
            Bridge.Test.Assert.true$1(ma3 != null, "b3 should be MemberAssignment");
            Bridge.Test.Assert.areEqual$1(ma3.btype, 0, "b3 BindingType");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ma3.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), "b3 member");
            Bridge.Test.Assert.true$1(($t8 = ma3.expression, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ma3.expression, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "b3 expression");

            var ma4 = Bridge.as(b4, Bridge.hasValue(b4) && (b4.btype === 0));
            Bridge.Test.Assert.true$1(ma4 != null, "b4 should be MemberAssignment");
            Bridge.Test.Assert.areEqual$1(ma4.btype, 0, "b4 BindingType");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ma4.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), "b4 member");
            Bridge.Test.Assert.true$1(($t8 = ma4.expression, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))) && Bridge.referenceEquals(($t8 = ma4.expression, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 38))).n, "a"), "b4 expression");

            Bridge.Test.Assert.false$1(($t8 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), initializers: Bridge.toList([null]) }, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))), "ListBinding should not be MemberAssignment");
        },
        elementInitWorks: function () {
            var add1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", [System.Int32]);
            var add2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", [System.Int32, System.Int32]);
            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };

            var i1 = { addMethod: add1, arguments: Bridge.toList([pa]) };
            var i2 = { addMethod: add1, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([pa])) };
            var i3 = { addMethod: add2, arguments: Bridge.toList([pa, pb]) };
            var i4 = { addMethod: add2, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([pa, pb])) };

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i1.addMethod, add1), "i1 add method");
            Bridge.Test.Assert.areEqual$1(i1.arguments.getCount(), 1, "i1 argument count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i1.arguments.get(0), pa), "i1 argument");

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i2.addMethod, add1), "i2 add method");
            Bridge.Test.Assert.areEqual$1(i2.arguments.getCount(), 1, "i2 argument count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i2.arguments.get(0), pa), "i2 argument");

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i3.addMethod, add2), "i3 add method");
            Bridge.Test.Assert.areEqual$1(i3.arguments.getCount(), 2, "i3 argument count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i3.arguments.get(0), pa), "i3 argument 0");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i3.arguments.get(1), pb), "i3 argument 1");

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i4.addMethod, add2), "i4 add method");
            Bridge.Test.Assert.areEqual$1(i4.arguments.getCount(), 2, "i4 argument count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i4.arguments.get(0), pa), "i4 argument 0");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(i4.arguments.get(1), pb), "i4 argument 1");
        },
        listBindWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15;
            var add1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", [System.Int32]);
            var add2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", [System.Int32, System.Int32]);
            var asserter = function (binding, member, title) {
                var $t;
                var mlb = Bridge.as(binding, Bridge.hasValue(binding) && (binding.btype === 2));
                Bridge.Test.Assert.true$1(mlb != null, System.String.concat(title, " is MemberListBinding"));
                Bridge.Test.Assert.areEqual$1(binding.btype, 2, System.String.concat(title, " node type"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(binding.member, member), System.String.concat(title, " member"));
                Bridge.Test.Assert.areEqual$1(mlb.initializers.getCount(), 2, System.String.concat(title, " initializer count"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(mlb.initializers.get(0).addMethod, add1), System.String.concat(title, " initializer 0 add method"));
                Bridge.Test.Assert.areEqual$1(mlb.initializers.get(0).arguments.getCount(), 1, System.String.concat(title, " initializer 0 argument count"));
                Bridge.Test.Assert.true$1(($t = mlb.initializers.get(0).arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = mlb.initializers.get(0).arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " initializer 0 argument"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(mlb.initializers.get(0).addMethod, add1), System.String.concat(title, " initializer 1 add method"));
                Bridge.Test.Assert.areEqual$1(mlb.initializers.get(1).arguments.getCount(), 1, System.String.concat(title, " initializer 1 argument count"));
                Bridge.Test.Assert.true$1(($t = mlb.initializers.get(1).arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = mlb.initializers.get(1).arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " initializer 1 argument"));
            };

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t4=($t3=($t2=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList([]) }), { ntype: 24, t: $t3.t, newExpression: $t3, bindings: Bridge.toList([{ btype: 2, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[37], initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t1]) }]) }]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1]) }));
            var e2 = ($t5 = { ntype: 38, t: System.Int32, n: "a" }, $t6 = { ntype: 38, t: System.Int32, n: "b" }, ($t9=($t8=($t7=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t7.td, constructor: $t7, arguments: Bridge.toList([]) }), { ntype: 24, t: $t8.t, newExpression: $t8, bindings: Bridge.toList([{ btype: 2, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[33], initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t5]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t6]) }]) }]) }), { ntype: 18, t: Function, rt: $t9.t, body: $t9, p: Bridge.toList([$t5,$t6]) }));
            var e3 = ($t10 = { ntype: 38, t: System.Int32, n: "a" }, $t11 = { ntype: 38, t: System.Int32, n: "b" }, ($t14=($t13=($t12=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t12.td, constructor: $t12, arguments: Bridge.toList([]) }), { ntype: 24, t: $t13.t, newExpression: $t13, bindings: Bridge.toList([{ btype: 2, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[37], initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t10]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[2], arguments: Bridge.toList([$t10,$t11]) }]) }]) }), { ntype: 18, t: Function, rt: $t14.t, body: $t14, p: Bridge.toList([$t10,$t11]) }));
            var b1 = ($t15 = e1.body, Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 24))).bindings.get(0);
            var b2 = ($t15 = e2.body, Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 24))).bindings.get(0);
            var b3 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), initializers: Bridge.toList([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }]) };
            var b4 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), initializers: Bridge.toList([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }]) };
            var b5 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), initializers: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }])) };
            var b6 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), initializers: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }])) };
            var b7 = ($t15 = e3.body, Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 24))).bindings.get(0);

            asserter(b1, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), "b1");
            asserter(b2, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), "b2");
            asserter(b3, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), "b3");
            asserter(b4, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), "b4");
            asserter(b5, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), "b5");
            asserter(b6, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "LP"), "b6");

            var mlb7 = Bridge.as(b7, Bridge.hasValue(b7) && (b7.btype === 2));
            Bridge.Test.Assert.true$1(mlb7 != null, "b7 is MemberListBinding");
            Bridge.Test.Assert.areEqual$1(b7.btype, 2, "b7 node type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(b7.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "LF")), "b7 member");
            Bridge.Test.Assert.areEqual$1(mlb7.initializers.getCount(), 2, "b7 initializer count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mlb7.initializers.get(0).addMethod, add1), "b7 initializer 0 add method");
            Bridge.Test.Assert.areEqual$1(mlb7.initializers.get(0).arguments.getCount(), 1, "b7 initializer 0 argument count");
            Bridge.Test.Assert.true$1(($t15 = mlb7.initializers.get(0).arguments.get(0), Bridge.is($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))) && Bridge.referenceEquals(($t15 = mlb7.initializers.get(0).arguments.get(0), Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))).n, "a"), "b7 initializer 0 argument");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mlb7.initializers.get(1).addMethod, add2), "b7 initializer 1 add method");
            Bridge.Test.Assert.areEqual$1(mlb7.initializers.get(1).arguments.getCount(), 2, "b7 initializer 1 argument count");
            Bridge.Test.Assert.true$1(($t15 = mlb7.initializers.get(1).arguments.get(0), Bridge.is($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))) && Bridge.referenceEquals(($t15 = mlb7.initializers.get(1).arguments.get(0), Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))).n, "a"), "b7 initializer 1 argument 0");
            Bridge.Test.Assert.true$1(($t15 = mlb7.initializers.get(1).arguments.get(1), Bridge.is($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))) && Bridge.referenceEquals(($t15 = mlb7.initializers.get(1).arguments.get(1), Bridge.cast($t15, Bridge.hasValue($t15) && ($t15.ntype === 38))).n, "b"), "b7 initializer 1 argument 1");

            Bridge.Test.Assert.false$1(($t15 = { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: { ntype: 38, t: System.Int32, n: "a" } }, Bridge.is($t15, Bridge.hasValue($t15) && ($t15.btype === 2))), "MemberAssignment should not be list binding");
        },
        memberBindWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t3=($t2=($t1=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t1.td, constructor: $t1, arguments: Bridge.toList([]) }), { ntype: 24, t: $t2.t, newExpression: $t2, bindings: Bridge.toList([{ btype: 1, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[35], bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[36], expression: $t },{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[34], expression: $t }]) }]) }), { ntype: 18, t: Function, rt: $t3.t, body: $t3, p: Bridge.toList([$t]) }));
            var e2 = ($t4 = { ntype: 38, t: System.Int32, n: "a" }, ($t7=($t6=($t5=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t5.td, constructor: $t5, arguments: Bridge.toList([]) }), { ntype: 24, t: $t6.t, newExpression: $t6, bindings: Bridge.toList([{ btype: 1, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[31], bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[36], expression: $t4 },{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[34], expression: $t4 }]) }]) }), { ntype: 18, t: Function, rt: $t7.t, body: $t7, p: Bridge.toList([$t4]) }));

            var bindings = [{ btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: pa }, { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), expression: pa }];
            var b1 = ($t8 = e1.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 24))).bindings.get(0);
            var b2 = ($t8 = e2.body, Bridge.cast($t8, Bridge.hasValue($t8) && ($t8.ntype === 24))).bindings.get(0);
            var b3 = { btype: 1, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "CF"), bindings: Bridge.toList(bindings) };
            var b4 = { btype: 1, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "CP"), bindings: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))(bindings)) };

            var mb1 = Bridge.as(b1, Bridge.hasValue(b1) && (b1.btype === 1));
            Bridge.Test.Assert.true$1(mb1 != null, "b1 should be MemberMemberBinding");
            Bridge.Test.Assert.areEqual$1(mb1.btype, 1, "b1 BindingType");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mb1.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "CF")), "b1 member");
            Bridge.Test.Assert.areEqual$1(mb1.bindings.getCount(), 2, "b1 binding count");
            Bridge.Test.Assert.true$1(($t8 = mb1.bindings.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))) && Bridge.referenceEquals(mb1.bindings.get(0).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), "b1 binding 0");
            Bridge.Test.Assert.true$1(($t8 = mb1.bindings.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))) && Bridge.referenceEquals(mb1.bindings.get(1).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), "b1 binding 1");

            var mb2 = Bridge.as(b2, Bridge.hasValue(b2) && (b2.btype === 1));
            Bridge.Test.Assert.true$1(mb2 != null, "b2 should be MemberMemberBinding");
            Bridge.Test.Assert.areEqual$1(mb2.btype, 1, "b2 BindingType");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mb2.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "CP")), "b2 member");
            Bridge.Test.Assert.areEqual$1(mb2.bindings.getCount(), 2, "b2 binding count");
            Bridge.Test.Assert.true$1(($t8 = mb2.bindings.get(0), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))) && Bridge.referenceEquals(mb2.bindings.get(0).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), "b1 binding 0");
            Bridge.Test.Assert.true$1(($t8 = mb2.bindings.get(1), Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 0))) && Bridge.referenceEquals(mb2.bindings.get(1).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), "b1 binding 1");

            var mb3 = Bridge.as(b3, Bridge.hasValue(b3) && (b3.btype === 1));
            Bridge.Test.Assert.true$1(mb3 != null, "b3 should be MemberMemberBinding");
            Bridge.Test.Assert.areEqual$1(mb3.btype, 1, "b3 BindingType");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mb3.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "CF")), "b3 member");
            Bridge.Test.Assert.areEqual$1(mb3.bindings.getCount(), 2, "b3 binding count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mb3.bindings.get(0), bindings[0]), "b3 binding 0");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mb3.bindings.get(1), bindings[1]), "b3 binding 1");

            var mb4 = Bridge.as(b4, Bridge.hasValue(b4) && (b4.btype === 1));
            Bridge.Test.Assert.true$1(mb4 != null, "b4 should be MemberMemberBinding");
            Bridge.Test.Assert.areEqual$1(mb4.btype, 1, "b4 BindingType");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mb4.member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "CP")), "b4 member");
            Bridge.Test.Assert.areEqual$1(mb4.bindings.getCount(), 2, "b4 binding count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mb4.bindings.get(0), bindings[0]), "b4 binding 0");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mb4.bindings.get(1), bindings[1]), "b4 binding 1");

            Bridge.Test.Assert.false$1(($t8 = { btype: 2, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "LF"), initializers: Bridge.toList([null]) }, Bridge.is($t8, Bridge.hasValue($t8) && ($t8.btype === 1))), "ListBinding should not be MemberMemberBinding");
        },
        memberInitWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f9;

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t4=($t3=($t2=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[0], { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList([]) }), { ntype: 24, t: $t3.t, newExpression: $t3, bindings: Bridge.toList([{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[36], expression: $t },{ btype: 0, member: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C).m[34], expression: $t1 }]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1]) }));
            var e2 = ($t6=($t5=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init(0, null)), { ntype: 31, t: $t5.td, constructor: $t5, arguments: Bridge.toList([null]) }), { ntype: 24, t: $t6.t, newExpression: $t6, bindings: Bridge.toList([{ btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: pa }, { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), expression: pb }]) });
            var e3 = ($t8=($t7=Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init(0, null)), { ntype: 31, t: $t7.td, constructor: $t7, arguments: Bridge.toList([null]) }), { ntype: 24, t: $t8.t, newExpression: $t8, bindings: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1"), expression: pa }, { btype: 0, member: Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1"), expression: pb }])) });

            asserter(e1.body, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");

            Bridge.Test.Assert.false$1(($t9 = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t9, Bridge.hasValue($t9) && ($t9.ntype === 24))), "Constant is MemberInitExpression");
        },
        listInitWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18;
            var add1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", [System.Int32]);
            var add2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, 8, 284, "Add", [System.Int32, System.Int32]);

            var asserter = function (expr, title) {
                var $t;
                var lie = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 22));
                Bridge.Test.Assert.true$1(lie != null, System.String.concat(title, " is ListInitExpression"));
                Bridge.Test.Assert.areEqual$1(expr.ntype, 22, System.String.concat(title, " node type"));
                Bridge.Test.Assert.areEqual$1(expr.t, Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, System.String.concat(title, " type"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(lie.newExpression.constructor, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, 1, 284, null, System.Array.init(0, null))), System.String.concat(title, " new expression"));
                Bridge.Test.Assert.areEqual$1(lie.initializers.getCount(), 2, System.String.concat(title, " initializer count"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(lie.initializers.get(0).addMethod, add1), System.String.concat(title, " initializer 0 add method"));
                Bridge.Test.Assert.areEqual$1(lie.initializers.get(0).arguments.getCount(), 1, System.String.concat(title, " initializer 0 argument count"));
                Bridge.Test.Assert.true$1(($t = lie.initializers.get(0).arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = lie.initializers.get(0).arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " initializer 0 argument"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(lie.initializers.get(1).addMethod, add1), System.String.concat(title, " initializer 1 add method"));
                Bridge.Test.Assert.areEqual$1(lie.initializers.get(1).arguments.getCount(), 1, System.String.concat(title, " initializer 1 argument count"));
                Bridge.Test.Assert.true$1(($t = lie.initializers.get(1).arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = lie.initializers.get(1).arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " initializer 1 argument"));
            };

            var pa = { ntype: 38, t: System.Int32, n: "a" };
            var pb = { ntype: 38, t: System.Int32, n: "b" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, $t1 = { ntype: 38, t: System.Int32, n: "b" }, ($t4=($t3=($t2=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[0], { ntype: 31, t: $t2.td, constructor: $t2, arguments: Bridge.toList([]) }), { ntype: 22, t: $t3.t, newExpression: $t3, initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t1]) }]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t,$t1]) }));
            var e2 = ($t6=($t5=Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, { ntype: 31, t: $t5, constructor: Bridge.Reflection.getMembers($t5, 1, 284, null, []), arguments: Bridge.toList([]) }), { ntype: 22, t: $t6.t, newExpression: $t6, initializers: Bridge.toList([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }]) });
            var e3 = ($t8=($t7=Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, { ntype: 31, t: $t7, constructor: Bridge.Reflection.getMembers($t7, 1, 284, null, []), arguments: Bridge.toList([]) }), { ntype: 22, t: $t8.t, newExpression: $t8, initializers: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([{ addMethod: add1, arguments: Bridge.toList([pa]) }, { addMethod: add1, arguments: Bridge.toList([pb]) }])) });
            var e4 = ($t10=($t9=Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, { ntype: 31, t: $t9, constructor: Bridge.Reflection.getMembers($t9, 1, 284, null, []), arguments: Bridge.toList([]) }), { ntype: 22, t: $t10.t, newExpression: $t10, initializers: Bridge.toList([pa, pb].map(function(i) { return { addMethod: add1, arguments: Bridge.toList([i]) }; })) });
            var e5 = ($t12=($t11=Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, { ntype: 31, t: $t11, constructor: Bridge.Reflection.getMembers($t11, 1, 284, null, []), arguments: Bridge.toList([]) }), { ntype: 22, t: $t12.t, newExpression: $t12, initializers: Bridge.toList(Bridge.toArray(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([pa, pb])).map(function(i) { return { addMethod: add1, arguments: Bridge.toList([i]) }; })) });
            var e6 = ($t13 = { ntype: 38, t: System.Int32, n: "a" }, $t14 = { ntype: 38, t: System.Int32, n: "b" }, ($t17=($t16=($t15=Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[0], { ntype: 31, t: $t15.td, constructor: $t15, arguments: Bridge.toList([]) }), { ntype: 22, t: $t16.t, newExpression: $t16, initializers: Bridge.toList([{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[1], arguments: Bridge.toList([$t13]) },{ addMethod: Bridge.getMetadata(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList).m[2], arguments: Bridge.toList([$t13,$t14]) }]) }), { ntype: 18, t: Function, rt: $t17.t, body: $t17, p: Bridge.toList([$t13,$t14]) }));

            asserter(e1.body, "e1");
            asserter(e2, "e2");
            asserter(e3, "e3");
            asserter(e4, "e4");
            asserter(e5, "e5");

            var lie6 = ($t18 = e6.body, Bridge.as($t18, Bridge.hasValue($t18) && ($t18.ntype === 22)));
            Bridge.Test.Assert.true$1(lie6 != null, "e6 is ListInitExpression");
            Bridge.Test.Assert.areEqual$1(lie6.ntype, 22, "e6 node type");
            Bridge.Test.Assert.areEqual$1(lie6.t, Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, "e6 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(lie6.newExpression.constructor, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList, 1, 284, null, System.Array.init(0, null))), "e6 new expression");
            Bridge.Test.Assert.areEqual$1(lie6.initializers.getCount(), 2, "e6 initializer count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(lie6.initializers.get(0).addMethod, add1), "e6 initializer 0 add method");
            Bridge.Test.Assert.areEqual$1(lie6.initializers.get(0).arguments.getCount(), 1, "e6 initializer 0 argument count");
            Bridge.Test.Assert.true$1(($t18 = lie6.initializers.get(0).arguments.get(0), Bridge.is($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))) && Bridge.referenceEquals(($t18 = lie6.initializers.get(0).arguments.get(0), Bridge.cast($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))).n, "a"), "e6 initializer 0 argument");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(lie6.initializers.get(1).addMethod, add2), "e6 initializer 1 add method");
            Bridge.Test.Assert.areEqual$1(lie6.initializers.get(1).arguments.getCount(), 2, "e6 initializer 1 argument count");
            Bridge.Test.Assert.true$1(($t18 = lie6.initializers.get(1).arguments.get(0), Bridge.is($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))) && Bridge.referenceEquals(($t18 = lie6.initializers.get(1).arguments.get(0), Bridge.cast($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))).n, "a"), "e6 initializer 1 argument 0");
            Bridge.Test.Assert.true$1(($t18 = lie6.initializers.get(1).arguments.get(1), Bridge.is($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))) && Bridge.referenceEquals(($t18 = lie6.initializers.get(1).arguments.get(1), Bridge.cast($t18, Bridge.hasValue($t18) && ($t18.ntype === 38))).n, "b"), "e6 initializer 1 argument 1");

            Bridge.Test.Assert.false$1(($t18 = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t18, Bridge.hasValue($t18) && ($t18.ntype === 22))), "Constant is ListInitExpression");
        },
        typeIsAndTypeEqualWork: function () {
            var $t, $t1, $t2;
            var e1 = ($t = { ntype: 38, t: Object, n: "a" }, ($t1={ ntype: 45, t: Boolean, expression: $t, typeOperand: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C }, { ntype: 18, t: Function, rt: $t1.t, body: $t1, p: Bridge.toList([$t]) }));
            var e2 = { ntype: 45, t: Boolean, expression: { ntype: 38, t: Object, n: "a" }, typeOperand: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C };
            var e3 = { ntype: 81, t: Boolean, expression: { ntype: 38, t: Object, n: "a" }, typeOperand: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C };

            Bridge.Test.Assert.true$1(($t2 = e1.body, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))), "e1 is TypeBinaryExpression");
            Bridge.Test.Assert.areEqual$1(e1.body.ntype, 45, "e1 node type");
            Bridge.Test.Assert.areEqual$1(e1.body.t, Boolean, "e1 type");
            Bridge.Test.Assert.true$1(($t2 = ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))).expression, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = ($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))).expression, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e1 expression");
            Bridge.Test.Assert.areEqual$1(($t2 = e1.body, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))).typeOperand, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "e1 type operand");

            Bridge.Test.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)), "e2 is TypeBinaryExpression");
            Bridge.Test.Assert.areEqual$1(e2.ntype, 45, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.t, Boolean, "e2 type");
            Bridge.Test.Assert.true$1(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)).expression, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)).expression, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e2 expression");
            Bridge.Test.Assert.areEqual$1(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)).typeOperand, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "e2 type operand");

            Bridge.Test.Assert.true$1(Bridge.is(e3, Bridge.hasValue(e3) && (e3.ntype === 45 || e3.ntype === 81)), "e3 is TypeBinaryExpression");
            Bridge.Test.Assert.areEqual$1(e3.ntype, 81, "e3 node type");
            Bridge.Test.Assert.areEqual$1(e3.t, Boolean, "e3 type");
            Bridge.Test.Assert.true$1(($t2 = Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 45 || e3.ntype === 81)).expression, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))) && Bridge.referenceEquals(($t2 = Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 45 || e2.ntype === 81)).expression, Bridge.cast($t2, Bridge.hasValue($t2) && ($t2.ntype === 38))).n, "a"), "e3 expression");
            Bridge.Test.Assert.areEqual$1(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 45 || e3.ntype === 81)).typeOperand, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, "e3 type operand");

            Bridge.Test.Assert.false$1(($t2 = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t2, Bridge.hasValue($t2) && ($t2.ntype === 45 || $t2.ntype === 81))), "Constant is TypeBinaryExpression");
        },
        quoteWorks: function () {
            var $t, $t1, $t2, $t3, $t4, $t5;
            var p = { ntype: 38, t: System.Int32, n: "x" };
            var e1 = ($t = { ntype: 38, t: System.Int32, n: "a" }, ($t4=($t3={"td":Bridge.ClientTest.Linq.Expressions.ExpressionTests,"a":1,"n":"F","is":true,"t":8,"pi":[{"n":"f","pt":Object(Function),"ps":0}],"sn":"f","rt":System.Int32,"p":[Object(Function)]}, { ntype: 6, t: $t3.rt, obj: null, method: $t3, args: Bridge.toList([{ ntype: 40, t: Object, operand: ($t1 = { ntype: 38, t: System.Int32, n: "x" }, ($t2={ ntype: 0, t: System.Int32, left: $t1, right: $t }, { ntype: 18, t: Function, rt: $t2.t, body: $t2, p: Bridge.toList([$t1]) })) }]) }), { ntype: 18, t: Function, rt: $t4.t, body: $t4, p: Bridge.toList([$t]) }));
            var e2 = { ntype: 40, t: Object, operand: { ntype: 18, t: Function, rt: p.t, body: p, p: Bridge.toList([p]) } };

            var q1 = ($t5 = e1.body, Bridge.cast($t5, Bridge.hasValue($t5) && ($t5.ntype === 6))).args.get(0);
            Bridge.Test.Assert.true$1(Bridge.is(q1, Bridge.hasValue(q1) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(q1.ntype) >= 0)), "e1 is UnaryExpression");
            Bridge.Test.Assert.areEqual$1(q1.ntype, 40, "e1 node type");
            Bridge.Test.Assert.areEqual$1(q1.t, Object, "e1 type");
            var l1 = ($t5 = Bridge.cast(q1, Bridge.hasValue(q1) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(q1.ntype) >= 0)).operand, Bridge.as($t5, Bridge.hasValue($t5) && ($t5.ntype === 18)));
            Bridge.Test.Assert.true$1(l1 != null, "e1 operand should be LambdaExpression");
            Bridge.Test.Assert.areEqual$1(l1.p.getCount(), 1, "e1 lambda parameter count");
            Bridge.Test.Assert.areEqual$1(l1.p.get(0).n, "x", "e1 lambda parameter name");

            Bridge.Test.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)), "e2 is UnaryExpression");
            Bridge.Test.Assert.areEqual$1(e2.ntype, 40, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.t, Object, "e2 type");
            var l2 = ($t5 = Bridge.cast(e2, Bridge.hasValue(e2) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(e2.ntype) >= 0)).operand, Bridge.as($t5, Bridge.hasValue($t5) && ($t5.ntype === 18)));
            Bridge.Test.Assert.true$1(l2 != null, "e2 operand should be LambdaExpression");
            Bridge.Test.Assert.areEqual$1(l2.p.getCount(), 1, "e2 lambda parameter count");
            Bridge.Test.Assert.areEqual$1(l2.p.get(0).n, "x", "e2 lambda parameter name");
        },
        localVariableReferenceWorks: function () {
            var $t, $t1;
            var a = 42;
            var e = ($t={"ntype":23,"t":System.Int32,"expression":{"ntype":9,"t":System.Int32,"value":{}},"member":{"td":Object,"n":"a","t":16,"rt":System.Int32,"g":{"td":Object,"n":"geta","t":8,"rt":System.Int32,"p":[],"def":function(){ return a}},"s":{"td":Object,"n":"seta","t":8,"rt":Object,"p":[System.Int32],"def":function($){ a = $; }}}}, { ntype: 18, t: Function, rt: $t.t, body: $t, p: Bridge.toList([]) });
            var me = ($t1 = e.body, Bridge.as($t1, Bridge.hasValue($t1) && ($t1.ntype === 23)));
            Bridge.Test.Assert.true$1(me != null, "e is MemberExpression");
            Bridge.Test.Assert.areEqual$1(me.ntype, 23, "e node type");
            Bridge.Test.Assert.areEqual$1(me.t, System.Int32, "e type");

            var expr = ($t1 = me.expression, Bridge.as($t1, Bridge.hasValue($t1) && ($t1.ntype === 9)));
            Bridge.Test.Assert.true$1(expr != null, "expression should be ConstantExpression");
            Bridge.Test.Assert.areEqual$1(expr.ntype, 9, "expression node type");
            Bridge.Test.Assert.areEqual$1(expr.t, System.Int32, "expression type");
            Bridge.Test.Assert.true$1(expr.value != null, "expression value");

            var prop = Bridge.as(($t1 = e.body, Bridge.cast($t1, Bridge.hasValue($t1) && ($t1.ntype === 23))).member, System.Reflection.PropertyInfo);
            Bridge.Test.Assert.true$1(prop != null, "property not null");

            Bridge.Test.Assert.areEqual$1(prop.t, 16, "property member type");
            Bridge.Test.Assert.areEqual$1(prop.n, "a", "property name");
            Bridge.Test.Assert.true$1(prop.td != null, "property declaring type");
            Bridge.Test.Assert.false$1((prop.is || false), "property is static");
            Bridge.Test.Assert.areEqual$1(prop.rt, System.Int32, "property type");
            Bridge.Test.Assert.areEqual$1((prop.p || []).length, 0, "property indexer parameters");
            Bridge.Test.Assert.true$1((!!prop.g), "property can read");
            Bridge.Test.Assert.true$1((!!prop.s), "property can write");

            Bridge.Test.Assert.areEqual$1(prop.g.t, 8, "getter member type");
            Bridge.Test.Assert.areEqual$1(prop.g.n, "geta", "getter name");
            Bridge.Test.Assert.true$1(prop.g.td != null, "getter declaring type");
            Bridge.Test.Assert.false$1((prop.g.is || false), "getter is static");
            Bridge.Test.Assert.areEqual$1((prop.g.p || []).length, 0, "getter parameters");
            Bridge.Test.Assert.false$1((prop.g.t === 1), "getter is constructor");
            Bridge.Test.Assert.areEqual$1(prop.g.rt, System.Int32, "getter return type");
            Bridge.Test.Assert.areEqual$1((prop.g.tpc || 0), 0, "getter type parameter count");

            Bridge.Test.Assert.areEqual$1(prop.s.t, 8, "setter member type");
            Bridge.Test.Assert.areEqual$1(prop.s.n, "seta", "setter name");
            Bridge.Test.Assert.true$1(prop.s.td != null, "setter declaring type");
            Bridge.Test.Assert.false$1((prop.s.is || false), "setter is static");
            Bridge.Test.Assert.areEqual$1((prop.s.p || []).length, 1, "setter parameter count");
            Bridge.Test.Assert.areEqual$1((prop.s.p || [])[0], System.Int32, "setter parameter type");
            Bridge.Test.Assert.false$1((prop.s.t === 1), "setter is constructor");
            Bridge.Test.Assert.areEqual$1(prop.s.rt, Object, "setter return type");
            Bridge.Test.Assert.areEqual$1((prop.s.tpc || 0), 0, "setter type parameter count");

            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(prop.g, expr.value)(), 42, "property get");
            Bridge.Reflection.midel(prop.s, expr.value)(120);
            Bridge.Test.Assert.areEqual$1(a, 120, "property set");
        },
        throwAndRethrowWork: function () {
            var a = { ntype: 38, t: System.NotSupportedException, n: "a" };
            var e1 = { ntype: 60, t: Object, operand: a };
            var e2 = { ntype: 60, t: System.Exception, operand: a };
            var e3 = { ntype: 60, t: Object };
            var e4 = { ntype: 60, t: System.Exception };

            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f10;

            asserter(e1, Object, true, "e1");
            asserter(e2, System.Exception, true, "e2");
            asserter(e3, Object, false, "e3");
            asserter(e4, System.Exception, false, "e4");
        },
        defaultAndEmptyWork: function () {
            var $t;
            var e1 = { ntype: 51, t: Object };
            var e2 = { ntype: 51, t: String };

            Bridge.Test.Assert.true$1(Bridge.is(e1, Bridge.hasValue(e1) && (e1.ntype === 51)), "e1 is DefaultExpression");
            Bridge.Test.Assert.areEqual$1(e1.ntype, 51, "e1 node type");
            Bridge.Test.Assert.areEqual$1(e1.t, Object, "e1 type");

            Bridge.Test.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 51)), "e2 is DefaultExpression");
            Bridge.Test.Assert.areEqual$1(e2.ntype, 51, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.t, String, "e2 type");

            Bridge.Test.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 45 || $t.ntype === 81))), "Constant is DefaultExpression");
        },
        blockWorks: function () {
            var $t, $t1, $t2, $t3;
            var c1 = { ntype: 9, t: System.Int32, value: 2 };
            var c2 = { ntype: 9, t: String, value: "X" };
            var v1 = { ntype: 38, t: System.Int32, n: "v1" };
            var v2 = { ntype: 38, t: String, n: "v2" };

            var e1 = ($t=[c1, c2], { ntype: 47, t: $t[$t.length - 1].t, expressions: Bridge.toList($t) });
            var e2 = (function(a) { return { ntype: 47, t: a.get(a.getCount() - 1).t, expressions: a }; })(Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([c1, c2])));
            var e3 = { ntype: 47, t: Object, expressions: Bridge.toList([c1, c2]) };
            var e4 = { ntype: 47, t: Object, expressions: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([c1, c2])) };
            var e5 = ($t1=[c1, c2], { ntype: 47, t: $t1[$t1.length - 1].t, variables: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([v1, v2])), expressions: Bridge.toList($t1) });
            var e6 = (function(a, b) { return { ntype: 47, t: b.get(b.getCount() - 1).t, variables: a, expressions: b }; })(Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([v1, v2])), Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([c1, c2])));
            var e7 = { ntype: 47, t: Object, variables: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([v1, v2])), expressions: Bridge.toList([c1, c2]) };
            var e8 = { ntype: 47, t: Object, variables: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([v1, v2])), expressions: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([c1, c2])) };
            var e9 = ($t2=[c1, c2], { ntype: 47, t: $t2[$t2.length - 1].t, variables: Bridge.toList([v1, v2]), expressions: Bridge.toList($t2) });
            var e10 = (function(a, b) { return { ntype: 47, t: b.get(b.getCount() - 1).t, variables: a, expressions: b }; })(Bridge.toList([v1, v2]), Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([c1, c2])));
            var e11 = { ntype: 47, t: Object, variables: Bridge.toList([v1, v2]), expressions: Bridge.toList([c1, c2]) };
            var e12 = { ntype: 47, t: Object, variables: Bridge.toList([v1, v2]), expressions: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([c1, c2])) };

            var asserter = function (expr, type, hasVariables, title) {
                var be = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 47));
                Bridge.Test.Assert.true$1(be != null, System.String.concat(title, " is BlockExpression"));
                Bridge.Test.Assert.areEqual$1(be.ntype, 47, System.String.concat(title, " node type"));
                Bridge.Test.Assert.areEqual$1(be.t, type, System.String.concat(title, " type"));
                Bridge.Test.Assert.areEqual$1(be.expressions.getCount(), 2, System.String.concat(title, " expression count"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(be.expressions.get(0), c1), System.String.concat(title, " expression 0"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(be.expressions.get(1), c2), System.String.concat(title, " expression 1"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(be.expressions.get(be.expressions.getCount() - 1), c2), System.String.concat(title, " result"));
                if (hasVariables) {
                    Bridge.Test.Assert.areEqual$1((be.variables || Bridge.toList([])).getCount(), 2, System.String.concat(title, " variable count"));
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals((be.variables || Bridge.toList([])).get(0), v1), System.String.concat(title, " variable 0"));
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals((be.variables || Bridge.toList([])).get(1), v2), System.String.concat(title, " variable 1"));
                } else {
                    Bridge.Test.Assert.areEqual$1((be.variables || Bridge.toList([])).getCount(), 0, System.String.concat(title, " variable count"));
                }
            };

            asserter(e1, String, false, "e1");
            asserter(e2, String, false, "e2");
            asserter(e3, Object, false, "e3");
            asserter(e4, Object, false, "e4");
            asserter(e5, String, true, "e5");
            asserter(e6, String, true, "e6");
            asserter(e7, Object, true, "e7");
            asserter(e8, Object, true, "e8");
            asserter(e9, String, true, "e9");
            asserter(e10, String, true, "e10");
            asserter(e11, Object, true, "e11");
            asserter(e12, Object, true, "e12");

            Bridge.Test.Assert.false$1(($t3 = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 47))), "Constant is BlockExpression");
        },
        ifThenWorks: function () {
            var a = { ntype: 38, t: Boolean, n: "a" };
            var b = { ntype: 38, t: Boolean, n: "a" };
            var c = { ntype: 38, t: Boolean, n: "a" };

            var e1 = { ntype: 8, t: Object, test: a, ifTrue: b, ifFalse: { ntype: 51, t: Object } };
            var e2 = { ntype: 8, t: Object, test: a, ifTrue: b, ifFalse: c };

            var ce1 = Bridge.as(e1, Bridge.hasValue(e1) && (e1.ntype === 8));
            Bridge.Test.Assert.true$1(ce1 != null, "e1 is ConditionalExpression");
            Bridge.Test.Assert.areEqual$1(ce1.ntype, 8, "e1 node type");
            Bridge.Test.Assert.areEqual$1(ce1.t, Object, "e1 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ce1.test, a), "e1 test");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ce1.ifTrue, b), "e1 iftrue");
            Bridge.Test.Assert.areEqual$1(ce1.ifFalse.ntype, 51, "e1 iffalse node type");
            Bridge.Test.Assert.areEqual$1(ce1.ifFalse.t, Object, "e1 iffalse type");

            var ce2 = Bridge.as(e2, Bridge.hasValue(e2) && (e2.ntype === 8));
            Bridge.Test.Assert.true$1(ce2 != null, "e2 is ConditionalExpression");
            Bridge.Test.Assert.areEqual$1(ce2.ntype, 8, "e2 node type");
            Bridge.Test.Assert.areEqual$1(ce2.t, Object, "e2 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ce2.test, a), "e2 test");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ce2.ifTrue, b), "e2 iftrue");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ce2.ifFalse, c), "e2 iffalse");
        },
        labelTargetWorks: function () {
            var l1 = { t: Object };
            var l2 = { t: Object, n: "name1" };
            var l3 = { t: System.Int32 };
            var l4 = { t: String, n: "name2" };

            Bridge.Test.Assert.true$1(l1.n == null, "l1 name");
            Bridge.Test.Assert.areEqual$1(l1.t, Object, "l1 type");
            Bridge.Test.Assert.areEqual$1(l2.n, "name1", "l2 name");
            Bridge.Test.Assert.areEqual$1(l2.t, Object, "l2 type");
            Bridge.Test.Assert.true$1(l3.n == null, "l3 name");
            Bridge.Test.Assert.areEqual$1(l3.t, System.Int32, "l3 type");
            Bridge.Test.Assert.areEqual$1(l4.n, "name2", "l4 name");
            Bridge.Test.Assert.areEqual$1(l4.t, String, "l4 type");
        },
        gotoWorks: function () {
            var $t;
            var lbl1 = { t: Object };
            var lbl2 = { t: String };
            var c = { ntype: 9, t: String, value: "X" };
            var e1 = { ntype: 53, t: Object, kind: 2, target: lbl1 };
            var e2 = { ntype: 53, t: Object, kind: 2, target: lbl2, value: c };
            var e3 = { ntype: 53, t: System.Int32, kind: 2, target: lbl1 };
            var e4 = { ntype: 53, t: String, kind: 2, target: lbl1, value: c };
            var e5 = { ntype: 53, t: Object, kind: 3, target: lbl1 };
            var e6 = { ntype: 53, t: System.Int32, kind: 3, target: lbl1 };
            var e7 = { ntype: 53, t: Object, kind: 1, target: lbl1 };
            var e8 = { ntype: 53, t: Object, kind: 1, target: lbl2, value: c };
            var e9 = { ntype: 53, t: System.Int32, kind: 1, target: lbl1 };
            var e10 = { ntype: 53, t: String, kind: 1, target: lbl1, value: c };
            var e11 = { ntype: 53, t: Object, kind: 0, target: lbl1 };
            var e12 = { ntype: 53, t: Object, kind: 0, target: lbl2, value: c };
            var e13 = { ntype: 53, t: System.Int32, kind: 0, target: lbl1 };
            var e14 = { ntype: 53, t: String, kind: 0, target: lbl2, value: c };
            var e15 = { ntype: 53, t: String, kind: 2, target: lbl2, value: c };

            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f11;

            asserter(e1, Object, 2, lbl1, null, "e1");
            asserter(e2, Object, 2, lbl2, c, "e2");
            asserter(e3, System.Int32, 2, lbl1, null, "e3");
            asserter(e4, String, 2, lbl1, c, "e4");
            asserter(e5, Object, 3, lbl1, null, "e5");
            asserter(e6, System.Int32, 3, lbl1, null, "e6");
            asserter(e7, Object, 1, lbl1, null, "e7");
            asserter(e8, Object, 1, lbl2, c, "e8");
            asserter(e9, System.Int32, 1, lbl1, null, "e9");
            asserter(e10, String, 1, lbl1, c, "e10");
            asserter(e11, Object, 0, lbl1, null, "e11");
            asserter(e12, Object, 0, lbl2, c, "e12");
            asserter(e13, System.Int32, 0, lbl1, null, "e13");
            asserter(e14, String, 0, lbl2, c, "e14");
            asserter(e15, String, 2, lbl2, c, "e15");

            Bridge.Test.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 53))), "Constant is GotoExpression");
        },
        labelExpressionWorks: function () {
            var $t;
            var lbl1 = { t: Object };
            var lbl2 = { t: String };
            var v = { ntype: 9, t: String, value: "X" };
            var e1 = { ntype: 56, t: lbl1.t, target: lbl1 };
            var e2 = { ntype: 56, t: lbl1.t, target: lbl1, dv: v };
            var e3 = { ntype: 56, t: lbl2.t, target: lbl2, dv: v };

            Bridge.Test.Assert.true$1(Bridge.is(e1, Bridge.hasValue(e1) && (e1.ntype === 56)), "e1 is LabelExpression");
            Bridge.Test.Assert.areEqual$1(e1.ntype, 56, "e1 node type");
            Bridge.Test.Assert.areEqual$1(e1.t, Object, "e1 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 56)).target, lbl1), "e1 target");
            Bridge.Test.Assert.true$1(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 56)).dv == null, "e1 default value");

            Bridge.Test.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 56)), "e2 is LabelExpression");
            Bridge.Test.Assert.areEqual$1(e2.ntype, 56, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.t, Object, "e2 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 56)).target, lbl1), "e2 target");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 56)).dv, v), "e2 default value");

            Bridge.Test.Assert.true$1(Bridge.is(e3, Bridge.hasValue(e3) && (e3.ntype === 56)), "e3 is LabelExpression");
            Bridge.Test.Assert.areEqual$1(e3.ntype, 56, "e3 node type");
            Bridge.Test.Assert.areEqual$1(e3.t, String, "e3 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 56)).target, lbl2), "e3 target");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 56)).dv, v), "e3 default value");

            Bridge.Test.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 56))), "Constant is LabelExpression");
        },
        loopWorks: function () {
            var $t, $t1;
            var c = { ntype: 9, t: System.Int32, value: 1 };
            var lb = { t: String };
            var lc = { t: Object };

            var e1 = { ntype: 58, t: Object, body: c };
            var e2 = { ntype: 58, t: lb.t, body: c, breakLabel: lb };
            var e3 = { ntype: 58, t: lb ? lb.t : Object, body: c, breakLabel: lb, continueLabel: lc };
            var e4 = ($t=null, { ntype: 58, t: $t ? $t.t : Object, body: c, breakLabel: $t, continueLabel: null });

            Bridge.Test.Assert.true$1(Bridge.is(e1, Bridge.hasValue(e1) && (e1.ntype === 58)), "e1 is LoopExpression");
            Bridge.Test.Assert.areEqual$1(e1.ntype, 58, "e1 node type");
            Bridge.Test.Assert.areEqual$1(e1.t, Object, "e1 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 58)).body, c), "e1 body");
            Bridge.Test.Assert.true$1(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 58)).breakLabel == null, "e1 break label");
            Bridge.Test.Assert.true$1(Bridge.cast(e1, Bridge.hasValue(e1) && (e1.ntype === 58)).continueLabel == null, "e1 continue label");

            Bridge.Test.Assert.true$1(Bridge.is(e2, Bridge.hasValue(e2) && (e2.ntype === 58)), "e2 is LoopExpression");
            Bridge.Test.Assert.areEqual$1(e2.ntype, 58, "e2 node type");
            Bridge.Test.Assert.areEqual$1(e2.t, String, "e2 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 58)).body, c), "e2 target");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 58)).breakLabel, lb), "e2 break label");
            Bridge.Test.Assert.true$1(Bridge.cast(e2, Bridge.hasValue(e2) && (e2.ntype === 58)).continueLabel == null, "e1 continue label");

            Bridge.Test.Assert.true$1(Bridge.is(e3, Bridge.hasValue(e3) && (e3.ntype === 58)), "e3 is LoopExpression");
            Bridge.Test.Assert.areEqual$1(e3.ntype, 58, "e3 node type");
            Bridge.Test.Assert.areEqual$1(e3.t, String, "e3 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 58)).body, c), "e3 target");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 58)).breakLabel, lb), "e3 break label");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e3, Bridge.hasValue(e3) && (e3.ntype === 58)).continueLabel, lc), "e3 continue label");

            Bridge.Test.Assert.true$1(Bridge.is(e4, Bridge.hasValue(e4) && (e4.ntype === 58)), "e4 is LoopExpression");
            Bridge.Test.Assert.areEqual$1(e4.ntype, 58, "e4 node type");
            Bridge.Test.Assert.areEqual$1(e4.t, Object, "e4 type");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 58)).body, c), "e4 body");
            Bridge.Test.Assert.true$1(Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 58)).breakLabel == null, "e4 break label");
            Bridge.Test.Assert.true$1(Bridge.cast(e4, Bridge.hasValue(e4) && (e4.ntype === 58)).continueLabel == null, "e4 continue label");

            Bridge.Test.Assert.false$1(($t1 = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t1, Bridge.hasValue($t1) && ($t1.ntype === 58))), "Constant is LoopExpression");
        },
        switchCaseWorks: function () {
            var v1 = { ntype: 9, t: System.Int32, value: 1 };
            var v2 = { ntype: 9, t: System.Int32, value: 2 };
            var v3 = { ntype: 9, t: System.Int32, value: 3 };

            var sc1 = { body: v1, testValues: Bridge.toList([v2, v3]) };
            var sc2 = { body: v1, testValues: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([v2, v3])) };

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(sc1.body, v1), "sc1 body");
            Bridge.Test.Assert.areEqual$1(sc1.testValues.getCount(), 2, "sc1 test values count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(sc1.testValues.get(0), v2), "sc1 test value 0");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(sc1.testValues.get(1), v3), "sc1 test value 1");

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(sc2.body, v1), "sc2 body");
            Bridge.Test.Assert.areEqual$1(sc2.testValues.getCount(), 2, "sc2 test values count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(sc2.testValues.get(0), v2), "sc2 test value 0");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(sc2.testValues.get(1), v3), "sc2 test value 1");
        },
        switchWorks: function () {
            var $t, $t1, $t2, $t3;
            var c1 = { ntype: 9, t: System.Int32, value: 1 };
            var d = { ntype: 9, t: String, value: "T" };
            var c2 = { ntype: 9, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, value: new Bridge.ClientTest.Linq.Expressions.ExpressionTests.C.ctor() };
            var sc1 = { body: { ntype: 9, t: String, value: "X" }, testValues: Bridge.toList([{ ntype: 9, t: System.Int32, value: 1 }]) };
            var sc2 = { body: { ntype: 9, t: String, value: "Y" }, testValues: Bridge.toList([{ ntype: 9, t: System.Int32, value: 2 }]) };
            var sc3 = { body: { ntype: 9, t: String, value: "X" }, testValues: Bridge.toList([{ ntype: 9, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, value: new Bridge.ClientTest.Linq.Expressions.ExpressionTests.C.ctor() }]) };
            var sc4 = { body: { ntype: 9, t: String, value: "Y" }, testValues: Bridge.toList([{ ntype: 9, t: Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, value: new Bridge.ClientTest.Linq.Expressions.ExpressionTests.C.ctor() }]) };
            var op = Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 8, 284, "op_Equality");

            var e1 = ($t=[sc1, sc2], { ntype: 59, t: $t[0].body.t, switchValue: c1, cases: Bridge.toList($t) });
            var e2 = ($t1=[sc1, sc2], { ntype: 59, t: $t1[0].body.t, switchValue: c1, defaultBody: d, cases: Bridge.toList($t1) });
            var e3 = ($t2=[sc3, sc4], { ntype: 59, t: $t2[0].body.t, switchValue: c2, defaultBody: d, comparison: op, cases: Bridge.toList($t2) });
            var e4 = { ntype: 59, t: Object, switchValue: c2, defaultBody: d, comparison: op, cases: Bridge.toList([sc3, sc4]) };
            var e5 = (function(a, b, c, d) { return { ntype: 59, t: d.get(0).body.t, switchValue: a, defaultBody: b, comparison: c, cases: d }; })(c2, d, op, Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([sc3, sc4])));
            var e6 = { ntype: 59, t: Object, switchValue: c2, defaultBody: d, comparison: op, cases: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([sc3, sc4])) };

            var asserter = $_.Bridge.ClientTest.Linq.Expressions.ExpressionTests.f12;

            asserter(e1, String, c1, null, [sc1, sc2], null, "e1");
            asserter(e2, String, c1, d, [sc1, sc2], null, "e2");
            asserter(e3, String, c2, d, [sc3, sc4], op, "e3");
            asserter(e4, Object, c2, d, [sc3, sc4], op, "e4");
            asserter(e5, String, c2, d, [sc3, sc4], op, "e5");
            asserter(e6, Object, c2, d, [sc3, sc4], op, "e6");

            Bridge.Test.Assert.false$1(($t3 = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t3, Bridge.hasValue($t3) && ($t3.ntype === 59))), "Constant is SwitchExpression");
        },
        catchBlockWorks: function () {
            var $t;
            var ex = { ntype: 38, t: System.NotSupportedException, n: "ex" };
            var b = { ntype: 51, t: Object };
            var f = { ntype: 9, t: Boolean, value: true };

            var b1 = { test: System.NotSupportedException, body: b };
            var b2 = { test: ex.t, variable: ex, body: b };
            var b3 = { test: System.NotSupportedException, body: b, filter: f };
            var b4 = { test: ex.t, variable: ex, body: b, filter: f };
            var b5 = { test: null || ex.t, variable: ex, body: b, filter: f };
            var b6 = ($t=null, { test: System.NotSupportedException || $t.t, variable: $t, body: b, filter: f });

            var asserter = function (block, variable, filter, title) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(block.variable, variable), System.String.concat(title, " variable"));
                Bridge.Test.Assert.areEqual$1(block.test, System.NotSupportedException, System.String.concat(title, " test"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(block.body, b), System.String.concat(title, " body"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(block.filter, filter), System.String.concat(title, " filter"));
            };

            asserter(b1, null, null, "b1");
            asserter(b2, ex, null, "b2");
            asserter(b3, null, f, "b3");
            asserter(b4, ex, f, "b4");
            asserter(b5, ex, f, "b5");
            asserter(b6, null, f, "b6");
        },
        tryWorks: function () {
            var $t;
            var b1 = { ntype: 51, t: String };
            var b2 = { ntype: 51, t: Object };
            var b3 = { ntype: 51, t: Object };
            var cs = [{ test: System.NotSupportedException, body: { ntype: 51, t: Object } }, { test: Object, body: { ntype: 51, t: Object } }];

            var e1 = { ntype: 61, t: b1.t, body: b1, handlers: Bridge.toList([]), fault: b2 };
            var e2 = { ntype: 61, t: b1.t, body: b1, handlers: Bridge.toList([]), finallyExpr: b3 };
            var e3 = { ntype: 61, t: b1.t, body: b1, handlers: Bridge.toList(cs) };
            var e4 = { ntype: 61, t: b1.t, body: b1, finallyExpr: b3, handlers: Bridge.toList(cs) };
            var e5 = { ntype: 61, t: Object || b1.t, body: b1, finallyExpr: b3, fault: null, handlers: Bridge.toList(cs || []) };
            var e6 = { ntype: 61, t: Object || b1.t, body: b1, finallyExpr: null, fault: b2, handlers: Bridge.toList(null || []) };

            var asserter = function (expr, type, fault, $finally, hasHandlers, title) {
                var te = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 61));
                Bridge.Test.Assert.true$1(te != null, System.String.concat(title, " is TryExpression"));
                Bridge.Test.Assert.areEqual$1(te.ntype, 61, System.String.concat(title, " node type"));
                Bridge.Test.Assert.areEqual$1(te.t, type, System.String.concat(title, " type"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(te.body, b1), System.String.concat(title, " body"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(te.fault, fault), System.String.concat(title, " fault"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(te.finallyExpr, $finally), System.String.concat(title, " finally"));
                if (hasHandlers) {
                    Bridge.Test.Assert.areEqual$1(te.handlers.getCount(), 2, System.String.concat(title, " handler count"));
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals(te.handlers.get(0), cs[0]), System.String.concat(title, " handler 0"));
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals(te.handlers.get(1), cs[1]), System.String.concat(title, " handler 1"));
                } else {
                    Bridge.Test.Assert.areEqual$1(te.handlers.getCount(), 0, System.String.concat(title, " handler count"));
                }
            };

            asserter(e1, String, b2, null, false, "e1");
            asserter(e2, String, null, b3, false, "e2");
            asserter(e3, String, null, null, true, "e3");
            asserter(e4, String, null, b3, true, "e4");
            asserter(e5, Object, null, b3, true, "e5");
            asserter(e6, Object, b2, null, false, "e6");

            Bridge.Test.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 61))), "Constant is TryExpression");
        },
        dynamicWorks: function () {
            var $t;
            var a = { ntype: 38, t: String, n: "a" };
            var b = { ntype: 38, t: String, n: "b" };
            var c = { ntype: 38, t: String, n: "c" };

            var e1 = { ntype: 50, t: Object, dtype: 0, expression: a, member: "member1" };
            var e2 = { ntype: 50, t: System.Int32, dtype: 0, expression: a, member: "member1" };
            var e3 = { ntype: 50, t: Object, dtype: 1, expression: a, arguments: Bridge.toList([b, c]) };
            var e4 = { ntype: 50, t: Object, dtype: 1, expression: a, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([b, c])) };
            var e5 = { ntype: 50, t: System.Int32, dtype: 1, expression: a, arguments: Bridge.toList([b, c]) };
            var e6 = { ntype: 50, t: System.Int32, dtype: 1, expression: a, arguments: Bridge.toList(new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1(Object))([b, c])) };
            var e7 = { ntype: 50, t: Object, dtype: 2, expression: a, argument: b };
            var e8 = { ntype: 50, t: System.Int32, dtype: 2, expression: a, argument: b };

            var assertMember = function (expr, type, title) {
                var dme = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype == 50 && expr.dtype === 0));
                Bridge.Test.Assert.true$1(Bridge.is(expr, Bridge.hasValue(expr) && (expr.ntype == 50)), System.String.concat(title, " is DynamicExpression"));
                Bridge.Test.Assert.true$1(dme != null, System.String.concat(title, " is DynamicMemberExpression"));
                Bridge.Test.Assert.areEqual$1(dme.ntype, 50, System.String.concat(title, " node type"));
                Bridge.Test.Assert.areEqual$1(dme.t, type, System.String.concat(title, " type"));
                Bridge.Test.Assert.areEqual$1(dme.dtype, 0, System.String.concat(title, " dynamic type"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(dme.expression, a), System.String.concat(title, " expression"));
                Bridge.Test.Assert.areEqual$1(dme.member, "member1", System.String.concat(title, " member name"));
            };

            var assertInvocation = function (expr, type, title) {
                var dme = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype == 50 && expr.dtype === 1));
                Bridge.Test.Assert.true$1(Bridge.is(expr, Bridge.hasValue(expr) && (expr.ntype == 50)), System.String.concat(title, " is DynamicExpression"));
                Bridge.Test.Assert.true$1(dme != null, System.String.concat(title, " is DynamicInvocationExpression"));
                Bridge.Test.Assert.areEqual$1(dme.ntype, 50, System.String.concat(title, " node type"));
                Bridge.Test.Assert.areEqual$1(dme.t, type, System.String.concat(title, " type"));
                Bridge.Test.Assert.areEqual$1(dme.dtype, 1, System.String.concat(title, " dynamic type"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(dme.expression, a), System.String.concat(title, " expression"));
                Bridge.Test.Assert.areEqual$1(dme.arguments.getCount(), 2, System.String.concat(title, " argument count"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(dme.arguments.get(0), b), System.String.concat(title, " argument 0"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(dme.arguments.get(1), c), System.String.concat(title, " argument 1"));
            };

            var assertIndex = function (expr, type, title) {
                var dme = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype == 50 && expr.dtype === 2));
                Bridge.Test.Assert.true$1(Bridge.is(expr, Bridge.hasValue(expr) && (expr.ntype == 50)), System.String.concat(title, " is DynamicExpression"));
                Bridge.Test.Assert.true$1(dme != null, System.String.concat(title, " is DynamicIndexExpression"));
                Bridge.Test.Assert.areEqual$1(dme.ntype, 50, System.String.concat(title, " node type"));
                Bridge.Test.Assert.areEqual$1(dme.t, type, System.String.concat(title, " type"));
                Bridge.Test.Assert.areEqual$1(dme.dtype, 2, System.String.concat(title, " dynamic type"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(dme.expression, a), System.String.concat(title, " expression"));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(dme.argument, b), System.String.concat(title, " argument"));
            };

            assertMember(e1, Object, "e1");
            assertMember(e2, System.Int32, "e2");
            assertInvocation(e3, Object, "e3");
            assertInvocation(e4, Object, "e4");
            assertInvocation(e5, System.Int32, "e5");
            assertInvocation(e6, System.Int32, "e6");
            assertIndex(e7, Object, "e7");
            assertIndex(e8, System.Int32, "e8");

            Bridge.Test.Assert.false$1(($t = { ntype: 9, t: System.Int32, value: 0 }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype == 50))), "Constant is DynamicExpression");
            Bridge.Test.Assert.false$1(($t = { ntype: 50, t: Object, dtype: 1, expression: a, arguments: Bridge.toList([null]) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype == 50 && $t.dtype === 0))), "DynamicInvocation is DynamicMember");
            Bridge.Test.Assert.false$1(($t = { ntype: 50, t: Object, dtype: 0, expression: a, member: "x" }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype == 50 && $t.dtype === 1))), "DynamicIndex is DynamicInvocation");
            Bridge.Test.Assert.false$1(($t = { ntype: 50, t: Object, dtype: 1, expression: a, arguments: Bridge.toList([null]) }, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype == 50 && $t.dtype === 2))), "DynamicInvocation is DynamicIndex");
        }
    });

    Bridge.define("$AnonymousType$5", $_, {
        $kind: "anonymous",
        ctor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        getA : function () {
            return this.a;
        },
        getB : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$5)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320534454, this.a, this.b]);
            return h;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        }
    });

    Bridge.define("$AnonymousType$6", $_, {
        $kind: "anonymous",
        ctor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        geta : function () {
            return this.a;
        },
        getb : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$6)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320599990, this.a, this.b]);
            return h;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.Expressions.ExpressionTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.Expressions.ExpressionTests, {
        f1: function (expr, returnType, parmNames, parmTypes, title) {
            var $t;
            Bridge.Test.Assert.true$1(($t = expr, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 18))), System.String.concat(title, " is lambda"));
            Bridge.Test.Assert.false$1(($t = expr.body, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 18))), System.String.concat(title, " body is lambda"));
            Bridge.Test.Assert.areEqual$1(expr.ntype, 18, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(expr.t, Function, System.String.concat(title, " type"));
            Bridge.Test.Assert.areEqual$1(expr.rt, returnType, System.String.concat(title, " return type"));
            Bridge.Test.Assert.areEqual$1(expr.p.getCount(), parmTypes.length, System.String.concat(title, " param count"));
            for (var i = 0; i < expr.p.getCount(); i = (i + 1) | 0) {
                Bridge.Test.Assert.areEqual$1(expr.p.get(i).ntype, 38, System.String.concat(title, " parameter ", i, " node type"));
                Bridge.Test.Assert.areEqual$1(expr.p.get(i).n, parmNames[i], System.String.concat(title, " parameter ", i, " name"));
                Bridge.Test.Assert.areEqual$1(expr.p.get(i).t, parmTypes[i], System.String.concat(title, " parameter ", i, " type"));
            }
        },
        f2: function (expr, nodeType, type, method, title) {
            var $t;
            var be = Bridge.as(expr, Bridge.hasValue(expr) && ([0,1,2,3,5,7,12,13,14,15,16,19,20,21,22,25,26,27,35,36,37,39,41,42,43,46,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80].indexOf(expr.ntype) >= 0));
            Bridge.Test.Assert.true$1(be != null, System.String.concat(title, " is BinaryExpression"));
            Bridge.Test.Assert.false$1(Bridge.is(expr, Bridge.hasValue(expr) && (expr.ntype === 9)), System.String.concat(title, " is ConstantExpression"));
            Bridge.Test.Assert.areEqual$1(be.ntype, nodeType, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(be.t, type, System.String.concat(title, " type"));
            Bridge.Test.Assert.true$1(($t = be.left, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = be.left, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " left"));
            Bridge.Test.Assert.true$1(($t = be.right, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = be.right, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " right"));
            if (method == null) {
                Bridge.Test.Assert.true$1(be.method == null, System.String.concat(title, " method should be null"));
            } else {
                Bridge.Test.Assert.true$1(be.method != null, System.String.concat(title, " method should not be null"));
                Bridge.Test.Assert.areEqual$1(be.method.td, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, System.String.concat(title, " method declaring type should be correct"));
                Bridge.Test.Assert.areEqual$1(be.method.n, method, System.String.concat(title, " method name should be correct"));
            }
        },
        f3: function (expr, nodeType, type, method, title) {
            var $t;
            var ue = Bridge.as(expr, Bridge.hasValue(expr) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(expr.ntype) >= 0));
            Bridge.Test.Assert.true$1(ue != null, System.String.concat(title, " is UnaryExpression"));
            Bridge.Test.Assert.areEqual$1(ue.ntype, nodeType, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(ue.t, type, System.String.concat(title, " type"));
            Bridge.Test.Assert.true$1(($t = ue.operand, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ue.operand, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " operand"));
            if (method == null) {
                Bridge.Test.Assert.true$1(ue.method == null, System.String.concat(title, " method should be null"));
            } else {
                Bridge.Test.Assert.true$1(ue.method != null, System.String.concat(title, " method should not be null"));
                Bridge.Test.Assert.areEqual$1(ue.method.td, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, System.String.concat(title, " method declaring type should be correct"));
                Bridge.Test.Assert.areEqual$1(ue.method.n, method, System.String.concat(title, " method name should be correct"));
            }
        },
        f4: function (expr, method, isStatic, title) {
            var $t;
            var ce = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 6));
            Bridge.Test.Assert.true$1(ce != null, System.String.concat(title, " is CallExpression"));
            Bridge.Test.Assert.areEqual$1(ce.ntype, 6, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(ce.t, System.Int32, System.String.concat(title, " type"));
            Bridge.Test.Assert.areEqual$1(ce.args.getCount(), 2, System.String.concat(title, " argument count"));
            Bridge.Test.Assert.true$1(($t = ce.args.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ce.args.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " argument 0"));
            Bridge.Test.Assert.true$1(($t = ce.args.get(1), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ce.args.get(1), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " argument 1"));
            Bridge.Test.Assert.areEqual$1(ce.method.td, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, System.String.concat(title, " method declaring type"));
            Bridge.Test.Assert.areEqual$1(ce.method.n, method, System.String.concat(title, " method name"));
            if (isStatic) {
                Bridge.Test.Assert.true$1(ce.obj == null, System.String.concat(title, " object should be null"));
            } else {
                Bridge.Test.Assert.true(($t = ce.obj, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ce.obj, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "i"));
            }
        },
        f5: function (expr, title) {
            var $t4;
            var ie = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 17));
            Bridge.Test.Assert.true$1(ie != null, System.String.concat(title, " is InvocationExpression"));
            Bridge.Test.Assert.areEqual$1(ie.ntype, 17, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(ie.t, String, System.String.concat(title, " type"));
            Bridge.Test.Assert.true$1(($t4 = ie.expression, Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ie.expression, Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "a"), System.String.concat(title, " expression"));
            Bridge.Test.Assert.areEqual$1(ie.args.getCount(), 2, System.String.concat(title, " argument count"));
            Bridge.Test.Assert.true$1(($t4 = ie.args.get(0), Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ie.args.get(0), Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "b"), System.String.concat(title, " argument 0"));
            Bridge.Test.Assert.true$1(($t4 = ie.args.get(1), Bridge.is($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))) && Bridge.referenceEquals(($t4 = ie.args.get(1), Bridge.cast($t4, Bridge.hasValue($t4) && ($t4.ntype === 38))).n, "c"), System.String.concat(title, " argument 1"));
        },
        f6: function (expr, memberName, result, title) {
            var $t22;
            var me = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 23));
            Bridge.Test.Assert.true$1(me != null, System.String.concat(title, " is MemberExpression"));
            Bridge.Test.Assert.areEqual$1(me.ntype, 23, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(me.t, System.Int32, System.String.concat(title, " type"));
            Bridge.Test.Assert.true$1(($t22 = me.expression, Bridge.is($t22, Bridge.hasValue($t22) && ($t22.ntype === 38))) && Bridge.referenceEquals(($t22 = me.expression, Bridge.cast($t22, Bridge.hasValue($t22) && ($t22.ntype === 38))).n, "a"), System.String.concat(title, " expression"));
            if (Bridge.referenceEquals(memberName, "F1") || Bridge.referenceEquals(memberName, "P1")) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(me.member, System.String.startsWith(memberName, "F") ? Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, memberName) : Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, memberName)), System.String.concat(title, " member"));
            } else {
                Bridge.Test.Assert.areEqual$1(me.member.t, System.String.startsWith(memberName, "F") ? 4 : 16, System.String.concat(title, " member type"));
                Bridge.Test.Assert.areEqual$1(me.member.n, memberName, System.String.concat(title, " name"));
            }
            Bridge.Test.Assert.areEqual$1(Bridge.is(me.member, System.Reflection.FieldInfo) ? Bridge.Reflection.fieldAccess(Bridge.cast(me.member, System.Reflection.FieldInfo), new Bridge.ClientTest.Linq.Expressions.ExpressionTests.C.ctor()) : Bridge.Reflection.midel(Bridge.cast(me.member, System.Reflection.PropertyInfo).g, new Bridge.ClientTest.Linq.Expressions.ExpressionTests.C.ctor())(null), result, System.String.concat(title, " member result"));
        },
        f7: function (expr, member, type, title) {
            var $t;
            var ie = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 55));
            Bridge.Test.Assert.true$1(ie != null, System.String.concat(title, " is IndexExpression"));
            Bridge.Test.Assert.areEqual$1(ie.ntype, 55, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(ie.t, type, System.String.concat(title, " type"));
            Bridge.Test.Assert.true$1(($t = ie.obj, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ie.obj, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " object"));
            Bridge.Test.Assert.areEqual$1(ie.arguments.getCount(), 2, System.String.concat(title, " argument count"));
            Bridge.Test.Assert.true$1(($t = ie.arguments.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ie.arguments.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " argument 0"));
            Bridge.Test.Assert.true$1(($t = ie.arguments.get(1), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ie.arguments.get(1), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "c"), System.String.concat(title, " argument 1"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ie.indexer, member), System.String.concat(title, " member"));
        },
        f8: function (expr, argTypes, checkReference, title) {
            var $t;
            var ne = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 31));
            Bridge.Test.Assert.true$1(ne != null, System.String.concat(title, " is NewExpression"));
            Bridge.Test.Assert.areEqual$1(ne.ntype, 31, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(ne.t, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, System.String.concat(title, " type"));
            Bridge.Test.Assert.areEqual$1(ne.arguments.getCount(), argTypes.length, System.String.concat(title, " argument count"));
            for (var i = 0; i < ne.arguments.getCount(); i = (i + 1) | 0) {
                Bridge.Test.Assert.true$1(($t = ne.arguments.get(i), Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ne.arguments.get(i), Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, String.fromCharCode((((((97 + i) | 0))) & 65535))), System.String.concat(title, " argument ", i));
            }
            Bridge.Test.Assert.areEqual$1((ne.constructor.p || []).length, argTypes.length, System.String.concat(title, " constructor argument length"));
            for (var i1 = 0; i1 < (ne.constructor.p || []).length; i1 = (i1 + 1) | 0) {
                Bridge.Test.Assert.areEqual$1((ne.constructor.p || [])[i1], argTypes[i1], System.String.concat(title, " constructor parameter type ", i1));
            }
            if (checkReference) {
                var $ctor = Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, argTypes);
                Bridge.Test.Assert.true$1(Bridge.referenceEquals($ctor, ne.constructor), System.String.concat(title, " constructor reference"));
            }
        },
        f9: function (expr, title) {
            var $t;
            var mie = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 24));
            Bridge.Test.Assert.true$1(mie != null, System.String.concat(title, " is MemberInitExpression"));
            Bridge.Test.Assert.areEqual$1(expr.ntype, 24, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(expr.t, Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, System.String.concat(title, " type"));
            Bridge.Test.Assert.areEqual$1(mie.bindings.getCount(), 2, System.String.concat(title, " binding count"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mie.newExpression.constructor, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 1, 284, null, System.Array.init(0, null))), System.String.concat(title, " new expression"));
            Bridge.Test.Assert.true$1(($t = mie.bindings.get(0), Bridge.is($t, Bridge.hasValue($t) && ($t.btype === 0))), System.String.concat(title, " binding 0 type"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mie.bindings.get(0).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 4, 284, "F1")), System.String.concat(title, " binding 0 member"));
            Bridge.Test.Assert.true$1(($t = ($t = mie.bindings.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.btype === 0))).expression, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ($t = mie.bindings.get(0), Bridge.cast($t, Bridge.hasValue($t) && ($t.btype === 0))).expression, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " binding 0 expression"));
            Bridge.Test.Assert.true$1(($t = mie.bindings.get(1), Bridge.is($t, Bridge.hasValue($t) && ($t.btype === 0))), System.String.concat(title, " binding 1 type"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(mie.bindings.get(1).member, Bridge.Reflection.getMembers(Bridge.ClientTest.Linq.Expressions.ExpressionTests.C, 16, 284, "P1")), System.String.concat(title, " binding 1 member"));
            Bridge.Test.Assert.true$1(($t = ($t = mie.bindings.get(1), Bridge.cast($t, Bridge.hasValue($t) && ($t.btype === 0))).expression, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ($t = mie.bindings.get(1), Bridge.cast($t, Bridge.hasValue($t) && ($t.btype === 0))).expression, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "b"), System.String.concat(title, " binding 1 expression"));
        },
        f10: function (expr, type, hasOperand, title) {
            var $t;
            var ue = Bridge.as(expr, Bridge.hasValue(expr) && ([4,10,11,28,29,30,34,40,44,49,54,60,62,77,78,79,80,82,83,84].indexOf(expr.ntype) >= 0));
            Bridge.Test.Assert.true$1(ue != null, System.String.concat(title, " is UnaryExpression"));
            Bridge.Test.Assert.areEqual$1(ue.ntype, 60, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(ue.t, type, System.String.concat(title, " type"));
            if (hasOperand) {
                Bridge.Test.Assert.true$1(($t = ue.operand, Bridge.is($t, Bridge.hasValue($t) && ($t.ntype === 38))) && Bridge.referenceEquals(($t = ue.operand, Bridge.cast($t, Bridge.hasValue($t) && ($t.ntype === 38))).n, "a"), System.String.concat(title, " operand"));
            } else {
                Bridge.Test.Assert.true$1(ue.operand == null, System.String.concat(title, " operand"));
            }
            Bridge.Test.Assert.true$1(ue.method == null, System.String.concat(title, " method should be null"));
        },
        f11: function (expr, type, kind, target, value, title) {
            var ge = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 53));
            Bridge.Test.Assert.true$1(ge != null, System.String.concat(title, " is GotoExpression"));
            Bridge.Test.Assert.areEqual$1(ge.ntype, 53, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(ge.t, type, System.String.concat(title, " type"));
            Bridge.Test.Assert.areEqual$1(ge.kind, kind, System.String.concat(title, " kind"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ge.target, target), System.String.concat(title, " target"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ge.value, value), System.String.concat(title, " target"));
        },
        f12: function (expr, type, switchValue, defaultBody, cases, comparison, title) {
            var se = Bridge.as(expr, Bridge.hasValue(expr) && (expr.ntype === 59));
            Bridge.Test.Assert.true$1(se != null, System.String.concat(title, " is SwitchExpression"));
            Bridge.Test.Assert.areEqual$1(se.ntype, 59, System.String.concat(title, " node type"));
            Bridge.Test.Assert.areEqual$1(se.t, type, System.String.concat(title, " type"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(se.comparison, comparison), System.String.concat(title, " comparison"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(se.switchValue, switchValue), System.String.concat(title, " switch value"));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(se.defaultBody, defaultBody), System.String.concat(title, " default value"));
            Bridge.Test.Assert.areEqual$1(se.cases.getCount(), cases.length, System.String.concat(title, " cases count"));
            for (var i = 0; i < se.cases.getCount(); i = (i + 1) | 0) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(se.cases.get(i), cases[i]), System.String.concat(title, " case ", i));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.Expressions.ExpressionTests.C", {
        statics: {
            op_Power: function (a, b) {
                return null;
            },
            M2: function (a, b) {
                return 0;
            },
            op_Multiply: function (a, b) {
                return null;
            },
            op_Modulus: function (a, b) {
                return null;
            },
            op_Division: function (a, b) {
                return null;
            },
            op_Addition: function (a, b) {
                return null;
            },
            op_Subtraction: function (a, b) {
                return null;
            },
            op_LeftShift: function (a, b) {
                return null;
            },
            op_RightShift: function (a, b) {
                return null;
            },
            op_LessThan: function (a, b) {
                return false;
            },
            op_GreaterThan: function (a, b) {
                return false;
            },
            op_LessThanOrEqual: function (a, b) {
                return false;
            },
            op_GreaterThanOrEqual: function (a, b) {
                return false;
            },
            op_Equality: function (a, b) {
                return false;
            },
            op_Inequality: function (a, b) {
                return false;
            },
            op_BitwiseAnd: function (a, b) {
                return null;
            },
            op_ExclusiveOr: function (a, b) {
                return null;
            },
            op_BitwiseOr: function (a, b) {
                return null;
            },
            op_UnaryPlus: function (a) {
                return null;
            },
            op_UnaryNegation: function (a) {
                return null;
            },
            op_OnesComplement: function (a) {
                return null;
            },
            op_LogicalNot: function (a) {
                return false;
            },
            op_Increment: function (a) {
                return null;
            },
            op_Decrement: function (a) {
                return null;
            },
            op_True: function (a) {
                return false;
            },
            op_False: function (a) {
                return false;
            },
            op_Explicit: function (a) {
                return 0;
            }
        },
        F1: 0,
        F2: 0,
        LF: null,
        CF: null,
        config: {
            properties: {
                P1: 0,
                P2: 0,
                LP: null,
                CP: null
            }
        },
        ctor: function () {
            this.$initialize();
            this.F1 = 234;
            this.F2 = 24;
            this.setP1(42);
            this.setP2(17);
        },
        $ctor1: function (a, b) {
            this.$initialize();
        },
        $ctor2: function (a, b) {
            this.$initialize();
        },
        getItem: function (a, b) {
            return System.String.concat(this.F1 + " " + a + " ", b);
        },
        M1: function (a, b) {
            return 0;
        },
        M3: function (a) {
            return ((a + 34) | 0);
        },
        M4: function (a) {
            return ((a + 34) | 0);
        },
        equals: function (o) {
            return false;
        },
        getHashCode: function () {
            return 0;
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1", function (T) { return {
        data: Bridge.getDefaultValue(T),
        ctor: function (data) {
            this.$initialize();
            this.data = data;
        },
        select: function (TResult, f) {
            return new (Bridge.ClientTest.Linq.Expressions.ExpressionTests.ClassWithQueryPattern$1(TResult))(f(this.data));
        }
    }; });

    Bridge.define("Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyEnumerable$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        _hasEnumerated: false,
        _items: null,
        config: {
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$getEnumerator"
            ]
        },
        ctor: function (items) {
            this.$initialize();
            this._items = items;
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            if (this._hasEnumerated) {
                throw new System.Exception("Already enumerated");
            }
            this._hasEnumerated = true;
            return Bridge.getEnumerator(this._items, T);
        }
    }; });

    Bridge.define("Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyExpression", {
        ctor: function () {
            this.$initialize();
            Bridge.merge(this, { ntype: 9999, t: String });
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.Expressions.ExpressionTests.MyList", {
        inherits: [System.Collections.IEnumerable],
        config: {
            alias: [
            "getEnumerator", "System$Collections$IEnumerable$getEnumerator"
            ]
        },
        ctor: function () {
            this.$initialize();
        },
        add: function (i) {
        },
        add$1: function (i, j) {
        },
        getEnumerator: function () {
            throw new System.Exception();
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqAggregateOperators", {
        statics: {
            test: function () {
                var numbers = [2, 2, 3, 5, 5, -1, 2, -1];
                var words = ["one", "two", "three"];
                var doubles = [1.7, 2.3, 1.9, 4.1, 2.9];

                // TEST
                var uniqueNumbers = System.Linq.Enumerable.from(numbers).distinct().count();
                Bridge.Test.Assert.areEqual$1(4, uniqueNumbers, "Count() distinct numbers");

                // TEST
                var oddNumbers = System.Linq.Enumerable.from(numbers).count($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f1);
                Bridge.Test.Assert.areEqual$1(3, oddNumbers, "Count() odd numbers");

                // TEST
                var groupJoin = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Group.getGroups()).groupJoin(Bridge.ClientTest.Utilities.Person.getPersons(), $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3, $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f4)).toArray();

                var groupJoinExpected = [new $_.$AnonymousType$7("A", 1), new $_.$AnonymousType$7("B", 4), new $_.$AnonymousType$7("C", 2), new $_.$AnonymousType$7("D", 0)];

                Bridge.Test.Assert.areDeepEqual$1(groupJoinExpected, groupJoin, "Count() within joint collections");

                // TEST
                var grouped = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f5)).toArray();

                var groupedExpected = [new $_.$AnonymousType$7("A", 1), new $_.$AnonymousType$7("C", 2), new $_.$AnonymousType$7("B", 4), new $_.$AnonymousType$7(null, 1)];

                Bridge.Test.Assert.areDeepEqual$1(groupedExpected, grouped, "Count() within group");

                // TEST
                var numSum = System.Linq.Enumerable.from(numbers).sum();
                Bridge.Test.Assert.areEqual$1(17, numSum, "Sum() numbers");

                // TEST
                var totalChars = System.Linq.Enumerable.from(words).sum($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f6);
                Bridge.Test.Assert.areEqual$1(11, totalChars, "Sum() total chars");

                // TEST
                var groupedSum = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f8)).toArray();

                var groupedSumExpected = [new $_.$AnonymousType$8("A", 300), new $_.$AnonymousType$8("C", 600), new $_.$AnonymousType$8("B", 2000), new $_.$AnonymousType$8(null, 3000)];

                Bridge.Test.Assert.areDeepEqual$1(groupedSumExpected, groupedSum, "Sum() within group");

                // TEST
                var minNum = System.Linq.Enumerable.from(numbers).min();
                Bridge.Test.Assert.areEqual$1(-1, minNum, "Min() number");

                // TEST
                var shortestWordLength = System.Linq.Enumerable.from(words).min($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f6);
                Bridge.Test.Assert.areEqual$1(3, shortestWordLength, "Min() for shortest word");

                // TEST
                var groupedMin = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f9)).toArray();

                var groupedMinExpected = [new $_.$AnonymousType$9("A", 300), new $_.$AnonymousType$9("C", 100), new $_.$AnonymousType$9("B", 50), new $_.$AnonymousType$9(null, 3000)];

                Bridge.Test.Assert.areDeepEqual$1(groupedMinExpected, groupedMin, "Min() within group");

                // TEST
                var groupedMinWithLet = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f10).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f12)).toArray();

                var groupedMinWithLetExpected = [new $_.$AnonymousType$11("A", ["Frank"]), new $_.$AnonymousType$11("C", ["Zeppa"]), new $_.$AnonymousType$11("B", ["Dora"]), new $_.$AnonymousType$11(null, ["Nemo"])];

                Bridge.Test.Assert.areDeepEqual$1(groupedMinWithLetExpected, groupedMinWithLet, "Min() within group with let");

                // TEST
                var maxNum = System.Linq.Enumerable.from(numbers).max();
                Bridge.Test.Assert.areEqual$1(5, maxNum, "Max() number");

                // TEST
                var longestWordLength = System.Linq.Enumerable.from(words).max($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f6);
                Bridge.Test.Assert.areEqual$1(5, longestWordLength, "Max() for longest word");

                // TEST
                var groupedMax = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f13)).toArray();

                var groupedMaxExpected = [new $_.$AnonymousType$12("A", 300), new $_.$AnonymousType$12("C", 500), new $_.$AnonymousType$12("B", 700), new $_.$AnonymousType$12(null, 3000)];

                Bridge.Test.Assert.areDeepEqual$1(groupedMaxExpected, groupedMax, "Max() within group");

                // TEST
                var groupedMaxWithLet = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f14).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f15)).toArray();

                var groupedMaxWithLetExpected = [new $_.$AnonymousType$11("A", ["Frank"]), new $_.$AnonymousType$11("C", ["Billy"]), new $_.$AnonymousType$11("B", ["John", "Mary"]), new $_.$AnonymousType$11(null, ["Nemo"])];

                Bridge.Test.Assert.areDeepEqual$1(groupedMaxWithLetExpected, groupedMaxWithLet, "Max() within group with let");

                // TEST
                var averageNum = System.Linq.Enumerable.from(numbers).average();
                Bridge.Test.Assert.areEqual$1(2.125, averageNum, "Average() number");

                // TEST
                var averageWordLengths = ["1", "22", "333", "4444", "55555"];
                var averageWordLength = System.Linq.Enumerable.from(averageWordLengths).average($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f6);
                Bridge.Test.Assert.areEqual$1(3, averageWordLength, "Average() for word lengths");

                // TEST
                var groupedAverage = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f16)).toArray();

                var groupedAverageExpected = [{ group: "A", average: 300 }, { group: "C", average: 300 }, { group: "B", average: 500 }, { group: null, average: 3000 }];

                Bridge.Test.Assert.areDeepEqual$1(groupedAverageExpected, groupedAverage, "Average() within group");

                // TEST
                var doublesForAggregate = [1.0, 2.0, 3.0, 4.0, 5.0];
                var product = System.Linq.Enumerable.from(doublesForAggregate).aggregate($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f17);
                Bridge.Test.Assert.areEqual$1(120, product, "Aggregate() within doubles");

                // TEST
                var startBalance = 100.0;
                var attemptedWithdrawals = [20, 10, 40, 50, 10, 70, 30];

                var endBalance = System.Linq.Enumerable.from(attemptedWithdrawals).aggregate(startBalance, $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f18);

                Bridge.Test.Assert.areEqual$1(20, endBalance, "Aggregate() balance");
            },
            bridge315: function () {
                var q = System.Linq.Enumerable.from("a,b,c,a".toUpperCase().split(",")).aggregate("", $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f19);

                Bridge.Test.Assert.areStrictEqual$1("A C B A ", q, "Enumerable.Aggregate");
            }
        }
    });

    Bridge.define("$AnonymousType$7", $_, {
        $kind: "anonymous",
        ctor: function (group, personCount) {
            this.group = group;
            this.personCount = personCount;
        },
        getGroup : function () {
            return this.group;
        },
        getPersonCount : function () {
            return this.personCount;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$7)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.personCount, o.personCount);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320665526, this.group, this.personCount]);
            return h;
        },
        toJSON: function () {
            return {
                group : this.group,
                personCount : this.personCount
            };
        }
    });

    Bridge.define("$AnonymousType$8", $_, {
        $kind: "anonymous",
        ctor: function (group, sum) {
            this.group = group;
            this.sum = sum;
        },
        getGroup : function () {
            return this.group;
        },
        getSum : function () {
            return this.sum;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$8)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.sum, o.sum);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320731062, this.group, this.sum]);
            return h;
        },
        toJSON: function () {
            return {
                group : this.group,
                sum : this.sum
            };
        }
    });

    Bridge.define("$AnonymousType$9", $_, {
        $kind: "anonymous",
        ctor: function (group, min) {
            this.group = group;
            this.min = min;
        },
        getGroup : function () {
            return this.group;
        },
        getMin : function () {
            return this.min;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$9)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.min, o.min);
        },
        getHashCode: function () {
            var h = Bridge.addHash([6320796598, this.group, this.min]);
            return h;
        },
        toJSON: function () {
            return {
                group : this.group,
                min : this.min
            };
        }
    });

    Bridge.define("$AnonymousType$10", $_, {
        $kind: "anonymous",
        ctor: function (g, minCount) {
            this.g = g;
            this.minCount = minCount;
        },
        getg : function () {
            return this.g;
        },
        getminCount : function () {
            return this.minCount;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$10)) {
                return false;
            }
            return Bridge.equals(this.g, o.g) && Bridge.equals(this.minCount, o.minCount);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7125578678, this.g, this.minCount]);
            return h;
        },
        toJSON: function () {
            return {
                g : this.g,
                minCount : this.minCount
            };
        }
    });

    Bridge.define("$AnonymousType$11", $_, {
        $kind: "anonymous",
        ctor: function (group, name) {
            this.group = group;
            this.name = name;
        },
        getGroup : function () {
            return this.group;
        },
        getName : function () {
            return this.name;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$11)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.name, o.name);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7142355894, this.group, this.name]);
            return h;
        },
        toJSON: function () {
            return {
                group : this.group,
                name : this.name
            };
        }
    });

    Bridge.define("$AnonymousType$12", $_, {
        $kind: "anonymous",
        ctor: function (group, max) {
            this.group = group;
            this.max = max;
        },
        getGroup : function () {
            return this.group;
        },
        getMax : function () {
            return this.max;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$12)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.max, o.max);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7159133110, this.group, this.max]);
            return h;
        },
        toJSON: function () {
            return {
                group : this.group,
                max : this.max
            };
        }
    });

    Bridge.define("$AnonymousType$13", $_, {
        $kind: "anonymous",
        ctor: function (g, maxCount) {
            this.g = g;
            this.maxCount = maxCount;
        },
        getg : function () {
            return this.g;
        },
        getmaxCount : function () {
            return this.maxCount;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$13)) {
                return false;
            }
            return Bridge.equals(this.g, o.g) && Bridge.equals(this.maxCount, o.maxCount);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7175910326, this.g, this.maxCount]);
            return h;
        },
        toJSON: function () {
            return {
                g : this.g,
                maxCount : this.maxCount
            };
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqAggregateOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators, {
        f1: function (n) {
            return n % 2 === 1;
        },
        f2: function (g) {
            return g.getName();
        },
        f3: function (p) {
            return p.getGroup();
        },
        f4: function (g, pg) {
            return new $_.$AnonymousType$7(g.getName(), System.Linq.Enumerable.from(pg).count());
        },
        f5: function (g) {
            return new $_.$AnonymousType$7(g.key(), g.count());
        },
        f6: function (w) {
            return w.length;
        },
        f7: function (x) {
            return x.getCount();
        },
        f8: function (g) {
            return new $_.$AnonymousType$8(g.key(), g.sum($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f9: function (g) {
            return new $_.$AnonymousType$9(g.key(), g.min($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f10: function (g) {
            return new $_.$AnonymousType$10(g, g.min($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f11: function (x) {
            return x.getName();
        },
        f12: function (x0) {
            return new $_.$AnonymousType$11(x0.g.key(), x0.g.where(function (x) {
                return x.getCount() === x0.minCount;
            }).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f11).toArray());
        },
        f13: function (g) {
            return new $_.$AnonymousType$12(g.key(), g.max($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f14: function (g) {
            return new $_.$AnonymousType$13(g, g.max($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f15: function (x1) {
            return new $_.$AnonymousType$11(x1.g.key(), x1.g.where(function (x) {
                return x.getCount() === x1.maxCount;
            }).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f11).toArray());
        },
        f16: function (g) {
            return { group: g.key(), average: g.average($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7) };
        },
        f17: function (runningProduct, nextFactor) {
            return runningProduct * nextFactor;
        },
        f18: function (balance, nextWithdrawal) {
            return ((nextWithdrawal <= balance) ? (balance - nextWithdrawal) : balance);
        },
        f19: function (workingSentence, next) {
            return System.String.concat(next, " ", workingSentence);
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqConversionOperators", {
        statics: {
            test: function () {
                // TEST
                var doubles = [1.7, 2.3, 1.9, 4.1, 2.9];

                var sameDoubles = System.Linq.Enumerable.from(doubles).select($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f1);
                var doublesArray = sameDoubles.toArray();

                Bridge.Test.Assert.true$1(System.String.contains(Bridge.getType(doublesArray).toString(),"function Array()"), "ToArray() conversion for doubles - check type name");
                Bridge.Test.Assert.areDeepEqual$1(doubles, doublesArray, "ToArray() conversion for doubles - check content");

                // TEST
                var words = ["1.one", "2.two", "3.three"];

                var wordList1 = System.Linq.Enumerable.from((System.Linq.Enumerable.from(words).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f2))).toList(String);
                var wordListExpected1 = new (System.Collections.Generic.List$1(String))(["3.three", "2.two", "1.one"]);

                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.List$1[[String]]", Bridge.Reflection.getTypeFullName(Bridge.getType(wordList1)), "ToList() conversion with explicit String type for string - check type name");
                Bridge.Test.Assert.areDeepEqual$1(wordListExpected1, wordList1, "ToList() conversion for strings with explicit String type - check content");

                // TEST
                var wordList2 = (System.Linq.Enumerable.from(words).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f2)).toList(String);
                var wordListExpected2 = new (System.Collections.Generic.List$1(String))(["3.three", "2.two", "1.one"]);

                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.List$1[[String]]", Bridge.Reflection.getTypeFullName(Bridge.getType(wordList2)), "ToList() conversion for string - check type name");
                Bridge.Test.Assert.areDeepEqual$1(wordListExpected2, wordList2, "ToList() conversion for strings - check content");

                // TEST
                var groups = Bridge.ClientTest.Utilities.Group.getGroups();
                var groupDictionary1 = (System.Linq.Enumerable.from(groups).select($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3)).toDictionary($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f4, $_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3, String, Bridge.ClientTest.Utilities.Group);
                var expectedGroupDictionary1 = new (System.Collections.Generic.Dictionary$2(String,Bridge.ClientTest.Utilities.Group))();

                expectedGroupDictionary1.add("A", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "A",
                    setLimit: 1000
                } ));
                expectedGroupDictionary1.add("B", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "B",
                    setLimit: 400
                } ));
                expectedGroupDictionary1.add("C", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "C",
                    setLimit: 800
                } ));
                expectedGroupDictionary1.add("D", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "D",
                    setLimit: 200
                } ));
                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Dictionary$2[[String],[Bridge.ClientTest.Utilities.Group, Bridge.ClientTest]]", Bridge.Reflection.getTypeFullName(Bridge.getType(groupDictionary1)), "ToDictionary(keySelector, elementSelector) conversion for <string, Group> - check type name");
                Bridge.Test.Assert.areDeepEqual$1(expectedGroupDictionary1, groupDictionary1, "ToDictionary(keySelector, elementSelector) conversion for <string, Group> - check content");

                // TEST
                var comparer = new Bridge.ClientTest.Linq.TestLinqConversionOperatorsIEqualityComparer();
                var expectedGroupDictionary2 = new (System.Collections.Generic.Dictionary$2(String, Bridge.ClientTest.Utilities.Group))(null, comparer);

                expectedGroupDictionary2.add("A", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "A",
                    setLimit: 1000
                } ));
                expectedGroupDictionary2.add("B", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "B",
                    setLimit: 400
                } ));
                expectedGroupDictionary2.add("C", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "C",
                    setLimit: 800
                } ));
                expectedGroupDictionary2.add("D", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "D",
                    setLimit: 200
                } ));

                var groupDictionary2 = (System.Linq.Enumerable.from(groups).select($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3)).toDictionary($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f4, $_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3, String, Bridge.ClientTest.Utilities.Group, comparer);

                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Dictionary$2[[String],[Bridge.ClientTest.Utilities.Group, Bridge.ClientTest]]", Bridge.Reflection.getTypeFullName(Bridge.getType(groupDictionary2)), "ToDictionary(keySelector, elementSelector, IEqualityComparer) conversion for <string, Group> - check type name");
                Bridge.Test.Assert.areDeepEqual$1(expectedGroupDictionary2, groupDictionary2, "ToDictionary(keySelector, elementSelector, IEqualityComparer) conversion for <string, Group> - check content");

                // TEST
                var groupDictionary3 = (System.Linq.Enumerable.from(groups).select($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3)).toDictionary($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f4, null, String, Bridge.ClientTest.Utilities.Group);

                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Dictionary$2[[String],[Bridge.ClientTest.Utilities.Group, Bridge.ClientTest]]", Bridge.Reflection.getTypeFullName(Bridge.getType(groupDictionary3)), "ToDictionary(keySelector) conversion for <string, Group> - check type name");
                Bridge.Test.Assert.areDeepEqual$1(expectedGroupDictionary1, groupDictionary3, "ToDictionary(keySelector) conversion for <string, Group> - check content");

                // TEST
                var numbers = [null, 1.0, "two", 3, "four", 5, "six", 7.0];

                var doubleNumbers = System.Linq.Enumerable.from(numbers).ofType(System.Double).toArray();

                Bridge.Test.Assert.areDeepEqual$1([1.0, 3, 5, 7.0], doubleNumbers, "Issue #218. OfType<double> should get only double type items");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqConversionOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqConversionOperators, {
        f1: function (d) {
            return d;
        },
        f2: function (w) {
            return w;
        },
        f3: function (g) {
            return g;
        },
        f4: function (g) {
            return g.getName();
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqConversionOperatorsIEqualityComparer", {
        inherits: [System.Collections.Generic.EqualityComparer$1(String)],
        config: {
            alias: [
            "equals2", "System$Collections$Generic$IEqualityComparer$1$String$equals2",
            "getHashCode2", "System$Collections$Generic$IEqualityComparer$1$String$getHashCode2"
            ]
        },
        equals2: function (x, y) {
            return System.String.equals(x, y);
        },
        getHashCode2: function (obj) {
            if (obj == null) {
                return 0;
            }

            return Bridge.getHashCode(obj);
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqElementOperators", {
        statics: {
            test: function () {
                // TEST
                var persons = Bridge.ClientTest.Utilities.Person.getPersons();
                var person3 = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f1)).first();

                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(2), person3, "First() with ID = 3");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(2), System.Linq.Enumerable.from(persons).first($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f2), "First() with ID = 3 by lambda");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(2), System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f2).first(), "First() with Where() with ID = 3 by lambda");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(1), System.Linq.Enumerable.from(persons).first($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f3), "First() with Group = 'C' by lambda");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnFirst1, "First() should throw exception if no element found");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnFirst2, "First() should throw exception on empty collection");

                // TEST
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(persons).firstOrDefault($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f4, null), "FirstOrDefault() unexisting element by lambda");
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f4).firstOrDefault(null, null), "FirstOrDefault() with Where() unexisting element by lambda");
                Bridge.Test.Assert.areEqual$1(persons.getItem(7), System.Linq.Enumerable.from(persons).firstOrDefault($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f5, null), "FirstOrDefault() with Name = 'Nemo' by lambda");
                Bridge.Test.Assert.areEqual$1(persons.getItem(7), System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f5).firstOrDefault(null, null), "FirstOrDefault() with Where() with Name = 'Nemo' by lambda");
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(([])).firstOrDefault(null, null), "FirstOrDefault() within zero-length array by lambda");

                // TEST
                var lastPerson = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f6)).last();

                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(7), lastPerson, "Last() person");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(3), System.Linq.Enumerable.from(persons).last($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f7), "Last() with ID = 4 by lambda");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(6), System.Linq.Enumerable.from(persons).last($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f8), "Last() with Group = 'B' by lambda");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnLast1, "Last() should throw exception if no element found");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnLast2, "Last() should throw exception on empty collection");

                // TEST
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(persons).lastOrDefault($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f4, null), "LastOrDefault() unexisting element by lambda");
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f4).lastOrDefault(null, null), "LastOrDefault() with Where() unexisting element by lambda");
                Bridge.Test.Assert.areEqual$1(persons.getItem(7), System.Linq.Enumerable.from(persons).lastOrDefault($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f5, null), "LastOrDefault() with Name = 'Nemo' by lambda");
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(([])).lastOrDefault(null, null), "LastOrDefault() within zero-length array by lambda");

                // TEST
                var numbers = [5, 4, 1, 3, 9, 8, 6, 7, 2, 0];
                var elementAt1 = (System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f9)).elementAt(1);

                Bridge.Test.Assert.areEqual$1(8, elementAt1, "ElementAt() should return 8");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnElementAt1, "ElementAt() should throw exception if no element found");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnElementAt2, "ElementAt() should throw exception on empty collection");

                // TEST
                var elementAt1OrDefault = System.Linq.Enumerable.from(numbers).elementAtOrDefault(1, 0);
                Bridge.Test.Assert.areEqual$1(4, elementAt1OrDefault, "ElementAtOrDefault() should return 4");

                // TEST
                var elementAt2OrDefault = (System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f9)).elementAtOrDefault(2, 0);
                Bridge.Test.Assert.areEqual$1(6, elementAt2OrDefault, "ElementAtOrDefault() should return 6");

                // TEST
                var elementAt100OrDefault = (System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f9)).elementAtOrDefault(100, 0);
                Bridge.Test.Assert.areEqual$1(0, elementAt100OrDefault, "ElementAtOrDefault() should return 0");
            },
            throwExceptionOnFirst1: function () {
                var numbers = [3, 4];
                System.Linq.Enumerable.from(numbers).first($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f10);
            },
            throwExceptionOnFirst2: function () {
                var numbers = [];
                System.Linq.Enumerable.from(numbers).first();
            },
            throwExceptionOnLast1: function () {
                var numbers = [3, 4];
                System.Linq.Enumerable.from(numbers).last($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f10);
            },
            throwExceptionOnLast2: function () {
                var numbers = [];
                System.Linq.Enumerable.from(numbers).last();
            },
            throwExceptionOnElementAt1: function () {
                var numbers = [3, 4];
                System.Linq.Enumerable.from(numbers).elementAt(3);
            },
            throwExceptionOnElementAt2: function () {
                var numbers = [];
                System.Linq.Enumerable.from(numbers).elementAt(1);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqElementOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqElementOperators, {
        f1: function (p) {
            return p.getID() === 3;
        },
        f2: function (x) {
            return x.getID() === 3;
        },
        f3: function (x) {
            return Bridge.referenceEquals(x.getGroup(), "C");
        },
        f4: function (x) {
            return x.getID() === -1;
        },
        f5: function (x) {
            return Bridge.referenceEquals(x.getName(), "Nemo");
        },
        f6: function (p) {
            return p;
        },
        f7: function (x) {
            return x.getID() === 4;
        },
        f8: function (x) {
            return Bridge.referenceEquals(x.getGroup(), "B");
        },
        f9: function (n) {
            return n > 5;
        },
        f10: function (x) {
            return x === 5;
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqGenerationOperators", {
        statics: {
            test: function () {
                // TEST
                var numbers = (System.Linq.Enumerable.range(0, 6).select($_.Bridge.ClientTest.Linq.TestLinqGenerationOperators.f1)).toArray();
                var numbersExpected = [new $_.$AnonymousType$14(0, false), new $_.$AnonymousType$14(1, true), new $_.$AnonymousType$14(2, false), new $_.$AnonymousType$14(3, true), new $_.$AnonymousType$14(4, false), new $_.$AnonymousType$14(5, true)];

                Bridge.Test.Assert.areDeepEqual$1(numbersExpected, numbers, "Range() 6 items from 0");

                // TEST
                var repeatNumbers = System.Linq.Enumerable.repeat(-3, 4).toArray();
                var repeatNumbersExpected = [-3, -3, -3, -3];

                Bridge.Test.Assert.areDeepEqual$1(repeatNumbersExpected, repeatNumbers, "Repeat() -3 four times");
            }
        }
    });

    Bridge.define("$AnonymousType$14", $_, {
        $kind: "anonymous",
        ctor: function (number, isOdd) {
            this.number = number;
            this.isOdd = isOdd;
        },
        getNumber : function () {
            return this.number;
        },
        getIsOdd : function () {
            return this.isOdd;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$14)) {
                return false;
            }
            return Bridge.equals(this.number, o.number) && Bridge.equals(this.isOdd, o.isOdd);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7192687542, this.number, this.isOdd]);
            return h;
        },
        toJSON: function () {
            return {
                number : this.number,
                isOdd : this.isOdd
            };
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqGenerationOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqGenerationOperators, {
        f1: function (n) {
            return new $_.$AnonymousType$14(n, n % 2 === 1);
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqGroupingOperators", {
        statics: {
            test: function () {
                // TEST
                var numbers = [2, 10, 3, 5, 30, 1, -15];
                var words = ["1.one", "3.three", "2.two", "22.twentytwo", "11.eleven", "30.thirty"];

                var numberGroups = (System.Linq.Enumerable.from(numbers).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f1).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f2)).toArray();

                var numberGroupsExpected = [new $_.$AnonymousType$15(2, [2]), new $_.$AnonymousType$15(0, [10, 5, 30, -15]), new $_.$AnonymousType$15(3, [3]), new $_.$AnonymousType$15(1, [1])];

                Bridge.Test.Assert.areDeepEqual$1(numberGroupsExpected, numberGroups, "Group numbers by remainders");

                // TEST
                var wordGroups = (System.Linq.Enumerable.from(words).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f4)).toArray();

                var wordGroupsExpected = [new $_.$AnonymousType$16(49, ["1.one", "11.eleven"]), new $_.$AnonymousType$16(51, ["3.three", "30.thirty"]), new $_.$AnonymousType$16(50, ["2.two", "22.twentytwo"])];

                Bridge.Test.Assert.areDeepEqual$1(wordGroupsExpected, wordGroups, "Group words by first letters");

                // TEST
                var personGroups = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f5).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f7)).toArray();

                var personGroupsExpected = [new $_.$AnonymousType$17("A", ["Frank"]), new $_.$AnonymousType$17("C", ["Zeppa", "Billy"]), new $_.$AnonymousType$17("B", ["John", "Dora", "Ian", "Mary"]), new $_.$AnonymousType$17(null, ["Nemo"])];

                Bridge.Test.Assert.areDeepEqual$1(personGroupsExpected, personGroups, "Person group by Group field");
            },
            testComplexGrouping: function () {
                // TEST
                var numbers = [2, 10, 3, 5, 30, 1, -15];
                var words = ["1.one", "3.three", "2.two", "22.twentytwo", "11.eleven", "30.thirty"];

                var complexGrouping = (System.Linq.Enumerable.from(numbers).select(function (n) {
                        return { number: n, words: (System.Linq.Enumerable.from(words).where(function (w) {
                                    return Bridge.referenceEquals(String.fromCharCode(w.charCodeAt(0)), n.toString());
                                }).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f10)).toArray() };
                    })).toArray();

                var complexGroupingExpected = Bridge.ClientTest.Linq.TestLinqGroupingOperators.getComplexGroupingExpectedResult();
                Bridge.Test.Assert.areDeepEqual$1(complexGroupingExpected, complexGrouping, "Complex grouping for numbers and words");
            },
            testAnagrams: function () {
                // TEST
                var anagrams = [" from ", " salt ", " earn ", " last ", " near ", " form "];

                var anagramsGroups = System.Linq.Enumerable.from(anagrams).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f11, null, null, new Bridge.ClientTest.Linq.AnagramEqualityComparer()).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f12).toArray();

                var anagramsGroupsExpected = [new $_.$AnonymousType$18("from", [" from ", " form "]), new $_.$AnonymousType$18("salt", [" salt ", " last "]), new $_.$AnonymousType$18("earn", [" earn ", " near "])];

                Bridge.Test.Assert.areDeepEqual$1(anagramsGroupsExpected, anagramsGroups, "Anagram grouping with equality comparer");

                // TEST
                var anagramsGroups1 = System.Linq.Enumerable.from(anagrams).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f11, $_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f13, null, new Bridge.ClientTest.Linq.AnagramEqualityComparer()).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f12).toArray();
                var anagramsGroupsExpected1 = [new $_.$AnonymousType$18("from", [" FROM ", " FORM "]), new $_.$AnonymousType$18("salt", [" SALT ", " LAST "]), new $_.$AnonymousType$18("earn", [" EARN ", " NEAR "])];

                Bridge.Test.Assert.areDeepEqual$1(anagramsGroupsExpected1, anagramsGroups1, "Anagram grouping with equality compare and upper case");
            },
            getComplexGroupingExpectedResult: function () {
                var complexGroupingExpected = [{ number: 2, words: [{ letter: 50, letterGroups: [{ letter: "2.two", letters: ["2.two"] }, { letter: "22.twentytwo", letters: ["22.twentytwo"] }] }] }, { number: 10, words: [] }, { number: 3, words: [{ letter: 51, letterGroups: [{ letter: "3.three", letters: ["3.three"] }, { letter: "30.thirty", letters: ["30.thirty"] }] }] }, { number: 5, words: [] }, { number: 30, words: [] }, { number: 1, words: [{ letter: 49, letterGroups: [{ letter: "1.one", letters: ["1.one"] }, { letter: "11.eleven", letters: ["11.eleven"] }] }] }, { number: -15, words: [] }];

                return complexGroupingExpected;
            }
        }
    });

    Bridge.define("$AnonymousType$15", $_, {
        $kind: "anonymous",
        ctor: function (remainder, numbers) {
            this.remainder = remainder;
            this.numbers = numbers;
        },
        getRemainder : function () {
            return this.remainder;
        },
        getNumbers : function () {
            return this.numbers;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$15)) {
                return false;
            }
            return Bridge.equals(this.remainder, o.remainder) && Bridge.equals(this.numbers, o.numbers);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7209464758, this.remainder, this.numbers]);
            return h;
        },
        toJSON: function () {
            return {
                remainder : this.remainder,
                numbers : this.numbers
            };
        }
    });

    Bridge.define("$AnonymousType$16", $_, {
        $kind: "anonymous",
        ctor: function (firstLetter, words) {
            this.firstLetter = firstLetter;
            this.words = words;
        },
        getFirstLetter : function () {
            return this.firstLetter;
        },
        getWords : function () {
            return this.words;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$16)) {
                return false;
            }
            return Bridge.equals(this.firstLetter, o.firstLetter) && Bridge.equals(this.words, o.words);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7226241974, this.firstLetter, this.words]);
            return h;
        },
        toJSON: function () {
            return {
                firstLetter : this.firstLetter,
                words : this.words
            };
        }
    });

    Bridge.define("$AnonymousType$17", $_, {
        $kind: "anonymous",
        ctor: function (group, persons) {
            this.group = group;
            this.persons = persons;
        },
        getGroup : function () {
            return this.group;
        },
        getPersons : function () {
            return this.persons;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$17)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.persons, o.persons);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7243019190, this.group, this.persons]);
            return h;
        },
        toJSON: function () {
            return {
                group : this.group,
                persons : this.persons
            };
        }
    });

    Bridge.define("$AnonymousType$18", $_, {
        $kind: "anonymous",
        ctor: function (key, words) {
            this.key = key;
            this.words = words;
        },
        getKey : function () {
            return this.key;
        },
        getWords : function () {
            return this.words;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$18)) {
                return false;
            }
            return Bridge.equals(this.key, o.key) && Bridge.equals(this.words, o.words);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7259796406, this.key, this.words]);
            return h;
        },
        toJSON: function () {
            return {
                key : this.key,
                words : this.words
            };
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqGroupingOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators, {
        f1: function (n) {
            return n % 5;
        },
        f2: function (g) {
            return new $_.$AnonymousType$15(g.key(), g.toArray());
        },
        f3: function (w) {
            return w.charCodeAt(0);
        },
        f4: function (g) {
            return new $_.$AnonymousType$16(g.key(), g.toArray());
        },
        f5: function (p) {
            return p.getGroup();
        },
        f6: function (x) {
            return x.getName();
        },
        f7: function (g) {
            return new $_.$AnonymousType$17(g.key(), g.select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f6).toArray());
        },
        f8: function (l) {
            return l;
        },
        f9: function (mg) {
            return { letter: mg.key(), letters: mg.toArray() };
        },
        f10: function (g) {
            return { letter: g.key(), letterGroups: (System.Linq.Enumerable.from(g).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f8, $_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f8).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f9)).toArray() };
        },
        f11: function (w) {
            return w.trim();
        },
        f12: function (x) {
            return new $_.$AnonymousType$18(x.key(), x.toArray());
        },
        f13: function (a) {
            return a.toUpperCase();
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqJoinOperators", {
        statics: {
            test: function () {
                // TEST
                var persons = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).join(Bridge.ClientTest.Utilities.Group.getGroups(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f1, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f3)).toArray();

                var personsExpected = [new $_.$AnonymousType$19("Frank", 1000), new $_.$AnonymousType$19("Zeppa", 800), new $_.$AnonymousType$19("John", 400), new $_.$AnonymousType$19("Billy", 800), new $_.$AnonymousType$19("Dora", 400), new $_.$AnonymousType$19("Ian", 400), new $_.$AnonymousType$19("Mary", 400)];

                Bridge.Test.Assert.areDeepEqual$1(personsExpected, persons, "Join Persons and Groups");

                // TEST
                var personsByLambda = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).join(Bridge.ClientTest.Utilities.Group.getGroups(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f1, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f3).toArray();

                var personsByLambdaExpected = [new $_.$AnonymousType$19("Frank", 1000), new $_.$AnonymousType$19("Zeppa", 800), new $_.$AnonymousType$19("John", 400), new $_.$AnonymousType$19("Billy", 800), new $_.$AnonymousType$19("Dora", 400), new $_.$AnonymousType$19("Ian", 400), new $_.$AnonymousType$19("Mary", 400)];

                Bridge.Test.Assert.areDeepEqual$1(personsByLambdaExpected, personsByLambda, "Join Persons and Groups by lambda");

                // TEST
                var groupJoin = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Group.getGroups()).groupJoin(Bridge.ClientTest.Utilities.Person.getPersons(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f1, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f5)).toArray();

                var groupJoinExpected = [new $_.$AnonymousType$17("A", ["Frank"]), new $_.$AnonymousType$17("B", ["John", "Dora", "Ian", "Mary"]), new $_.$AnonymousType$17("C", ["Zeppa", "Billy"]), new $_.$AnonymousType$17("D", [])];

                Bridge.Test.Assert.areDeepEqual$1(groupJoinExpected, groupJoin, "Grouped join Persons and Groups");

                // TEST
                var groupJoinWithDefault = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Group.getGroups()).groupJoin(Bridge.ClientTest.Utilities.Person.getPersons(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f1, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f6).selectMany($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f7, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f8)).toArray();

                var groupJoinWithDefaultExpected = [new $_.$AnonymousType$21("A", "Frank"), new $_.$AnonymousType$21("B", "John"), new $_.$AnonymousType$21("B", "Dora"), new $_.$AnonymousType$21("B", "Ian"), new $_.$AnonymousType$21("B", "Mary"), new $_.$AnonymousType$21("C", "Zeppa"), new $_.$AnonymousType$21("C", "Billy"), new $_.$AnonymousType$21("D", "")];

                Bridge.Test.Assert.areDeepEqual$1(groupJoinWithDefaultExpected, groupJoinWithDefault, "Grouped join Persons and Groups with DefaultIfEmpty");

                // TEST
                var groupJoinWithDefaultAndComplexEquals = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Group.getGroups()).groupJoin(Bridge.ClientTest.Utilities.Person.getPersons(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f9, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f10, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f6).selectMany($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f11, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f12).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f13).select($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f14)).toArray();

                var groupJoinWithDefaultAndComplexEqualsExpected = [new $_.$AnonymousType$21("C", "Zeppa"), new $_.$AnonymousType$21("B", "Mary"), new $_.$AnonymousType$21("B", "John"), new $_.$AnonymousType$21("B", "Ian"), new $_.$AnonymousType$21("A", "Frank"), new $_.$AnonymousType$21("B", "Dora"), new $_.$AnonymousType$21("C", "Billy"), new $_.$AnonymousType$21("D", null)];

                Bridge.Test.Assert.areDeepEqual$1(groupJoinWithDefaultAndComplexEqualsExpected, groupJoinWithDefaultAndComplexEquals, "Issue #209. Grouped join Persons and Groups with DefaultIfEmpty, complex equals and ordering");
            }
        }
    });

    Bridge.define("$AnonymousType$19", $_, {
        $kind: "anonymous",
        ctor: function (name, limit) {
            this.name = name;
            this.limit = limit;
        },
        getName : function () {
            return this.name;
        },
        getLimit : function () {
            return this.limit;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$19)) {
                return false;
            }
            return Bridge.equals(this.name, o.name) && Bridge.equals(this.limit, o.limit);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7276573622, this.name, this.limit]);
            return h;
        },
        toJSON: function () {
            return {
                name : this.name,
                limit : this.limit
            };
        }
    });

    Bridge.define("$AnonymousType$20", $_, {
        $kind: "anonymous",
        ctor: function (g, pg) {
            this.g = g;
            this.pg = pg;
        },
        getg : function () {
            return this.g;
        },
        getpg : function () {
            return this.pg;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$20)) {
                return false;
            }
            return Bridge.equals(this.g, o.g) && Bridge.equals(this.pg, o.pg);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7125644214, this.g, this.pg]);
            return h;
        },
        toJSON: function () {
            return {
                g : this.g,
                pg : this.pg
            };
        }
    });

    Bridge.define("$AnonymousType$21", $_, {
        $kind: "anonymous",
        ctor: function (groupName, personName) {
            this.groupName = groupName;
            this.personName = personName;
        },
        getGroupName : function () {
            return this.groupName;
        },
        getPersonName : function () {
            return this.personName;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$21)) {
                return false;
            }
            return Bridge.equals(this.groupName, o.groupName) && Bridge.equals(this.personName, o.personName);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7142421430, this.groupName, this.personName]);
            return h;
        },
        toJSON: function () {
            return {
                groupName : this.groupName,
                personName : this.personName
            };
        }
    });

    Bridge.define("$AnonymousType$22", $_, {
        $kind: "anonymous",
        ctor: function (name, digit) {
            this.name = name;
            this.digit = digit;
        },
        getName : function () {
            return this.name;
        },
        getDigit : function () {
            return this.digit;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$22)) {
                return false;
            }
            return Bridge.equals(this.name, o.name) && Bridge.equals(this.digit, o.digit);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7159198646, this.name, this.digit]);
            return h;
        },
        toJSON: function () {
            return {
                name : this.name,
                digit : this.digit
            };
        }
    });

    Bridge.define("$AnonymousType$23", $_, {
        $kind: "anonymous",
        ctor: function (x3, ep) {
            this.x3 = x3;
            this.ep = ep;
        },
        getx3 : function () {
            return this.x3;
        },
        getep : function () {
            return this.ep;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$23)) {
                return false;
            }
            return Bridge.equals(this.x3, o.x3) && Bridge.equals(this.ep, o.ep);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7175975862, this.x3, this.ep]);
            return h;
        },
        toJSON: function () {
            return {
                x3 : this.x3,
                ep : this.ep
            };
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqJoinOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqJoinOperators, {
        f1: function (p) {
            return p.getGroup();
        },
        f2: function (g) {
            return g.getName();
        },
        f3: function (p, g) {
            return new $_.$AnonymousType$19(p.getName(), g.getLimit());
        },
        f4: function (x) {
            return x.getName();
        },
        f5: function (g, pg) {
            return new $_.$AnonymousType$17(g.getName(), System.Linq.Enumerable.from(pg).select($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f4).toArray());
        },
        f6: function (g, pg) {
            return new $_.$AnonymousType$20(g, pg);
        },
        f7: function (x0) {
            return System.Linq.Enumerable.from(x0.pg).defaultIfEmpty(null);
        },
        f8: function (x1, ep) {
            return new $_.$AnonymousType$21(x1.g.getName(), ep != null ? ep.getName() : "");
        },
        f9: function (g) {
            return new $_.$AnonymousType$22(g.getName(), 1);
        },
        f10: function (p) {
            return new $_.$AnonymousType$22(p.getGroup(), 1);
        },
        f11: function (x2) {
            return System.Linq.Enumerable.from(x2.pg).defaultIfEmpty(null);
        },
        f12: function (x3, ep) {
            return new $_.$AnonymousType$23(x3, ep);
        },
        f13: function (x4) {
            return x4.ep != null ? x4.ep.getName() : null;
        },
        f14: function (x5) {
            return new $_.$AnonymousType$21(x5.x3.g != null ? x5.x3.g.getName() : null, x5.ep != null ? x5.ep.getName() : null);
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators", {
        statics: {
            test: function () {
                // TEST
                var numbersA = [4, 1, 3];
                var numbersB = [2, 3, 5];

                var concatNumbers = numbersA.concat(numbersB);
                Bridge.Test.Assert.areDeepEqual$1([4, 1, 3, 2, 3, 5], concatNumbers, "Concat() numbers");

                // TEST
                var names = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators.f1);
                var cities = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators.f2);
                var concatNames = names.concat(cities).toArray();

                Bridge.Test.Assert.areDeepEqual$1(["Frank", "Zeppa", "John", "Billy", "Dora", "Ian", "Mary", "Nemo", "Edmonton", "Tokyo", "Lisbon", "Paris", "Budapest", "Rome", "Dortmund", "Ocean"], concatNames, "Concat() two sequences");

                // TEST
                var a = ["a", "b", "z"];
                var b = ["a", "b", "z"];

                Bridge.Test.Assert.true$1(System.Linq.Enumerable.from(a).sequenceEqual(b), "SequenceEqual() for equal sequences");

                // TEST
                var c = ["a", "b", "z"];
                var d = ["a", "z", "b"];

                Bridge.Test.Assert.true$1(!System.Linq.Enumerable.from(c).sequenceEqual(d), "SequenceEqual() for not equal sequences");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators, {
        f1: function (p) {
            return p.getName();
        },
        f2: function (p) {
            return p.getCity();
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqOrderingOperators", {
        statics: {
            test: function () {
                // TEST
                var words = ["ab2", "ac", "a", "ab12", "", "ab", "bac", "z"];
                var sortedWords = (System.Linq.Enumerable.from(words).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f1)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["", "a", "ab", "ab12", "ab2", "ac", "bac", "z"], sortedWords, "Order by words");

                // TEST
                var sortedWordsByLength = (System.Linq.Enumerable.from(words).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f2)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["", "a", "z", "ac", "ab", "ab2", "bac", "ab12"], sortedWordsByLength, "Order by word length");

                // TEST
                var sortedPersonsByName = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f3)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["Billy", "Dora", "Frank", "Ian", "John", "Mary", "Nemo", "Zeppa"], sortedPersonsByName, "Order by person names");

                // TODO test with System.StringComparison

                // TEST
                var doubles = [1.0, -0.7, 2.1, 0.9, 1.4, 2.9];
                var sortedDoubles = (System.Linq.Enumerable.from(doubles).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f4)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([2.9, 2.1, 1.4, 1.0, 0.9, -0.7], sortedDoubles, "Order by descending double");

                // TEST
                var sortedPersonsByCountDesc = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f5).select($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f5)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([3000, 700, 700, 550, 500, 300, 100, 50], sortedPersonsByCountDesc, "Order by person count descending");

                // TEST
                var sortedWordsByLengthAndLetters = (System.Linq.Enumerable.from(words).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f2).thenBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f1)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["", "a", "z", "ab", "ac", "ab2", "bac", "ab12"], sortedWordsByLengthAndLetters, "Order by word length then by letters");

                // TEST
                var sortedWordsByLengthAndLettersLambda = System.Linq.Enumerable.from(words).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f6).thenByDescending($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f7).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["", "z", "a", "ac", "ab", "bac", "ab2", "ab12"], sortedWordsByLengthAndLettersLambda, "Order by word length then by letters as lambda");

                // TEST
                // var numbers = new[] { 2, 4, 6, 1, 5, 7, 9, 0, 8, 3};
                var numbers = [2, 4, 6, 1, 5];
                var numbersReversed = System.Linq.Enumerable.from(numbers).reverse().toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 1, 6, 4, 2], numbersReversed, "Reverse() numbers");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqOrderingOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators, {
        f1: function (word) {
            return word;
        },
        f2: function (word) {
            return word.length;
        },
        f3: function (p) {
            return p.getName();
        },
        f4: function (d) {
            return d;
        },
        f5: function (p) {
            return p.getCount();
        },
        f6: function (x) {
            return x.length;
        },
        f7: function (x) {
            return x;
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqPartitioningOperators", {
        statics: {
            test: function () {
                // TEST
                var numbers = [1, 3, 5, 7, 9];
                var firstTwo = System.Linq.Enumerable.from(numbers).take(2).toArray();
                Bridge.Test.Assert.areDeepEqual$1([1, 3], firstTwo, "Take() the first two array elements");

                // TEST
                var lastThree = Bridge.Linq.Enumerable.from(numbers).takeFromLast(3).toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 7, 9], lastThree, "TakeFromLast() the last three array elements");

                // TEST
                var exceptTwoLast = Bridge.Linq.Enumerable.from(numbers).takeExceptLast(2).toArray();
                Bridge.Test.Assert.areDeepEqual$1([1, 3, 5], exceptTwoLast, "TakeExceptLast() the first array elements except the last two");

                // TEST
                var takeWhileLessTwo = System.Linq.Enumerable.from(numbers).takeWhile($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators.f1).toArray();
                Bridge.Test.Assert.areDeepEqual$1([1], takeWhileLessTwo, "TakeWhile() less two");

                // TEST
                var takeWhileSome = System.Linq.Enumerable.from(numbers).takeWhile($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators.f2).toArray();
                Bridge.Test.Assert.areDeepEqual$1([1, 3, 5, 7], takeWhileSome, "TakeWhile() by value and index");

                // TEST
                var skipThree = System.Linq.Enumerable.from(numbers).skip(3).toArray();
                Bridge.Test.Assert.areDeepEqual$1([7, 9], skipThree, "Skip() the first three");

                // TEST
                var skipWhileLessNine = System.Linq.Enumerable.from(numbers).skipWhile($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators.f3).toArray();
                Bridge.Test.Assert.areDeepEqual$1([9], skipWhileLessNine, "SkipWhile() less then 9");

                // TEST
                var skipWhileSome = System.Linq.Enumerable.from(numbers).skipWhile($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators.f4).toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 7, 9], skipWhileSome, "SkipWhile() by value and index");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqPartitioningOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators, {
        f1: function (number) {
            return number < 2;
        },
        f2: function (number, index) {
            return ((number - index) | 0) <= 4;
        },
        f3: function (number) {
            return number < 9;
        },
        f4: function (number, index) {
            return number <= 3 && index < 2;
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqProjectionOperators", {
        statics: {
            test: function () {
                // TEST
                var numbers = [1, 3, 5, 7];
                var numberPlusOne = (System.Linq.Enumerable.from(numbers).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f1)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([2, 4, 6, 8], numberPlusOne, "A sequence of ints one higher than the numbers[]");

                // TEST
                var persons = Bridge.ClientTest.Utilities.Person.getPersons();
                var names = (System.Linq.Enumerable.from(persons).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f2)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["Frank", "Zeppa", "John", "Billy", "Dora", "Ian", "Mary", "Nemo"], names, "Selects names as instance field");

                // TEST
                var strings = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];

                var textNumbers = (System.Linq.Enumerable.from(numbers).select(function (n) {
                        return strings[n];
                    })).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["one", "three", "five", "seven"], textNumbers, "Selects names as items of another array");

                // TEST
                var anonimNames = (System.Linq.Enumerable.from(persons).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f3)).toArray();

                var anonimNamesToCompare = [new $_.$AnonymousType$24("Frank"), new $_.$AnonymousType$24("Zeppa"), new $_.$AnonymousType$24("John"), new $_.$AnonymousType$24("Billy"), new $_.$AnonymousType$24("Dora"), new $_.$AnonymousType$24("Ian"), new $_.$AnonymousType$24("Mary"), new $_.$AnonymousType$24("Nemo")];

                Bridge.Test.Assert.areDeepEqual$1(anonimNamesToCompare, anonimNames, "Selects names as an anonymous type");

                // TEST
                numbers = [0, 1, 3, 3];

                var numberssInPlace = System.Linq.Enumerable.from(numbers).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f4).toArray();

                var anonimNumbersToCompare = [new $_.$AnonymousType$25(0, true), new $_.$AnonymousType$25(1, true), new $_.$AnonymousType$25(3, false), new $_.$AnonymousType$25(3, true)];

                Bridge.Test.Assert.areDeepEqual$1(anonimNumbersToCompare, numberssInPlace, "Selects numbers as an anonymous type");

                // TEST
                var numbersA = [1, 5, 2];
                var numbersB = [3, 4, 2];
                var simplePairs = (System.Linq.Enumerable.from(numbersA).selectMany(function (a) {
                        return numbersB;
                    }, $_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f5).where($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f6).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f7)).toArray();

                var expectedSimplePairs = [new $_.$AnonymousType$5(1, 3), new $_.$AnonymousType$5(1, 4), new $_.$AnonymousType$5(1, 2), new $_.$AnonymousType$5(2, 3), new $_.$AnonymousType$5(2, 4)];

                Bridge.Test.Assert.areDeepEqual$1(expectedSimplePairs, simplePairs, "Join two numeric arrays with one where clause");

                // TEST
                numbersA = [1, 5, 2, 4, 3];
                numbersB = [3, 4, 2, 5, 1];

                var pairs = (System.Linq.Enumerable.from(numbersA).where($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f8).selectMany(function (a) {
                    return numbersB;
                }, $_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f5).where($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f9).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f10)).toArray();

                var expectedPairs = [new $_.$AnonymousType$26(8), new $_.$AnonymousType$26(7), new $_.$AnonymousType$26(6), new $_.$AnonymousType$26(3), new $_.$AnonymousType$26(7), new $_.$AnonymousType$26(6), new $_.$AnonymousType$26(5), new $_.$AnonymousType$26(5), new $_.$AnonymousType$26(4)];

                Bridge.Test.Assert.areDeepEqual$1(expectedPairs, pairs, "Join two numeric arrays with two where clauses");

                // TEST
                numbersA = [1, 5, 2, 4, 3];
                numbersB = [3, 4, 2, 5, 1];

                var manyNumbers = System.Linq.Enumerable.from(numbersA).selectMany(function (a, aIndex) {
                        return System.Linq.Enumerable.from(numbersB).where(function (b) {
                                return a === b && b > aIndex;
                            }).select(function (b) {
                            return new $_.$AnonymousType$27(a, b, aIndex);
                        });
                    }).toArray();

                var expectedManyNumbers = [new $_.$AnonymousType$27(1, 1, 0), new $_.$AnonymousType$27(5, 5, 1), new $_.$AnonymousType$27(4, 4, 3)];

                Bridge.Test.Assert.areDeepEqual$1(expectedManyNumbers, manyNumbers, "SelectMany() two number arrays");
            }
        }
    });

    Bridge.define("$AnonymousType$24", $_, {
        $kind: "anonymous",
        ctor: function (name) {
            this.name = name;
        },
        getName : function () {
            return this.name;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$24)) {
                return false;
            }
            return Bridge.equals(this.name, o.name);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7192753078, this.name]);
            return h;
        },
        toJSON: function () {
            return {
                name : this.name
            };
        }
    });

    Bridge.define("$AnonymousType$25", $_, {
        $kind: "anonymous",
        ctor: function (number, isIndex) {
            this.number = number;
            this.isIndex = isIndex;
        },
        getNumber : function () {
            return this.number;
        },
        getIsIndex : function () {
            return this.isIndex;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$25)) {
                return false;
            }
            return Bridge.equals(this.number, o.number) && Bridge.equals(this.isIndex, o.isIndex);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7209530294, this.number, this.isIndex]);
            return h;
        },
        toJSON: function () {
            return {
                number : this.number,
                isIndex : this.isIndex
            };
        }
    });

    Bridge.define("$AnonymousType$26", $_, {
        $kind: "anonymous",
        ctor: function (sum) {
            this.sum = sum;
        },
        getSum : function () {
            return this.sum;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$26)) {
                return false;
            }
            return Bridge.equals(this.sum, o.sum);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7226307510, this.sum]);
            return h;
        },
        toJSON: function () {
            return {
                sum : this.sum
            };
        }
    });

    Bridge.define("$AnonymousType$27", $_, {
        $kind: "anonymous",
        ctor: function (a, b, i) {
            this.a = a;
            this.b = b;
            this.i = i;
        },
        getA : function () {
            return this.a;
        },
        getB : function () {
            return this.b;
        },
        getI : function () {
            return this.i;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$27)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b) && Bridge.equals(this.i, o.i);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7243084726, this.a, this.b, this.i]);
            return h;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b,
                i : this.i
            };
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqProjectionOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators, {
        f1: function (n) {
            return ((n + 1) | 0);
        },
        f2: function (p) {
            return p.getName();
        },
        f3: function (p) {
            return new $_.$AnonymousType$24(p.getName());
        },
        f4: function (n, index) {
            return new $_.$AnonymousType$25(n, n === index);
        },
        f5: function (a, b) {
            return new $_.$AnonymousType$6(a, b);
        },
        f6: function (x0) {
            return x0.a < x0.b;
        },
        f7: function (x1) {
            return new $_.$AnonymousType$5(x1.a, x1.b);
        },
        f8: function (a) {
            return a > 1;
        },
        f9: function (x2) {
            return x2.b < 4 && x2.a > x2.b;
        },
        f10: function (x3) {
            return new $_.$AnonymousType$26(((x3.a + x3.b) | 0));
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqQuantifiers", {
        statics: {
            test: function () {
                // TEST
                var words = ["count", "tree", "mount", "five", "doubt"];
                var anyOu = System.Linq.Enumerable.from(words).any($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f1);
                Bridge.Test.Assert.true$1(anyOu, "Any() to return words containing 'ou'");

                // TEST
                var oddNumbers = [3, 7, 9, 5, 247, 1000001];
                var onlyOdd = System.Linq.Enumerable.from(oddNumbers).all($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f2);
                Bridge.Test.Assert.true$1(onlyOdd, "All() is odd");

                // TEST
                var someNumbers = [2, 3, 7, 9, 5, 247, 1000001];
                var notOnlyOdd = !System.Linq.Enumerable.from(someNumbers).all($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f2);
                Bridge.Test.Assert.true$1(notOnlyOdd, "All() is not only odd");

                // TEST
                var productGroups = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f3).where($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f5).select($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f7)).toArray();

                var productGroupsExpected = [new $_.$AnonymousType$28("C", ["Zeppa", "Billy"]), new $_.$AnonymousType$28("B", ["John", "Dora", "Ian", "Mary"]), new $_.$AnonymousType$28(null, ["Nemo"])];

                Bridge.Test.Assert.areDeepEqual$1(productGroupsExpected, productGroups, "Any() to return a grouped array of names only for groups having any item with Count > 500");
            }
        }
    });

    Bridge.define("$AnonymousType$28", $_, {
        $kind: "anonymous",
        ctor: function (group, names) {
            this.group = group;
            this.names = names;
        },
        getGroup : function () {
            return this.group;
        },
        getNames : function () {
            return this.names;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$28)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.names, o.names);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7259861942, this.group, this.names]);
            return h;
        },
        toJSON: function () {
            return {
                group : this.group,
                names : this.names
            };
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqQuantifiers", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqQuantifiers, {
        f1: function (w) {
            return System.String.contains(w,"ou");
        },
        f2: function (n) {
            return n % 2 === 1;
        },
        f3: function (p) {
            return p.getGroup();
        },
        f4: function (p) {
            return p.getCount() >= 500;
        },
        f5: function (pGroup) {
            return pGroup.any($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f4);
        },
        f6: function (x) {
            return x.getName();
        },
        f7: function (pGroup) {
            return new $_.$AnonymousType$28(pGroup.key(), pGroup.select($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f6).toArray());
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqQueryExecution", {
        statics: {
            test: function () {
                // TEST
                var numbers = [5, 4, 1, 3, 9, 8, 6, 7, 2, 0];
                var i = 0;

                var aQuery = System.Linq.Enumerable.from(numbers).select(function (n) {
                        return ((i = (i + 1) | 0));
                    });
                Bridge.Test.Assert.areEqual$1(0, i, "Query is not executed until you enumerate over them");

                // TEST
                aQuery.toList(System.Int32);
                Bridge.Test.Assert.areEqual$1(10, i, "Query is  executed after you enumerate over them");

                i = 0;

                // TEST
                var bQuery = (System.Linq.Enumerable.from(numbers).select(function (n) {
                        return ((i = (i + 1) | 0));
                    })).max();
                Bridge.Test.Assert.areEqual$1(10, i, "Max() executes immediately");

                // TEST
                var smallNumbers = System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqQueryExecution.f1);
                var smallerEvenNumbers = smallNumbers.where($_.Bridge.ClientTest.Linq.TestLinqQueryExecution.f2);
                Bridge.Test.Assert.areDeepEqual$1([2, 0], smallerEvenNumbers.toArray(), "Query in a query");
                Bridge.Linq.Enumerable.from(numbers).forEach(function (x, index) {
                        numbers[index] = (-numbers[index]) | 0;
                    });
                Bridge.Test.Assert.areDeepEqual$1([-5, -4, -1, -3, -9, -8, -6, -7, -2, 0], System.Linq.Enumerable.from(numbers).toArray(), "ForEach()");

                // TEST
                Bridge.Test.Assert.areDeepEqual$1([-4, -8, -6, -2, 0], smallerEvenNumbers.toArray(), "Second query run on a modified source");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqQueryExecution", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqQueryExecution, {
        f1: function (n) {
            return n <= 3;
        },
        f2: function (n) {
            return n % 2 === 0;
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqRestrictionOperators", {
        statics: {
            test: function () {
                // TEST
                var numbers = [5, 4, 1, 3, 9, 8, 6, 7, 2, 0];
                var filteredNumbers = (System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f1)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 4, 1, 3, 6, 2, 0], filteredNumbers, "Where elements in integer array are below or equal 6");

                // TEST
                var filteredCounts = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f2).select($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f3)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([300, 100, 500, 50], filteredCounts, "Where elements in Person array have Count below 501");

                // TEST
                filteredCounts = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f4).select($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f3)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([300], filteredCounts, "Where elements in Person array have Count below 501 ang in group 'A'");

                // TEST
                var persons = Bridge.ClientTest.Utilities.Person.getPersons();
                var filteredPersonByCounts = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f2)).toArray();

                Bridge.Test.Assert.areDeepEqual$1([persons.getItem(0), persons.getItem(1), persons.getItem(3), persons.getItem(4)], filteredPersonByCounts, "Where elements in Person array have Count below 501. Returns Person instances");

                // TEST
                var filteredPersonByCountAndIndex = System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f5).toArray();

                Bridge.Test.Assert.areDeepEqual$1([persons.getItem(4)], filteredPersonByCountAndIndex, "Where elements in Person array have Count meet condition (p.Count < index * 100). Returns Person instances");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqRestrictionOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators, {
        f1: function (n) {
            return n <= 6;
        },
        f2: function (p) {
            return p.getCount() < 501;
        },
        f3: function (p) {
            return p.getCount();
        },
        f4: function (p) {
            return p.getCount() < 501 && Bridge.referenceEquals(p.getGroup(), "A");
        },
        f5: function (p, index) {
            return p.getCount() < ((index * 100) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Linq.TestLinqSetOperators", {
        statics: {
            test: function () {
                // TEST
                var a = [1, 2];
                var b = [1, 2];

                var result = System.Linq.Enumerable.from(a).intersect(b).toArray();

                // TEST
                var numbers = [1, 2, 3, 3, 1, 5, 4, 2, 3];

                var uniqueNumbers = System.Linq.Enumerable.from(numbers).distinct().toArray();
                Bridge.Test.Assert.areDeepEqual$1([1, 2, 3, 5, 4], uniqueNumbers, "Distinct() to remove duplicate elements");

                // TEST
                var distinctPersonGroups = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f1)).distinct().toArray();
                Bridge.Test.Assert.areDeepEqual$1(["A", "C", "B", null], distinctPersonGroups, "Distinct() to remove duplicate Group elements");

                // TEST
                var numbersA = [0, 2, 4, 5, 6, 8, 9];
                var numbersB = [1, 3, 5, 7, 8];

                var uniqueNumbersAB = System.Linq.Enumerable.from(numbersA).union(numbersB).toArray();
                Bridge.Test.Assert.areDeepEqual$1([0, 2, 4, 5, 6, 8, 9, 1, 3, 7], uniqueNumbersAB, "Union() to get unique number sequence");

                // TEST
                var nameChars = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f2);
                var cityChars = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f3);
                var uniqueFirstChars = nameChars.union(cityChars).toArray();

                Bridge.Test.Assert.areDeepEqual$1([70, 90, 74, 66, 68, 73, 77, 78, 69, 84, 76, 80, 82, 79], uniqueFirstChars, "Union to get unique first letters of Name and City");

                // TEST
                var commonNumbersCD = System.Linq.Enumerable.from(numbersA).intersect(numbersB).toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 8], commonNumbersCD, "Intersect() to get common number sequence");

                // TEST
                nameChars = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f2);
                cityChars = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f3);

                var commonFirstChars = System.Linq.Enumerable.from(nameChars).intersect(cityChars).toArray();
                Bridge.Test.Assert.areDeepEqual$1([66, 68], commonFirstChars, "Intersect() to get common first letters of Name and City");

                // TEST
                var exceptNumbersCD = System.Linq.Enumerable.from(numbersA).except(numbersB).toArray();
                Bridge.Test.Assert.areDeepEqual$1([0, 2, 4, 6, 9], exceptNumbersCD, "Except() to get numbers from first sequence and does not contain the second sequence numbers");

                // TEST
                var exceptFirstChars = nameChars.except(cityChars).toArray();
                Bridge.Test.Assert.areDeepEqual$1([70, 90, 74, 73, 77, 78], exceptFirstChars, "Except() to get letters from Name sequence and does not contain City letters");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Linq.TestLinqSetOperators", $_);

    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqSetOperators, {
        f1: function (p) {
            return p.getGroup();
        },
        f2: function (p) {
            return p.getName().charCodeAt(0);
        },
        f3: function (p) {
            return p.getCity().charCodeAt(0);
        }
    });

    Bridge.define("Bridge.ClientTest.MathTests", {
        assertAlmostEqual: function (d1, d2) {
            var diff = d2 - d1;
            if (diff < 0) {
                diff = -diff;
            }
            Bridge.Test.Assert.true(diff < 1E-08);
        },
        assertIsDecimalAndEqualTo: function (v, d, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Decimal), message);
            Bridge.Test.Assert.areStrictEqual$1(d.toString(), v.toString(), message);
        },
        assertIsDoubleAndEqualTo: function (v, d, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Double), message);
            Bridge.Test.Assert.areStrictEqual$1(d.toString(), v.toString(), message);
        },
        constantsWork: function () {
            this.assertAlmostEqual(Math.E, 2.7182818284590451);
            this.assertAlmostEqual(Math.LN2, 0.69314718055994529);
            this.assertAlmostEqual(Math.LN10, 2.3025850929940459);
            this.assertAlmostEqual(Math.LOG2E, 1.4426950408889634);
            this.assertAlmostEqual(Math.LOG10E, 0.43429448190325182);
            this.assertAlmostEqual(Math.PI, 3.1415926535897931);
            this.assertAlmostEqual(Math.SQRT1_2, 0.70710678118654757);
            this.assertAlmostEqual(Math.SQRT2, 1.4142135623730951);
        },
        absOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(12.5, Math.abs(-12.5));
        },
        absOfIntWorks: function () {
            Bridge.Test.Assert.areEqual(12, Math.abs(-12));
        },
        absOfLongWorks: function () {
            Bridge.Test.Assert.areEqual(System.Int64(12), System.Int64(-12).abs());
        },
        absOfSbyteWorks: function () {
            Bridge.Test.Assert.areEqual(15, Math.abs(-15));
        },
        absOfShortWorks: function () {
            Bridge.Test.Assert.areEqual(15, Math.abs(-15));
        },
        absOfFloatWorks: function () {
            Bridge.Test.Assert.areEqual(17.5, Math.abs(-17.5));
        },
        absOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(-10.0).abs(), 10.0);
        },
        acosWorks: function () {
            this.assertAlmostEqual(Math.acos(0.5), 1.0471975511965979);
        },
        asinWorks: function () {
            this.assertAlmostEqual(Math.asin(0.5), 0.52359877559829893);
        },
        atanWorks: function () {
            this.assertAlmostEqual(Math.atan(0.5), 0.46364760900080609);
        },
        atan2Works: function () {
            this.assertAlmostEqual(Math.atan2(1, 2), 0.46364760900080609);
        },
        cosWorks: function () {
            this.assertAlmostEqual(Math.cos(0.5), 0.87758256189037276);
        },
        divRemWorks: function () {
            var resultInt = { };

            Bridge.Math.divRem(1, 2, resultInt);
            Bridge.Test.Assert.areEqual(1, resultInt.v);

            Bridge.Math.divRem(234, 157, resultInt);
            Bridge.Test.Assert.areEqual(77, resultInt.v);

            Bridge.Math.divRem(0, 20, resultInt);
            Bridge.Test.Assert.areEqual(0, resultInt.v);

            var resultLong = { };

            System.Int64.divRem(System.Int64(2), System.Int64(4), resultLong);
            Bridge.Test.Assert.true(System.Int64(2).equals(resultLong.v));

            System.Int64.divRem(System.Int64(2341), System.Int64(157), resultLong);
            Bridge.Test.Assert.true(System.Int64(143).equals(resultLong.v));
        },
        expWorks: function () {
            this.assertAlmostEqual(Math.exp(0.5), 1.6487212707001282);
        },
        floorOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.floor(3.6));
            Bridge.Test.Assert.areEqual(-4.0, Math.floor(-3.6));
        },
        floorOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.6).floor(), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal(-3.6).floor(), -4.0);
        },
        logWorks: function () {
            this.assertAlmostEqual(Math.log(0.5), -0.69314718055994529);
        },
        maxOfByteWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(5.0, Math.max(5, 3));
        },
        maxOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.max(System.Decimal(-14.5), System.Decimal(3.0)), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.max(System.Decimal(5.4), System.Decimal(3.0)), 5.4);
        },
        maxOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.max(1.0, 3.0));
            Bridge.Test.Assert.areEqual(4.0, Math.max(4.0, 3.0));
        },
        maxOfShortWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(4, Math.max(4, 3));
        },
        maxOfIntWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(4, Math.max(4, 3));
        },
        maxOfLongWorks: function () {
            Bridge.Test.Assert.areEqual(System.Int64(3), System.Int64.max(System.Int64(1), System.Int64(3)));
            Bridge.Test.Assert.areEqual(System.Int64(4), System.Int64.max(System.Int64(4), System.Int64(3)));
        },
        maxOfSByteWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(-1, 3));
            Bridge.Test.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfFloatWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.max(-14.5, 3.0));
            Bridge.Test.Assert.areEqual(5.4, Math.max(5.4, 3.0));
        },
        maxOfUShortWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfUIntWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfULongWorks: function () {
            Bridge.Test.Assert.true(System.UInt64(300).equals(System.UInt64.max(System.UInt64(100), System.UInt64(300))));
            Bridge.Test.Assert.true(System.UInt64(500).equals(System.UInt64.max(System.UInt64(500), System.UInt64(300))));
        },
        minOfByteWorks: function () {
            Bridge.Test.Assert.areEqual(1.0, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3.0, Math.min(5, 3));
        },
        minOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.min(System.Decimal(-14.5), System.Decimal(3.0)), -14.5);
            this.assertIsDecimalAndEqualTo(System.Decimal.min(System.Decimal(5.4), System.Decimal(3.0)), 3.0);
        },
        minOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(1.0, Math.min(1.0, 3.0));
            Bridge.Test.Assert.areEqual(3.0, Math.min(4.0, 3.0));
        },
        minOfShortWorks: function () {
            Bridge.Test.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(4, 3));
        },
        minOfIntWorks: function () {
            Bridge.Test.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(4, 3));
        },
        minOfLongWorks: function () {
            Bridge.Test.Assert.true(System.Int64(1).equals(System.Int64.min(System.Int64(1), System.Int64(3))));
            Bridge.Test.Assert.true(System.Int64(3).equals(System.Int64.min(System.Int64(4), System.Int64(3))));
        },
        minOfSByteWorks: function () {
            Bridge.Test.Assert.areEqual(-1, Math.min(-1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfFloatWorks: function () {
            Bridge.Test.Assert.areEqual(-14.5, Math.min(-14.5, 3.0));
            Bridge.Test.Assert.areEqual(3.0, Math.min(5.4, 3.0));
        },
        minOfUShortWorks: function () {
            Bridge.Test.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfUIntWorks: function () {
            Bridge.Test.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfULongWorks: function () {
            Bridge.Test.Assert.true(System.UInt64(100).equals(System.UInt64.min(System.UInt64(100), System.UInt64(300))));
            Bridge.Test.Assert.true(System.UInt64(300).equals(System.UInt64.min(System.UInt64(500), System.UInt64(300))));
        },
        powWorks: function () {
            this.assertAlmostEqual(Math.pow(3, 0.5), 1.7320508075688772);

            this.assertAlmostEqual(Math.pow(3, 2), 9);
            this.assertAlmostEqual(Math.pow(2, 3), 8);
        },
        randomWorks: function () {
            for (var i = 0; i < 5; i = (i + 1) | 0) {
                var d = Math.random();
                Bridge.Test.Assert.true(d >= 0);
                Bridge.Test.Assert.true(d < 1);
            }
        },
        roundOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Bridge.Math.round(3.432, 0, 6));
            Bridge.Test.Assert.areEqual(4.0, Bridge.Math.round(3.6, 0, 6));
            Bridge.Test.Assert.areEqual(4.0, Bridge.Math.round(3.5, 0, 6));
            Bridge.Test.Assert.areEqual(4.0, Bridge.Math.round(4.5, 0, 6));
            Bridge.Test.Assert.areEqual(-4.0, Bridge.Math.round(-3.5, 0, 6));
            Bridge.Test.Assert.areEqual(-4.0, Bridge.Math.round(-4.5, 0, 6));
        },
        roundDecimalWithModeWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 6), 4, "3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 6), 4, "3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3, "3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 6), -3, "-3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 6), -4, "-3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 6), -4, "-3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 0), 4, "Up 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 0), 4, "Up 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 0), 4, "Up 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 0), -4, "Up -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 0), -4, "Up -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 0), -4, "Up -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 1), 3, "Down 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 1), 3, "Down 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 1), 3, "Down 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 1), -3, "Down -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 1), -3, "Down -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 1), -3, "Down -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 2), 4, "InfinityPos 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 2), 4, "InfinityPos 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 2), 4, "InfinityPos 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 2), -3, "InfinityPos -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 2), -3, "InfinityPos -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 2), -3, "InfinityPos -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 3), 3, "InfinityNeg 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 3), 3, "InfinityNeg 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 3), 3, "InfinityNeg 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 3), -4, "InfinityNeg -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 3), -4, "InfinityNeg -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 3), -4, "InfinityNeg -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 5), 4, "TowardsZero 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 5), 3, "TowardsZero 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 5), 3, "TowardsZero 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 5), -3, "TowardsZero -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 5), -3, "TowardsZero -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 5), -4, "TowardsZero -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 4), 4, "AwayFromZero 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 4), 4, "AwayFromZero 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 4), 3, "AwayFromZero 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 4), -3, "AwayFromZero -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 4), -4, "AwayFromZero -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 4), -4, "AwayFromZero -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 7), 4, "Ceil 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 7), 4, "Ceil 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 7), 3, "Ceil 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 7), -3, "Ceil -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 7), -3, "Ceil -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 7), -4, "Ceil -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 8), 4, "Floor 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 8), 3, "Floor 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 8), 3, "Floor 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 8), -3, "Floor -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 8), -4, "Floor -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 8), -4, "Floor -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 6), 4, "ToEven 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 6), 4, "ToEven 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3, "ToEven 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 6), -3, "ToEven -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 6), -4, "ToEven -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 6), -4, "ToEven -3.8m");
        },
        roundDecimalWithPrecisionAndModeWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 6), System.Decimal(1.4), "Bridge584 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 6), System.Decimal(1.6), "Bridge584 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 6), System.Decimal(123.4568), "Bridge584 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 6), System.Decimal(123.456789), "Bridge584 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 6), System.Decimal(123.456789), "Bridge584 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 6), System.Decimal(-123.0), "Bridge584 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 0), 1.5, "Bridge584 Up 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 0), 1.6, "Bridge584 Up 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 0), 123.4568, "Bridge584 Up 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 0), 123.456789, "Bridge584 Up 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 0), 123.456789, "Bridge584 Up 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 0), -124.0, "Bridge584 Up 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 4), 1.5, "Bridge584 AwayFromZero 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 4), 1.6, "Bridge584 AwayFromZero 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 4), 123.4568, "Bridge584 AwayFromZero 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 4), 123.456789, "Bridge584 AwayFromZero 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 4), 123.456789, "Bridge584 AwayFromZero 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 4), -123.0, "Bridge584 AwayFromZero 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 1), 1.4, "Bridge584 Down 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 1), 1.5, "Bridge584 Down 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 1), 123.4567, "Bridge584 Down 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 1), 123.456789, "Bridge584 Down 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 1), 123.456789, "Bridge584 Down 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 1), -123.0, "Bridge584 Down 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 2), 1.5, "Bridge584 InfinityPos 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 2), 1.6, "Bridge584 InfinityPos 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 2), 123.4568, "Bridge584 InfinityPos 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 2), 123.456789, "Bridge584 InfinityPos 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 2), 123.456789, "Bridge584 InfinityPos 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 2), -123.0, "Bridge584 InfinityPos 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 3), 1.4, "Bridge584 InfinityNeg 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 3), 1.5, "Bridge584 InfinityNeg 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 3), 123.4567, "Bridge584 InfinityNeg 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 3), 123.456789, "Bridge584 InfinityNeg 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 3), 123.456789, "Bridge584 InfinityNeg 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 3), -124.0, "Bridge584 InfinityNeg 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 5), 1.4, "Bridge584 TowardsZero 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 5), 1.5, "Bridge584 TowardsZero 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 5), 123.4568, "Bridge584 TowardsZero 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 5), 123.456789, "Bridge584 TowardsZero 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 5), 123.456789, "Bridge584 TowardsZero 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 5), -123.0, "Bridge584 TowardsZero 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 6), 1.4, "Bridge584 ToEven 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 6), 1.6, "Bridge584 ToEven 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 6), 123.4568, "Bridge584 ToEven 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 6), 123.456789, "Bridge584 ToEven 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 6), 123.456789, "Bridge584 ToEven 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 6), -123.0, "Bridge584 ToEven 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 7), 1.5, "Bridge584 Ceil 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 7), 1.6, "Bridge584 Ceil 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 7), 123.4568, "Bridge584 Ceil 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 7), 123.456789, "Bridge584 Ceil 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 7), 123.456789, "Bridge584 Ceil 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 7), -123.0, "Bridge584 Ceil 6");

            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 8), 1.4, "Bridge584 Floor 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 8), 1.5, "Bridge584 Floor 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 8), 123.4568, "Bridge584 Floor 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 8), 123.456789, "Bridge584 Floor 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 8), 123.456789, "Bridge584 Floor 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 8), -123.0, "Bridge584 Floor 6");
        },
        roundDoubleWithModeWorks: function () {
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.8, 0, 6), 4, "3.8");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.5, 0, 6), 4, "3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.2, 0, 6), 3, "3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.2, 0, 6), -3, "-3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.5, 0, 6), -4, "-3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.8, 0, 6), -4, "-3.8");

            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.Up), 4, "Up 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.Up), 4, "Up 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.Up), 4, "Up 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.Up), -4, "Up -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.Up), -4, "Up -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.Up), -4, "Up -3.8");

            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.Down), 3, "Down 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.Down), 3, "Down 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.Down), 3, "Down 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.Down), -3, "Down -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.Down), -3, "Down -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.Down), -3, "Down -3.8");

            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.InfinityPos), 4, "InfinityPos 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.InfinityPos), 4, "InfinityPos 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.InfinityPos), 4, "InfinityPos 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.InfinityPos), -3, "InfinityPos -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.InfinityPos), -3, "InfinityPos -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.InfinityPos), -3, "InfinityPos -3.8");

            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.InfinityNeg), 3, "InfinityNeg 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.InfinityNeg), 3, "InfinityNeg 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.InfinityNeg), 3, "InfinityNeg 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.InfinityNeg), -4, "InfinityNeg -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.InfinityNeg), -4, "InfinityNeg -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.InfinityNeg), -4, "InfinityNeg -3.8");

            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.TowardsZero), 4, "TowardsZero 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.TowardsZero), 3, "TowardsZero 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.TowardsZero), 3, "TowardsZero 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.TowardsZero), -3, "TowardsZero -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.TowardsZero), -3, "TowardsZero -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.TowardsZero), -4, "TowardsZero -3.8");

            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.8, 0, 4), 4, "AwayFromZero 3.8");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.5, 0, 4), 4, "AwayFromZero 3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.2, 0, 4), 3, "AwayFromZero 3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.2, 0, 4), -3, "AwayFromZero -3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.5, 0, 4), -4, "AwayFromZero -3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.8, 0, 4), -4, "AwayFromZero -3.8");

            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.Ceil), 4, "Ceil 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.Ceil), 4, "Ceil 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.Ceil), 3, "Ceil 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.Ceil), -3, "Ceil -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.Ceil), -3, "Ceil -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.Ceil), -4, "Ceil -3.8");

            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.Floor), 4, "Floor 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.Floor), 3, "Floor 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.Floor), 3, "Floor 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.Floor), -3, "Floor -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.Floor), -4, "Floor -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.Floor), -4, "Floor -3.8");

            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.8, 0, 6), 4, "ToEven 3.8");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.5, 0, 6), 4, "ToEven 3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.2, 0, 6), 3, "ToEven 3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.2, 0, 6), -3, "ToEven -3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.5, 0, 6), -4, "ToEven -3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.8, 0, 6), -4, "ToEven -3.8");
        },
        roundDoubleWithPrecisionAndModeWorks: function () {
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.45, 1, 6), 1.4, "Bridge584 1");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.55, 1, 6), 1.6, "Bridge584 2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 4, 6), 123.4568, "Bridge584 3");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 6, 6), 123.456789, "Bridge584 4");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 8, 6), 123.456789, "Bridge584 5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-123.456, 0, 6), -123, "Bridge584 6");

            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.Up), 1.5, "Bridge584 Up 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.Up), 1.6, "Bridge584 Up 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.Up), 123.4568, "Bridge584 Up 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.Up), 123.456789, "Bridge584 Up 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.Up), 123.456789, "Bridge584 Up 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.Up), -124.0, "Bridge584 Up 6");

            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.45, 1, 4), 1.5, "Bridge584 AwayFromZero 1");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.55, 1, 4), 1.6, "Bridge584 AwayFromZero 2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 4, 4), 123.4568, "Bridge584 AwayFromZero 3");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 6, 4), 123.456789, "Bridge584 AwayFromZero 4");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 8, 4), 123.456789, "Bridge584 AwayFromZero 5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-123.456, 0, 4), -123.0, "Bridge584 AwayFromZero 6");

            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.Down), 1.4, "Bridge584 Down 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.Down), 1.5, "Bridge584 Down 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.Down), 123.4567, "Bridge584 Down 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.Down), 123.456789, "Bridge584 Down 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.Down), 123.456789, "Bridge584 Down 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.Down), -123.0, "Bridge584 Down 6");

            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.InfinityPos), 1.5, "Bridge584 InfinityPos 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.InfinityPos), 1.6, "Bridge584 InfinityPos 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.InfinityPos), 123.4568, "Bridge584 InfinityPos 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.InfinityPos), 123.456789, "Bridge584 InfinityPos 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.InfinityPos), 123.456789, "Bridge584 InfinityPos 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.InfinityPos), -123.0, "Bridge584 InfinityPos 6");

            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.InfinityNeg), 1.4, "Bridge584 InfinityNeg 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.InfinityNeg), 1.5, "Bridge584 InfinityNeg 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.InfinityNeg), 123.4567, "Bridge584 InfinityNeg 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.InfinityNeg), 123.456789, "Bridge584 InfinityNeg 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.InfinityNeg), 123.456789, "Bridge584 InfinityNeg 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.InfinityNeg), -124.0, "Bridge584 InfinityNeg 6");

            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.TowardsZero), 1.4, "Bridge584 TowardsZero 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.TowardsZero), 1.5, "Bridge584 TowardsZero 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.TowardsZero), 123.4568, "Bridge584 TowardsZero 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.TowardsZero), 123.456789, "Bridge584 TowardsZero 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.TowardsZero), 123.456789, "Bridge584 TowardsZero 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.TowardsZero), -123.0, "Bridge584 TowardsZero 6");

            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.45, 1, 6), 1.4, "Bridge584 ToEven 1");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.55, 1, 6), 1.6, "Bridge584 ToEven 2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 4, 6), 123.4568, "Bridge584 ToEven 3");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 6, 6), 123.456789, "Bridge584 ToEven 4");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 8, 6), 123.456789, "Bridge584 ToEven 5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-123.456, 0, 6), -123.0, "Bridge584 ToEven 6");

            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.Ceil), 1.5, "Bridge584 Ceil 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.Ceil), 1.6, "Bridge584 Ceil 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.Ceil), 123.4568, "Bridge584 Ceil 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.Ceil), 123.456789, "Bridge584 Ceil 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.Ceil), 123.456789, "Bridge584 Ceil 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.Ceil), -123.0, "Bridge584 Ceil 6");

            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.Floor), 1.4, "Bridge584 Floor 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.Floor), 1.5, "Bridge584 Floor 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.Floor), 123.4568, "Bridge584 Floor 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.Floor), 123.456789, "Bridge584 Floor 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.Floor), 123.456789, "Bridge584 Floor 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.Floor), -123.0, "Bridge584 Floor 6");
        },
        jsRoundWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.round(3.432));
            Bridge.Test.Assert.areEqual(4.0, Math.round(3.6));
            Bridge.Test.Assert.areEqual(4.0, Math.round(3.5));
            Bridge.Test.Assert.areEqual(5.0, Math.round(4.5));
            Bridge.Test.Assert.areEqual(-3.0, Math.round(-3.5));
            Bridge.Test.Assert.areEqual(-4.0, Math.round(-4.5));
        },
        iEEERemainderWorks: function () {
            this.assertAlmostEqual(3.1 - (4.0 * Math.round(3.1 / 4.0)), -0.9);
            this.assertAlmostEqual(16.1 - (4.0 * Math.round(16.1 / 4.0)), 0.100000000000001);
            this.assertAlmostEqual(4.0 - (16.1 * Math.round(4.0 / 16.1)), 4.0);
            this.assertAlmostEqual(3.1 - (3.2 * Math.round(3.1 / 3.2)), -0.1);
            this.assertAlmostEqual(3.2 - (3.1 * Math.round(3.2 / 3.1)), 0.1);
        },
        sinWorks: function () {
            this.assertAlmostEqual(Math.sin(0.5), 0.479425538604203);
        },
        sqrtWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).sqrt(), "1.7320508075688772935274463415");
        },
        tanWorks: function () {
            this.assertAlmostEqual(Math.tan(0.5), 0.54630248984379048);
        }
    });

    Bridge.define("Bridge.ClientTest.MixinTests", {
        testGlobalMethods: function () {
            Bridge.Test.Assert.true(Bridge.global.isNaN("a"));
            Bridge.Test.Assert.false(Bridge.global.isNaN(3));
        },
        testMixin: function () {
            Bridge.Test.Assert.areEqual(3, System.Byte.parse("3"));
        }
    });

    Bridge.define("Bridge.ClientTest.MultidimArrayTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("Array", Bridge.Reflection.getTypeFullName(Array), "FullName should be Array");
            var arr = System.Array.create(0, null, 1, 1);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Array), "is Array should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Array), "is int[,] should be true");
        },
        lengthWorks: function () {
            var arr = System.Array.create(0, null, 3, 2);
            Bridge.Test.Assert.areEqual(arr.length, 6);
        },
        getValueWorksForUninitializedElement: function () {
            var arr = System.Array.create(0, null, 2, 2);
            Bridge.Test.Assert.areStrictEqual(0, System.Array.get(arr, 0, 0));
        },
        getValueByIndexWorksForUninitializedElement: function () {
            var arr = System.Array.create(0, null, 2, 2);
            Bridge.Test.Assert.areStrictEqual(0, arr.get([0, 0]));
        },
        settingValueByIndexWorks: function () {
            var arr = System.Array.create(null, null, 3, 2);
            arr.set([0, 0], "a");
            arr.set([0, 1], "b");
            arr.set([1, 0], "c");
            arr.set([1, 1], "d");
            arr.set([2, 0], "e");
            arr.set([2, 1], "f");
            Bridge.Test.Assert.areEqual("a", arr.get([0, 0]));
            Bridge.Test.Assert.areEqual("b", arr.get([0, 1]));
            Bridge.Test.Assert.areEqual("c", arr.get([1, 0]));
            Bridge.Test.Assert.areEqual("d", arr.get([1, 1]));
            Bridge.Test.Assert.areEqual("e", arr.get([2, 0]));
            Bridge.Test.Assert.areEqual("f", arr.get([2, 1]));
        },
        setValueWorks: function () {
            var arr = System.Array.create(null, null, 3, 2);
            System.Array.set(arr, "a", 0, 0);
            System.Array.set(arr, "b", 0, 1);
            System.Array.set(arr, "c", 1, 0);
            System.Array.set(arr, "d", 1, 1);
            System.Array.set(arr, "e", 2, 0);
            System.Array.set(arr, "f", 2, 1);
            Bridge.Test.Assert.areEqual("a", arr.get([0, 0]));
            Bridge.Test.Assert.areEqual("b", arr.get([0, 1]));
            Bridge.Test.Assert.areEqual("c", arr.get([1, 0]));
            Bridge.Test.Assert.areEqual("d", arr.get([1, 1]));
            Bridge.Test.Assert.areEqual("e", arr.get([2, 0]));
            Bridge.Test.Assert.areEqual("f", arr.get([2, 1]));
        },
        setUpArray: function (values) {
            if (values === void 0) { values = []; }
            var arr = System.Array.create(0, null, values.length, 2);

            for (var i = 0; i < values.length; i = (i + 1) | 0) {
                var v = Bridge.as(values[i], Array);
                System.Array.set(arr, v[0], i, 0);
                System.Array.set(arr, v[1], i, 1);
            }

            return arr;
        },
        getValueWorks: function () {
            var arr = this.setUpArray([[1, 2], [3, 4], [5, 6]]);
            Bridge.Test.Assert.areEqual(1, System.Array.get(arr, 0, 0));
            Bridge.Test.Assert.areEqual(2, System.Array.get(arr, 0, 1));
            Bridge.Test.Assert.areEqual(3, System.Array.get(arr, 1, 0));
            Bridge.Test.Assert.areEqual(4, System.Array.get(arr, 1, 1));
            Bridge.Test.Assert.areEqual(5, System.Array.get(arr, 2, 0));
            Bridge.Test.Assert.areEqual(6, System.Array.get(arr, 2, 1));
        },
        gettingValueByIndexWorks: function () {
            var arr = this.setUpArray([[1, 2], [3, 4], [5, 6]]);
            Bridge.Test.Assert.areEqual(1, arr.get([0, 0]));
            Bridge.Test.Assert.areEqual(2, arr.get([0, 1]));
            Bridge.Test.Assert.areEqual(3, arr.get([1, 0]));
            Bridge.Test.Assert.areEqual(4, arr.get([1, 1]));
            Bridge.Test.Assert.areEqual(5, arr.get([2, 0]));
            Bridge.Test.Assert.areEqual(6, arr.get([2, 1]));
        },
        getLengthWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], 4, 3, 2);
            Bridge.Test.Assert.areEqual(System.Array.getLength(arr, 0), 4);
            Bridge.Test.Assert.areEqual(System.Array.getLength(arr, 1), 3);
            Bridge.Test.Assert.areEqual(System.Array.getLength(arr, 2), 2);
        },
        getLowerBoundWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], 4, 3, 2);
            Bridge.Test.Assert.areEqual(System.Array.getLower(arr, 0), 0);
            Bridge.Test.Assert.areEqual(System.Array.getLower(arr, 1), 0);
            Bridge.Test.Assert.areEqual(System.Array.getLower(arr, 2), 0);
        },
        getUpperBoundWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], 4, 3, 2);
            Bridge.Test.Assert.areEqual((System.Array.getLength(arr, 0) - 1), 3);
            Bridge.Test.Assert.areEqual((System.Array.getLength(arr, 1) - 1), 2);
            Bridge.Test.Assert.areEqual((System.Array.getLength(arr, 2) - 1), 1);
        },
        foreachWorks: function () {
            var $t;
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], 4, 3, 2);
            var actual = new (System.Collections.Generic.List$1(System.Int32))();
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                actual.add(i);
            }
            Bridge.Test.Assert.areEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], actual.toArray());
        },
        rankWorks: function () {
            Bridge.Test.Assert.areEqual(2, System.Array.getRank(System.Array.create(0, null, 0, 0)));
            Bridge.Test.Assert.areEqual(3, System.Array.getRank(System.Array.create(0, null, 0, 0, 0)));
        },
        getValueWithIndexOutOfRangeThrowsAnException: function () {
            var arr = System.Array.create(0, null, 2, 3, 4);
            var i = arr.get([1, 2, 3]);
            Bridge.Test.Assert.throws(function () {
                i = arr.get([2, 2, 1]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([1, 3, 1]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([1, 2, 4]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([-1, 0, 0]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([0, -1, 0]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([0, 0, -1]);
            });
        },
        setValueWithIndexOutOfRangeThrowsAnException: function () {
            var arr = System.Array.create(0, null, 2, 3, 4);
            arr.set([1, 2, 3], 0);
            Bridge.Test.Assert.throws(function () {
                arr.set([2, 2, 1], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([1, 3, 1], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([1, 2, 4], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([-1, 0, 0], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([0, -1, 0], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([0, 0, -1], 0);
            });
        }
    });

    Bridge.define("Bridge.ClientTest.MutationObserverTests", {
        statics: {
            TARGET: "qunit-fixture",
            ATTRIBUTE: "SPAN",
            TYPE: "childList"
        },
        config: {
            properties: {
                Records: null
            }
        },
        testNewlyAttachedElements: function () {
            this.setRecords(null);

            var done = Bridge.Test.Assert.async();

            var root = document.getElementById(Bridge.ClientTest.MutationObserverTests.TARGET);

            //setup observer
            var observer = new MutationObserver(Bridge.fn.bind(this, $_.Bridge.ClientTest.MutationObserverTests.f1));

            observer.observe(root, Bridge.merge(new Object(), {
                subtree: true,
                childList: true
            } ));

            var task = new System.Threading.Tasks.Task(function () {
                // mutate DOM
                // observer will be invoked asynchronously
                root.appendChild(document.createElement('span'));
            });

            var task1 = task.continueWith($_.Bridge.ClientTest.MutationObserverTests.f2);

            task1.continueWith(Bridge.fn.bind(this, function (x) {
                try {
                    this.assertRecords(this.getRecords());
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.Console.log(ex.toString());
                }

                observer.disconnect();

                done();
            }));

            task.start();
        },
        assertRecords: function (records) {
            Bridge.Test.Assert.notNull$1(records, "records");
            Bridge.Test.Assert.areEqual$1(1, records.length, "records.Length");

            var record = records[0];

            Bridge.Test.Assert.notNull$1(record, "record");

            Bridge.Test.Assert.notNull$1(record.target, "Target");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.MutationObserverTests.TARGET, record.target.id, "Target Id");

            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.MutationObserverTests.TYPE, record.type, "Type");

            Bridge.Test.Assert.areEqual$1(0, record.removedNodes.length, "RemovedNodes");
            Bridge.Test.Assert.areEqual$1(1, record.addedNodes.length, "AddedNodes");

            var added = record.addedNodes[0];
            Bridge.Test.Assert.notNull$1(added, "added");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.MutationObserverTests.ATTRIBUTE, added.nodeName.toUpperCase(), "added.NodeName");

        }
    });

    Bridge.ns("Bridge.ClientTest.MutationObserverTests", $_);

    Bridge.apply($_.Bridge.ClientTest.MutationObserverTests, {
        f1: function (changes, _) {
            if (changes.length > 0) {
                this.setRecords(changes);
            }
        },
        f2: function (x) {
            System.Threading.Tasks.Task.delay(10);
        }
    });

    Bridge.define("Bridge.ClientTest.NullableTests", {
        isOfType: function (T, value) {
            return Bridge.is(value, T);
        },
        typePropertiesAreCorrect: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areEqual$1("System.Nullable$1[[Boolean]]", Bridge.Reflection.getTypeFullName(System.Nullable$1(Boolean)), "Open FullName");
            Bridge.Test.Assert.areEqual$1("System.Nullable$1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Int32)), "Instantiated FullName");
            Bridge.Test.Assert.true$1(Bridge.is(a, System.Int32), "is int? #1");
            Bridge.Test.Assert.false$1(Bridge.is(b, System.Int32), "is int? #2");

            Bridge.Test.Assert.true$1(this.isOfType(System.Nullable$1(System.Int32), 3), "IsOfType #1");
            Bridge.Test.Assert.false$1(this.isOfType(System.Nullable$1(System.Int32), 3.14), "IsOfType #2");
            Bridge.Test.Assert.true$1(this.isOfType(System.Nullable$1(System.TimeSpan), new System.TimeSpan(System.Int64(1))), "IsOfType #3");
            Bridge.Test.Assert.false$1(this.isOfType(System.Nullable$1(System.TimeSpan), 3.14), "IsOfType #4");
        },
        convertingToNullableWorks: function () {
            var i = 3;
            var i1 = i;
            var i2 = i;
            Bridge.Test.Assert.areEqual(3, i1);
            Bridge.Test.Assert.areEqual(3, i2);
        },
        hasValueWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.true(System.Nullable.hasValue(a));
            Bridge.Test.Assert.false(System.Nullable.hasValue(b));
        },
        boxingWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.true(a != null);
            Bridge.Test.Assert.false(b != null);
        },
        unboxingWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areEqual(3, System.Nullable.getValue(a));
            try {
                var x = System.Nullable.getValue(b);
                Bridge.Test.Assert.fail$1("Unboxing null should have thrown an exception");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.InvalidOperationException)) {
                } else {
                    throw $e1;
                }
            }
        },
        valueWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areEqual(3, System.Nullable.getValue(a));
            try {
                var x = System.Nullable.getValue(b);
                Bridge.Test.Assert.fail$1("null.Value should have thrown an exception");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.InvalidOperationException)) {
                } else {
                    throw $e1;
                }
            }
        },
        unboxingValueOfWrongTypeThrowsAnException: function () {
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.NullableTests.f1);
        },
        getValueOrDefaultWithArgWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areEqual(3, System.Nullable.getValueOrDefault(a, 1));
            Bridge.Test.Assert.areEqual(1, System.Nullable.getValueOrDefault(b, 1));
        },
        liftedEqualityWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.eq(a, b));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.eq(a, c));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.eq(a, d));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.eq(d, e));
        },
        liftedInequalityWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.neq(a, b));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.neq(a, c));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.neq(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.neq(d, e));
        },
        liftedLessThanWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lt(a, b));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.lt(a, c));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lt(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lt(d, e));
        },
        liftedGreaterThanWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gt(a, b));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.gt(c, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gt(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gt(d, e));
        },
        liftedLessThanOrEqualWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.lte(a, b));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lte(c, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lte(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lte(d, e));
        },
        liftedGreaterThanOrEqualWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.gte(a, b));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gte(a, c));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gte(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gte(d, e));
        },
        liftedSubtractionWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(-1, Bridge.Int.clip32(System.Nullable.sub(a, b)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.sub(a, c)));
        },
        liftedAdditionWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(5, Bridge.Int.clip32(System.Nullable.add(a, b)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.add(a, c)));
        },
        liftedModWorks: function () {
            var a = 14, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(2, System.Nullable.mod(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.mod(a, c));
        },
        liftedFloatingPointDivisionWorks: function () {
            var a = 15, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(5, System.Nullable.div(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.div(a, c));
        },
        liftedIntegerDivisionWorks: function () {
            var a = 16, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(5, Bridge.Int.clip32(Bridge.Int.div(a, b)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(Bridge.Int.div(a, c)));
        },
        liftedMultiplicationWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(6, Bridge.Int.clip32(System.Nullable.mul(a, b)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.mul(a, c)));
        },
        liftedBitwiseAndWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(2, System.Nullable.band(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.band(a, c));
        },
        liftedBitwiseOrWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(7, System.Nullable.bor(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.bor(a, c));
        },
        liftedBitwiseXorWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(5, System.Nullable.xor(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.xor(a, c));
        },
        liftedLeftShiftWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(48, System.Nullable.sl(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.sl(a, c));
        },
        liftedSignedRightShiftWorks: function () {
            var a = 48, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(6, System.Nullable.sr(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.sr(a, c));
        },
        liftedUnsignedRightShiftWorks: function () {
            var a = -48, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(-6, System.Nullable.sr(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.sr(a, c));
        },
        liftedBooleanAndWorks: function () {
            var a = true, b = true, c = false, d = false, e = null, f = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.and(a, b));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(a, c));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.and(a, e));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(c, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(c, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(c, e));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.and(e, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(e, c));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.and(e, f));
        },
        liftedBooleanOrWorks: function () {
            var a = true, b = true, c = false, d = false, e = null, f = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(a, b));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(a, c));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(a, e));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(c, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.or(c, d));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.or(c, e));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(e, a));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.or(e, c));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.or(e, f));
        },
        liftedBooleanNotWorks: function () {
            var a = true, b = false, c = null;
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.not(a));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.not(b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.not(c));
        },
        liftedNegationWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areStrictEqual(-3, Bridge.Int.clip32(System.Nullable.neg(a)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.neg(b)));
        },
        liftedUnaryPlusWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areStrictEqual(3, System.Nullable.pos(a));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.pos(b));
        },
        liftedOnesComplementWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areStrictEqual(-4, System.Nullable.bnot(a));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.bnot(b));
        },
        coalesceWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var v1 = null, v2 = 1, v3 = 0, v4 = 2;
            var s1 = null, s2 = "x";
            Bridge.Test.Assert.areStrictEqual(null, ($t = v1, $t != null ? $t : v1));
            Bridge.Test.Assert.areStrictEqual(1, ($t1 = v1, $t1 != null ? $t1 : v2));
            Bridge.Test.Assert.areStrictEqual(0, ($t2 = v3, $t2 != null ? $t2 : v4));
            Bridge.Test.Assert.areStrictEqual(null, ($t3 = s1, $t3 != null ? $t3 : s1));
            Bridge.Test.Assert.areStrictEqual("x", ($t4 = s1, $t4 != null ? $t4 : s2));
        }
    });

    Bridge.ns("Bridge.ClientTest.NullableTests", $_);

    Bridge.apply($_.Bridge.ClientTest.NullableTests, {
        f1: function () {
            var o = "x";
            var x = System.Nullable.getValue(Bridge.cast(o, System.Int32));
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests");

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.Bridge1529", {
        testObjectLiteral: function () {
            var c = { temp: "Frank" };
            var tempFrank = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.Config.prototype.getTmp.call({  }, c);
            Bridge.Test.Assert.areEqual$1("1: Frank", tempFrank, "Check call works");

            var options = { data: { name: c.temp } };
            Bridge.Test.Assert.areEqual$1("Frank", options.data.name, "External referenced default ObjectLiteral works");

            var bs = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.ctor();
            Bridge.Test.Assert.true(Bridge.isPlainObject(bs));
            Bridge.Test.Assert.areEqual(10, bs.field1);
            Bridge.Test.Assert.areEqual("test", bs.field2);
            Bridge.Test.Assert.areEqual(10, Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.prototype.getField1.call(bs));
            Bridge.Test.Assert.areEqual("test", Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.prototype.getField2.call(bs));
            Bridge.Test.Assert.areEqual(0, bs.prop1);
            Bridge.Test.Assert.areEqual(10, bs.proxyField1);
            Bridge.Test.Assert.areEqual("test", bs.proxyField2);
            Bridge.Test.Assert.areEqual(0, bs.prop1);
            Bridge.Test.Assert.null(bs.prop2);
            Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.getStaticProp());

            var bs1 = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.create(3, "test3");
            Bridge.Test.Assert.true(Bridge.isPlainObject(bs1));
            Bridge.Test.Assert.areEqual(3, bs1.field1);
            Bridge.Test.Assert.areEqual("test3", bs1.field2);

            var bs2 = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.$ctor1(5);
            Bridge.Test.Assert.true(Bridge.isPlainObject(bs2));
            Bridge.Test.Assert.areEqual(5, bs2.field1);
            Bridge.Test.Assert.areEqual("test", bs2.field2);

            var bs3 = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.$ctor2("test5");
            Bridge.Test.Assert.true(Bridge.isPlainObject(bs3));
            Bridge.Test.Assert.areEqual(10, bs3.field1);
            Bridge.Test.Assert.areEqual("test5", bs3.field2);

            var ds1 = Bridge.merge(Bridge.ClientTest.ObjectLiteralTests.Bridge1529.DS.ctor(), {
                field: 9
            } );
            Bridge.Test.Assert.true(Bridge.isPlainObject(ds1));
            Bridge.Test.Assert.areEqual(9, ds1.field);
            Bridge.Test.Assert.areEqual(10, ds1.field1);
            Bridge.Test.Assert.areEqual("test", ds1.field2);
            Bridge.Test.Assert.areEqual(0, ds1.prop1);

            var ts = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.TS.ctor();
            Bridge.Test.Assert.true(Bridge.isPlainObject(ts));
            Bridge.Test.Assert.areEqual(8, ts.field1);
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS", {
        $literal: true,
        statics: {
            getStaticProp: function () {
                return 11;
            },
            create: function (i, s) {
                return Bridge.merge(Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.ctor(), {
                    field1: i, field2: s
                } );
            }
        },
        ctor: function () {
            var $this = {};
            (function(){
                this.field1 = 0;
                this.field2 = null;
                this.prop1 = 0;
                this.prop2 = null;
                Object.defineProperty(this, "proxyField1", {
                    get: function () {
                        return this.field1;
                    },
                    set: function (value) {
                        this.field1 = value;
                    },
                    enumerable: true
                });
                Object.defineProperty(this, "proxyField2", {
                    get: function () {
                        return this.field2;
                    },
                    set: function (value) {
                        this.field2 = value;
                    },
                    enumerable: true
                });
                this.field1 = 10;
                this.field2 = "test";
            }).call($this);
            return $this;
        },
        $ctor1: function (i) {
            var $this = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.ctor();
            (function(){
                this.field1 = i;
            }).call($this);
            return $this;
        },
        $ctor2: function (s) {
            var $this = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.ctor();
            (function(){
                this.field2 = s;
            }).call($this);
            return $this;
        },
        getField1: function () {
            return this.field1;
        },
        getField2: function () {
            return this.field2;
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.Bridge1529.Config", {
        $literal: true,
        getTmp: function (config) {
            return System.String.concat("1: ", config.temp);
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests", {
        test: function () {
            var config1 = Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests.Config1.ctor();
            Bridge.Test.Assert.notNull$1(config1, "DefaultValue and Construtor Modes config1 created");
            Bridge.Test.Assert.areEqual$1(1, config1.val1, "config1 Val1");
            Bridge.Test.Assert.areEqual$1(11, config1.val2, "config1 Val2");

            var config2 = { val1: 2, val2: 0 };
            Bridge.Test.Assert.notNull$1(config2, "DefaultValue and Plain Modes config2 created");
            Bridge.Test.Assert.areEqual$1(2, config2.val1, "config2 Val1");
            Bridge.Test.Assert.areEqual$1(0, config2.val2, "config2 Val2");

            var config3 = Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests.Config3.ctor();
            Bridge.Test.Assert.notNull$1(config3, "Ignore and Construtor Modes config3 created");
            Bridge.Test.Assert.areEqual$1(3, config3.val1, "config3 Val1");
            Bridge.Test.Assert.areEqual$1(13, config3.val2, "config3 Val2");

            var config4 = {  };
            Bridge.Test.Assert.notNull$1(config4, "Ignore and Plain Modes config4 created");
            Bridge.Test.Assert.null$1(config4.val1, "config4 Val1");
            Bridge.Test.Assert.null$1(config4.val2, "config4 Val2");

            var config5 = Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests.Config5.ctor();
            Bridge.Test.Assert.notNull$1(config5, "Initializer and Construtor Modes config5 created");
            Bridge.Test.Assert.areEqual$1(5, config5.val1, "config5 Val1");
            Bridge.Test.Assert.areEqual$1(15, config5.val2, "config5 Val2");

            var config6 = { val1: 6 };
            Bridge.Test.Assert.notNull$1(config6, "Initializer and Plain Modes config6 created");
            Bridge.Test.Assert.areEqual$1(6, config6.val1, "config6 Val1");
            Bridge.Test.Assert.null$1(config6.val2, "config6 Val2");
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests.Config1", {
        $literal: true,
        ctor: function () {
            var $this = {};
            (function(){
                this.val1 = 1;
                this.val2 = 0;
                this.val2 = 11;
            }).call($this);
            return $this;
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests.Config3", {
        $literal: true,
        ctor: function () {
            var $this = {};
            (function(){
                this.val1 = 3;
                this.val2 = 0;
                this.val2 = 13;
            }).call($this);
            return $this;
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests.Config5", {
        $literal: true,
        ctor: function () {
            var $this = {};
            (function(){
                this.val1 = 5;
                this.val2 = 0;
                this.val2 = 15;
            }).call($this);
            return $this;
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.CreateModeTests", {
        test: function () {
            var config1 = Bridge.ClientTest.ObjectLiteralTests.CreateModeTests.Config1.ctor();
            Bridge.Test.Assert.notNull$1(config1, "Default Mode config1 created");
            Bridge.Test.Assert.areEqual$1(1, config1.val1, "config1 Val1");
            Bridge.Test.Assert.areEqual$1(11, config1.val2, "config1 Val2");

            var config2 = Bridge.ClientTest.ObjectLiteralTests.CreateModeTests.Config2.ctor();
            Bridge.Test.Assert.notNull$1(config2, "Constructor Mode config2 created");
            Bridge.Test.Assert.areEqual$1(2, config2.val1, "config2 Val1");
            Bridge.Test.Assert.areEqual$1(12, config2.val2, "config2 Val2");

            var config3 = {  };
            Bridge.Test.Assert.notNull$1(config3, "Plain Mode config3 created");
            Bridge.Test.Assert.null$1(config3.val1, "config3 Val1");
            Bridge.Test.Assert.null$1(config3.val2, "config3 Val2");

            var config4 = {  };
            Bridge.Test.Assert.notNull$1(config4, "Plain Mode config4 created");
            Bridge.Test.Assert.null$1(config4.val1, "config4 Val1");
            Bridge.Test.Assert.null$1(config4.val2, "config4 Val2");
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.CreateModeTests.Config1", {
        $literal: true,
        ctor: function () {
            var $this = {};
            (function(){
                this.val1 = 1;
                this.val2 = 0;
                this.val2 = 11;
            }).call($this);
            return $this;
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.CreateModeTests.Config2", {
        $literal: true,
        ctor: function () {
            var $this = {};
            (function(){
                this.val1 = 2;
                this.val2 = 0;
                this.val2 = 12;
            }).call($this);
            return $this;
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests", {
        test: function () {
            var config1 = {  };
            Bridge.Test.Assert.notNull$1(config1, "Default Mode config1 created");
            Bridge.Test.Assert.null$1(config1.val1, "config1 Val1");
            Bridge.Test.Assert.null$1(config1.val2, "config1 Val2");

            var config2 = { val1: 2, val2: 0 };
            Bridge.Test.Assert.notNull$1(config2, "DefaultValue Mode config2 created");
            Bridge.Test.Assert.areEqual$1(2, config2.val1, "config2 Val1");
            Bridge.Test.Assert.areEqual$1(0, config2.val2, "config2 Val2");

            var config3 = { val1: 3 };
            Bridge.Test.Assert.notNull$1(config3, "Initializer Mode config3 created");
            Bridge.Test.Assert.areEqual$1(3, config3.val1, "config3 Val1");
            Bridge.Test.Assert.null$1(config3.val2, "config3 Val2");

            var config4 = {  };
            Bridge.Test.Assert.notNull$1(config4, "Ignore Mode config4 created");
            Bridge.Test.Assert.null$1(config4.val1, "config4 Val1");
            Bridge.Test.Assert.null$1(config4.val2, "config4 Val2");
        }
    });

    Bridge.define("Bridge.ClientTest.PropertyAccessorTests", {
        accessorsCanBeInvokedInstance: function () {
            var c = new Bridge.ClientTest.PropertyAccessorTests.C1();

            c.setP1(42);
            Bridge.Test.Assert.areEqual$1(41, c.F1, "F1 value");

            c.F1 = 15;
            Bridge.Test.Assert.areEqual$1(16, c.getP1(), "P1 value");

            c.F2 = 17;
            Bridge.Test.Assert.areEqual$1(18, c.getP2(), "P2 value");

            c.setP3(12);
            Bridge.Test.Assert.areEqual$1(11, c.F3, "F3 value");
        },
        accessorsCanBeInvokedStatic: function () {
            Bridge.ClientTest.PropertyAccessorTests.C1.setPS1(42);
            Bridge.Test.Assert.areEqual$1(41, Bridge.ClientTest.PropertyAccessorTests.C1.FS1, "FS1 value");

            Bridge.ClientTest.PropertyAccessorTests.C1.FS1 = 15;
            Bridge.Test.Assert.areEqual$1(16, Bridge.ClientTest.PropertyAccessorTests.C1.getPS1(), "PS1 value");

            Bridge.ClientTest.PropertyAccessorTests.C1.FS2 = 17;
            Bridge.Test.Assert.areEqual$1(18, Bridge.ClientTest.PropertyAccessorTests.C1.getPS2(), "PS2 value");

            Bridge.ClientTest.PropertyAccessorTests.C1.setPS3(12);
            Bridge.Test.Assert.areEqual$1(11, Bridge.ClientTest.PropertyAccessorTests.C1.FS3, "FS3 value");
        },
        accessorsCanBeInvokedGeneric: function () {
            var c = new (Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32))();

            c.setP1(42);
            Bridge.Test.Assert.areEqual$1(41, c.F1, "F1 value");

            c.F1 = 15;
            Bridge.Test.Assert.areEqual$1(16, c.getP1(), "P1 value");

            c.F2 = 17;
            Bridge.Test.Assert.areEqual$1(18, c.getP2(), "P2 value");

            c.setP3(12);
            Bridge.Test.Assert.areEqual$1(11, c.F3, "F3 value");
        },
        accessorsCanBeInvokedGenericStatic: function () {
            Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).setPS1(42);
            Bridge.Test.Assert.areEqual$1(41, Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).FS1, "FS1 value");

            Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).FS1 = 15;
            Bridge.Test.Assert.areEqual$1(16, Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).getPS1(), "PS1 value");

            Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).FS2 = 17;
            Bridge.Test.Assert.areEqual$1(18, Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).getPS2(), "PS2 value");

            Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).setPS3(12);
            Bridge.Test.Assert.areEqual$1(11, Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).FS3, "FS3 value");
        },
        baseAccessorsCanBeInvoked: function () {
            var d = new Bridge.ClientTest.PropertyAccessorTests.D3();

            d.setP1(42);
            Bridge.Test.Assert.areEqual$1(41, d.F1, "F1 value");

            d.F1 = 15;
            Bridge.Test.Assert.areEqual$1(16, d.getP1(), "P1 value");

            d.F2 = 17;
            Bridge.Test.Assert.areEqual$1(18, d.getP2(), "P2 value");

            d.setP3(12);
            Bridge.Test.Assert.areEqual$1(11, d.F3, "F3 value");
        },
        baseAccessorsCanBeInvokedGeneric: function () {
            var d = new (Bridge.ClientTest.PropertyAccessorTests.D4$1(System.Int32))();

            d.setP1(42);
            Bridge.Test.Assert.areEqual$1(41, d.F1, "F1 value");

            d.F1 = 15;
            Bridge.Test.Assert.areEqual$1(16, d.getP1(), "P1 value");

            d.F2 = 17;
            Bridge.Test.Assert.areEqual$1(18, d.getP2(), "P2 value");

            d.setP3(12);
            Bridge.Test.Assert.areEqual$1(11, d.F3, "F3 value");
        }
    });

    Bridge.define("Bridge.ClientTest.PropertyAccessorTests.B3", {
        F1: 0,
        F2: 0,
        F3: 0,
        getP1: function () {
            return this.F1;
        },
        setP1: function (value) {
            this.F1 = value;
        },
        getP2: function () {
            return this.F2;
        },
        setP3: function (value) {
            this.F3 = value;
        }
    });

    Bridge.define("Bridge.ClientTest.PropertyAccessorTests.B4$1", function (T) { return {
        F1: Bridge.getDefaultValue(T),
        F2: Bridge.getDefaultValue(T),
        F3: Bridge.getDefaultValue(T),
        getP1: function () {
            return this.F1;
        },
        setP1: function (value) {
            this.F1 = value;
        },
        getP2: function () {
            return this.F2;
        },
        setP3: function (value) {
            this.F3 = value;
        }
    }; });

    Bridge.define("Bridge.ClientTest.PropertyAccessorTests.C1", {
        statics: {
            FS1: 0,
            FS2: 0,
            FS3: 0,
            getPS1: function () {
                return ((Bridge.ClientTest.PropertyAccessorTests.C1.FS1 + 1) | 0);
            },
            setPS1: function (value) {
                Bridge.ClientTest.PropertyAccessorTests.C1.FS1 = (value - 1) | 0;
            },
            getPS2: function () {
                return ((Bridge.ClientTest.PropertyAccessorTests.C1.FS2 + 1) | 0);
            },
            setPS3: function (value) {
                Bridge.ClientTest.PropertyAccessorTests.C1.FS3 = (value - 1) | 0;
            }
        },
        F1: 0,
        F2: 0,
        F3: 0,
        getP1: function () {
            return ((this.F1 + 1) | 0);
        },
        setP1: function (value) {
            this.F1 = (value - 1) | 0;
        },
        getP2: function () {
            return ((this.F2 + 1) | 0);
        },
        setP3: function (value) {
            this.F3 = (value - 1) | 0;
        }
    });

    Bridge.define("Bridge.ClientTest.PropertyAccessorTests.C2$1", function (T) { return {
        statics: {
            FS1: Bridge.getDefaultValue(T),
            FS2: Bridge.getDefaultValue(T),
            FS3: Bridge.getDefaultValue(T),
            getPS1: function () {
                return ((Bridge.ClientTest.PropertyAccessorTests.C2$1(T).FS1 + 1) | 0);
            },
            setPS1: function (value) {
                Bridge.ClientTest.PropertyAccessorTests.C2$1(T).FS1 = value - 1;
            },
            getPS2: function () {
                return ((Bridge.ClientTest.PropertyAccessorTests.C2$1(T).FS2 + 1) | 0);
            },
            setPS3: function (value) {
                Bridge.ClientTest.PropertyAccessorTests.C2$1(T).FS3 = value - 1;
            }
        },
        F1: Bridge.getDefaultValue(T),
        F2: Bridge.getDefaultValue(T),
        F3: Bridge.getDefaultValue(T),
        getP1: function () {
            return ((this.F1 + 1) | 0);
        },
        setP1: function (value) {
            this.F1 = value - 1;
        },
        getP2: function () {
            return ((this.F2 + 1) | 0);
        },
        setP3: function (value) {
            this.F3 = value - 1;
        }
    }; });

    Bridge.define("Bridge.ClientTest.RandomTests", {
        statics: {
            ITERATIONS: 100,
            unseeded: function () {
                var r = new System.Random.ctor();

                for (var i = 0; i < Bridge.ClientTest.RandomTests.ITERATIONS; i = (i + 1) | 0) {
                    var x = r.next$1(20);
                    Bridge.Test.Assert.true$1(x >= 0 && x < 20, x + " under 20 - Next(maxValue)");
                }

                for (var i1 = 0; i1 < Bridge.ClientTest.RandomTests.ITERATIONS; i1 = (i1 + 1) | 0) {
                    var x1 = r.next$2(20, 30);
                    Bridge.Test.Assert.true$1(x1 >= 20 && x1 < 30, x1 + " between 20 and 30 - Next(minValue, maxValue)");
                }

                for (var i2 = 0; i2 < Bridge.ClientTest.RandomTests.ITERATIONS; i2 = (i2 + 1) | 0) {
                    var x2 = r.nextDouble();
                    Bridge.Test.Assert.true$1(x2 >= 0.0 && x2 < 1.0, System.Double.format(x2, 'G') + " between 0.0 and 1.0  - NextDouble()");
                }
            },
            seeded: function () {
                var seed = System.Int64.clip32(System.Int64((new Date()).getTime()).mul(10000));

                var r1 = new System.Random.$ctor1(seed);
                var r2 = new System.Random.$ctor1(seed);

                var b1 = System.Array.init(Bridge.ClientTest.RandomTests.ITERATIONS, 0);
                r1.nextBytes(b1);

                var b2 = System.Array.init(Bridge.ClientTest.RandomTests.ITERATIONS, 0);
                r2.nextBytes(b2);

                for (var i = 0; i < b1.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual$1(b1[i], b2[i], "NextBytes()");
                }

                for (var i1 = 0; i1 < b1.length; i1 = (i1 + 1) | 0) {
                    var x1 = r1.next();
                    var x2 = r2.next();

                    Bridge.Test.Assert.areEqual$1(x1, x2, "Next()");
                }
            },
            sample: function () {
                var r = new Bridge.ClientTest.RandomTests.SubRandom();

                for (var i = 0; i < Bridge.ClientTest.RandomTests.ITERATIONS; i = (i + 1) | 0) {
                    var d = r.exposeSample();
                    Bridge.Test.Assert.true$1(d >= 0.0 && d < 1.0, System.Double.format(d, 'G') + " between 0.0 and 1.0  - ExposeSample()");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.RandomTests.SubRandom", {
        inherits: [System.Random],
        exposeSample: function () {
            return this.sample();
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests", {
        canGetCustomTypeAttributesForTypeWithNoAttributes: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C1, null, false);
            Bridge.Test.Assert.areEqual$1(arr.length, 0, "Should have no attributes");
        },
        canGetCustomTypeAttributesForClassWithAttributes: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C2, null, false);
            Bridge.Test.Assert.areEqual$1(arr.length, 2, "Should have two attributes");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            var a1 = Bridge.cast((Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) ? arr[0] : arr[1]), Bridge.ClientTest.Reflection.AttributeTests.A1Attribute);
            Bridge.Test.Assert.areEqual(a1.getV(), 1);
            var a2 = Bridge.cast((Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) ? arr[0] : arr[1]), Bridge.ClientTest.Reflection.AttributeTests.A2Attribute);
            Bridge.Test.Assert.areEqual(a2.getV(), 2);
        },
        nonScriptableAttributesAreNotIncluded: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C19, null, false);
            Bridge.Test.Assert.areEqual$1(arr.length, 1, "Should have one attribute");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "A1 should exist");
        },
        canGetCustomTypeAttributesForInterfaceWithAttributes: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.I1, null, false);
            Bridge.Test.Assert.areEqual$1(arr.length, 2, "Should have two attributes");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            var a1 = Bridge.cast((Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) ? arr[0] : arr[1]), Bridge.ClientTest.Reflection.AttributeTests.A1Attribute);
            Bridge.Test.Assert.areEqual(a1.getV(), 1);
            var a2 = Bridge.cast((Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) ? arr[0] : arr[1]), Bridge.ClientTest.Reflection.AttributeTests.A2Attribute);
            Bridge.Test.Assert.areEqual(a2.getV(), 2);
        },
        canGetCustomTypeAttributesForEnumWithAttributes: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.E1, null, false);
            Bridge.Test.Assert.areEqual$1(arr.length, 2, "Should have two attributes");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            var a1 = Bridge.cast((Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) ? arr[0] : arr[1]), Bridge.ClientTest.Reflection.AttributeTests.A1Attribute);
            Bridge.Test.Assert.areEqual(a1.getV(), 1);
            var a2 = Bridge.cast((Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) ? arr[0] : arr[1]), Bridge.ClientTest.Reflection.AttributeTests.A2Attribute);
            Bridge.Test.Assert.areEqual(a2.getV(), 2);
        },
        inheritedFlagToGetCustomAttributesWorks: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C3, null, false);
            Bridge.Test.Assert.areEqual$1(arr.length, 1, "Should have one non-inherited attribute");
            Bridge.Test.Assert.true(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A3Attribute));

            arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C3, null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 3, "Should have three inherited attributes");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[2], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[2], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[2], Bridge.ClientTest.Reflection.AttributeTests.A3Attribute), "A3 should exist");
        },
        deepInheritanceWorks: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C4, null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 4, "Should have 4 attributes");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[2], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[3], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[2], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[3], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[2], Bridge.ClientTest.Reflection.AttributeTests.A3Attribute) || Bridge.is(arr[3], Bridge.ClientTest.Reflection.AttributeTests.A3Attribute), "A3 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A4Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A4Attribute) || Bridge.is(arr[2], Bridge.ClientTest.Reflection.AttributeTests.A4Attribute) || Bridge.is(arr[3], Bridge.ClientTest.Reflection.AttributeTests.A4Attribute), "A4 should exist");
        },
        overridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C5, null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 2, "Should have 2 attributes");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "A1 should exist");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) || Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute), "A2 should exist");
            var a1 = Bridge.cast((Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute) ? arr[0] : arr[1]), Bridge.ClientTest.Reflection.AttributeTests.A1Attribute);
            Bridge.Test.Assert.areEqual(a1.getV(), 5);
        },
        applyingNewInstanceOfMultipleUseAttributeAddsTheAttribute: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C6, null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 3, "Should have 2 attributes");
            Bridge.Test.Assert.areEqual$1(1, arr.filter($_.Bridge.ClientTest.Reflection.AttributeTests.f1).length, "Should have one A1");
            Bridge.Test.Assert.areEqual$1(2, arr.filter($_.Bridge.ClientTest.Reflection.AttributeTests.f2).length, "Should have two A2");
            var a2 = Bridge.cast(arr.filter($_.Bridge.ClientTest.Reflection.AttributeTests.f2), Array);
            Bridge.Test.Assert.true(a2[0].getV() === 2 || a2[1].getV() === 2);
            Bridge.Test.Assert.true(a2[0].getV() === 6 || a2[1].getV() === 6);
        },
        nonInheritedAttributeIsNotInherited: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C8, null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 0, "Should not have any attributes");
        },
        getCustomAttributesTypeFilterWorks: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C9, Bridge.ClientTest.Reflection.AttributeTests.A2Attribute, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 2, "Should have 2 A2 attributes");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute) && Bridge.is(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute), "Should only return A2 attributes");
            Bridge.Test.Assert.true$1(Bridge.cast(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute).getV() === 8 || Bridge.cast(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute).getV() === 9, "Attribute members should be correct");
            Bridge.Test.Assert.true$1(Bridge.cast(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute).getV() === 8 || Bridge.cast(arr[1], Bridge.ClientTest.Reflection.AttributeTests.A2Attribute).getV() === 9, "Attribute members should be correct");
        },
        getCustomAttributesWorksForOpenGenericClass: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C10$2, null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 1, "Should have one attribute");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "Should be A1");
        },
        getCustomAttributesWorksForConstructedGenericClass: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C10$2(System.Int32,String), null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 1, "Should have one attribute");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "Should be A1");
        },
        getCustomAttributesWorksForOpenGenericInterface: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.I2$2, null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 1, "Should have one attribute");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "Should be A1");
        },
        getCustomAttributesWorksForConstructedGenericInterface: function () {
            var arr = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.I2$2(System.Int32,String), null, true);
            Bridge.Test.Assert.areEqual$1(arr.length, 1, "Should have one attribute");
            Bridge.Test.Assert.true$1(Bridge.is(arr[0], Bridge.ClientTest.Reflection.AttributeTests.A1Attribute), "Should be A1");
        },
        allSupportedScalarTypesCanBeUsedAsAttributeArguments: function () {
            var a6 = Bridge.cast(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C11, null, false)[0], Bridge.ClientTest.Reflection.AttributeTests.A6Attribute);
            Bridge.Test.Assert.areEqual$1(a6.getB(), true, "B");
            Bridge.Test.Assert.areEqual$1(a6.getY(), 43, "Y");
            Bridge.Test.Assert.areEqual$1(a6.getC(), 68, "C");
            Bridge.Test.Assert.areEqual$1(a6.getD(), 45.5, "D");
            Bridge.Test.Assert.areEqual$1(a6.getF(), 46.5, "F");
            Bridge.Test.Assert.areEqual$1(a6.getI(), 47, "I");
            Bridge.Test.Assert.true$1(a6.getL().equals(System.Int64(48)), "L");
            Bridge.Test.Assert.areEqual$1(a6.getH(), 49, "H");
            Bridge.Test.Assert.areEqual$1(a6.getE(), Bridge.ClientTest.Reflection.AttributeTests.E1.V1, "E");
            Bridge.Test.Assert.areEqual$1(a6.getS(), "Test_string", "S");
            Bridge.Test.Assert.areEqual$1(a6.getO(), null, "O");
            Bridge.Test.Assert.areEqual$1(a6.getT(), String, "T");
        },
        arraysCanBeUsedAsAttributeArguments: function () {
            var a7 = Bridge.cast(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C12, null, false)[0], Bridge.ClientTest.Reflection.AttributeTests.A7Attribute);
            Bridge.Test.Assert.areEqual$1(a7.getI(), [42, 17, 31], "I");
            Bridge.Test.Assert.areEqual$1(a7.getS(), ["X", "Y2", "Z3"], "S");
        },
        namedValuesEnumCanBeUsedAsAttributeArgument: function () {
            var a8 = Bridge.cast(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C13, null, false)[0], Bridge.ClientTest.Reflection.AttributeTests.A8Attribute);
            Bridge.Test.Assert.areEqual$1(a8.getE(), "v2", "E");
        },
        propertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration: function () {
            var a = Bridge.cast(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C14, null, false)[0], Bridge.ClientTest.Reflection.AttributeTests.A9Attribute);
            Bridge.Test.Assert.areEqual(a.getP1(), 42);
        },
        propertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration: function () {
            var a = Bridge.cast(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C15, null, false)[0], Bridge.ClientTest.Reflection.AttributeTests.A9Attribute);
            Bridge.Test.Assert.areEqual(a.$$XX$$, 18);
        },
        propertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration: function () {
            var a = Bridge.cast(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C16, null, false)[0], Bridge.ClientTest.Reflection.AttributeTests.A9Attribute);
            Bridge.Test.Assert.areEqual(a.P3, 43);
        },
        fieldsCanBeAssignedInAttributeDeclaration: function () {
            var a = Bridge.cast(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C18, null, false)[0], Bridge.ClientTest.Reflection.AttributeTests.A9Attribute);
            Bridge.Test.Assert.areEqual(a.getF1(), 13);
        },
        creatingAttributeWithNamedConstructorWorks: function () {
            var a = Bridge.cast(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C20, null, false)[0], Bridge.ClientTest.Reflection.AttributeTests.A11Attribute);
            Bridge.Test.Assert.areEqual(a.i, 42);
        },
        creatingAttributeWithInlineCodeConstructorWorks: function () {
            var a = Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C21, null, false)[0];
            Bridge.Test.Assert.areEqual(a.i, 18);
        },
        conditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C22, Bridge.ClientTest.Reflection.AttributeTests.A12Attribute, false).length, 1, "A12");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C22, Bridge.ClientTest.Reflection.AttributeTests.A13Attribute, false).length, 1, "A13");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getAttributes(Bridge.ClientTest.Reflection.AttributeTests.C22, Bridge.ClientTest.Reflection.AttributeTests.A14Attribute, false).length, 0, "A14");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.AttributeTests.C22, 8, 284, "M").at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.AttributeTests.A12Attribute); }).length, 1, "A12");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.AttributeTests.C22, 8, 284, "M").at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.AttributeTests.A13Attribute); }).length, 1, "A13");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.AttributeTests.C22, 8, 284, "M").at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.AttributeTests.A14Attribute); }).length, 0, "A14");
        }
    });

    Bridge.ns("Bridge.ClientTest.Reflection.AttributeTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Reflection.AttributeTests, {
        f1: function (a) {
            return Bridge.is(a, Bridge.ClientTest.Reflection.AttributeTests.A1Attribute);
        },
        f2: function (a) {
            return Bridge.is(a, Bridge.ClientTest.Reflection.AttributeTests.A2Attribute);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A11Attribute", {
        inherits: [System.Attribute],
        i: 0,
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
        },
        $ctor1: function (i) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.i = i;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A12Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A13Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A14Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A1Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                V: 0
            }
        },
        ctor: function (v) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setV(v);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A2Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                V: 0
            }
        },
        ctor: function (v) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setV(v);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A3Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                V: 0
            }
        },
        ctor: function (v) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setV(v);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A4Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                V: 0
            }
        },
        ctor: function (v) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setV(v);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A5Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A6Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                B: false,
                Y: 0,
                C: null,
                D: 0,
                F: 0,
                I: 0,
                L: System.Int64(0),
                H: 0,
                E: 0,
                S: null,
                O: null,
                T: null
            },
            init: function () {
                this.C = new System.Char();
            }
        },
        ctor: function (b, y, c, d, f, i, l, h, e, s, o, t) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setB(b);
            this.setY(y);
            this.setC(c);
            this.setD(d);
            this.setF(f);
            this.setI(i);
            this.setL(l);
            this.setH(h);
            this.setE(e);
            this.setS(s);
            this.setO(o);
            this.setT(t);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A7Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                I: null,
                S: null
            }
        },
        ctor: function (i, s) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setI(i);
            this.setS(s);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A8Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                E: "v1"
            }
        },
        ctor: function (e) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setE(e);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.A9Attribute", {
        inherits: [System.Attribute],
        P3: 0,
        config: {
            properties: {
                P1: 0,
                P4: 0,
                F1: 0,
                F2: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C1");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C10$2", function (T1, T2) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C11");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C12");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C13");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C14");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C15");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C16");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C18");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C19");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C2");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C20");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C21");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C22", {
        m: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C7");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C9");

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.E1", {
        $kind: "enum",
        statics: {
            V1: 1,
            V2: 2
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.E2", {
        $kind: "enum",
        statics: {
            V1: "v1",
            V2: "v2"
        },
        $utype: System.String
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.I1", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.I2$2", function (T1, T2) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests", {
        assertEquivalent: function (actual, expected) {
            var actualValues = actual.filter($_.Bridge.ClientTest.Reflection.GetMembersTests.f1).map($_.Bridge.ClientTest.Reflection.GetMembersTests.f2).filter($_.Bridge.ClientTest.Reflection.GetMembersTests.f3);
            actualValues.sort();
            expected.sort();
            Bridge.Test.Assert.areEqual(actualValues, expected);
        },
        assertEqual: function (actual, expected) {
            var actualValue = actual != null ? Bridge.cast((actual.at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute); })[0], Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute).getI() : null;
            Bridge.Test.Assert.areEqual(actualValue, expected);
        },
        assertAmbiguous: function (action) {
            Bridge.Test.Assert.throws(action);
        },
        getMembersWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 31, 28), [111, 112, 113, 114, 131, 132, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 172, 173, 174, 175, 176, 211, 212, 213, 214, 231, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 272, 273, 274, 275, 276, 301, 302, 303, 311, 312, 313, 314, 321, 322, 323, 324, 331, 332, 341, 342, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386]);
        },
        getMembersWorksForInterface: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.I2, 31, 28), [511, 512, 513, 514, 551, 552, 553, 554, 555, 556, 557, 558, 559, 571, 574]);
        },
        getMembersWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 31, 0), System.Array.init(0, 0));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 31, 28), [111, 112, 113, 114, 131, 132, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 172, 173, 174, 175, 176, 211, 212, 213, 214, 231, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 272, 273, 274, 275, 276, 301, 302, 303, 311, 312, 313, 314, 321, 322, 323, 324, 331, 332, 341, 342, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 31, 92), [111, 112, 113, 114, 121, 122, 123, 124, 131, 132, 141, 142, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 211, 212, 213, 214, 221, 222, 223, 224, 231, 232, 241, 242, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 301, 302, 303, 311, 312, 313, 314, 321, 322, 323, 324, 331, 332, 341, 342, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 31, 20), [111, 112, 113, 114, 131, 132, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 172, 173, 174, 175, 176, 211, 212, 213, 214, 231, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 272, 273, 274, 275, 276, 301, 302, 303, 311, 312, 313, 314, 331, 332, 351, 352, 353, 354, 355, 356, 357, 358, 359, 371, 372, 373, 374, 375, 376]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 31, 22), [301, 302, 303, 311, 312, 313, 314, 331, 332, 351, 352, 353, 354, 355, 356, 357, 358, 359, 371, 372, 373, 374, 375, 376]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 31, 24), [321, 322, 323, 324, 341, 342, 361, 362, 363, 364, 365, 366, 381, 382, 383, 384, 385, 386]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 31, 88), [121, 122, 123, 124, 141, 142, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 221, 222, 223, 224, 241, 242, 261, 262, 263, 264, 265, 266, 281, 282, 283, 284, 285, 286, 321, 322, 323, 324, 341, 342, 361, 362, 363, 364, 365, 366, 381, 382, 383, 384, 385, 386]);
        },
        getMemberWithNameWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 28, "FB"), [132]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 28, "MB"), [112]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 28, "MD"), [312]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 28, "M"), [111, 211, 311]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 28, "X"), System.Array.init(0, 0));
        },
        getMemberWithNameAndBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 20, "FB"), [132]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 22, "FB"), System.Array.init(0, 0));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 24, "FB"), System.Array.init(0, 0));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 20, "FDS"), System.Array.init(0, 0));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 24, "FDS"), [342]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 24, "FBS"), System.Array.init(0, 0));
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 88, "FBS"), [142]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 20, "F"), [131, 231, 331]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 24, "FS"), [341]);
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 31, 88, "FS"), [141, 241, 341]);
        },
        getConstructorsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 1, 28), [301, 302, 303]);
        },
        getConstructorWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 1, 284, null, System.Array.init(0, null)), 301);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 1, 284, null, [System.Int32, String]), 303);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 1, 284, null, [Date]), null);
        },
        getMethodsWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 28), [111, 112, 113, 114, 152, 153, 155, 156, 158, 159, 172, 173, 175, 176, 211, 212, 213, 214, 252, 253, 255, 256, 258, 259, 272, 273, 275, 276, 311, 312, 313, 314, 321, 322, 323, 324, 352, 353, 355, 356, 358, 359, 362, 363, 365, 366, 372, 373, 375, 376, 382, 383, 385, 386]);
        },
        getMethodsWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 0), System.Array.init(0, 0));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 28), [111, 112, 113, 114, 152, 153, 155, 156, 158, 159, 172, 173, 175, 176, 211, 212, 213, 214, 252, 253, 255, 256, 258, 259, 272, 273, 275, 276, 311, 312, 313, 314, 321, 322, 323, 324, 352, 353, 355, 356, 358, 359, 362, 363, 365, 366, 372, 373, 375, 376, 382, 383, 385, 386]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 92), [111, 112, 113, 114, 121, 122, 123, 124, 152, 153, 155, 156, 158, 159, 162, 163, 165, 166, 172, 173, 175, 176, 182, 183, 185, 186, 211, 212, 213, 214, 221, 222, 223, 224, 252, 253, 255, 256, 258, 259, 262, 263, 265, 266, 272, 273, 275, 276, 282, 283, 285, 286, 311, 312, 313, 314, 321, 322, 323, 324, 352, 353, 355, 356, 358, 359, 362, 363, 365, 366, 372, 373, 375, 376, 382, 383, 385, 386]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 20), [111, 112, 113, 114, 152, 153, 155, 156, 158, 159, 172, 173, 175, 176, 211, 212, 213, 214, 252, 253, 255, 256, 258, 259, 272, 273, 275, 276, 311, 312, 313, 314, 352, 353, 355, 356, 358, 359, 372, 373, 375, 376]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 22), [311, 312, 313, 314, 352, 353, 355, 356, 358, 359, 372, 373, 375, 376]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 24), [321, 322, 323, 324, 362, 363, 365, 366, 382, 383, 385, 386]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 88), [121, 122, 123, 124, 162, 163, 165, 166, 182, 183, 185, 186, 221, 222, 223, 224, 262, 263, 265, 266, 282, 283, 285, 286, 321, 322, 323, 324, 362, 363, 365, 366, 382, 383, 385, 386]);
        },
        getMethodWithNameWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "MB"), 112);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "MD"), 312);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M"), 311);
            this.assertAmbiguous($_.Bridge.ClientTest.Reflection.GetMembersTests.f4);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "X"), null);

            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 284, "get_PD1"), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 284, "set_PD1"), 353);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 284, "add_ED1"), 372);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 284, "remove_ED1"), 373);
        },
        getMethodWithNameAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "MB"), 112);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 22 | 256, "MB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "MB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "MDS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "MDS"), 322);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "MBS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 88 | 256, "MBS"), 122);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "M"), 311);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "MS"), 321);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 88 | 256, "MS"), 321);
            this.assertAmbiguous($_.Bridge.ClientTest.Reflection.GetMembersTests.f5);
            this.assertAmbiguous($_.Bridge.ClientTest.Reflection.GetMembersTests.f6);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "X"), null);

            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 20 | 256, "get_PD1"), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 20 | 256, "set_PD1"), 353);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 20 | 256, "add_ED1"), 372);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 20 | 256, "remove_ED1"), 373);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 24 | 256, "get_PDS1"), 362);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 24 | 256, "set_PDS1"), 363);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 24 | 256, "add_EDS1"), 382);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 8, 24 | 256, "remove_EDS1"), 383);
        },
        getMethodWithNameAndArgumentTypesWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "MD", System.Array.init(0, null)), 312);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M2D", [System.Int32]), 315);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M2D", [String]), 316);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M2D", [Date]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M3", [System.Int32]), 117);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M3", [String]), 217);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M3", [Date]), 317);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M3", [Date, System.Int32]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M3S", [String]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M3S", [Date]), 327);
        },
        getMethodWithNameAndArgumentTypesAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "MD", System.Array.init(0, null)), 312);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "MD", System.Array.init(0, null)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "M2D", [System.Int32]), 315);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "M3", [System.Int32]), 117);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "M3", [String]), 217);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "M3", [Date]), 317);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 22 | 256, "M3", [String]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 22 | 256, "M3", [Date]), 317);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "M3", [Date]), null);

            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "M3S", [String]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "M3S", [Date]), 327);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "M3S", [System.Int32]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 88 | 256, "M3S", [String]), 227);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 88 | 256, "M3S", [Date]), 327);
        },
        getPropertiesWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 16, 28), [151, 154, 157, 251, 254, 257, 351, 354, 357, 361, 364]);
        },
        getPropertiesWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 16, 0), System.Array.init(0, 0));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 16, 28), [151, 154, 157, 251, 254, 257, 351, 354, 357, 361, 364]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 16, 92), [151, 154, 157, 161, 164, 251, 254, 257, 261, 264, 351, 354, 357, 361, 364]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 16, 20), [151, 154, 157, 251, 254, 257, 351, 354, 357]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 16, 22), [351, 354, 357]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 16, 24), [361, 364]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 16, 88), [161, 164, 261, 264, 361, 364]);
        },
        getPropertyWithNameWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "PB"), 152);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "PD"), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "P"), 351);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "X"), null);
            this.assertAmbiguous($_.Bridge.ClientTest.Reflection.GetMembersTests.f7);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.C3, 16, 284, "Item"), 1);
        },
        getPropertyWithNameAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "PB"), 152);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 22 | 256, "PB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 24 | 256, "PB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "PDS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 24 | 256, "PDS"), 362);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 24 | 256, "PBS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 88 | 256, "PBS"), 162);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "P"), 351);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 24 | 256, "PS"), 361);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 88 | 256, "PS"), 361);
            this.assertAmbiguous($_.Bridge.ClientTest.Reflection.GetMembersTests.f8);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.C3, 16, 20 | 256, "Item"), 1);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.C3, 16, 24 | 256, "Item"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "X"), null);
        },
        getPropertyWithNameAndArgumentTypesWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "PD", System.Array.init(0, null)), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "Item", [String]), 154);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "Item", [System.Double]), 254);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "Item", [Date]), 354);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "Item", [System.Int32]), 353);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "Item", [System.Int32, String]), null);
        },
        getPropertyWithNameAndArgumentTypesAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "PD", System.Array.init(0, null)), 352);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 24 | 256, "PD", System.Array.init(0, null)), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", [String]), 154);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", [System.Double]), 254);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", [Date]), 354);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", [System.Int32]), 353);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item", [System.Int32, String]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 22 | 256, "Item", [String]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 22 | 256, "Item", [System.Double]), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 22 | 256, "Item", [Date]), 354);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 22 | 256, "Item", [System.Int32]), 353);
        },
        getFieldsWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 4, 28), [131, 132, 231, 232, 331, 332, 341, 342]);
        },
        getFieldsWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 4, 0), System.Array.init(0, 0));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 4, 28), [131, 132, 231, 232, 331, 332, 341, 342]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 4, 92), [131, 132, 141, 142, 231, 232, 241, 242, 331, 332, 341, 342]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 4, 20), [131, 132, 231, 232, 331, 332]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 4, 22), [331, 332]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 4, 24), [341, 342]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 4, 88), [141, 142, 241, 242, 341, 342]);
        },
        getFieldWithNameWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 284, "FB"), 132);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 284, "FD"), 332);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 284, "F"), 331);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 284, "E"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 284, "X"), null);
        },
        getFieldWithNameAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 20 | 256, "FB"), 132);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 22 | 256, "FB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 24 | 256, "FB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 20 | 256, "FDS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 24 | 256, "FDS"), 342);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 24 | 256, "FBS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 88 | 256, "FBS"), 142);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 20 | 256, "F"), 331);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 24 | 256, "FS"), 341);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 88 | 256, "FS"), 341);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 20 | 256, "E"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 4, 20 | 256, "X"), null);
        },
        getEventsWithoutBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 2, 28), [171, 174, 271, 274, 371, 374, 381, 384]);
        },
        getEventsWithBindingFlagsWorks: function () {
            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 2, 0), System.Array.init(0, 0));

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 2, 28), [171, 174, 271, 274, 371, 374, 381, 384]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 2, 92), [171, 174, 181, 184, 271, 274, 281, 284, 371, 374, 381, 384]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 2, 20), [171, 174, 271, 274, 371, 374]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 2, 22), [371, 374]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 2, 24), [381, 384]);

            this.assertEquivalent(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D1, 2, 88), [181, 184, 281, 284, 381, 384]);
        },
        getEventWithNameWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 284, "EB"), 172);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 284, "ED"), 372);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 284, "E"), 371);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 284, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 284, "X"), null);
        },
        getEventWithNameAndBindingFlagsWorks: function () {
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 20 | 256, "EB"), 172);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 22 | 256, "EB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 24 | 256, "EB"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 20 | 256, "EDS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 24 | 256, "EDS"), 382);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 24 | 256, "EBS"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 88 | 256, "EBS"), 182);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 20 | 256, "E"), 371);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 24 | 256, "ES"), 381);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 88 | 256, "ES"), 381);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 20 | 256, "F"), null);
            this.assertEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 2, 20 | 256, "X"), null);
        },
        isOperatorForMemberInfoWorks: function () {
            Bridge.Test.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 1, 284, null, System.Array.init(0, null)), System.Reflection.ConstructorInfo));
            Bridge.Test.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.ConstructorInfo));

            Bridge.Test.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 8, 284, "MB2"), System.Reflection.MethodInfo));
            Bridge.Test.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.MethodInfo));

            Bridge.Test.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.FieldInfo));
            Bridge.Test.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 8, 284, "MB2"), System.Reflection.FieldInfo));

            Bridge.Test.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 16, 284, "PB1"), System.Reflection.PropertyInfo));
            Bridge.Test.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.PropertyInfo));

            Bridge.Test.Assert.true(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 2, 284, "EB1"), System.Reflection.EventInfo));
            Bridge.Test.Assert.false(Bridge.is(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.B1, 4, 284, "FB1"), System.Reflection.EventInfo));
        }
    });

    Bridge.ns("Bridge.ClientTest.Reflection.GetMembersTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Reflection.GetMembersTests, {
        f1: function (m) {
            return !Bridge.referenceEquals(m.td, Object);
        },
        f2: function (m) {
            var arr = Bridge.cast((m.at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute); }), Array);
            return arr.length > 0 ? arr[0].getI() : 0;
        },
        f3: function (x) {
            return x !== 0;
        },
        f4: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 284, "M2");
        },
        f5: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 20 | 256, "M2D");
        },
        f6: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 8, 24 | 256, "M2DS");
        },
        f7: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 284, "Item");
        },
        f8: function () {
            Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.GetMembersTests.D2, 16, 20 | 256, "Item");
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                I: 0
            }
        },
        ctor: function (i) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setI(i);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.B1", {
        statics: {
            FBS1: 0,
            FBS2: 0,
            config: {
                properties: {
                    PBS1: 0,
                    PBS2: 0
                }
            },
            addEBS1: function (value) {
            },
            removeEBS1: function (value) {
            },
            addEBS2: function (value) {
            },
            removeEBS2: function (value) {
            },
            MBS: function () {
            },
            MBS$1: function (x) {
            },
            MBS$2: function (x, y) {
            },
            MBS2: function (x, y) {
            }
        },
        FB1: 0,
        FB2: 0,
        config: {
            properties: {
                PB1: 0,
                PB2: 0
            }
        },
        ctor: function () {
            this.$initialize();
        },
        $ctor1: function (x) {
            this.$initialize();
        },
        $ctor2: function (x, y) {
            this.$initialize();
        },
        getItem: function (x) {
            return 0;
        },
        setItem: function (x, value) {
        },
        addEB1: function (value) {
        },
        removeEB1: function (value) {
        },
        addEB2: function (value) {
        },
        removeEB2: function (value) {
        },
        MB: function () {
        },
        MB$1: function (x) {
        },
        MB$2: function (x, y) {
        },
        MB2: function (x, y) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.B2", {
        statics: {
            FS: 0,
            FBS: 0,
            config: {
                events: {
                    ES: null,
                    EBS: null
                },
                properties: {
                    PS: 0,
                    PBS: 0
                }
            },
            MS: function () {
            },
            MBS: function () {
            },
            M2S: function (x) {
            },
            M2S$1: function (x) {
            },
            M2BS: function (x) {
            },
            M2BS$1: function (x) {
            },
            M3S: function (x) {
            }
        },
        f: 0,
        FB: 0,
        config: {
            events: {
                E: null,
                EB: null
            },
            properties: {
                P: 0,
                PB: 0
            }
        },
        getItem: function (x) {
            return 0;
        },
        setItem: function (x, value) {
        },
        getItem$1: function (x) {
            return 0;
        },
        setItem$1: function (x, value) {
        },
        m: function () {
        },
        MB: function () {
        },
        M2: function (x) {
        },
        M2$1: function (x) {
        },
        M2B: function (x) {
        },
        M2B$1: function (x) {
        },
        M3: function (x) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.C3", {
        getItem: function (x) {
            return 0;
        },
        setItem: function (x, value) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.I1", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests", {
        getMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute: function () {
            var methods = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C1, 31, 28);
            Bridge.Test.Assert.areEqual$1(methods.length, 2, "Should be two methods");
            Bridge.Test.Assert.true(Bridge.referenceEquals(methods[0].n, "M2") || Bridge.referenceEquals(methods[1].n, "M2"));
            Bridge.Test.Assert.true(Bridge.referenceEquals(methods[0].n, "M3") || Bridge.referenceEquals(methods[1].n, "M3"));
        },
        structMemberReflectionWorks: function () {
            var methods = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.S1, 31, 28);
            Bridge.Test.Assert.areEqual$1(methods.length, 2, "Should be two methods");
            Bridge.Test.Assert.true(Bridge.referenceEquals(methods[0].n, "M2") || Bridge.referenceEquals(methods[1].n, "M2"));
            Bridge.Test.Assert.true(Bridge.referenceEquals(methods[0].n, "M3") || Bridge.referenceEquals(methods[1].n, "M3"));
        },
        isStaticFlagWorksForMethod: function () {
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C2, 31, 4)[0].is || false), false, "Instance member should not be static");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C2, 31, 8)[0].is || false), true, "Static member should be static");
        },
        memberTypeIsMethodForMethod: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C3, 8, 284, "M1").t, 8);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C21, 8, 284, "M1").t, 8);
        },
        isConstructorIsFalseForMethod: function () {
            Bridge.Test.Assert.areEqual((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C3, 8, 284, "M1").t === 1), false);
            Bridge.Test.Assert.areEqual((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C21, 8, 284, "M1").t === 1), false);
        },
        isConstructorIsTrueForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.true$1((Bridge.cast(c10[0], System.Reflection.ConstructorInfo).t === 1), "Unnamed");
            Bridge.Test.Assert.true$1((Bridge.cast(c10[1], System.Reflection.ConstructorInfo).t === 1), "Named");
            Bridge.Test.Assert.true$1((Bridge.cast(c11[0], System.Reflection.ConstructorInfo).t === 1), "Static method");
            Bridge.Test.Assert.true$1((Bridge.cast(c19[0], System.Reflection.ConstructorInfo).t === 1), "Object literal");
            Bridge.Test.Assert.true$1((Bridge.cast(c20[0], System.Reflection.ConstructorInfo).t === 1), "Inline code");
        },
        isStaticIsFalseForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.false$1((c10[0].is || false), "Unnamed");
            Bridge.Test.Assert.false$1((c10[1].is || false), "Named");
            Bridge.Test.Assert.false$1((c11[0].is || false), "Static method");
            Bridge.Test.Assert.false$1((c19[0].is || false), "Object literal");
            Bridge.Test.Assert.false$1((c20[0].is || false), "Inline code");
        },
        memberTypeIsConstructorForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.areEqual$1(c10[0].t, 1, "Unnamed");
            Bridge.Test.Assert.areEqual$1(c10[1].t, 1, "Named");
            Bridge.Test.Assert.areEqual$1(c11[0].t, 1, "Static method");
            Bridge.Test.Assert.areEqual$1(c19[0].t, 1, "Object literal");
            Bridge.Test.Assert.areEqual$1(c20[0].t, 1, "Inline code");
        },
        nameIsCtorForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.areEqual$1(c10[0].n, ".ctor", "Unnamed");
            Bridge.Test.Assert.areEqual$1(c10[1].n, ".ctor", "Named");
            Bridge.Test.Assert.areEqual$1(c11[0].n, ".ctor", "Static method");
            Bridge.Test.Assert.areEqual$1(c19[0].n, ".ctor", "Object literal");
            Bridge.Test.Assert.areEqual$1(c20[0].n, ".ctor", "Inline code");
        },
        declaringTypeIsCorrectForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.areEqual$1(c10[0].td, Bridge.ClientTest.Reflection.ReflectionTests.C10, "Unnamed");
            Bridge.Test.Assert.areEqual$1(c10[1].td, Bridge.ClientTest.Reflection.ReflectionTests.C10, "Named");
            Bridge.Test.Assert.areEqual$1(c11[0].td, Bridge.ClientTest.Reflection.ReflectionTests.C11, "Static method");
            Bridge.Test.Assert.areEqual$1(c19[0].td, Bridge.ClientTest.Reflection.ReflectionTests.C19, "Object literal");
            Bridge.Test.Assert.areEqual$1(c20[0].td, Bridge.ClientTest.Reflection.ReflectionTests.C20, "Inline code");
        },
        scriptNameIsCorrectForAllKindsOfConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.cast(c10[0], System.Reflection.ConstructorInfo).sn, "ctor"), "Unnamed");
            Bridge.Test.Assert.areEqual$1(Bridge.cast(c10[1], System.Reflection.ConstructorInfo).sn, "$ctor1", "Named");
            Bridge.Test.Assert.areEqual$1(Bridge.cast(c11[0], System.Reflection.ConstructorInfo).sn, "ctor", "Static method");
            Bridge.Test.Assert.true$1(Bridge.cast(c19[0], System.Reflection.ConstructorInfo).sn == null, "Object literal");
            Bridge.Test.Assert.true$1(Bridge.cast(c20[0], System.Reflection.ConstructorInfo).sn == null, "Inline code");
        },
        isStaticMethodIsTrueOnlyForStaticMethodConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.false$1((Bridge.cast(c10[0], System.Reflection.ConstructorInfo).sm || false), "Unnamed");
            Bridge.Test.Assert.false$1((Bridge.cast(c10[1], System.Reflection.ConstructorInfo).sm || false), "Named");
            Bridge.Test.Assert.false$1((Bridge.cast(c11[0], System.Reflection.ConstructorInfo).sm || false), "Static method");
            Bridge.Test.Assert.false$1((Bridge.cast(c19[0], System.Reflection.ConstructorInfo).sm || false), "Object literal");
            Bridge.Test.Assert.false$1((Bridge.cast(c20[0], System.Reflection.ConstructorInfo).sm || false), "Inline code");
        },
        isExpandParamsIsCorrectForConstructors: function () {
            var c1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C22, 1, 284, null, [System.Int32, Array]);
            var c2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C22, 1, 284, null, [String, Array]);
            var c3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C23, 1, 284, null, [System.Int32, Array]);
            var c4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C23, 1, 284, null, [String, Array]);
            Bridge.Test.Assert.false(c1.exp || false);
            Bridge.Test.Assert.true(c2.exp || false);
            Bridge.Test.Assert.false(c3.exp || false);
            Bridge.Test.Assert.true(c4.exp || false);
        },
        specialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.true$1(Bridge.staticEquals(Bridge.cast(c10[0], System.Reflection.ConstructorInfo).def, null), "Unnamed");
            Bridge.Test.Assert.true$1(Bridge.staticEquals(Bridge.cast(c10[1], System.Reflection.ConstructorInfo).def, null), "Named");
            Bridge.Test.Assert.true$1(Bridge.staticEquals(Bridge.cast(c11[0], System.Reflection.ConstructorInfo).def, null), "Static method");
            Bridge.Test.Assert.true$1(!Bridge.staticEquals(Bridge.cast(c19[0], System.Reflection.ConstructorInfo).def, null), "Object literal");
            Bridge.Test.Assert.true$1(!Bridge.staticEquals(Bridge.cast(c20[0], System.Reflection.ConstructorInfo).def, null), "Inline code");
        },
        declaringTypeShouldBeCorrectForMethods: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C3, 8, 284, "M1").td, Bridge.ClientTest.Reflection.ReflectionTests.C3, "Simple type");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C5$2, 8, 284, "M").td, Bridge.ClientTest.Reflection.ReflectionTests.C5$2, "Open generic type");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C5$2(System.Int32,String), 8, 284, "M").td, Bridge.ClientTest.Reflection.ReflectionTests.C5$2(System.Int32,String), "Constructed generic type");
        },
        returnTypeAndParameterTypesAreCorrectForMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C3, 8, 284, "M1");
            Bridge.Test.Assert.areEqual$1(m1.rt, System.Int32, "Return type should be int");
            Bridge.Test.Assert.areEqual$1((m1.p || []).length, 0, "M1 should have no parameters");

            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C3, 8, 284, "M2");
            Bridge.Test.Assert.areEqual$1((m2.p || []), [String], "M2 parameter types should be correct");

            var m3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C3, 8, 284, "M3");
            Bridge.Test.Assert.areEqual$1((m3.p || []), [String, System.Int32], "M3 parameter types should be correct");

            var m4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C7, 8, 284, "M1");
            Bridge.Test.Assert.false$1((m4.is || false), "M4 should not be static");
            Bridge.Test.Assert.areEqual$1((m4.p || []), [System.Int32], "C7.M1 parameters should be correct");

            var m5 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C21, 8, 284, "M1");
            Bridge.Test.Assert.areEqual$1(m5.rt, System.Int32, "M5 Return type should be int");
            Bridge.Test.Assert.false$1((m5.is || false), "M5 should not be static");
            Bridge.Test.Assert.areEqual$1((m5.p || []), [System.Int32, System.Int32], "M5 parameters should be correct");
        },
        parameterTypesShouldBeCorrectForConstructors: function () {
            var c10 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28);
            var c11 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28);
            var c19 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28);
            var c20 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28);
            Bridge.Test.Assert.areEqual$1((Bridge.cast(c10[0], System.Reflection.ConstructorInfo).p || []), [System.Int32], "Unnamed");
            Bridge.Test.Assert.areEqual$1((Bridge.cast(c10[1], System.Reflection.ConstructorInfo).p || []), [System.Int32, String], "Named");
            Bridge.Test.Assert.areEqual$1((Bridge.cast(c11[0], System.Reflection.ConstructorInfo).p || []), [Date], "Static method");
            Bridge.Test.Assert.areEqual$1((Bridge.cast(c19[0], System.Reflection.ConstructorInfo).p || []), [System.Int32, String], "Object literal");
            Bridge.Test.Assert.areEqual$1((Bridge.cast(c20[0], System.Reflection.ConstructorInfo).p || []), [System.Int32, String], "Object literal");
        },
        voidIsConsideredObjectAsReturnType: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C3, 8, 284, "M4").rt, Object, "Return type of void method should be object");
        },
        methodNameIsTheCSharpName: function () {
            var members = Bridge.cast(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C4, 31, 28), Array);
            Bridge.Test.Assert.areEqual$1(members.filter($_.Bridge.ClientTest.Reflection.ReflectionTests.f1).length, 3, "All methods should have name M");
        },
        typeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C5$2, 8, 284, "M");
            Bridge.Test.Assert.areEqual$1(m.rt, Object, "Return type should be object");
            Bridge.Test.Assert.areDeepEqual$1((m.p || []), [Object, String], "Parameters should be correct");
        },
        typeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C5$2(String,Date), 8, 284, "M");
            Bridge.Test.Assert.areEqual$1(m.rt, String, "Return type of M should be string");
            Bridge.Test.Assert.areDeepEqual$1((m.p || []), [Date, String], "Parameters to M should be correct");

            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C5$2(String,Date), 8, 284, "M2");
            Bridge.Test.Assert.areEqual$1(m2.rt, Object, "Return type of M2 should be object");
            Bridge.Test.Assert.areEqual$1((m2.p || []).length, 0, "M2 should not have any parameters");
        },
        methodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C6, 8, 284, "M1");
            Bridge.Test.Assert.areEqual$1(m.rt, Object, "Return type should be object");
            Bridge.Test.Assert.areDeepEqual$1((m.p || []), [Object, String], "Parameters should be correct");
        },
        isGenericMethodDefinitionAndTypeParameterCountWork: function () {
            Bridge.Test.Assert.true$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C6, 8, 284, "M1").tpc), "M1 should be generic");
            Bridge.Test.Assert.true$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C6, 8, 284, "M2").tpc), "M2 should be generic");
            Bridge.Test.Assert.false$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C6, 8, 284, "M3").tpc), "M3 should not be generic");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C6, 8, 284, "M1").tpc || 0), 2, "M1 should have 2 type parameters");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C6, 8, 284, "M2").tpc || 0), 1, "M2 should have 1 type parameters");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C6, 8, 284, "M3").tpc || 0), 0, "M3 should have 0 type parameters");
        },
        scriptNameWorksForAllKindsOfMethods: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C4, 8, 284, "M", [System.Int32]).sn, "m$1", "C4.M");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C21, 8, 284, "M1").sn == null, "C21.M1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C7, 8, 284, "M1").sn, "M1", "C7.m1");
        },
        specialImplementationExistsOnlyForMethodsImplementedAsInlineCode: function () {
            Bridge.Test.Assert.true$1(Bridge.staticEquals(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C4, 8, 284, "M", [System.Int32]).def, null), "C4.M");
            Bridge.Test.Assert.true$1(!Bridge.staticEquals(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C21, 8, 284, "M3").def, null), "C21.M3");
            Bridge.Test.Assert.true$1(Bridge.staticEquals(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C7, 8, 284, "M1").def, null), "C7.m1");
        },
        isExpandParamsIsCorrectForMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C22, 8, 284, "M1");
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C22, 8, 284, "M2");
            var m3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C23, 8, 284, "M1");
            var m4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C23, 8, 284, "M2");
            Bridge.Test.Assert.false(m1.exp || false);
            Bridge.Test.Assert.true(m2.exp || false);
            Bridge.Test.Assert.false(m3.exp || false);
            Bridge.Test.Assert.true(m4.exp || false);
        },
        createDelegateWorksForNonGenericInstanceMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M1");
            var c = new Bridge.ClientTest.Reflection.ReflectionTests.C8("X");
            var f1 = Bridge.Reflection.midel(m, c);
            var f2 = Bridge.Reflection.midel(m, c);
            Bridge.Test.Assert.areEqual$1(f1("a", "b"), "X a b", "Delegate created with delegate type should be correct");
            Bridge.Test.Assert.areEqual$1(f2("c", "d"), "X c d", "Delegate created without delegate type should be correct");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m);
            }, "Without target with delegate type should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m);
            }, "Without target without delegate type should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null);
            }, "Null target with delegate type should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null);
            }, "Null target without delegate type should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, [String]);
            }, "With type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, [String]);
            }, "With type arguments without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, [String]);
            }, "With type arguments with null target should throw");
        },
        delegateCreateDelegateWorksForNonGenericInstanceMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M1");
            var f1 = Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C8("X"));
            Bridge.Test.Assert.areEqual$1(f1("a", "b"), "X a b", "Delegate should be correct");
        },
        createDelegateWorksNonGenericStaticMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M2");
            var f1 = Bridge.Reflection.midel(m);
            var f2 = Bridge.Reflection.midel(m);
            var f3 = Bridge.Reflection.midel(m, null);
            var f4 = Bridge.Reflection.midel(m, null);
            Bridge.Test.Assert.areEqual$1(f1("a", "b"), "a b", "Delegate created with delegate type without target should be correct");
            Bridge.Test.Assert.areEqual$1(f2("c", "d"), "c d", "Delegate created without delegate type without target should be correct");
            Bridge.Test.Assert.areEqual$1(f3("e", "f"), "e f", "Delegate created with delegate type with null target should be correct");
            Bridge.Test.Assert.areEqual$1(f4("g", "h"), "g h", "Delegate created without delegate type with null target should be correct");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C8(""));
            }, "With target with delegate type should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C8(""));
            }, "With target without delegate type should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C8(""), [String]);
            }, "With type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, [String]);
            }, "With type arguments without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, [String]);
            }, "With type arguments with null target should throw");
        },
        createDelegateWorksNonGenericStaticMethodOfGenericType: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C9$2(System.Int32,String), 8, 284, "M");
            var f = Bridge.Reflection.midel(m);
            Bridge.Test.Assert.areEqual$1(f("a"), "System.Int32 String a", "Delegate should return correct results");
        },
        createDelegateWorksForGenericInstanceMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M3");
            var c = new Bridge.ClientTest.Reflection.ReflectionTests.C8("X");
            var f = Bridge.Reflection.midel(m, c, [System.Int32, String]);
            Bridge.Test.Assert.areEqual$1(f("a"), "X System.Int32 String a", "Result of invoking delegate should be correct");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, [System.Int32, String]);
            }, "Null target with correct type arguments should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c);
            }, "No type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(0, null));
            }, "0 type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(1, null));
            }, "1 type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(3, null));
            }, "3 type arguments with target should throw");
        },
        createDelegateWorksForGenericStaticMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M4");
            var f = Bridge.Reflection.midel(m, null, [System.Int32, String]);
            Bridge.Test.Assert.areEqual$1(f("a"), "System.Int32 String a", "Result of invoking delegate should be correct");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C8(""), [System.Int32, String]);
            }, "Target with correct type arguments should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null);
            }, "No type arguments without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(0, null));
            }, "0 type arguments without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(1, null));
            }, "1 type arguments without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(3, null));
            }, "3 type arguments without target should throw");
        },
        invokeWorksForNonGenericInstanceMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M1");
            var argsArr = ["c", "d"];
            var c = new Bridge.ClientTest.Reflection.ReflectionTests.C8("X");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, c)("a", "b"), "X a b", "Invoke with target should work");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, c).apply(null, argsArr), "X c d", "Invoke (non-expanded) with target should work");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null)("a", "b");
            }, "Invoke without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, [String])("a", "b");
            }, "Invoke with type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, [String])("a", "b");
            }, "Invoke with type arguments without target should throw");
        },
        invokeWorksForNonGenericStaticMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M2");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, null)("a", "b"), "a b", "Invoke without target should work");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C8(""))("a", "b");
            }, "Invoke with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C8(""), [String])("a", "b");
            }, "Invoke with type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, [String])("a", "b");
            }, "Invoke with type arguments without target should throw");
        },
        invokeWorksForNonGenericInstanceMethodsOnSerializableTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C7, 8, 284, "M1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C7(), {
                    x: 13
                } ))(14), 27, "Invoke should work");
        },
        invokeWorksForNonGenericInlineCodeMethods: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C21, 8, 284, "M1"), new Bridge.ClientTest.Reflection.ReflectionTests.C21(14))(15, 16), 45, "Instance invoke should work");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C21, 8, 284, "M2"), null)(15, 16), 31, "Static invoke should work");
        },
        invokeWorksForGenericInlineCodeMethods: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C21, 8, 284, "M3");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C21(42), [String])("World"), "42StringWorld", "Invoke should work");
        },
        invokeWorksForGenericInstanceMethod: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M3");
            var argsArr = ["x"];
            var c = new Bridge.ClientTest.Reflection.ReflectionTests.C8("X");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, c, [System.Int32, String])("a"), "X System.Int32 String a", "Result of invoking delegate should be correct");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, c, [System.Int32, String]).apply(null, argsArr), "X System.Int32 String x", "Result of invoking delegate should be correct");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, [System.Int32, String])("a");
            }, "Null target with correct type arguments should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c)("a");
            }, "No type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(0, null))("a");
            }, "0 type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(1, null))("a");
            }, "1 type arguments with target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, c, System.Array.init(3, null))("a");
            }, "3 type arguments with target should throw");
        },
        invokeWorksForGenericStaticMethod: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C8, 8, 284, "M4");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, null, [System.Int32, String])("a"), "System.Int32 String a", "Result of invoking delegate should be correct");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, new Bridge.ClientTest.Reflection.ReflectionTests.C8(""), [System.Int32, String])("a");
            }, "Target with correct type arguments should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null)("a");
            }, "No type arguments without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(0, null))("a");
            }, "0 type arguments without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(1, null))("a");
            }, "1 type arguments without target should throw");
            Bridge.Test.Assert.throws$5(function () {
                Bridge.Reflection.midel(m, null, System.Array.init(3, null))("a");
            }, "3 type arguments without target should throw");
        },
        invokeWorksForGenericInstanceMethodsOnSerializableTypes: function () {
            var m = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C7, 8, 284, "M3");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(m, Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C7(), {
                    x: 13
                } ), [System.Int32, String])("Suffix"), "13 System.Int32 String Suffix", "Invoke should work");
        },
        invokeWorksForExpandParamsMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C22, 8, 284, "M2");
            var r1 = Bridge.cast(Bridge.Reflection.midel(m1, new Bridge.ClientTest.Reflection.ReflectionTests.C22.ctor(0, null)).apply(null, [2, [17, 31]]), Array);
            Bridge.Test.Assert.areEqual(r1, [2, [17, 31]]);

            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C23, 8, 284, "M2");
            var r2 = Bridge.cast(Bridge.Reflection.midel(m2, new Bridge.ClientTest.Reflection.ReflectionTests.C23.ctor(0, null)).apply(null, [2, [17, 32]]), Array);
            Bridge.Test.Assert.areEqual(r2, [2, [17, 32]]);
        },
        invokeWorksForAllKindsOfConstructors: function () {
            var c1 = Bridge.cast(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28).filter($_.Bridge.ClientTest.Reflection.ReflectionTests.f2)[0], System.Reflection.ConstructorInfo);
            var o1 = Bridge.cast(Bridge.Reflection.invokeCI(c1, [42]), Bridge.ClientTest.Reflection.ReflectionTests.C10);
            Bridge.Test.Assert.areEqual$1(o1.x, 42, "o1.X");
            Bridge.Test.Assert.areEqual$1(o1.s, "X", "o1.S");

            var c2 = Bridge.cast(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C10, 31, 28).filter($_.Bridge.ClientTest.Reflection.ReflectionTests.f3)[0], System.Reflection.ConstructorInfo);
            var o2 = Bridge.cast(Bridge.Reflection.invokeCI(c2, [14, "Hello"]), Bridge.ClientTest.Reflection.ReflectionTests.C10);
            Bridge.Test.Assert.areEqual$1(o2.x, 14, "o2.X");
            Bridge.Test.Assert.areEqual$1(o2.s, "Hello", "o2.S");

            var c3 = Bridge.cast(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C11, 31, 28)[0], System.Reflection.ConstructorInfo);
            var o3 = Bridge.cast(Bridge.Reflection.invokeCI(c3, [new Date(2012, 1 - 1, 2)]), Bridge.ClientTest.Reflection.ReflectionTests.C11);
            Bridge.Test.Assert.areEqual$1(o3.D, new Date(2012, 1 - 1, 2), "o3.D");

            var c19 = Bridge.cast(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C19, 31, 28)[0], System.Reflection.ConstructorInfo);
            var o4 = Bridge.Reflection.invokeCI(c19, [42, "Hello"]);
            Bridge.Test.Assert.areDeepEqual(o4, { a: 42, b: "Hello" });

            var c20 = Bridge.cast(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C20, 31, 28)[0], System.Reflection.ConstructorInfo);
            var o5 = Bridge.Reflection.invokeCI(c20, [42, "Hello"]);
            Bridge.Test.Assert.areDeepEqual(o5, { a: 42, b: "Hello" });
        },
        invokeWorksForExpandParamsConstructors: function () {
            var c1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C22, 1, 284, null, [String, Array]);
            var o1 = Bridge.cast(Bridge.Reflection.invokeCI(c1, ["a", ["b", "c"]]), Bridge.ClientTest.Reflection.ReflectionTests.C22);
            Bridge.Test.Assert.areEqual$1(o1.a, "a", "o1.a");
            Bridge.Test.Assert.areEqual$1(o1.b, ["b", "c"], "o1.b");

            var c2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C23, 1, 284, null, [String, Array]);
            var o2 = Bridge.cast(Bridge.Reflection.invokeCI(c2, ["a", ["b", "c"]]), Bridge.ClientTest.Reflection.ReflectionTests.C23);
            Bridge.Test.Assert.areEqual$1(o2.a, "a", "o1.a");
            Bridge.Test.Assert.areEqual$1(o2.b, ["b", "c"], "o1.b");
        },
        memberTypeIsFieldForField: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F1").t, 4, "Instance");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F3").t, 4, "Static");
        },
        declaringTypeIsCorrectForField: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F1").td, Bridge.ClientTest.Reflection.ReflectionTests.C12, "Instance");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F3").td, Bridge.ClientTest.Reflection.ReflectionTests.C12, "Static");
        },
        nameIsCorrectForField: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F1").n, "F1", "Instance");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F3").n, "F3", "Static");
        },
        isStaticIsCorrectForField: function () {
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F1").is || false), false, "Instance 1");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F2").is || false), false, "Instance 2");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F3").is || false), true, "Static");
        },
        fieldTypeIsCorrectForField: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F1").rt, System.Int32, "Instance 1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F2").rt, Date, "Instance 2");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F3").rt, String, "Static");
        },
        scriptNameIsCorrectForField: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F1").sn, "F1", "f1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F2").sn, "renamedF2", "f2");
        },
        getValueWorksForInstanceField: function () {
            var c = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C12(), {
                F1: 42
            } );
            Bridge.Test.Assert.areEqual(Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F1"), c), 42);
        },
        getValueWorksForStaticField: function () {
            Bridge.ClientTest.Reflection.ReflectionTests.C12.F3 = "X_Test";
            Bridge.Test.Assert.areEqual(Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F3"), null), "X_Test");
        },
        setValueWorksForInstanceField: function () {
            var c = new Bridge.ClientTest.Reflection.ReflectionTests.C12();
            Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F1"), c, 14);
            Bridge.Test.Assert.areEqual(c.F1, 14);
        },
        setValueWorksForStaticField: function () {
            Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C12, 4, 284, "F3"), null, "Hello, world");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Reflection.ReflectionTests.C12.F3, "Hello, world");
        },
        memberTypeIsEventForEvent: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E1").t, 2, "Instance");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E2").t, 2, "Static");
        },
        declaringTypeIsCorrectForEvent: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E1").td, Bridge.ClientTest.Reflection.ReflectionTests.C13, "Instance");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E2").td, Bridge.ClientTest.Reflection.ReflectionTests.C13, "Static");
        },
        nameIsCorrectForEvent: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E1").n, "E1", "Instance");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E2").n, "E2", "Static");
        },
        isStaticIsCorrectForEvent: function () {
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E1").is || false), false, "Instance");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E2").is || false), true, "Static");
        },
        addEventHandlerMethodWorksForInstanceEvent: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var obj = new Bridge.ClientTest.Reflection.ReflectionTests.C13();
            var e = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E1");
            Bridge.Reflection.midel(e.ad, obj)(handler);
            obj.raiseE1();
            Bridge.Test.Assert.areEqual$1(i, 1, "Event should have been raised");
        },
        addEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var obj = new Bridge.ClientTest.Reflection.ReflectionTests.C13();
            var e = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E3");
            Bridge.Reflection.midel(e.ad, obj)(handler);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(obj.addedE3Handler, handler), "Event handler should have been added");
        },
        addEventHandlerMethodWorksForStaticEvent: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var e = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E2");
            Bridge.Reflection.midel(e.ad, null)(handler);
            Bridge.ClientTest.Reflection.ReflectionTests.C13.raiseE2();
            Bridge.Test.Assert.areEqual$1(i, 1, "Event should have been raised");
        },
        addEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var e = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E4");
            Bridge.Reflection.midel(e.ad, null)(handler);
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.ClientTest.Reflection.ReflectionTests.C13.addedE4Handler, handler), "Event handler should have been added");
        },
        removeEventHandlerMethodWorksForInstanceEvent: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var obj = new Bridge.ClientTest.Reflection.ReflectionTests.C13();
            obj.addE1(handler);
            obj.raiseE1();

            Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E1").r, obj)(handler);
            obj.raiseE1();

            Bridge.Test.Assert.areEqual$1(i, 1, "Event handler should have been removed");
        },
        removeEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            var obj = new Bridge.ClientTest.Reflection.ReflectionTests.C13();

            Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E3").r, obj)(handler);

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(obj.removedE3Handler, handler), "Event handler should have been removed");
        },
        removeEventHandlerMethodWorksForStaticEvent: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };
            Bridge.ClientTest.Reflection.ReflectionTests.C13.addE2(handler);
            Bridge.ClientTest.Reflection.ReflectionTests.C13.raiseE2();

            Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E2").r, null)(handler);
            Bridge.ClientTest.Reflection.ReflectionTests.C13.raiseE2();

            Bridge.Test.Assert.areEqual$1(i, 1, "Event handler should have been removed");
        },
        removeEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod: function () {
            var i = 0;
            var handler = function () {
                Bridge.identity(i, (i = (i + 1) | 0));
            };

            Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E4").r, null)(handler);

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(Bridge.ClientTest.Reflection.ReflectionTests.C13.removedE4Handler, handler), "Event handler should have been removed");
        },
        propertiesForAddMethodAreCorrect: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E1").ad;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E2").ad;

            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m1.MemberType");
            Bridge.Test.Assert.areEqual$1(m2.t, 8, "m2.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.n, "add_E1", "m1.Name");
            Bridge.Test.Assert.areEqual$1(m2.n, "add_E2", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m1.td, Bridge.ClientTest.Reflection.ReflectionTests.C13, "m1.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m2.td, Bridge.ClientTest.Reflection.ReflectionTests.C13, "m2.DeclaringType");
            Bridge.Test.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.Assert.areEqual$1((m1.p || []), [Function], "m1.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m2.p || []), [Function], "m2.ParameterTypes");
            Bridge.Test.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.Assert.areEqual$1(m1.rt, Object, "m1.ReturnType");
            Bridge.Test.Assert.areEqual$1(m2.rt, Object, "m2.ReturnType");
            Bridge.Test.Assert.areEqual$1((m1.tpc || 0), 0, "m1.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m2.tpc || 0), 0, "m2.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((!!m1.tpc), false, "m1.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m2.IsGenericMethodDefinition");

            var i1 = 0, i2 = 0;
            var obj = new Bridge.ClientTest.Reflection.ReflectionTests.C13();
            var handler1 = function () {
                Bridge.identity(i1, (i1 = (i1 + 1) | 0));
            }, handler2 = function () {
                Bridge.identity(i2, (i2 = (i2 + 1) | 0));
            };
            Bridge.Reflection.midel(m1, obj)(handler1);
            obj.raiseE1();
            Bridge.Test.Assert.areEqual$1(i1, 1, "m1.Invoke");

            Bridge.Reflection.midel(m2, null)(handler2);
            Bridge.ClientTest.Reflection.ReflectionTests.C13.raiseE2();
            Bridge.Test.Assert.areEqual$1(i2, 1, "m2.Invoke");
        },
        propertiesForRemoveMethodAreCorrect: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E1").r;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C13, 2, 284, "E2").r;

            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m1.MemberType");
            Bridge.Test.Assert.areEqual$1(m2.t, 8, "m2.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.n, "remove_E1", "m1.Name");
            Bridge.Test.Assert.areEqual$1(m2.n, "remove_E2", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m1.td, Bridge.ClientTest.Reflection.ReflectionTests.C13, "m1.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m2.td, Bridge.ClientTest.Reflection.ReflectionTests.C13, "m2.DeclaringType");
            Bridge.Test.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.Assert.areEqual$1((m1.p || []), [Function], "m1.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m2.p || []), [Function], "m2.ParameterTypes");
            Bridge.Test.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.Assert.areEqual$1(m1.rt, Object, "m1.ReturnType");
            Bridge.Test.Assert.areEqual$1(m2.rt, Object, "m2.ReturnType");
            Bridge.Test.Assert.areEqual$1((m1.tpc || 0), 0, "m1.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m2.tpc || 0), 0, "m2.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((!!m1.tpc), false, "m1.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m2.IsGenericMethodDefinition");

            var i1 = 0, i2 = 0;
            var obj = new Bridge.ClientTest.Reflection.ReflectionTests.C13();
            var handler1 = function () {
                Bridge.identity(i1, (i1 = (i1 + 1) | 0));
            }, handler2 = function () {
                Bridge.identity(i2, (i2 = (i2 + 1) | 0));
            };
            obj.addE1(handler1);
            Bridge.Reflection.midel(m1, obj)(handler1);
            obj.raiseE1();
            Bridge.Test.Assert.areEqual$1(i1, 0, "m1.Invoke");

            Bridge.ClientTest.Reflection.ReflectionTests.C13.addE2(handler2);
            Bridge.Reflection.midel(m2, null)(handler2);
            Bridge.ClientTest.Reflection.ReflectionTests.C13.raiseE2();
            Bridge.Test.Assert.areEqual$1(i2, 0, "m2.Invoke");
        },
        memberTypeIsPropertyForProperty: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").t, 16, "P1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").t, 16, "P2");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").t, 16, "P3");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").t, 16, "P4");
        },
        scriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties: function () {
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").fn == null, "P1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").fn, "P2", "P2");
        },
        memberTypeIsPropertyForIndexer: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").t, 16);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C24, 16, 284, "Item").t, 16);
        },
        declaringTypeIsCorrectForProperty: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "P1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "P2");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "P3");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "P4");
        },
        declaringTypeIsCorrectForIndexer: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").td, Bridge.ClientTest.Reflection.ReflectionTests.C15);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C24, 16, 284, "Item").td, Bridge.ClientTest.Reflection.ReflectionTests.C24);
        },
        nameIsCorrectForProperty: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").n, "P1");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").n, "P2");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").n, "P3");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").n, "P4");
        },
        nameIsCorrectForIndexer: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").n, "Item");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C24, 16, 284, "Item").n, "Item");
        },
        isStaticIsCorrectForProperty: function () {
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").is || false), false, "P1");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").is || false), false, "P2");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").is || false), true, "P3");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").is || false), true, "P4");
        },
        isStaticIsFalseForIndexer: function () {
            Bridge.Test.Assert.areEqual((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").is || false), false);
            Bridge.Test.Assert.areEqual((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C24, 16, 284, "Item").is || false), false);
        },
        propertyTypeIsCorrectForProperty: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").rt, System.Int32, "P1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").rt, String, "P2");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").rt, Date, "P3");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").rt, System.Double, "P4");
        },
        propertyTypeIsCorrectForIndexer: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").rt, String);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C24, 16, 284, "Item").rt, String);
        },
        indexParameterTypesAreEmptyForProperty: function () {
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").p || []), System.Array.init(0, null), "P1");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").p || []), System.Array.init(0, null), "P2");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").p || []), System.Array.init(0, null), "P3");
            Bridge.Test.Assert.areEqual$1((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").p || []), System.Array.init(0, null), "P4");
        },
        indexParameterTypesAreCorrectForIndexer: function () {
            Bridge.Test.Assert.areEqual((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").p || []), [System.Int32, String]);
            Bridge.Test.Assert.areEqual((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C24, 16, 284, "Item").p || []), [System.Int32, String]);
        },
        propertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").g;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").g;
            var m3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P13").g;
            var m4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P14").g;

            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m1.MemberType");
            Bridge.Test.Assert.areEqual$1(m2.t, 8, "m2.MemberType");
            Bridge.Test.Assert.areEqual$1(m3.t, 8, "m3.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.n, "get_P1", "m1.Name");
            Bridge.Test.Assert.areEqual$1(m2.n, "get_P3", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m3.n, "get_P13", "m3.Name");
            Bridge.Test.Assert.areEqual$1(m1.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m1.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m2.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m2.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m3.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m3.DeclaringType");
            Bridge.Test.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.Assert.false$1((m3.is || false), "m3.IsStatic");
            Bridge.Test.Assert.areEqual$1((m1.p || []).length, 0, "m1.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m2.p || []).length, 0, "m2.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m3.p || []).length, 0, "m3.ParameterTypes");
            Bridge.Test.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.Assert.false$1((m3.t === 1), "m3.IsConstructor");
            Bridge.Test.Assert.areEqual$1(m1.rt, System.Int32, "m1.ReturnType");
            Bridge.Test.Assert.areEqual$1(m2.rt, Date, "m2.ReturnType");
            Bridge.Test.Assert.areEqual$1(m3.rt, System.Int32, "m3.ReturnType");
            Bridge.Test.Assert.areEqual$1((m1.tpc || 0), 0, "m1.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m2.tpc || 0), 0, "m2.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m3.tpc || 0), 0, "m3.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((!!m1.tpc), false, "m1.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m2.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m3.tpc), false, "m3.IsGenericMethodDefinition");

            var c = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C14(), {
                setP1: 78
            } );
            var p1 = Bridge.Reflection.midel(m1, c)(null);
            Bridge.Test.Assert.areEqual$1(p1, 78, "m1.Invoke");

            Bridge.ClientTest.Reflection.ReflectionTests.C14.setP3(new Date(2012, 4 - 1, 2));
            var p2 = Bridge.Reflection.midel(m2, null)(null);
            Bridge.Test.Assert.areEqual$1(p2, new Date(2012, 4 - 1, 2), "m2.Invoke");

            c = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C14(), {
                p13Field: 13
            } );
            var p3 = Bridge.Reflection.midel(m3, c)(null);
            Bridge.Test.Assert.areEqual$1(p3, 13, "m3.Invoke");

            Bridge.ClientTest.Reflection.ReflectionTests.C14.p14Field = 124;
            var p4 = Bridge.Reflection.midel(m4, null)(null);
            Bridge.Test.Assert.areEqual$1(p4, 124, "m4.Invoke");
        },
        propertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").s;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").s;
            var m3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P13").s;
            var m4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P14").s;

            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m1.MemberType");
            Bridge.Test.Assert.areEqual$1(m2.t, 8, "m2.MemberType");
            Bridge.Test.Assert.areEqual$1(m3.t, 8, "m3.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.n, "set_P1", "m1.Name");
            Bridge.Test.Assert.areEqual$1(m2.n, "set_P3", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m3.n, "set_P13", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m1.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m1.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m2.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m2.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m3.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m3.DeclaringType");
            Bridge.Test.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.Assert.false$1((m3.is || false), "m3.IsStatic");
            Bridge.Test.Assert.areEqual$1((m1.p || []), [System.Int32], "m1.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m2.p || []), [Date], "m2.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m3.p || []), [System.Int32], "m3.ParameterTypes");
            Bridge.Test.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.Assert.false$1((m3.t === 1), "m3.IsConstructor");
            Bridge.Test.Assert.areEqual$1(m1.rt, Object, "m1.ReturnType");
            Bridge.Test.Assert.areEqual$1(m2.rt, Object, "m2.ReturnType");
            Bridge.Test.Assert.areEqual$1(m3.rt, Object, "m3.ReturnType");
            Bridge.Test.Assert.areEqual$1((m1.tpc || 0), 0, "m1.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m2.tpc || 0), 0, "m2.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m3.tpc || 0), 0, "m3.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((!!m1.tpc), false, "m1.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m2.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m3.IsGenericMethodDefinition");

            var c = new Bridge.ClientTest.Reflection.ReflectionTests.C14();
            Bridge.Reflection.midel(m1, c)(42);
            Bridge.Test.Assert.areEqual$1(c.getP1(), 42, "m1.Invoke");

            Bridge.ClientTest.Reflection.ReflectionTests.C14.setP3(new Date(2010, 1 - 1, 1));
            Bridge.Reflection.midel(m2, null)(new Date(2012, 2 - 1, 3));
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Reflection.ReflectionTests.C14.getP3(), new Date(2012, 2 - 1, 3), "m2.Invoke");

            c = new Bridge.ClientTest.Reflection.ReflectionTests.C14();
            Bridge.Reflection.midel(m3, c)(422);
            Bridge.Test.Assert.areEqual$1(c.p13Field, 422, "m3.Invoke");

            Bridge.ClientTest.Reflection.ReflectionTests.C14.p14Field = 11;
            Bridge.Reflection.midel(m4, null)(52);
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Reflection.ReflectionTests.C14.p14Field, 52, "m4.Invoke");
        },
        propertiesForGetMethodAreCorrectForPropertyImplementedAsFields: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").g;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").g;

            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m1.MemberType");
            Bridge.Test.Assert.areEqual$1(m2.t, 8, "m2.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.n, "get_P2", "m1.Name");
            Bridge.Test.Assert.areEqual$1(m2.n, "get_P4", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m1.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m1.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m2.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m2.DeclaringType");
            Bridge.Test.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.Assert.areEqual$1((m1.p || []).length, 0, "m1.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m2.p || []).length, 0, "m2.ParameterTypes");
            Bridge.Test.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.Assert.areEqual$1(m1.rt, String, "m1.ReturnType");
            Bridge.Test.Assert.areEqual$1(m2.rt, System.Double, "m2.ReturnType");
            Bridge.Test.Assert.areEqual$1((m1.tpc || 0), 0, "m1.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m2.tpc || 0), 0, "m2.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((!!m1.tpc), false, "m1.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m2.IsGenericMethodDefinition");

            var c = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C14(), {
                P2: "Hello, world"
            } );
            var p1 = Bridge.Reflection.midel(m1, c)(null);
            Bridge.Test.Assert.areEqual$1(p1, "Hello, world", "m1.Invoke");

            Bridge.ClientTest.Reflection.ReflectionTests.C14.P4 = 3.5;
            var p2 = Bridge.Reflection.midel(m2, null)(null);
            Bridge.Test.Assert.areEqual$1(p2, 3.5, "m2.Invoke");
        },
        propertiesForSetMethodAreCorrectForPropertyImplementedAsFields: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").s;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").s;

            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m1.MemberType");
            Bridge.Test.Assert.areEqual$1(m2.t, 8, "m2.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.n, "set_P2", "m1.Name");
            Bridge.Test.Assert.areEqual$1(m2.n, "set_P4", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m1.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m1.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m2.td, Bridge.ClientTest.Reflection.ReflectionTests.C14, "m2.DeclaringType");
            Bridge.Test.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.Assert.true$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.Assert.areEqual$1((m1.p || []), [String], "m1.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m2.p || []), [System.Double], "m2.ParameterTypes");
            Bridge.Test.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.Assert.areEqual$1(m1.rt, Object, "m1.ReturnType");
            Bridge.Test.Assert.areEqual$1(m2.rt, Object, "m2.ReturnType");
            Bridge.Test.Assert.areEqual$1((m1.tpc || 0), 0, "m1.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m2.tpc || 0), 0, "m2.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((!!m1.tpc), false, "m1.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m2.IsGenericMethodDefinition");

            var c = new Bridge.ClientTest.Reflection.ReflectionTests.C14();
            Bridge.Reflection.midel(m1, c)("Something");
            Bridge.Test.Assert.areEqual$1(c.P2, "Something", "m1.Invoke");

            Bridge.ClientTest.Reflection.ReflectionTests.C14.P4 = 7.5;
            Bridge.Reflection.midel(m2, null)(2.5);
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Reflection.ReflectionTests.C14.P4, 2.5, "m2.Invoke");
        },
        propertiesForGetMethodAreCorrectForIndexer: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").g;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C24, 16, 284, "Item").g;

            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m1.MemberType");
            Bridge.Test.Assert.areEqual$1(m2.t, 8, "m2.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.n, "get_Item", "m1.Name");
            Bridge.Test.Assert.areEqual$1(m2.n, "get_Item", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m1.td, Bridge.ClientTest.Reflection.ReflectionTests.C15, "m1.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m2.td, Bridge.ClientTest.Reflection.ReflectionTests.C24, "m2.DeclaringType");
            Bridge.Test.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.Assert.false$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.Assert.areEqual$1((m1.p || []), [System.Int32, String], "m1.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m2.p || []), [System.Int32, String], "m2.ParameterTypes");
            Bridge.Test.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.Assert.areEqual$1(m1.rt, String, "m1.ReturnType");
            Bridge.Test.Assert.areEqual$1(m2.rt, String, "m2.ReturnType");
            Bridge.Test.Assert.areEqual$1((m1.tpc || 0), 0, "m1.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m2.tpc || 0), 0, "m2.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((!!m1.tpc), false, "m1.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m2.IsGenericMethodDefinition");

            var c1 = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C15(), {
                v: "X"
            } );
            var v1 = Bridge.Reflection.midel(m1, c1)(42, "Hello");
            Bridge.Test.Assert.areEqual$1(v1, "X 42 Hello", "m1.Invoke");

            var c2 = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C24(), {
                v: "Y"
            } );
            var v2 = Bridge.Reflection.midel(m2, c2)(24, "World");
            Bridge.Test.Assert.areEqual$1(v2, "Y 24 World", "m2.Invoke");
        },
        propertiesForSetMethodAreCorrectForIndexer: function () {
            var m1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").s;
            var m2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C24, 16, 284, "Item").s;

            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m1.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.t, 8, "m2.MemberType");
            Bridge.Test.Assert.areEqual$1(m1.n, "set_Item", "m1.Name");
            Bridge.Test.Assert.areEqual$1(m2.n, "set_Item", "m2.Name");
            Bridge.Test.Assert.areEqual$1(m1.td, Bridge.ClientTest.Reflection.ReflectionTests.C15, "m1.DeclaringType");
            Bridge.Test.Assert.areEqual$1(m2.td, Bridge.ClientTest.Reflection.ReflectionTests.C24, "m2.DeclaringType");
            Bridge.Test.Assert.false$1((m1.is || false), "m1.IsStatic");
            Bridge.Test.Assert.false$1((m2.is || false), "m2.IsStatic");
            Bridge.Test.Assert.areEqual$1((m1.p || []), [System.Int32, String, String], "m1.ParameterTypes");
            Bridge.Test.Assert.areEqual$1((m2.p || []), [System.Int32, String, String], "m2.ParameterTypes");
            Bridge.Test.Assert.false$1((m1.t === 1), "m1.IsConstructor");
            Bridge.Test.Assert.false$1((m2.t === 1), "m2.IsConstructor");
            Bridge.Test.Assert.areEqual$1(m1.rt, Object, "m1.ReturnType");
            Bridge.Test.Assert.areEqual$1(m2.rt, Object, "m2.ReturnType");
            Bridge.Test.Assert.areEqual$1((m1.tpc || 0), 0, "m1.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((m2.tpc || 0), 0, "m2.TypeParameterCount");
            Bridge.Test.Assert.areEqual$1((!!m1.tpc), false, "m1.IsGenericMethodDefinition");
            Bridge.Test.Assert.areEqual$1((!!m2.tpc), false, "m2.IsGenericMethodDefinition");

            var c1 = new Bridge.ClientTest.Reflection.ReflectionTests.C15();
            Bridge.Reflection.midel(m1, c1)(42, "Hello", "The_value");

            Bridge.Test.Assert.areEqual$1(c1.x, 42, "m1.Invoke (x)");
            Bridge.Test.Assert.areEqual$1(c1.s, "Hello", "m1.Invoke (s)");
            Bridge.Test.Assert.areEqual$1(c1.v, "The_value", "m1.Invoke (value)");

            var c2 = new Bridge.ClientTest.Reflection.ReflectionTests.C24();
            Bridge.Reflection.midel(m2, c2)(234, "World", "Other_value");

            Bridge.Test.Assert.areEqual$1(c2.x, 234, "m2.Invoke (x)");
            Bridge.Test.Assert.areEqual$1(c2.s, "World", "m2.Invoke (s)");
            Bridge.Test.Assert.areEqual$1(c2.v, "Other_value", "m2.Invoke (value)");
        },
        canReadAndWriteAndPropertiesWithOnlyOneAccessor: function () {
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").g), true, "P1.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").s), true, "P1.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").g), true, "P2.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").s), true, "P2.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").g), true, "P3.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").s), true, "P3.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").g), true, "P4.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").s), true, "P4.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P5").g), true, "P5.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P5").s), false, "P5.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P6").g), true, "P6.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P6").s), true, "P6.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P7").g), true, "P7.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P7").s), false, "P7.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P8").g), true, "P8.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P8").s), true, "P8.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P9").g), false, "P9.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P9").s), true, "P9.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P10").g), true, "P10.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P10").s), true, "P10.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P11").g), false, "P11.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P11").s), true, "P11.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P12").g), true, "P12.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P12").s), true, "P12.CanWrite");

            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").g != null, "P1.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1").s != null, "P1.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").g != null, "P2.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2").s != null, "P2.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").g != null, "P3.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3").s != null, "P3.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").g != null, "P4.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4").s != null, "P4.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P5").g != null, "P5.GetMethod");
            Bridge.Test.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P5").s != null, "P5.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P6").g != null, "P6.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P6").s != null, "P6.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P7").g != null, "P7.GetMethod");
            Bridge.Test.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P7").s != null, "P7.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P8").g != null, "P8.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P8").s != null, "P8.SetMethod");
            Bridge.Test.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P9").g != null, "P9.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P9").s != null, "P9.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P10").g != null, "P10.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P10").s != null, "P10.SetMethod");
            Bridge.Test.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P11").g != null, "P11.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P11").s != null, "P11.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P12").g != null, "P12.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P12").s != null, "P12.SetMethod");
        },
        canReadAndWriteAndIndexersWithOnlyOneAccessor: function () {
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").g), true, "C15.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").s), true, "C15.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C16, 16, 284, "Item").g), true, "C16.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C16, 16, 284, "Item").s), false, "C16.CanWrite");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C17, 16, 284, "Item").g), false, "C17.CanRead");
            Bridge.Test.Assert.areEqual$1((!!Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C17, 16, 284, "Item").s), true, "C17.CanWrite");

            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").g != null, "C15.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item").s != null, "C15.SetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C16, 16, 284, "Item").g != null, "C16.GetMethod");
            Bridge.Test.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C16, 16, 284, "Item").s != null, "C16.SetMethod");
            Bridge.Test.Assert.false$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C17, 16, 284, "Item").g != null, "C17.GetMethod");
            Bridge.Test.Assert.true$1(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C17, 16, 284, "Item").s != null, "C17.SetMethod");
        },
        propertyInfoGetValueWorks: function () {
            var p1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1");
            var p2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2");
            var p3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3");
            var p4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4");
            var i = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item");

            var c14 = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C14(), {
                setP1: 42,
                P2: "Hello, world!"
            } );
            Bridge.ClientTest.Reflection.ReflectionTests.C14.setP3(new Date(2013, 3 - 1, 5));
            Bridge.ClientTest.Reflection.ReflectionTests.C14.P4 = 7.5;
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(p1.g, c14)(), 42, "P1.GetValue");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(p2.g, c14)(), "Hello, world!", "P2.GetValue");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(p3.g, null)(), new Date(2013, 3 - 1, 5), "P3.GetValue");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(p4.g, null)(), 7.5, "P4.GetValue");

            var c15 = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C15(), {
                v: "X"
            } );
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.midel(i.g, c15).apply(null, [42, "Hello"]), "X 42 Hello", "Item.GetValue");
        },
        propertyInfoSetValueWorks: function () {
            var p1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P1");
            var p2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P2");
            var p3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P3");
            var p4 = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C14, 16, 284, "P4");
            var i = Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C15, 16, 284, "Item");

            var c14 = new Bridge.ClientTest.Reflection.ReflectionTests.C14();
            Bridge.Reflection.midel(p1.s, c14)(42);
            Bridge.Reflection.midel(p2.s, c14)("Hello, world!");
            Bridge.Reflection.midel(p3.s, null)(new Date(2013, 3 - 1, 5));
            Bridge.Reflection.midel(p4.s, null)(7.5);

            Bridge.Test.Assert.areEqual$1(c14.getP1(), 42, "P1.SetValue");
            Bridge.Test.Assert.areEqual$1(c14.P2, "Hello, world!", "P2.SetValue");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Reflection.ReflectionTests.C14.getP3(), new Date(2013, 3 - 1, 5), "P3.SetValue");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Reflection.ReflectionTests.C14.P4, 7.5, "P4.SetValue");

            var c15 = Bridge.merge(new Bridge.ClientTest.Reflection.ReflectionTests.C15(), {
                v: "X"
            } );
            Bridge.Reflection.midel(i.s, c15).apply(null, [378, "X"].concat("The_value"));
            Bridge.Test.Assert.areEqual$1(c15.s, "X", "Item.SetValue.s");
            Bridge.Test.Assert.areEqual$1(c15.x, 378, "Item.SetValue.x");
            Bridge.Test.Assert.areEqual$1(c15.v, "The_value", "Item.SetValue.value");
        },
        testMemberAttribute: function (member, expectedA1) {
            var all = (member.at || []);
            Bridge.Test.Assert.areEqual(all.length, 2);
            Bridge.Test.Assert.true(Bridge.is(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute) || Bridge.is(all[1], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute));
            Bridge.Test.Assert.true(Bridge.is(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute) || Bridge.is(all[1], Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute));
            Bridge.Test.Assert.areEqual(Bridge.cast((Bridge.is(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute) ? all[0] : all[1]), Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute).getX(), expectedA1);

            all = (member.at || []);
            Bridge.Test.Assert.areEqual(all.length, 2);
            Bridge.Test.Assert.true(Bridge.is(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute) || Bridge.is(all[1], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute));
            Bridge.Test.Assert.true(Bridge.is(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute) || Bridge.is(all[1], Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute));
            Bridge.Test.Assert.areEqual(Bridge.cast((Bridge.is(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute) ? all[0] : all[1]), Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute).getX(), expectedA1);

            all = (member.at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute); });
            Bridge.Test.Assert.areEqual(all.length, 1);
            Bridge.Test.Assert.true(Bridge.is(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute));
            Bridge.Test.Assert.areEqual(Bridge.cast(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute).getX(), expectedA1);

            all = (member.at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute); });
            Bridge.Test.Assert.areEqual(all.length, 1);
            Bridge.Test.Assert.true(Bridge.is(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute));
            Bridge.Test.Assert.areEqual(Bridge.cast(all[0], Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute).getX(), expectedA1);

            Bridge.Test.Assert.areEqual((member.at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.ReflectionTests.A4Attribute); }).length, 0);
            Bridge.Test.Assert.areEqual((member.at || []).filter(function(a) { return Bridge.is(a, Bridge.ClientTest.Reflection.ReflectionTests.A4Attribute); }).length, 0);
        },
        memberAttributesWork: function () {
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 1, 284, null, System.Array.init(0, null)), 1);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 8, 284, "M"), 2);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 4, 284, "F"), 3);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 16, 284, "P"), 4);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 16, 284, "P").g, 5);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 16, 284, "P").s, 6);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 2, 284, "E"), 7);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 2, 284, "E").ad, 8);
            this.testMemberAttribute(Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C18, 2, 284, "E").r, 9);

            Bridge.Test.Assert.areEqual((Bridge.Reflection.getMembers(Bridge.ClientTest.Reflection.ReflectionTests.C2, 8, 284, "M1").at || []).length, 0);
        },
        membersReflectableAttributeWorks: function () {
            var c25 = Bridge.ClientTest.Reflection.ReflectionTests.C25;
            var c26 = Bridge.ClientTest.Reflection.ReflectionTests.C26;
            var c27 = Bridge.ClientTest.Reflection.ReflectionTests.C27;
            var c28 = Bridge.ClientTest.Reflection.ReflectionTests.C28;

            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A1"), "C25.A1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B1"), "C25.B1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C1"), "C25.C1");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D1"), "C25.D1");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A2"), "C25.A2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B2"), "C25.B2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C2"), "C25.C2");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D2"), "C25.D2");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A3"), "C25.A3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B3"), "C25.B3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C3"), "C25.C3");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D3"), "C25.D3");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A4"), "C25.A4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B4"), "C25.B4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C4"), "C25.C4");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D4"), "C25.D4");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "A5"), "C25.A5");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "B5"), "C25.B5");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c25, 4, 284, "C5"), "C25.C5");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c25, 4, 284, "D5"), "C25.D5");

            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "A1"), "C26.A1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B1"), "C26.B1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C1"), "C26.C1");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D1"), "C26.D1");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "A2"), "C26.A2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B2"), "C26.B2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C2"), "C26.C2");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D2"), "C26.D2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "A3"), "C26.A3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B3"), "C26.B3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C3"), "C26.C3");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D3"), "C26.D3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "A4"), "C26.A4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B4"), "C26.B4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C4"), "C26.C4");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D4"), "C26.D4");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "A5"), "C26.A5");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "B5"), "C26.B5");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c26, 4, 284, "C5"), "C26.C5");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c26, 4, 284, "D5"), "C26.D5");

            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "A1"), "C27.A1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B1"), "C27.B1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C1"), "C27.C1");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D1"), "C27.D1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "A2"), "C27.A2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B2"), "C27.B2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C2"), "C27.C2");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D2"), "C27.D2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "A3"), "C27.A3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B3"), "C27.B3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C3"), "C27.C3");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D3"), "C27.D3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "A4"), "C27.A4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B4"), "C27.B4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C4"), "C27.C4");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D4"), "C27.D4");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "A5"), "C27.A5");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "B5"), "C27.B5");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c27, 4, 284, "C5"), "C27.C5");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c27, 4, 284, "D5"), "C27.D5");

            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A1"), "C28.A1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B1"), "C28.B1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C1"), "C28.C1");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D1"), "C28.D1");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A2"), "C28.A2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B2"), "C28.B2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C2"), "C28.C2");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D2"), "C28.D2");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A3"), "C28.A3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B3"), "C28.B3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C3"), "C28.C3");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D3"), "C28.D3");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A4"), "C28.A4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B4"), "C28.B4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C4"), "C28.C4");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D4"), "C28.D4");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "A5"), "C28.A5");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "B5"), "C28.B5");
            Bridge.Test.Assert.notNull$1(Bridge.Reflection.getMembers(c28, 4, 284, "C5"), "C28.C5");
            Bridge.Test.Assert.null$1(Bridge.Reflection.getMembers(c28, 4, 284, "D5"), "C28.D5");
        }
    });

    Bridge.ns("Bridge.ClientTest.Reflection.ReflectionTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Reflection.ReflectionTests, {
        f1: function (m) {
            return Bridge.referenceEquals(m.n, "M");
        },
        f2: function (m) {
            return (Bridge.cast(m, System.Reflection.ConstructorInfo).p || []).length === 1;
        },
        f3: function (m) {
            return (Bridge.cast(m, System.Reflection.ConstructorInfo).p || []).length === 2;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                X: 0
            }
        },
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setX(x);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.A4Attribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C1", {
        M1: function () {
        },
        M2: function () {
        },
        M3: function () {
        },
        M4: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C10", {
        x: 0,
        s: null,
        ctor: function (x) {
            this.$initialize();
            this.x = x;
            this.s = "X";
        },
        $ctor1: function (x, s) {
            this.$initialize();
            this.x = x;
            this.s = s;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C11", {
        config: {
            init: function () {
                this.D = new Date(-864e13);
            }
        },
        ctor: function (dt) {
            this.$initialize();
            this.D = dt;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C12", {
        statics: {
            F3: null
        },
        F1: 0,
        config: {
            init: function () {
                this.renamedF2 = new Date(-864e13);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C13", {
        statics: {
            addedE4Handler: null,
            removedE4Handler: null,
            config: {
                events: {
                    E2: null
                }
            },
            addE4: function (value) {
            },
            removeE4: function (value) {
            },
            raiseE2: function () {
                if (!Bridge.staticEquals(Bridge.ClientTest.Reflection.ReflectionTests.C13.E2, null)) {
                    Bridge.ClientTest.Reflection.ReflectionTests.C13.E2();
                }
            }
        },
        addedE3Handler: null,
        removedE3Handler: null,
        config: {
            events: {
                E1: null
            }
        },
        addE3: function (value) {
        },
        removeE3: function (value) {
        },
        raiseE1: function () {
            if (!Bridge.staticEquals(this.E1, null)) {
                this.E1();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C14", {
        statics: {
            p14Field: 0,
            P4: 0,
            P8: 0,
            P12: 0,
            config: {
                properties: {
                    P3: null
                },
                init: function () {
                    this.P3 = new Date(-864e13);
                }
            },
            getP7: function () {
                return Bridge.getDefaultValue(Date);
            },
            setP11: function (value) {
            }
        },
        p13Field: 0,
        P2: null,
        P6: null,
        P10: null,
        config: {
            properties: {
                P1: 0
            }
        },
        getP5: function () {
            return 0;
        },
        setP9: function (value) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C15", {
        x: 0,
        s: null,
        v: null,
        getItem: function (x, s) {
            return System.String.concat(this.v, " ", x, " ", s);
        },
        setItem: function (x, s, value) {
            this.x = x;
            this.s = s;
            this.v = value;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C16", {
        getItem: function (x, s) {
            return null;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C17", {
        setItem: function (x, s, value) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C18", {
        f: 0,
        config: {
            properties: {
                P: 0
            }
        },
        ctor: function () {
            this.$initialize();
        },
        addE: function (value) {
        },
        removeE: function (value) {
        },
        m: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C19", {
        A: 0,
        B: null,
        ctor: function (a, b) {
            this.$initialize();
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C2", {
        statics: {
            M2: function () {
            }
        },
        M1: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C20", {
        A: 0,
        B: null
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C21", {
        X: 0,
        ctor: function (x) {
            this.$initialize();
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C22", {
        a: null,
        b: null,
        ctor: function (a, b) {
            if (b === void 0) { b = []; }

            this.$initialize();
            this.a = a;
            this.b = b;
        },
        $ctor1: function (a, b) {
            b = Array.prototype.slice.call(arguments, 1);

            this.$initialize();
            this.a = a;
            this.b = b;
        },
        M1: function (a, b) {
            if (b === void 0) { b = []; }
            return [a, b];
        },
        M2: function (a, b) {
            b = Array.prototype.slice.call(arguments, 1);
            return [a, b];
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C23", {
        a: null,
        b: null,
        ctor: function (a, b) {
            if (b === void 0) { b = []; }

            this.$initialize();
            this.a = a;
            this.b = b;
        },
        $ctor1: function (a, b) {
            b = Array.prototype.slice.call(arguments, 1);

            this.$initialize();
            this.a = a;
            this.b = b;
        },
        M1: function (a, b) {
            if (b === void 0) { b = []; }
            return [a, b];
        },
        M2: function (a, b) {
            b = Array.prototype.slice.call(arguments, 1);
            return [a, b];
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C24", {
        x: 0,
        s: null,
        v: null,
        getItem: function (x, s) {
            return null;
        },
        setItem: function (x, s, value) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C25", {
        A1: 0,
        B1: 0,
        C1: 0,
        D1: 0,
        A2: 0,
        B2: 0,
        C2: 0,
        D2: 0,
        A3: 0,
        B3: 0,
        C3: 0,
        D3: 0,
        A4: 0,
        B4: 0,
        C4: 0,
        D4: 0,
        A5: 0,
        B5: 0,
        C5: 0,
        D5: 0
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C26", {
        A1: 0,
        B1: 0,
        C1: 0,
        D1: 0,
        A2: 0,
        B2: 0,
        C2: 0,
        D2: 0,
        A3: 0,
        B3: 0,
        C3: 0,
        D3: 0,
        A4: 0,
        B4: 0,
        C4: 0,
        D4: 0,
        A5: 0,
        B5: 0,
        C5: 0,
        D5: 0
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C27", {
        A1: 0,
        B1: 0,
        C1: 0,
        D1: 0,
        A2: 0,
        B2: 0,
        C2: 0,
        D2: 0,
        A3: 0,
        B3: 0,
        C3: 0,
        D3: 0,
        A4: 0,
        B4: 0,
        C4: 0,
        D4: 0,
        A5: 0,
        B5: 0,
        C5: 0,
        D5: 0
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C28", {
        A1: 0,
        B1: 0,
        C1: 0,
        D1: 0,
        A2: 0,
        B2: 0,
        C2: 0,
        D2: 0,
        A3: 0,
        B3: 0,
        C3: 0,
        D3: 0,
        A4: 0,
        B4: 0,
        C4: 0,
        D4: 0,
        A5: 0,
        B5: 0,
        C5: 0,
        D5: 0
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C3", {
        M1: function () {
            return 0;
        },
        M2: function (x) {
            return 0;
        },
        M3: function (x, y) {
            return 0;
        },
        M4: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C4", {
        m: function () {
        },
        m$1: function (i) {
        },
        x: function (i, s) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C5$2", function (T1, T2) { return {
        m: function (t2, s) {
            return Bridge.getDefaultValue(T1);
        },
        M2: function () {
            return null;
        }
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C6", {
        M1: function (T1, T2, t2, s) {
            return Bridge.getDefaultValue(T1);
        },
        M2: function (T1, s) {
            return Bridge.getDefaultValue(T1);
        },
        M3: function (s) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C7", {
        statics: {
            M2: function (x) {
            }
        },
        x: 0,
        M1: function (x) {
            return ((this.x + x) | 0);
        },
        M3: function (T1, T2, s) {
            return System.String.concat(this.x.toString(), " ", Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2), " ", s);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C8", {
        statics: {
            M2: function (a, b) {
                return System.String.concat(a, " ", b);
            },
            M4: function (T1, T2, a) {
                return System.String.concat(Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2), " ", a);
            }
        },
        s: null,
        ctor: function (s) {
            this.$initialize();
            this.s = s;
        },
        M1: function (a, b) {
            return System.String.concat(this.s, " ", a, " ", b);
        },
        M3: function (T1, T2, a) {
            return System.String.concat(this.s, " ", Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2), " ", a);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.C9$2", function (T1, T2) { return {
        statics: {
            m: function (a) {
                return System.String.concat(Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2), " ", a);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.ReflectionTests.S1", {
        $kind: "struct",
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.Reflection.ReflectionTests.S1(); }
        },
        ctor: function () {
            this.$initialize();
        },
        M1: function () {
        },
        M2: function () {
        },
        M3: function () {
        },
        M4: function () {
        },
        $clone: function (to) { return this; }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests", {
        statics: {
            canConvert: function (T, arg) {
                try {
                    var x = Bridge.cast(arg, T);
                    return x == null || x != null; // return true;
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    return false;
                }
            }
        },
        typeIsWorksForReferenceTypes: function () {
            Bridge.Test.Assert.false$1(Bridge.is({  }, Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1), "#1");
            Bridge.Test.Assert.true$1(Bridge.hasValue(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1()), "#2");
            Bridge.Test.Assert.false$1(Bridge.is({  }, Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1), "#3");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1), "#4");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1), "#5");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1), "#6");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32)), "#7");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(String)), "#8");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32)), "#9");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(String)), "#10");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1), "#11");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(String)), "#12");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32)), "#13");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32)), "#14");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(String)), "#15");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1), "#16");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I3), "#17");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I4), "#18");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1), "#19");
            Bridge.Test.Assert.true$1(Bridge.is((0), System.Int32), "#20");
            Bridge.Test.Assert.true$1(Bridge.is((0), System.Int32), "#21");
            Bridge.Test.Assert.true$1(Bridge.hasValue((0)), "#22");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#23");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#24");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#25");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#26");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#27");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#28");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#29");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#30");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#31");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#32");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#33");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#34");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#35");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#36");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#37");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#38");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#39");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#40");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1), "#41");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#42");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#43");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#44");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#45");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#46");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#47");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#48");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#49");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#50");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#51");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#52");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#53");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#54");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#55");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#56");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#57");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#58");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#59");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#60");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#61");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#62");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#63");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#64");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#65");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#66");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#67");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#68");
            Bridge.Test.Assert.false$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#69");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#70");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#71");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#72");
            Bridge.Test.Assert.true$1(Bridge.is(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#73");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#74");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#75");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#76");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#77");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#78");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#79");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#80");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#81");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#82");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#83");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#84");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), "#85");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#86");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#87");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#88");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), "#89");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#90");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#91");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#92");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#93");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#94");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#95");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#96");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#97");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#98");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#99");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#100");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#101");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#102");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#103");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#104");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#105");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#106");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#107");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#108");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#109");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#110");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#111");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#112");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#113");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#114");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#115");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#116");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#117");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#118");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#119");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#120");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#121");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#122");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#123");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#124");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#125");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#126");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#127");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#128");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#129");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#130");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#131");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#132");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#133");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#134");
            Bridge.Test.Assert.false$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#135");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))), "#136");
            Bridge.Test.Assert.true$1(Bridge.is(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))), "#137");
            Bridge.Test.Assert.false$1(Bridge.hasValue(null), "#138");
        },
        typeAsWorksForReferenceTypes: function () {
            Bridge.Test.Assert.false$1((Bridge.as({  }, Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1)) != null, "#1");
            Bridge.Test.Assert.true$1((new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1()) != null, "#2");
            Bridge.Test.Assert.false$1((Bridge.as({  }, Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#3");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1)) != null, "#4");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1)) != null, "#5");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#6");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32))) != null, "#7");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(String))) != null, "#8");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32))) != null, "#9");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(String))) != null, "#10");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#11");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(String))) != null, "#12");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32))) != null, "#13");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32))) != null, "#14");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(String))) != null, "#15");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#16");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I3)) != null, "#17");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I4)) != null, "#18");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#19");
            Bridge.Test.Assert.true$1((Bridge.as((0), System.Int32, true)) != null, "#20");
            Bridge.Test.Assert.true$1((Bridge.as((0), System.Int32, true)) != null, "#21");
            Bridge.Test.Assert.true$1(((0)) != null, "#22");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#23");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#24");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#25");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#26");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#27");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#28");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#29");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#30");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#31");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#32");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#33");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#34");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#35");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#36");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#37");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#38");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#39");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#40");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1)) != null, "#41");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#42");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#43");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#44");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#45");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#46");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#47");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#48");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#49");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#50");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#51");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#52");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#53");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#54");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#55");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#56");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#57");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#58");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#59");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#60");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#61");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#62");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#63");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#64");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#65");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#66");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#67");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#68");
            Bridge.Test.Assert.false$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#69");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#70");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#71");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#72");
            Bridge.Test.Assert.true$1((Bridge.as(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#73");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#74");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#75");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#76");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#77");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#78");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#79");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#80");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#81");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#82");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#83");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#84");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))) != null, "#85");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#86");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#87");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#88");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))) != null, "#89");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#90");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#91");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#92");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#93");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#94");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#95");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#96");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#97");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#98");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#99");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#100");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#101");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#102");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#103");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#104");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#105");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#106");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#107");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#108");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#109");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#110");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#111");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#112");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#113");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#114");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#115");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#116");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#117");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#118");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#119");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#120");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#121");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#122");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#123");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#124");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#125");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#126");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#127");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#128");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#129");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#130");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#131");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#132");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#133");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#134");
            Bridge.Test.Assert.false$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#135");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)))) != null, "#136");
            Bridge.Test.Assert.true$1((Bridge.as(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))(), Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)))) != null, "#137");
            Bridge.Test.Assert.false$1((null) != null, "#138");
        },
        castWorksForReferenceTypes: function () {
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1, {  }), "#1");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Object, new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1()), "#2");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1, {  }), "#3");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1, new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1()), "#4");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1, new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1()), "#5");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1, new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1()), "#6");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#7");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(String), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#8");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#9");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(String), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#10");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1, new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1(System.Int32))()), "#11");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(String), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3()), "#12");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3()), "#13");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(System.Int32), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3()), "#14");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(String), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3()), "#15");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1, new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4()), "#16");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I3, new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4()), "#17");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I4, new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4()), "#18");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1, new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2()), "#19");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.E1, (0)), "#20");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(System.Int32, (0)), "#21");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Object, (0)), "#22");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#23");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#24");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X1()), "#25");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#26");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X1()), "#27");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#28");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X2()), "#29");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#30");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X2()), "#31");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#32");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#33");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X1()), "#34");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#35");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X1()), "#36");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#37");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X2()), "#38");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#39");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X2()), "#40");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1, new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#41");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#42");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1()), "#43");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#44");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2()), "#45");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#46");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1()), "#47");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#48");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2()), "#49");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#50");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1()), "#51");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#52");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2()), "#53");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#54");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1()), "#55");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#56");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2()), "#57");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#58");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1()), "#59");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#60");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2()), "#61");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#62");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1()), "#63");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#64");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2()), "#65");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#66");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1()), "#67");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#68");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2()), "#69");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#70");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1()), "#71");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#72");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2()), "#73");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#74");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#75");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#76");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#77");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#78");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#79");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#80");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#81");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#82");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#83");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#84");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#85");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#86");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#87");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#88");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#89");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#90");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#91");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#92");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#93");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#94");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#95");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#96");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#97");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#98");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#99");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#100");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#101");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#102");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#103");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#104");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#105");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#106");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#107");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#108");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#109");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#110");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#111");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#112");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#113");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#114");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#115");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#116");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#117");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#118");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#119");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#120");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#121");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#122");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#123");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#124");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1))()), "#125");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#126");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#127");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#128");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#129");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#130");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#131");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#132");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#133");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#134");
            Bridge.Test.Assert.false$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#135");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#136");
            Bridge.Test.Assert.true$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.canConvert(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)), new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2))()), "#137");
            Bridge.Test.Assert.false$1(Bridge.hasValue(null), "#138");
        },
        getTypeWorksOnObjects: function () {
            var a = $_.Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.f1;
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.getType(new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1())), "Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.getType(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32))())), "Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1[[System.Int32, mscorlib]]");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.getType(new (Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(String))())), "Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1[[String]]");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(System.Int32), "System.Int32");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(String), "String");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Function), "Function");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.getType({  })), "Object");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.getType([1, 2])), "Array");
        },
        getTypeOnNullInstanceThrowsException: function () {
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.f2);
        },
        cast: function (T, o) {
            return Bridge.cast(o, T);
        },
        castOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric: function () {
            var o = {  };
            var b = this.cast(Object, o);
            Bridge.Test.Assert.true(Bridge.referenceEquals(o, b));
        },
        typeCheckForSubTypeOfGenericType: function () {
            var c12 = new Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C12();
            Bridge.Test.Assert.true$1(Bridge.is(c12, Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C12), "#1");
            Bridge.Test.Assert.true$1(Bridge.is(c12, Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C11$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.K)), "#2");
            Bridge.Test.Assert.true$1(Bridge.is(c12, Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C10$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.K)), "#3");
        }
    });

    Bridge.ns("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests, {
        f1: function () {
        },
        f2: function () {
            Bridge.getType(null);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.BS", {
        X: 0,
        ctor: function (x) {
            this.$initialize();
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.K");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.CI");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1", {
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1", function (T1) { return {
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I4", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.E1", {
        $kind: "enum"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.E2", {
        $kind: "enum"
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1", function (T) { return {
        $kind: "interface",
        $variance: [2]
    }; });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1", function (T) { return {
        $kind: "interface",
        $variance: [1]
    }; });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2", function (T1, T2) { return {
        $kind: "interface",
        $variance: [0,1]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests", {
        getAssemblyName: function () {
            return "Bridge.ClientTest";
        },
        getAssemblyWithVersion: function () {
            //return AssemblyName + ", Version=" + AssemblyVersionMarker.GetVersion(AssemblyVersionMarker.VersionType.CurrentAssembly);
            return this.getAssemblyName();
        },
        fullNamePropertyReturnsTheNameWithTheNamespace: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Reflection.TypeSystemTests), "Bridge.ClientTest.Reflection.TypeSystemTests");
        },
        assemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeQName(Bridge.ClientTest.Reflection.TypeSystemTests), "Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeQName(Bridge.ClientTest.Reflection.TypeSystemTests.BX$1), "Bridge.ClientTest.Reflection.TypeSystemTests.BX$1, Bridge.ClientTest");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeQName(Bridge.ClientTest.Reflection.TypeSystemTests.BX$1(System.Int32)), "Bridge.ClientTest.Reflection.TypeSystemTests.BX$1[[System.Int32, mscorlib]], Bridge.ClientTest");
        },
        assemblyPropertyWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Reflection.TypeSystemTests.B).name, this.getAssemblyWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Reflection.TypeSystemTests.I1).name, this.getAssemblyWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1).name, this.getAssemblyWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Reflection.TypeSystemTests.BX$1).name, this.getAssemblyWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(System.Int32)).name, this.getAssemblyWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Reflection.TypeSystemTests.BX$1(System.Int32)).name, this.getAssemblyWithVersion());
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Reflection.TypeSystemTests.E1).name, this.getAssemblyWithVersion());
        },
        namespacePropertyReturnsTheNamespaceWithoutTheName: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeNamespace(Bridge.ClientTest.Reflection.TypeSystemTests), "Bridge.ClientTest.Reflection");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeNamespace(Bridge.ClientTest.Reflection.TypeSystemTests.DS2), "Bridge.ClientTest.Reflection");
        },
        instantiatingClassWithConstructorThatNeedsToBeAppliedWorks: function () {
            var args = $_.Bridge.ClientTest.Reflection.TypeSystemTests.f1(new (System.Collections.Generic.List$1(Object))());
            var obj = Bridge.Reflection.applyConstructor(Bridge.ClientTest.Reflection.TypeSystemTests.ClassWithExpandParamsCtor, args.toArray());

            Bridge.Test.Assert.areEqual(obj.ctorArgs, args.toArray());
            Bridge.Test.Assert.areEqual(Bridge.getType(obj), Bridge.ClientTest.Reflection.TypeSystemTests.ClassWithExpandParamsCtor);
        },
        namePropertyRemovesTheNamespace: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getTypeName(Bridge.ClientTest.Reflection.TypeSystemTests), "TypeSystemTests", "non-generic");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getTypeName(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)), "G$2[[System.Int32, mscorlib],[String]]", "generic");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getTypeName(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Reflection.TypeSystemTests.BX$1(System.Double),String)), "G$2[[Bridge.ClientTest.Reflection.TypeSystemTests.BX$1[[System.Double, mscorlib]], Bridge.ClientTest],[String]]", "nested generic");
        },
        gettingBaseTypeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getBaseType(Bridge.ClientTest.Reflection.TypeSystemTests.B), Object);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getBaseType(Bridge.ClientTest.Reflection.TypeSystemTests.C), Bridge.ClientTest.Reflection.TypeSystemTests.B);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getBaseType(Object), null);
        },
        gettingImplementedInterfacesWorks: function () {
            var ifs = Bridge.Reflection.getInterfaces(Bridge.ClientTest.Reflection.TypeSystemTests.C);
            Bridge.Test.Assert.areEqual(ifs.length, 4);
            Bridge.Test.Assert.true(System.Array.contains(ifs, Bridge.ClientTest.Reflection.TypeSystemTests.I1, Function));
            Bridge.Test.Assert.true(System.Array.contains(ifs, Bridge.ClientTest.Reflection.TypeSystemTests.I2, Function));
            Bridge.Test.Assert.true(System.Array.contains(ifs, Bridge.ClientTest.Reflection.TypeSystemTests.I3, Function));
            Bridge.Test.Assert.true(System.Array.contains(ifs, Bridge.ClientTest.Reflection.TypeSystemTests.I4, Function));
        },
        typeOfAnOpenGenericClassWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Reflection.TypeSystemTests.G$2), "Bridge.ClientTest.Reflection.TypeSystemTests.G$2");
        },
        typeOfAnOpenGenericInterfaceWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1), "Bridge.ClientTest.Reflection.TypeSystemTests.IG$1");
        },
        typeOfInstantiatedGenericClassWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Reflection.TypeSystemTests.C)), "Bridge.ClientTest.Reflection.TypeSystemTests.G$2[[System.Int32, mscorlib],[Bridge.ClientTest.Reflection.TypeSystemTests.C, Bridge.ClientTest]]");
        },
        typeOfInstantiatedGenericInterfaceWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(System.Int32)), "Bridge.ClientTest.Reflection.TypeSystemTests.IG$1[[System.Int32, mscorlib]]");
        },
        constructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance: function () {
            var t1 = Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Reflection.TypeSystemTests.C);
            var t2 = Bridge.ClientTest.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Reflection.TypeSystemTests.C,System.Int32);
            var t3 = Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Reflection.TypeSystemTests.C);
            Bridge.Test.Assert.false(Bridge.referenceEquals(t1, t2));
            Bridge.Test.Assert.true(Bridge.referenceEquals(t1, t3));
        },
        accessingAStaticMemberInAGenericClassWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Reflection.TypeSystemTests.C).field, "System.Int32 Bridge.ClientTest.Reflection.TypeSystemTests.C");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Reflection.TypeSystemTests.C,System.Int32).field, "Bridge.ClientTest.Reflection.TypeSystemTests.C System.Int32");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Reflection.TypeSystemTests.C,System.Int32),Bridge.ClientTest.Reflection.TypeSystemTests.G$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.C)).field, "Bridge.ClientTest.Reflection.TypeSystemTests.G$2[[Bridge.ClientTest.Reflection.TypeSystemTests.C, Bridge.ClientTest],[System.Int32, mscorlib]] Bridge.ClientTest.Reflection.TypeSystemTests.G$2[[String],[Bridge.ClientTest.Reflection.TypeSystemTests.C, Bridge.ClientTest]]");
        },
        typeOfNestedGenericClassWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Reflection.TypeSystemTests.C,Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(String)))), "Bridge.ClientTest.Reflection.TypeSystemTests.G$2[[System.Int32, mscorlib],[Bridge.ClientTest.Reflection.TypeSystemTests.G$2[[Bridge.ClientTest.Reflection.TypeSystemTests.C, Bridge.ClientTest],[Bridge.ClientTest.Reflection.TypeSystemTests.IG$1[[String]], Bridge.ClientTest]], Bridge.ClientTest]]");
        },
        baseTypeAndImplementedInterfacesForGenericTypeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.Reflection.getBaseType(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Reflection.TypeSystemTests.C,Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(String))))), "Bridge.ClientTest.Reflection.TypeSystemTests.BX$1[[Bridge.ClientTest.Reflection.TypeSystemTests.G$2[[System.Int32, mscorlib],[Bridge.ClientTest.Reflection.TypeSystemTests.C, Bridge.ClientTest]], Bridge.ClientTest]]");
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getTypeFullName(Bridge.Reflection.getInterfaces(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,Bridge.ClientTest.Reflection.TypeSystemTests.G$2(Bridge.ClientTest.Reflection.TypeSystemTests.C,Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(String))))[0]), "Bridge.ClientTest.Reflection.TypeSystemTests.IG$1[[Bridge.ClientTest.Reflection.TypeSystemTests.G$2[[Bridge.ClientTest.Reflection.TypeSystemTests.G$2[[Bridge.ClientTest.Reflection.TypeSystemTests.C, Bridge.ClientTest],[Bridge.ClientTest.Reflection.TypeSystemTests.IG$1[[String]], Bridge.ClientTest]], Bridge.ClientTest],[String]], Bridge.ClientTest]]");
        },
        isGenericTypeDefinitionWorksAsExpected: function () {
            Bridge.Test.Assert.true(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.G$2));
            Bridge.Test.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)));
            Bridge.Test.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.C));
            Bridge.Test.Assert.true(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(System.Int32)));
            Bridge.Test.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.I2));
            Bridge.Test.Assert.false(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.E1));
        },
        genericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Reflection.TypeSystemTests.G$2), 2);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)), 0);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Reflection.TypeSystemTests.C), 0);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1), 1);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(System.Int32)), 0);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Reflection.TypeSystemTests.I2), 0);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericParameterCount(Bridge.ClientTest.Reflection.TypeSystemTests.E1), 0);
        },
        getGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Reflection.TypeSystemTests.G$2), null);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)), [System.Int32, String]);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Reflection.TypeSystemTests.C), null);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1), null);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(String)), [String]);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Reflection.TypeSystemTests.I2), null);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericArguments(Bridge.ClientTest.Reflection.TypeSystemTests.E1), null);
        },
        getGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull: function () {
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.G$2), Bridge.ClientTest.Reflection.TypeSystemTests.G$2);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)), Bridge.ClientTest.Reflection.TypeSystemTests.G$2);
            Bridge.Test.Assert.throws$6(System.InvalidOperationException, $_.Bridge.ClientTest.Reflection.TypeSystemTests.f2);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1), Bridge.ClientTest.Reflection.TypeSystemTests.IG$1);
            Bridge.Test.Assert.areEqual(Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(String)), Bridge.ClientTest.Reflection.TypeSystemTests.IG$1);
            Bridge.Test.Assert.throws$6(System.InvalidOperationException, $_.Bridge.ClientTest.Reflection.TypeSystemTests.f3);
            Bridge.Test.Assert.throws$6(System.InvalidOperationException, $_.Bridge.ClientTest.Reflection.TypeSystemTests.f4);
        },
        isAssignableFromWorks: function () {
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#1");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1, Object), "#2");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Object, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#3");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Object), "#4");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Object, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#5");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I3, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#6");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I3), "#7");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#8");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1), "#9");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1), "#10");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#11");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(String), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#12");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#13");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(String), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#14");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32)), "#15");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(String), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#16");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#17");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#18");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(String), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#19");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1(String)), "#20");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1(System.Int32)), "#21");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1(System.Int32), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#22");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4), "#23");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I3, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4), "#24");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I4, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4), "#25");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), "#26");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1), "#27");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1), "#28");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3), "#29");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.E1, Bridge.ClientTest.Reflection.TypeSystemTests.E2), "#30");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(System.Int32, Bridge.ClientTest.Reflection.TypeSystemTests.E1), "#31");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Object, Bridge.ClientTest.Reflection.TypeSystemTests.E1), "#32");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#33");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#34");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#35");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#36");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#37");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#38");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#39");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1), "#40");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#41");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1), "#42");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#43");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2), "#44");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#45");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2), "#46");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#47");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#48");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#49");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#50");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#51");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#52");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#53");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1), "#54");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#55");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1), "#56");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#57");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2), "#58");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#59");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2), "#60");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#61");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#62");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#63");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#64");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#65");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#66");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#67");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#68");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#69");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#70");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#71");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#72");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#73");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#74");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#75");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#76");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#77");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#78");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#79");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1), "#80");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#81");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2), "#82");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#83");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1), "#84");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#85");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2), "#86");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#87");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1), "#88");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#89");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2), "#90");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#91");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1), "#92");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#93");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2), "#94");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#95");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1), "#96");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#97");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2), "#98");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#99");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1), "#100");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#101");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2), "#102");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#103");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1), "#104");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#105");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2), "#106");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#107");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1), "#108");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#109");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2), "#110");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#111");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#112");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#113");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#114");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#115");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#116");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#117");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#118");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#119");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#120");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#121");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#122");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#123");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#124");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#125");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#126");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#127");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#128");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#129");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#130");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#131");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#132");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#133");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#134");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#135");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#136");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#137");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#138");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#139");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#140");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#141");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#142");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#143");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#144");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#145");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#146");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#147");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#148");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#149");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#150");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#151");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#152");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#153");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#154");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#155");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#156");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#157");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#158");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#159");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#160");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#161");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#162");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#163");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#164");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#165");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#166");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#167");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#168");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#169");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#170");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#171");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#172");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#173");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#174");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#175");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#176");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#177");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#178");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#179");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#180");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#181");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#182");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#183");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#184");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#185");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#186");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#187");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#188");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#189");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#190");
        },
        isSubclassOfWorks: function () {
            Bridge.Test.Assert.false$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C1.prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C1), "#1");
            Bridge.Test.Assert.true$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C1.prototype instanceof Object), "#2");
            Bridge.Test.Assert.false$1((Object.prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C1), "#3");
            Bridge.Test.Assert.true$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D1.prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C1), "#4");
            Bridge.Test.Assert.false$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C1.prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D1), "#5");
            Bridge.Test.Assert.true$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D1.prototype instanceof Object), "#6");
            Bridge.Test.Assert.true$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D2$1(System.Int32).prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.Int32)), "#7");
            Bridge.Test.Assert.false$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D2$1(String).prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.Int32)), "#8");
            Bridge.Test.Assert.false$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D3.prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(String)), "#9");
            Bridge.Test.Assert.true$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D3.prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.Int32)), "#10");
            Bridge.Test.Assert.false$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D2$1.prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1), "#11");
            Bridge.Test.Assert.false$1((Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D3.prototype instanceof Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1), "#12");
        },
        isClassWorks: function () {
            Bridge.Test.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Reflection.TypeSystemTests.E1));
            Bridge.Test.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Reflection.TypeSystemTests.E2));
            Bridge.Test.Assert.true(Bridge.Reflection.isClass(Bridge.ClientTest.Reflection.TypeSystemTests.C));
            Bridge.Test.Assert.true(Bridge.Reflection.isClass(Bridge.ClientTest.Reflection.TypeSystemTests.G$2));
            Bridge.Test.Assert.true(Bridge.Reflection.isClass(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)));
            Bridge.Test.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Reflection.TypeSystemTests.I1));
            Bridge.Test.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.Assert.false(Bridge.Reflection.isClass(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        isEnumWorks: function () {
            Bridge.Test.Assert.true(Bridge.Reflection.isEnum(Bridge.ClientTest.Reflection.TypeSystemTests.E1));
            Bridge.Test.Assert.true(Bridge.Reflection.isEnum(Bridge.ClientTest.Reflection.TypeSystemTests.E2));
            Bridge.Test.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Reflection.TypeSystemTests.C));
            Bridge.Test.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Reflection.TypeSystemTests.G$2));
            Bridge.Test.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)));
            Bridge.Test.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Reflection.TypeSystemTests.I1));
            Bridge.Test.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.Assert.false(Bridge.Reflection.isEnum(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        isArrayWorks: function () {
            var array = System.Array.init(5, 0);
            Bridge.Test.Assert.true((Bridge.getType(array) === Array));
            Bridge.Test.Assert.true((Array === Array));
            Bridge.Test.Assert.true((Array === Array));
            Bridge.Test.Assert.false((Bridge.ClientTest.Reflection.TypeSystemTests.C === Array));
            //TODO Assert.False(typeof(List<int>).IsArray);
            //TODO Assert.False(typeof(Array).IsArray);
        },
        isFlagsWorks: function () {
            Bridge.Test.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Reflection.TypeSystemTests.E1));
            Bridge.Test.Assert.true(Bridge.Reflection.isFlags(Bridge.ClientTest.Reflection.TypeSystemTests.E2));
            Bridge.Test.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Reflection.TypeSystemTests.C));
            Bridge.Test.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Reflection.TypeSystemTests.G$2));
            Bridge.Test.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)));
            Bridge.Test.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Reflection.TypeSystemTests.I1));
            Bridge.Test.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.Assert.false(Bridge.Reflection.isFlags(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        isInterfaceWorks: function () {
            Bridge.Test.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Reflection.TypeSystemTests.E1));
            Bridge.Test.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Reflection.TypeSystemTests.E2));
            Bridge.Test.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Reflection.TypeSystemTests.C));
            Bridge.Test.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Reflection.TypeSystemTests.G$2));
            Bridge.Test.Assert.false(Bridge.Reflection.isInterface(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(System.Int32,String)));
            Bridge.Test.Assert.true(Bridge.Reflection.isInterface(Bridge.ClientTest.Reflection.TypeSystemTests.I1));
            Bridge.Test.Assert.true(Bridge.Reflection.isInterface(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1));
            Bridge.Test.Assert.true(Bridge.Reflection.isInterface(Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(System.Int32)));
        },
        isInstanceOfTypeWorksForReferenceTypes: function () {
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType({  }, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#1");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1(), Object), "#2");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType({  }, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#3");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1), "#4");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#5");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#6");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32)), "#7");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(String)), "#8");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#9");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(String)), "#0");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#11");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(String)), "#12");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32)), "#13");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#14");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(String)), "#15");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#16");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I3), "#17");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I4), "#18");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#19");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1), "#10");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType((0), Bridge.ClientTest.Reflection.TypeSystemTests.E1), "#21");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType((0), System.Int32), "#22");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType((0), Object), "#23");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(null, Object), "#24");

            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType({  }, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#25");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1(), Object), "#26");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType({  }, Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#27");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1), "#28");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1), "#29");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#30");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32)), "#31");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(String)), "#32");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#33");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(String)), "#34");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1(System.Int32))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#35");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(String)), "#36");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32)), "#37");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(System.Int32)), "#38");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(String)), "#39");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#40");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I3), "#41");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I4), "#42");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#43");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1), "#44");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType((0), Bridge.ClientTest.Reflection.TypeSystemTests.E1), "#45");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType((0), System.Int32), "#46");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType((0), Object), "#47");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#48");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#49");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#50");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#51");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#52");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#53");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#54");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#55");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#56");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#57");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#58");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#59");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#60");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#61");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#62");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#63");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#64");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#65");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1), "#66");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#67");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#68");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#69");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#70");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#71");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#72");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#73");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#74");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#75");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#76");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#77");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#78");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#79");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#80");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#81");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#82");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#83");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#84");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#85");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#86");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#87");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#88");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#89");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#90");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#91");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#92");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#93");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#94");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#95");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#96");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#97");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#98");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#99");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#100");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#101");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#102");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#103");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#104");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#105");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#106");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#107");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#108");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#109");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)), "#110");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#111");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#112");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(String,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#113");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(Object,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)), "#114");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#115");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#116");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#117");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#118");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#119");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#120");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#121");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#122");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#123");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#124");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#125");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#126");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#127");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#128");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#129");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#130");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#131");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#132");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#133");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#134");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#135");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#136");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#137");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#138");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#139");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#140");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#141");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#142");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#143");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#144");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#145");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#146");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#147");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#148");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#149");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#150");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#151");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#152");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#153");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#154");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#155");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#156");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#157");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#158");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#159");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#160");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1))), "#161");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isInstanceOfType(new (Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))(), Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2))), "#162");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(null, Object), "#163");
        },
        invokingBaseUnnamedConstructorWithoutArgumentsWorks: function () {
            var d = new Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.D();
            Bridge.Test.Assert.areEqual(System.String.concat(d.messageB, "|", d.messageD), "X|Y");
        },
        invokingBaseUnnamedConstructorWithArgumentsWorks: function () {
            var d = new Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.D(5, 8);
            Bridge.Test.Assert.areEqual(System.String.concat(d.messageB, "|", d.messageD), "6 9|5 8");
        },
        invokingBaseNamedConstructorWithoutArgumentsWorks: function () {
            var d = new Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.D();
            Bridge.Test.Assert.areEqual(System.String.concat(d.messageB, "|", d.messageD), "X|Y");
        },
        invokingBaseNamedConstructorWithArgumentsWorks: function () {
            var d = new Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.D(5, 8);
            Bridge.Test.Assert.areEqual(System.String.concat(d.messageB, "|", d.messageD), "6 9|5 8");
        },
        constructingInstanceWithNamedConstructorWorks: function () {
            var d = new Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D();
            Bridge.Test.Assert.areEqual(Bridge.getType(d), Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D);
            Bridge.Test.Assert.true(Bridge.is(d, Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D));
            Bridge.Test.Assert.areEqual(d.getMessage(), "The message from ctor");
        },
        constructingInstanceWithNamedConstructorWorks2: function () {
            var d = new Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.E();
            var t = Bridge.getType(d);
            Bridge.Test.Assert.areEqual$1(t, Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.E, "#1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getBaseType(t), Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D, "#2");
            Bridge.Test.Assert.true$1(Bridge.is(d, Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.E), "#3");
            Bridge.Test.Assert.true$1(Bridge.is(d, Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D), "#4");
            Bridge.Test.Assert.areEqual(d.getMessage(), "The message from ctor and derived ctor");
        },
        invokingBaseMethodWorks: function () {
            Bridge.Test.Assert.areEqual(new Bridge.ClientTest.Reflection.TypeSystemTests.BaseMethodInvocationTypes.D().doIt(5, 3), 2);
        },
        invokingGenericBaseMethodWorks: function () {
            Bridge.Test.Assert.areEqual(new Bridge.ClientTest.Reflection.TypeSystemTests.BaseMethodInvocationTypes.D().doItGeneric(5, 3), 2);
        },
        methodGroupConversionWorks: function () {
            var f = new Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.C(4).getF();
            Bridge.Test.Assert.areEqual(f(5, 3), 12);
        },
        methodGroupConversionOnGenericMethodWorks: function () {
            var f = new Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.C(4).getG();
            Bridge.Test.Assert.areEqual(f(5, 3), "12String");
        },
        methodGroupConversionOnBaseMethodWorks: function () {
            var f = new Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.D(4).getF();
            Bridge.Test.Assert.areEqual(f(3, 5), 12);
        },
        methodGroupConversionOnGenericBaseMethodWorks: function () {
            var g = new Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.C(4).getG();
            Bridge.Test.Assert.areEqual(g(5, 3), "12String");
        },
        importedInterfaceAppearsAsObjectWhenUsedAsGenericArgument: function () {
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Reflection.TypeSystemTests.BX$1(Object), Bridge.ClientTest.Reflection.TypeSystemTests.BX$1(Object));
        },
        falseIsFunctionShouldReturnFalse: function () {
            Bridge.Test.Assert.false(Bridge.is(false, Function));
        },
        castingUndefinedToOtherTypeShouldReturnUndefined: function () {
            Bridge.Test.Assert.areEqual(typeof Bridge.cast(undefined, Bridge.ClientTest.Reflection.TypeSystemTests.C), "undefined");
        },
        nonSerializableTypeCanInheritFromSerializableType: function () {
            var d = new Bridge.ClientTest.Reflection.TypeSystemTests.DS(42);
            Bridge.Test.Assert.areEqual$1(d.X, 42, "d.X");
            Bridge.Test.Assert.areEqual$1(d.getX(), 42, "d.GetX");
        },
        inheritingFromRecordWorks: function () {
            var c = Bridge.merge(new Bridge.ClientTest.Reflection.TypeSystemTests.CS2(), {
                x: 42
            } );
            Bridge.Test.Assert.areEqual(c.x, 42);
        },
        instanceOfWorksForSerializableTypesWithCustomTypeCheckCode: function () {
            var o1 = new $_.$AnonymousType$29(1);
            var o2 = new $_.$AnonymousType$30(1, 2);
            Bridge.Test.Assert.false$1(Bridge.Reflection.isInstanceOfType(o1, Bridge.ClientTest.Reflection.TypeSystemTests.DS2), "o1 should not be of type");
            //Assert.True (typeof(DS2).IsInstanceOfType(o2), "o2 should be of type");
        },
        staticGetTypeMethodWorks: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("Bridge.ClientTest.Reflection.TypeSystemTests"), Bridge.ClientTest.Reflection.TypeSystemTests, "#1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest"), Bridge.ClientTest.Reflection.TypeSystemTests, "#2");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("Bridge.ClientTest.Reflection.TypeSystemTests, mscorlib"), null, "#3");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2, mscorlib"), System.Collections.Generic.Dictionary$2, "#4");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2, NotLoaded.Assembly"), null, "#5");
        },
        staticGetTypeMethodWithGenericsWorks: function () {
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[String],[Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest]]"), System.Collections.Generic.Dictionary$2(String,Bridge.ClientTest.Reflection.TypeSystemTests), "#1");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest],[String]]"), System.Collections.Generic.Dictionary$2(Bridge.ClientTest.Reflection.TypeSystemTests,String), "#2");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[System.Int32, mscorlib],[Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest]]"), System.Collections.Generic.Dictionary$2(System.Int32,Bridge.ClientTest.Reflection.TypeSystemTests), "#3");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[String],[Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest]], mscorlib"), System.Collections.Generic.Dictionary$2(String,Bridge.ClientTest.Reflection.TypeSystemTests), "#4");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest],[String]], mscorlib"), System.Collections.Generic.Dictionary$2(Bridge.ClientTest.Reflection.TypeSystemTests,String), "#5");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest],[Bridge.ClientTest.Reflection.TypeSystemTests, Bridge.ClientTest]], mscorlib"), System.Collections.Generic.Dictionary$2(Bridge.ClientTest.Reflection.TypeSystemTests,Bridge.ClientTest.Reflection.TypeSystemTests), "#6");
            Bridge.Test.Assert.areEqual$1(Bridge.Reflection.getType("System.Collections.Generic.Dictionary$2[[String],[System.Collections.Generic.Dictionary$2[[System.Collections.Generic.Dictionary$2[[System.Int32, mscorlib],[Date]], mscorlib],[System.Collections.Generic.Dictionary$2[[System.Int32, mscorlib],[System.Double]], mscorlib]], mscorlib]], mscorlib"), System.Collections.Generic.Dictionary$2(String,System.Collections.Generic.Dictionary$2(System.Collections.Generic.Dictionary$2(System.Int32,Date),System.Collections.Generic.Dictionary$2(System.Int32,System.Double))), "#7");
        },
        doesItThrow: function (a) {
            try {
                a();
                return false;
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                return true;
            }
        },
        isOfType: function (T, o) {
            return Bridge.is(o, T);
        },
        getDefault: function (T) {
            return Bridge.getDefaultValue(T);
        },
        castingToNamedValuesEnumCastsToString: function () {
            Bridge.Test.Assert.true$1(Bridge.is("firstValue", String), "#1");
            Bridge.Test.Assert.true$1(Bridge.is("firstValue", String), "#2");
            Bridge.Test.Assert.false$1(Bridge.is(0, String), "#3");
            Bridge.Test.Assert.false$1(this.doesItThrow($_.Bridge.ClientTest.Reflection.TypeSystemTests.f5), "#4");
            Bridge.Test.Assert.true$1(this.doesItThrow($_.Bridge.ClientTest.Reflection.TypeSystemTests.f6), "#5");

            Bridge.Test.Assert.notNull$1(Bridge.as("firstValue", String, true), "#6");
            Bridge.Test.Assert.notNull$1(Bridge.as("firstValue", String, true), "#7");
            Bridge.Test.Assert.null$1(Bridge.as(0, String, true), "#8");

            Bridge.Test.Assert.true$1(this.isOfType(Bridge.ClientTest.Reflection.TypeSystemTests.NamedValuesEnum, "firstValue"), "#9");
            Bridge.Test.Assert.true$1(this.isOfType(Bridge.ClientTest.Reflection.TypeSystemTests.NamedValuesEnum, "firstValue"), "#10");
            Bridge.Test.Assert.false$1(this.isOfType(Bridge.ClientTest.Reflection.TypeSystemTests.NamedValuesEnum, 0), "#11");
        },
        castingToImportedNamedValuesEnumCastsToString: function () {
            Bridge.Test.Assert.true$1(Bridge.is("firstValue", String), "#1");
            Bridge.Test.Assert.true$1(Bridge.is("firstValue", String), "#2");
            Bridge.Test.Assert.false$1(Bridge.is(0, String), "#3");
            Bridge.Test.Assert.false$1(this.doesItThrow($_.Bridge.ClientTest.Reflection.TypeSystemTests.f5), "#4");
            Bridge.Test.Assert.true$1(this.doesItThrow($_.Bridge.ClientTest.Reflection.TypeSystemTests.f6), "#5");

            Bridge.Test.Assert.notNull$1(Bridge.as("firstValue", String, true), "#6");
            Bridge.Test.Assert.notNull$1(Bridge.as("firstValue", String, true), "#7");
            Bridge.Test.Assert.null$1(Bridge.as(0, String, true), "#8");
        },
        defaultValueOfNamedValuesEnumIsNull: function () {
            Bridge.Test.Assert.null$1(null, "#1");
            Bridge.Test.Assert.null$1(this.getDefault(Bridge.ClientTest.Reflection.TypeSystemTests.NamedValuesEnum), "#2");
        },
        defaultValueOfImportedNamedValuesEnumIsNull: function () {
            Bridge.Test.Assert.null$1(null, "#1");
            Bridge.Test.Assert.null$1(this.getDefault(Bridge.ClientTest.Reflection.TypeSystemTests.ImportedNamedValuesEnum), "#2");
        }
    });

    Bridge.define("$AnonymousType$29", $_, {
        $kind: "anonymous",
        ctor: function (x) {
            this.x = x;
        },
        getx : function () {
            return this.x;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$29)) {
                return false;
            }
            return Bridge.equals(this.x, o.x);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7276639158, this.x]);
            return h;
        },
        toJSON: function () {
            return {
                x : this.x
            };
        }
    });

    Bridge.define("$AnonymousType$30", $_, {
        $kind: "anonymous",
        ctor: function (x, y) {
            this.x = x;
            this.y = y;
        },
        getx : function () {
            return this.x;
        },
        gety : function () {
            return this.y;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$30)) {
                return false;
            }
            return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7125709750, this.x, this.y]);
            return h;
        },
        toJSON: function () {
            return {
                x : this.x,
                y : this.y
            };
        }
    });

    Bridge.ns("Bridge.ClientTest.Reflection.TypeSystemTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Reflection.TypeSystemTests, {
        f1: function (_o5) {
            _o5.add(42);
            _o5.add("x");
            _o5.add(18);
            return _o5;
        },
        f2: function () {
            Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.C);
        },
        f3: function () {
            Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.I2);
        },
        f4: function () {
            Bridge.Reflection.getGenericTypeDefinition(Bridge.ClientTest.Reflection.TypeSystemTests.E1);
        },
        f5: function () {
            var x = Bridge.cast("firstValue", String);
        },
        f6: function () {
            var x = Bridge.cast(0, String);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.I1", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseMethodInvocationTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseMethodInvocationTypes.B", {
        f: function (x, y) {
            return ((x - y) | 0);
        },
        g: function (T, x, y) {
            return ((x - y) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.B", {
        messageB: null,
        ctor: function (x, y) {
            this.$initialize();
            this.messageB = x + " " + y;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.B", {
        messageB: null,
        ctor: function () {
            this.$initialize();
            this.messageB = "X";
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.B", {
        messageB: null,
        ctor: function (x, y) {
            this.$initialize();
            this.messageB = x + " " + y;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.B", {
        messageB: null,
        ctor: function () {
            this.$initialize();
            this.messageB = "X";
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BS", {
        X: 0,
        ctor: function (x) {
            this.$initialize();
            this.X = x;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BX$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.I3", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.ClassWithExpandParamsCtor", {
        ctorArgs: null,
        ctor: function (args) {
            args = Array.prototype.slice.call(arguments, 0);

            this.$initialize();
            this.ctorArgs = args;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D", {
        f: null,
        ctor: function () {
            this.$initialize();
            this.f = "from ctor";
        },
        getMessage: function () {
            return System.String.concat("The message ", this.f);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.CS2", {
        x: 0
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.E1", {
        $kind: "enum"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.E2", {
        $kind: "enum",
        $flags: true
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemTests.IG$1", function (T) { return {
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.ImportedNamedValuesEnum", {
        $kind: "enum",
        statics: {
            firstValue: "firstValue",
            secondValue: "secondValue"
        },
        $utype: System.String
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1", {
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1", function (T1) { return {
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I4", {
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1", function (T) { return {
        $kind: "interface",
        $variance: [2]
    }; });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1", function (T) { return {
        $kind: "interface",
        $variance: [1]
    }; });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2", function (T1, T2) { return {
        $kind: "interface",
        $variance: [0,1]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C1");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes");

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.B", {
        m: 0,
        ctor: function (m) {
            this.$initialize();
            this.m = m;
        },
        f: function (x, y) {
            return ((((x + y) | 0) + this.m) | 0);
        },
        g: function (T, x, y) {
            return System.String.concat(((((x + y) | 0) + this.m) | 0), Bridge.Reflection.getTypeName(T));
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.C", {
        m: 0,
        ctor: function (m) {
            this.$initialize();
            this.m = m;
        },
        f: function (x, y) {
            return ((((x + y) | 0) + this.m) | 0);
        },
        g: function (T, x, y) {
            return System.String.concat(((((x + y) | 0) + this.m) | 0), Bridge.Reflection.getTypeName(T));
        },
        getF: function () {
            return Bridge.fn.bind(this, this.f);
        },
        getG: function () {
            return Bridge.fn.bind(this, function (x, y) { return this.g(String, x, y); });
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.NamedValuesEnum", {
        $kind: "enum",
        statics: {
            firstValue: "firstValue",
            secondValue: "secondValue"
        },
        $utype: System.String
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.BooleanTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(true, Boolean));
            Bridge.Test.Assert.areEqual("Boolean", Bridge.Reflection.getTypeFullName(Boolean));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIsFalse: function () {
            Bridge.Test.Assert.areEqual(false, this.getDefaultValue(Boolean));
        },
        creatingInstanceReturnsFalse: function () {
            Bridge.Test.Assert.areEqual(false, Bridge.createInstance(Boolean));
        },
        defaultConstructorReturnsFalse: function () {
            Bridge.Test.Assert.areEqual(false, new Boolean());
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((true)), Bridge.getHashCode((true)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((false)), Bridge.getHashCode((false)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((true)), Bridge.getHashCode((false)));
        },
        objectEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((true), true));
            Bridge.Test.Assert.false(Bridge.equals((true), false));
            Bridge.Test.Assert.false(Bridge.equals((false), true));
            Bridge.Test.Assert.true(Bridge.equals((false), false));
        },
        boolEqualsWorks: function () {
            Bridge.Test.Assert.true((true) === true);
            Bridge.Test.Assert.false((true) === false);
            Bridge.Test.Assert.false((false) === true);
            Bridge.Test.Assert.true((false) === false);

            Bridge.Test.Assert.true(Bridge.equalsT(true, true, Boolean));
            Bridge.Test.Assert.false(Bridge.equalsT(true, false, Boolean));
            Bridge.Test.Assert.false(Bridge.equalsT(false, true, Boolean));
            Bridge.Test.Assert.true(Bridge.equalsT(false, false, Boolean));
        },
        logicalExclusiveOrWorks: function () {
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.false(false);
            var t = true;
            var f = false;
            Bridge.Test.Assert.true(t ^ f);
            Bridge.Test.Assert.false(f ^ f);
            Bridge.Test.Assert.false(t ^ t);
        },
        logicalAndWorks: function () {
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.true(true);
            var t = true;
            var f = false;
            Bridge.Test.Assert.false(!!(t & f));
            Bridge.Test.Assert.false(!!(f & f));
            Bridge.Test.Assert.true(!!(t & t));
        },
        logicalNegationWorks: function () {
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.true(true);
            var t = true;
            var f = false;
            Bridge.Test.Assert.false(!t);
            Bridge.Test.Assert.true(!f);
        },
        conditionalOperatorWorks: function () {
            var t = true;
            var f = false;
            Bridge.Test.Assert.false(!t ? true : false);
            Bridge.Test.Assert.true(!f ? true : false);
        },
        conditionalAndWorks: function () {
            var counterAnd = new Bridge.ClientTest.SimpleTypes.BooleanTests.Counter();

            Bridge.Test.Assert.true(counterAnd.increment() && counterAnd.increment());
            Bridge.Test.Assert.areEqual$1(2, counterAnd.getCount(), "1. Counter 2");
            Bridge.Test.Assert.false(counterAnd.increment() && counterAnd.increment(false));
            Bridge.Test.Assert.areEqual$1(4, counterAnd.getCount(), "2. Counter 4");

            Bridge.Test.Assert.false(counterAnd.increment(false) && counterAnd.increment());
            Bridge.Test.Assert.areEqual$1(5, counterAnd.getCount(), "3. Counter 5");
            Bridge.Test.Assert.false(counterAnd.increment(false) && counterAnd.increment(false));
            Bridge.Test.Assert.areEqual$1(6, counterAnd.getCount(), "4. Counter 6");

            var t = true;
            var f = false;

            Bridge.Test.Assert.true(t && counterAnd.increment());
            Bridge.Test.Assert.areEqual$1(7, counterAnd.getCount(), "5. Counter 7");
            Bridge.Test.Assert.false(t && counterAnd.increment(false));
            Bridge.Test.Assert.areEqual$1(8, counterAnd.getCount(), "6. Counter 8");

            Bridge.Test.Assert.false(f && counterAnd.increment());
            Bridge.Test.Assert.areEqual$1(8, counterAnd.getCount(), "7. Counter 8");
            Bridge.Test.Assert.false(f && counterAnd.increment(false));
            Bridge.Test.Assert.areEqual$1(8, counterAnd.getCount(), "8. Counter 8");
        },
        conditionalOrWorks: function () {
            var counterOr = new Bridge.ClientTest.SimpleTypes.BooleanTests.Counter();

            Bridge.Test.Assert.true(counterOr.increment() || counterOr.increment());
            Bridge.Test.Assert.areEqual$1(1, counterOr.getCount(), "1. Counter 1");
            Bridge.Test.Assert.true(counterOr.increment() || counterOr.increment(false));
            Bridge.Test.Assert.areEqual$1(2, counterOr.getCount(), "2. Counter 2");

            Bridge.Test.Assert.true(counterOr.increment(false) || counterOr.increment());
            Bridge.Test.Assert.areEqual$1(4, counterOr.getCount(), "3. Counter 4");
            Bridge.Test.Assert.false(counterOr.increment(false) || counterOr.increment(false));
            Bridge.Test.Assert.areEqual$1(6, counterOr.getCount(), "4. Counter 6");

            var t = true;
            var f = false;

            Bridge.Test.Assert.true(t || counterOr.increment());
            Bridge.Test.Assert.areEqual$1(6, counterOr.getCount(), "5. Counter 6");
            Bridge.Test.Assert.true(t || counterOr.increment(false));
            Bridge.Test.Assert.areEqual$1(6, counterOr.getCount(), "6. Counter 6");

            Bridge.Test.Assert.true(f || counterOr.increment());
            Bridge.Test.Assert.areEqual$1(7, counterOr.getCount(), "7. Counter 7");
            Bridge.Test.Assert.false(f || counterOr.increment(false));
            Bridge.Test.Assert.areEqual$1(8, counterOr.getCount(), "8. Counter 8");
        },
        equalityWorks: function () {
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.true(true);

            var t = true;
            var t1 = true;
            var f = false;
            var f1 = false;
            Bridge.Test.Assert.true(t === t1);
            Bridge.Test.Assert.false(t === f);
            Bridge.Test.Assert.false(f === t);
            Bridge.Test.Assert.true(f === f1);
        },
        inequalityWorks: function () {
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.false(false);

            var t = true;
            var t1 = true;
            var f = false;
            var f1 = false;
            Bridge.Test.Assert.false(t !== t1);
            Bridge.Test.Assert.true(t !== f);
            Bridge.Test.Assert.true(f !== t);
            Bridge.Test.Assert.false(f !== f1);
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((true), true) === 0);
            Bridge.Test.Assert.true(Bridge.compare((true), false) > 0);
            Bridge.Test.Assert.true(Bridge.compare((false), true) < 0);
            Bridge.Test.Assert.true(Bridge.compare((false), false) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(true, true, false, Boolean) === 0);
            Bridge.Test.Assert.true(Bridge.compare(true, false, false, Boolean) > 0);
            Bridge.Test.Assert.true(Bridge.compare(false, true, false, Boolean) < 0);
            Bridge.Test.Assert.true(Bridge.compare(false, false, false, Boolean) === 0);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("true"), true, "true");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("TRue"), true, "TRue");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("TRUE"), true, "TRUE");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("  true\t"), true, "true with spaces");

            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("false"), false, "false");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("FAlse"), false, "FAlse");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("FALSE"), false, "FALSE");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("  false\t"), false, "false with spaces");

            Bridge.Test.Assert.throws$6(System.ArgumentNullException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f1);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f2);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f3);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f4);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f5);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f6);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f7);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f8);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f9);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f10);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f11);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f12);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f13);
        },
        tryParseWorks: function () {
            // Success cases
            this.verifyBooleanTryParse(1, "True", true, true);
            this.verifyBooleanTryParse(2, "true", true, true);
            this.verifyBooleanTryParse(3, "TRUE", true, true);
            this.verifyBooleanTryParse(4, "tRuE", true, true);
            this.verifyBooleanTryParse(5, "False", false, true);
            this.verifyBooleanTryParse(6, "false", false, true);
            this.verifyBooleanTryParse(7, "FALSE", false, true);
            this.verifyBooleanTryParse(8, "fAlSe", false, true);
            this.verifyBooleanTryParse(9, "  True  ", true, true);
            this.verifyBooleanTryParse(10, "False  ", false, true);
            this.verifyBooleanTryParse(11, "True\u0000", true, true);
            this.verifyBooleanTryParse(12, "False\u0000", false, true);
            this.verifyBooleanTryParse(13, "True\u0000    ", true, true);
            this.verifyBooleanTryParse(14, " \u0000 \u0000  True   \u0000 ", true, true);
            this.verifyBooleanTryParse(15, "  False \u0000\u0000\u0000  ", false, true);

            // Fail cases
            this.verifyBooleanTryParse(16, null, false, false);
            this.verifyBooleanTryParse(17, "", false, false);
            this.verifyBooleanTryParse(18, " ", false, false);
            this.verifyBooleanTryParse(19, "Garbage", false, false);
            this.verifyBooleanTryParse(20, "True\u0000Garbage", false, false);
            this.verifyBooleanTryParse(21, "True\u0000True", false, false);
            this.verifyBooleanTryParse(22, "True True", false, false);
            this.verifyBooleanTryParse(23, "True False", false, false);
            this.verifyBooleanTryParse(24, "False True", false, false);
            this.verifyBooleanTryParse(25, "Fa lse", false, false);
            this.verifyBooleanTryParse(26, "T", false, false);
            this.verifyBooleanTryParse(27, "0", false, false);
            this.verifyBooleanTryParse(28, "1", false, false);
        },
        boolStringWorks: function () {
            Bridge.Test.Assert.areEqual("True", System.Boolean.trueString);
            Bridge.Test.Assert.areEqual("False", System.Boolean.falseString);
        },
        verifyBooleanTryParse: function (i, value, expectedResult, expectedReturn) {
            var result = { };

            var returnValue = System.Boolean.tryParse(value, result);
            Bridge.Test.Assert.areEqual$1(expectedReturn, returnValue, System.String.concat(i + " Return value: ", value));
            Bridge.Test.Assert.areEqual$1(expectedResult, result.v, System.String.concat(i + " Result: ", value));
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.BooleanTests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.BooleanTests, {
        f1: function () {
            var b = System.Boolean.parse(null);
        },
        f2: function () {
            var b = System.Boolean.parse("");
        },
        f3: function () {
            var b = System.Boolean.parse(" ");
        },
        f4: function () {
            var b = System.Boolean.parse("Garbage");
        },
        f5: function () {
            var b = System.Boolean.parse("True\u0000Garbage");
        },
        f6: function () {
            var b = System.Boolean.parse("True\u0000True");
        },
        f7: function () {
            var b = System.Boolean.parse("True True");
        },
        f8: function () {
            var b = System.Boolean.parse("True False");
        },
        f9: function () {
            var b = System.Boolean.parse("False True");
        },
        f10: function () {
            var b = System.Boolean.parse("Fa lse");
        },
        f11: function () {
            var b = System.Boolean.parse("T");
        },
        f12: function () {
            var b = System.Boolean.parse("0");
        },
        f13: function () {
            var b = System.Boolean.parse("1");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.BooleanTests.Counter", {
        config: {
            properties: {
                Count: 0
            }
        },
        increment: function (r) {
            if (r === void 0) { r = true; }
            this.setCount((this.getCount() + 1) | 0);

            return r;
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.ByteTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.Byte));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Byte));
            Bridge.Test.Assert.false(Bridge.is(-1, System.Byte));
            Bridge.Test.Assert.false(Bridge.is(256, System.Byte));
            Bridge.Test.Assert.areEqual("System.Byte", Bridge.Reflection.getTypeFullName(System.Byte));
            var b = 0;
            Bridge.Test.Assert.true(Bridge.is(b, System.Byte));
            Bridge.Test.Assert.true(Bridge.is(b, System.IComparable$1(System.Byte)));
            Bridge.Test.Assert.true(Bridge.is(b, System.IEquatable$1(System.Byte)));
            Bridge.Test.Assert.true(Bridge.is(b, System.IFormattable));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 255, i5 = 256;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 255, ni5 = 256, ni6 = null;

            Bridge.Test.Assert.areStrictEqual$1(255, (i1 & 255), "-1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i2 & 255), "0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, (i3 & 255), "234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(255, (i4 & 255), "255 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i5 & 255), "256 unchecked");

            Bridge.Test.Assert.areStrictEqual$1(255, Bridge.Int.clipu8(ni1), "nullable -1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu8(ni2), "nullable 0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.clipu8(ni3), "nullable 234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(255, Bridge.Int.clipu8(ni4), "nullable 255 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu8(ni5), "nullable 256 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clipu8(ni6), "null unchecked");

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.Byte);
            }, $_.Bridge.ClientTest.SimpleTypes.ByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.Byte), "0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.Byte), "234 checked");
            Bridge.Test.Assert.areStrictEqual$1(255, Bridge.Int.check(i4, System.Byte), "256 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.Byte);
            }, $_.Bridge.ClientTest.SimpleTypes.ByteTests.f1);

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.Byte);
            }, $_.Bridge.ClientTest.SimpleTypes.ByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.Byte), "nullable 0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.Byte), "nullable 234 checked");
            Bridge.Test.Assert.areStrictEqual$1(255, Bridge.Int.check(ni4, System.Byte), "nullable 255 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.Byte);
            }, $_.Bridge.ClientTest.SimpleTypes.ByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Byte), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Byte));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areEqual(0, Bridge.createInstance(System.Byte));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(0, 0);
            Bridge.Test.Assert.areEqual(255, 255);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("12", System.Byte.format((18), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("12", System.Byte.format((18), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Byte.tryParse("234", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(234, numberResult.v);

            result = System.Byte.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Byte.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Byte.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Byte.tryParse("54768", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(54768, numberResult.v);

            result = System.Byte.tryParse("-1", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(-1, numberResult.v);

            result = System.Byte.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(234, System.Byte.parse("234"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("12", (18).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);

            Bridge.Test.Assert.true(Bridge.equalsT(0, 0, System.Byte));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0, System.Byte));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1, System.Byte));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1, System.Byte));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0, false, System.Byte) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0, false, System.Byte) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1, false, System.Byte) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.ByteTests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.ByteTests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Byte.parse("");
        },
        f3: function () {
            System.Byte.parse(null);
        },
        f4: function () {
            System.Byte.parse("notanumber");
        },
        f5: function () {
            System.Byte.parse("54768");
        },
        f6: function () {
            System.Byte.parse("-1");
        },
        f7: function () {
            System.Byte.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.CharTests", {
        typePropertiesAreInt32: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.Char));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Char));
            Bridge.Test.Assert.false(Bridge.is(-1, System.Char));
            Bridge.Test.Assert.false(Bridge.is(65536, System.Char));
            Bridge.Test.Assert.areEqual("System.Char", Bridge.Reflection.getTypeFullName(System.Char));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 65535, i5 = 65536;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 65535, ni5 = 65536, ni6 = null;

            Bridge.Test.Assert.areStrictEqual$1(65535, (i1 & 65535), "-1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i2 & 65535), "0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, (i3 & 65535), "234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(65535, (i4 & 65535), "65535 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i5 & 65535), "65536 unchecked");

            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni1), "nullable -1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni2), "nullable 0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.clipu16(ni3), "nullable 234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni4), "nullable 65535 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni5), "nullable 65536 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clipu16(ni6), "null unchecked");

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.Char);
            }, $_.Bridge.ClientTest.SimpleTypes.CharTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.Char), "0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.Char), "234 checked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.check(i4, System.Char), "65535 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.Char);
            }, $_.Bridge.ClientTest.SimpleTypes.CharTests.f1);

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.Char);
            }, $_.Bridge.ClientTest.SimpleTypes.CharTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.Char), "nullable 0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.Char), "nullable 234 checked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.check(ni4, System.Char), "nullable 65535 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.Char);
            }, $_.Bridge.ClientTest.SimpleTypes.CharTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Char), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueWorks: function () {
            Bridge.Test.Assert.areEqual(0, this.getDefaultValue(System.Char));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.Char));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(0, 0);
            Bridge.Test.Assert.areEqual(65535, 65535);
        },
        charComparisonWorks: function () {
            var a = 97, a2 = 97, b = 98;
            Bridge.Test.Assert.true(a === a2);
            Bridge.Test.Assert.false(a === b);
            Bridge.Test.Assert.false(a !== a2);
            Bridge.Test.Assert.true(a !== b);
            Bridge.Test.Assert.false(a < a2);
            Bridge.Test.Assert.true(a < b);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual$1(97, System.Char.charCodeAt("a", 0), "Parse 1");
            Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.SimpleTypes.CharTests.f2, "Parse 2");
            Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.SimpleTypes.CharTests.f3, "Parse 3");
            Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.SimpleTypes.CharTests.f4, "Parse 4");
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("0023", System.Char.format((35), "x4"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("0023", System.Char.format((35), "x4"));
        },
        toStringWorks: function () {
            Bridge.Test.Assert.areEqual("A", String.fromCharCode((65)));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((48)), Bridge.getHashCode((48)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((49)), Bridge.getHashCode((49)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((49)), Bridge.getHashCode((48)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((48), 48));
            Bridge.Test.Assert.false(Bridge.equals((49), 48));
            Bridge.Test.Assert.false(Bridge.equals((48), 49));
            Bridge.Test.Assert.true(Bridge.equals((49), 49));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((48) === 48);
            Bridge.Test.Assert.false((49) === 48);
            Bridge.Test.Assert.false((48) === 49);
            Bridge.Test.Assert.true((49) === 49);
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((49), 48) > 0);
            Bridge.Test.Assert.true(Bridge.compare((48), 49) < 0);
            Bridge.Test.Assert.true(Bridge.compare((48), 48) === 0);
            Bridge.Test.Assert.true(Bridge.compare((49), 49) === 0);
        },
        isLowerWorks: function () {
            Bridge.Test.Assert.true$1(Bridge.isLower(97), "#1");
            Bridge.Test.Assert.false$1(Bridge.isLower(65), "#2");
            Bridge.Test.Assert.false$1(Bridge.isLower(51), "#3");
        },
        isUpperWorks: function () {
            Bridge.Test.Assert.true$1(Bridge.isUpper(65), "#1");
            Bridge.Test.Assert.false$1(Bridge.isUpper(97), "#2");
            Bridge.Test.Assert.false$1(Bridge.isUpper(51), "#3");
        },
        toLowerWorks: function () {
            Bridge.Test.Assert.areEqual(97, String.fromCharCode(65).toLowerCase().charCodeAt(0));
            Bridge.Test.Assert.areEqual(97, String.fromCharCode(97).toLowerCase().charCodeAt(0));
            Bridge.Test.Assert.areEqual(51, String.fromCharCode(51).toLowerCase().charCodeAt(0));
        },
        toUpperWorks: function () {
            Bridge.Test.Assert.areEqual(65, String.fromCharCode(65).toUpperCase().charCodeAt(0));
            Bridge.Test.Assert.areEqual(65, String.fromCharCode(97).toUpperCase().charCodeAt(0));
            Bridge.Test.Assert.areEqual(51, String.fromCharCode(51).toUpperCase().charCodeAt(0));
        },
        isDigitWorks: function () {
            Bridge.Test.Assert.true$1(System.Char.isDigit(48), "#1");
            Bridge.Test.Assert.false$1(System.Char.isDigit(46), "#2");
            Bridge.Test.Assert.false$1(System.Char.isDigit(65), "#3");
        },
        isWhiteSpaceWorks: function () {
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace(String.fromCharCode(32)), "#1");
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace(String.fromCharCode(10)), "#2");
            Bridge.Test.Assert.false$1(System.Char.isWhiteSpace(String.fromCharCode(65)), "#3");
        },
        isDigitWithStringAndIndexWorks: function () {
            Bridge.Test.Assert.true$1(System.Char.isDigit("abc0def".charCodeAt(3)), "#1");
            Bridge.Test.Assert.true$1(System.Char.isDigit("1".charCodeAt(0)), "#2");
            Bridge.Test.Assert.true$1(System.Char.isDigit("abcdef5".charCodeAt(6)), "#3");
            Bridge.Test.Assert.true$1(System.Char.isDigit("9abcdef".charCodeAt(0)), "#4");
            Bridge.Test.Assert.false$1(System.Char.isDigit(".012345".charCodeAt(0)), "#5");
            Bridge.Test.Assert.false$1(System.Char.isDigit("012345.".charCodeAt(6)), "#6");
            Bridge.Test.Assert.false$1(System.Char.isDigit("012.345".charCodeAt(3)), "#7");
        },
        isWhiteSpaceWithStringAndIndexWorks: function () {
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace("abc def".charAt(3)), "#1");
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace("\t".charAt(0)), "#2");
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace("abcdef\r".charAt(6)), "#3");
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace("\nabcdef".charAt(0)), "#4");
            Bridge.Test.Assert.false$1(System.Char.isWhiteSpace(".\r\n     ".charAt(0)), "#5");
            Bridge.Test.Assert.false$1(System.Char.isWhiteSpace("\r\n    .".charAt(6)), "#6");
            Bridge.Test.Assert.false$1(System.Char.isWhiteSpace("\r  .\n  ".charAt(3)), "#7");
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.CharTests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.CharTests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Char.charCodeAt(null, 0);
        },
        f3: function () {
            System.Char.charCodeAt("", 0);
        },
        f4: function () {
            System.Char.charCodeAt("ab", 0);
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.DecimalTests", {
        assertIsDecimalAndEqualTo: function (v, d, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Decimal), message);
            Bridge.Test.Assert.areStrictEqual$1(System.Double.format(d, 'G'), v.toString(), message);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Decimal(0.5), System.Decimal));
            Bridge.Test.Assert.areEqual("System.Decimal", Bridge.Reflection.getTypeFullName(System.Decimal));
            var d = System.Decimal(0.0);
            Bridge.Test.Assert.true(Bridge.is(d, System.Decimal));
            Bridge.Test.Assert.true(Bridge.is(d, System.IFormattable));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            this.assertIsDecimalAndEqualTo(this.getDefaultValue(System.Decimal), 0);
        },
        creatingInstanceReturnsZero: function () {
            this.assertIsDecimalAndEqualTo(Bridge.createInstance(System.Decimal), 0);
        },
        constantsWork: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.One, 1);
            this.assertIsDecimalAndEqualTo(System.Decimal.Zero, 0);
            this.assertIsDecimalAndEqualTo(System.Decimal.MinusOne, -1);
        },
        defaultConstructorReturnsZero: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0), 0);
        },
        convertingConstructorsWork: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0.5), 0.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(1.5), 1.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(2), 2);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.Int64(3)), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal(4), 4);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.UInt64(5)), 5);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", Bridge.Int.format(System.Decimal(291.0), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", Bridge.Int.format(System.Decimal(291.0), "x"));
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", Bridge.Int.format(System.Decimal(123.0), 'G'));
        },
        addWithStringWorks: function () {
            var d1 = System.Decimal(1.0);
            var s1 = System.Nullable.toString(d1) + "#";

            Bridge.Test.Assert.areEqual$1("1#", s1, "decimal?");

            var d2 = System.Decimal(2.0);
            var s2 = Bridge.Int.format(d2, 'G') + "!";

            Bridge.Test.Assert.areEqual$1("2!", s2, "decimal");
        },
        conversionsToDecimalWork: function () {
            var x = 0;
            Bridge.Test.Assert.areDeepEqual(System.Decimal(1.0), System.Decimal((((((x + 1) | 0))) & 255)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(2.0), System.Decimal(Bridge.Int.sxb(((((x + 2) | 0))) & 255)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(3.0), System.Decimal(Bridge.Int.sxs(((((x + 3) | 0))) & 65535)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(4.0), System.Decimal((((((x + 4) | 0))) & 65535)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(5.0), System.Decimal((((((x + 5) | 0))) & 65535)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(6.0), System.Decimal((((x + 6) | 0))));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(7.0), System.Decimal((((((x + 7) | 0))) >>> 0)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(8.0), System.Decimal(System.Int64((((x + 8) | 0)))));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(9.0), System.Decimal(Bridge.Int.clipu64((((x + 9) | 0)))));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(10.5), System.Decimal((x + 10.5), null, System.Single));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(11.5), System.Decimal((x + 11.5), null, System.Double));
        },
        conversionsFromDecimalWork: function () {
            var x = 0;
            Bridge.Test.Assert.areEqual(1, System.Decimal.toInt(System.Decimal((((x + 1) | 0))), System.Byte));
            Bridge.Test.Assert.areEqual(2, System.Decimal.toInt(System.Decimal((((x + 2) | 0))), System.SByte));
            Bridge.Test.Assert.areEqual(3, System.Decimal.toInt(System.Decimal((((x + 3) | 0))), System.Int16));
            Bridge.Test.Assert.areEqual(4, System.Decimal.toInt(System.Decimal((((x + 4) | 0))), System.UInt16));
            Bridge.Test.Assert.areEqual(5, System.Decimal.toInt(System.Decimal((((x + 5) | 0))), System.Char));
            Bridge.Test.Assert.areEqual(6, System.Decimal.toInt(System.Decimal((((x + 6) | 0))), System.Int32));
            Bridge.Test.Assert.areEqual(7, System.Decimal.toInt(System.Decimal((((x + 7) | 0))), System.UInt32));
            Bridge.Test.Assert.true(System.Int64(8).equals(System.Decimal.toInt(System.Decimal((((x + 8) | 0))), System.Int64)));
            Bridge.Test.Assert.true(System.UInt64(9).equals(System.Decimal.toInt(System.Decimal((((x + 9) | 0))), System.UInt64)));
            Bridge.Test.Assert.areEqual(10.5, System.Decimal.toFloat(System.Decimal((x + 10.5), null, System.Double)));
            Bridge.Test.Assert.areEqual(11.5, System.Decimal.toFloat(System.Decimal((x + 11.5), null, System.Double)));
        },
        operatorsWork: function () {
            var $t;
            var x = System.Decimal(3);
            this.assertIsDecimalAndEqualTo(x.clone(), 3);
            this.assertIsDecimalAndEqualTo(x.neg(), -3);
            this.assertIsDecimalAndEqualTo(x.add(System.Decimal(4.0)), 7);
            this.assertIsDecimalAndEqualTo(x.sub(System.Decimal(2.0)), 1);
            this.assertIsDecimalAndEqualTo(($t = x, x = x.inc(), $t), 3);
            this.assertIsDecimalAndEqualTo((x = x.inc()), 5);
            this.assertIsDecimalAndEqualTo(($t = x, x = x.dec(), $t), 5);
            this.assertIsDecimalAndEqualTo((x = x.dec()), 3);
            this.assertIsDecimalAndEqualTo(x.mul(System.Decimal(3.0)), 9);
            this.assertIsDecimalAndEqualTo(x.div(System.Decimal(2.0)), 1.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(14.0).mod(x), 2);
            Bridge.Test.Assert.true(x.equalsT(System.Decimal(3.0)));
            Bridge.Test.Assert.false(x.equalsT(System.Decimal(4.0)));
            Bridge.Test.Assert.false(x.ne(System.Decimal(3.0)));
            Bridge.Test.Assert.true(x.ne(System.Decimal(4.0)));
            Bridge.Test.Assert.true(x.gt(System.Decimal(1.0)));
            Bridge.Test.Assert.false(x.gt(System.Decimal(3.0)));
            Bridge.Test.Assert.true(x.gte(System.Decimal(3.0)));
            Bridge.Test.Assert.false(x.gte(System.Decimal(4.0)));
            Bridge.Test.Assert.true(x.lt(System.Decimal(4.0)));
            Bridge.Test.Assert.false(x.lt(System.Decimal(3.0)));
            Bridge.Test.Assert.true(x.lte(System.Decimal(3.0)));
            Bridge.Test.Assert.false(x.lte(System.Decimal(2.0)));
        },
        addWorks: function () {
            Bridge.Test.Assert.areDeepEqual(System.Decimal(7.0), System.Decimal(3.0).add(System.Decimal(4.0)));
        },
        ceilingWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.4).ceil(), 4);
        },
        divideWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).div(System.Decimal(4.0)), 0.75);
        },
        floorWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.2).floor(), 3);
        },
        remainderWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(14.0).mod(System.Decimal(3.0)), 2);
        },
        multiplyWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).mul(System.Decimal(2.0)), 6);
        },
        negateWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0).sub(System.Decimal(3.0)), -3);
        },
        roundWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3);
        },
        roundWithModeWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 0), 4, "Up 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 0), 4, "Up 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 0), 4, "Up 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 0), -4, "Up -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 0), -4, "Up -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 0), -4, "Up -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 1), 3, "Down 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 1), 3, "Down 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 1), 3, "Down 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 1), -3, "Down -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 1), -3, "Down -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 1), -3, "Down -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 2), 4, "InfinityPos 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 2), 4, "InfinityPos 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 2), 4, "InfinityPos 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 2), -3, "InfinityPos -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 2), -3, "InfinityPos -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 2), -3, "InfinityPos -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 3), 3, "InfinityNeg 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 3), 3, "InfinityNeg 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 3), 3, "InfinityNeg 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 3), -4, "InfinityNeg -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 3), -4, "InfinityNeg -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 3), -4, "InfinityNeg -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 5), 4, "TowardsZero 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 5), 3, "TowardsZero 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 5), 3, "TowardsZero 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 5), -3, "TowardsZero -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 5), -3, "TowardsZero -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 5), -4, "TowardsZero -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 4), 4, "AwayFromZero 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 4), 4, "AwayFromZero 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 4), 3, "AwayFromZero 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 4), -3, "AwayFromZero -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 4), -4, "AwayFromZero -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 4), -4, "AwayFromZero -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 7), 4, "Ceil 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 7), 4, "Ceil 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 7), 3, "Ceil 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 7), -3, "Ceil -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 7), -3, "Ceil -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 7), -4, "Ceil -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 8), 4, "Floor 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 8), 3, "Floor 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 8), 3, "Floor 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 8), -3, "Floor -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 8), -4, "Floor -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 8), -4, "Floor -3.8m");

            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 6), 4, "ToEven 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 6), 4, "ToEven 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3, "ToEven 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 6), -3, "ToEven -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 6), -4, "ToEven -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 6), -4, "ToEven -3.8m");
        },
        subtractWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(7.0).sub(System.Decimal(3.0)), 4);
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areDeepEqual(Bridge.getHashCode((System.Decimal(0.0))), Bridge.getHashCode((System.Decimal(0.0))));
            Bridge.Test.Assert.areDeepEqual(Bridge.getHashCode((System.Decimal(1.0))), Bridge.getHashCode((System.Decimal(1.0))));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((System.Decimal(1.0))), Bridge.getHashCode((System.Decimal(0.0))));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((System.Decimal(0.5))), Bridge.getHashCode((System.Decimal(0.0))));
        },
        objectEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((System.Decimal(0.0)), System.Decimal(0.0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Decimal(1.0)), System.Decimal(0.0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Decimal(0.0)), System.Decimal(0.5)));
            Bridge.Test.Assert.true(Bridge.equals((System.Decimal(1.0)), System.Decimal(1.0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Decimal(0.0)), System.Decimal.MaxValue));
        },
        decimalEqualsWorks: function () {
            Bridge.Test.Assert.true((System.Decimal(0.0)).equalsT(System.Decimal(0.0)));
            Bridge.Test.Assert.false((System.Decimal(1.0)).equalsT(System.Decimal(0.0)));
            Bridge.Test.Assert.false((System.Decimal(0.0)).equalsT(System.Decimal(0.5)));
            Bridge.Test.Assert.true((System.Decimal(1.0)).equalsT(System.Decimal(1.0)));
            Bridge.Test.Assert.false((System.Decimal(0.0)).equalsT(System.Decimal.MaxValue));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true((System.Decimal(0.0)).compareTo(System.Decimal(0.0)) === 0);
            Bridge.Test.Assert.true((System.Decimal(1.0)).compareTo(System.Decimal(0.0)) > 0);
            Bridge.Test.Assert.true((System.Decimal(0.0)).compareTo(System.Decimal(0.5)) < 0);
            Bridge.Test.Assert.true((System.Decimal(1.0)).compareTo(System.Decimal(1.0)) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(System.Decimal(0.0), System.Decimal(0.0), false, System.Decimal) === 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Decimal(1.0), System.Decimal(0.0), false, System.Decimal) > 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Decimal(0.0), System.Decimal(0.5), false, System.Decimal) < 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Decimal(1.0), System.Decimal(1.0), false, System.Decimal) === 0);
        },
        fullCoalesceWorks: function () {
            var a = System.Decimal(1.0);
            var b = a.equalsT(System.Decimal(1.0)) ? System.Decimal(2.0) : System.Decimal(3.0);

            this.assertIsDecimalAndEqualTo(b, 2);
        },
        shortCoalesceWorks: function () {
            var $t, $t1;
            var c = System.Decimal(1.0);
            var d = ($t = c, $t != null ? $t : System.Decimal(2.0));

            this.assertIsDecimalAndEqualTo(d, 1);

            var e = System.Decimal(3);
            var f = ($t1 = e, $t1 != null ? $t1 : System.Decimal(0));

            this.assertIsDecimalAndEqualTo(f, 3);
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.DoubleTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0.5, System.Double));
            Bridge.Test.Assert.areEqual("System.Double", Bridge.Reflection.getTypeFullName(System.Double));
            var d = 0.0;
            Bridge.Test.Assert.true(Bridge.is(d, System.Double));
            Bridge.Test.Assert.true(Bridge.is(d, System.IFormattable));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Double));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areEqual(0, Bridge.createInstance(System.Double));
        },
        constantsWork: function () {
            var zero = 0;
            Bridge.Test.Assert.true$1(System.Double.max > System.Nullable.getValue(Bridge.cast(1.7E+308, System.Double)), "MaxValue should be correct");
            Bridge.Test.Assert.areEqual$1(4.94065645841247E-324, 4.94065645841247E-324, "MinValue should be correct");
            Bridge.Test.Assert.true$1(isNaN(Number.NaN), "NaN should be correct");
            Bridge.Test.Assert.areStrictEqual$1(1 / zero, Number.POSITIVE_INFINITY, "PositiveInfinity should be correct");
            Bridge.Test.Assert.areStrictEqual$1(-1 / zero, Number.NEGATIVE_INFINITY, "NegativeInfinity should be correct");
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Double.format((291.0), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Double.format((291.0), "x"));
        },
        toStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Double.format((123.0), 'G'));
        },
        toExponentialWorks: function () {
            Bridge.Test.Assert.areEqual("1.23e+2", (123.0).toExponential());
        },
        toExponentialWithFractionalDigitsWorks: function () {
            Bridge.Test.Assert.areEqual("1.2e+2", (123.0).toExponential(1));
        },
        toFixed: function () {
            Bridge.Test.Assert.areEqual("123", (123.0).toFixed());
        },
        toFixedWithFractionalDigitsWorks: function () {
            Bridge.Test.Assert.areEqual("123.0", (123.0).toFixed(1));
        },
        toPrecisionWorks: function () {
            Bridge.Test.Assert.areEqual("12345", (12345.0).toPrecision());
        },
        toPrecisionWithPrecisionWorks: function () {
            Bridge.Test.Assert.areEqual("1.2e+4", (12345.0).toPrecision(2));
        },
        isPositiveInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.Assert.false$1((-inf === Number.POSITIVE_INFINITY), "-inf");
            Bridge.Test.Assert.false$1((0.0 === Number.POSITIVE_INFINITY), "0.0");
            Bridge.Test.Assert.false$1((Number.NaN === Number.POSITIVE_INFINITY), "Double.NaN");
        },
        isNegativeInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.Assert.false((inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.true((-inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.false((0.0 === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.false((Number.NaN === Number.NEGATIVE_INFINITY));
        },
        isInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.Assert.true((Math.abs(inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.true((Math.abs(-inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Math.abs(0.0) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Math.abs(Number.NaN) === Number.POSITIVE_INFINITY));
        },
        isFiniteWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.Assert.true(isFinite(one));
            Bridge.Test.Assert.false(isFinite(one / zero));
            Bridge.Test.Assert.false(isFinite(zero / zero));
        },
        isNaNWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.Assert.false(isNaN(one));
            Bridge.Test.Assert.false(isNaN(one / zero));
            Bridge.Test.Assert.true(isNaN(zero / zero));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0.0)), Bridge.getHashCode((0.0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1.0)), Bridge.getHashCode((1.0)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1.0)), Bridge.getHashCode((0.0)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((0.5)), Bridge.getHashCode((0.0)));
        },
        objectEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0.0), 0.0));
            Bridge.Test.Assert.false(Bridge.equals((1.0), 0.0));
            Bridge.Test.Assert.false(Bridge.equals((0.0), 0.5));
            Bridge.Test.Assert.true(Bridge.equals((1.0), 1.0));
        },
        doubleEqualsWorks: function () {
            Bridge.Test.Assert.true((0.0) === 0.0);
            Bridge.Test.Assert.false((1.0) === 0.0);
            Bridge.Test.Assert.false((0.0) === 0.5);
            Bridge.Test.Assert.true((1.0) === 1.0);
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0.0), 0.0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1.0), 0.0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0.0), 0.5) < 0);
            Bridge.Test.Assert.true(Bridge.compare((1.0), 1.0) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0.0, 0.0, false, System.Double) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1.0, 0.0, false, System.Double) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0.0, 0.5, false, System.Double) < 0);
            Bridge.Test.Assert.true(Bridge.compare(1.0, 1.0, false, System.Double) === 0);
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.EnumTests", {
        typePropertiesAreCorrect: function () {
            //Assert.AreEqual("System.Enum", typeof(Enum).FullName);
            Bridge.Test.Assert.areEqual("Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum));
            Bridge.Test.Assert.true(Bridge.is(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, System.Int32));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueOfEnumClassIsNull: function () {
            Bridge.Test.Assert.areStrictEqual(null, this.getDefaultValue(System.Enum));
        },
        defaultValueOfEnumTypeIsFirstValue: function () {
            Bridge.Test.Assert.areStrictEqual(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, this.getDefaultValue(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum));
        },
        defaultConstructorOfEnumTypeReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, (0).valueOf());
        },
        firstValueOfEnumIsZero: function () {
            Bridge.Test.Assert.areStrictEqual(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue);
        },
        creatingInstanceOfEnumTypeReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.createInstance(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum));
        },
        defaultExpressionWithEnumReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, 0);
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue), Bridge.getHashCode(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.SecondValue), Bridge.getHashCode(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue));
            Bridge.Test.Assert.false(Bridge.equals(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.SecondValue));
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.EnumTests.FlagsEnum", {
        $kind: "enum",
        statics: {
            None: 0,
            FirstValue: 1,
            SecondValue: 2,
            ThirdValue: 4
        },
        $flags: true
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum", {
        $kind: "enum",
        statics: {
            FirstValue: 0,
            SecondValue: 1,
            ThirdValue: 2
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.Int16Tests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.Int16));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Int16));
            Bridge.Test.Assert.false(Bridge.is(-32769, System.Int16));
            Bridge.Test.Assert.false(Bridge.is(32768, System.Int16));
            Bridge.Test.Assert.areEqual("System.Int16", Bridge.Reflection.getTypeFullName(System.Int16));

            var s = 0;
            Bridge.Test.Assert.true(Bridge.is(s, System.Int16));
            Bridge.Test.Assert.true(Bridge.is(s, System.IComparable$1(System.Int16)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IEquatable$1(System.Int16)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IFormattable));
        },
        castsWork: function () {
            var i1 = -32769, i2 = -32768, i3 = 5754, i4 = 32767, i5 = 32768;
            var ni1 = -32769, ni2 = -32768, ni3 = 5754, ni4 = 32767, ni5 = 32768, ni6 = null;

            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.sxs(i1 & 65535), "-32769 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.sxs(i2 & 65535), "-32768 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(5754, Bridge.Int.sxs(i3 & 65535), "5754 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.sxs(i4 & 65535), "32767 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.sxs(i5 & 65535), "32768 unchecked");

            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.clip16(ni1), "nullable -32769 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.clip16(ni2), "nullable -32768 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(5754, Bridge.Int.clip16(ni3), "nullable 5754 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.clip16(ni4), "nullable 32767 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.clip16(ni5), "nullable 32768 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clip16(ni6), "null unchecked");

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.Int16);
            }, $_.Bridge.ClientTest.SimpleTypes.Int16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.check(i2, System.Int16), "-32768 checked");
            Bridge.Test.Assert.areStrictEqual$1(5754, Bridge.Int.check(i3, System.Int16), "5754 checked");
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.check(i4, System.Int16), "32767 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.Int16);
            }, $_.Bridge.ClientTest.SimpleTypes.Int16Tests.f1);

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.Int16);
            }, $_.Bridge.ClientTest.SimpleTypes.Int16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.check(ni2, System.Int16), "nullable -32768 checked");
            Bridge.Test.Assert.areStrictEqual$1(5754, Bridge.Int.check(ni3, System.Int16), "nullable 5754 checked");
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.check(ni4, System.Int16), "nullable 32767 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.Int16);
            }, $_.Bridge.ClientTest.SimpleTypes.Int16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Int16), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Int16));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.Int16));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(-32768, -32768);
            Bridge.Test.Assert.areEqual(32767, 32767);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Int16.format((291), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Int16.format((291), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Int16.tryParse("234", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(234, numberResult.v);

            result = System.Int16.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Int16.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Int16.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Int16.tryParse("54768", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(54768, numberResult.v);

            result = System.Int16.tryParse("-55678", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(-55678, numberResult.v);

            result = System.Int16.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(234, System.Int16.parse("234"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);

            Bridge.Test.Assert.true(Bridge.equalsT(0, 0, System.Int16));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0, System.Int16));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1, System.Int16));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1, System.Int16));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0, false, System.Int16) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0, false, System.Int16) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1, false, System.Int16) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.Int16Tests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.Int16Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Int16.parse("");
        },
        f3: function () {
            System.Int16.parse(null);
        },
        f4: function () {
            System.Int16.parse("notanumber");
        },
        f5: function () {
            System.Int16.parse("54768");
        },
        f6: function () {
            System.Int16.parse("-55678");
        },
        f7: function () {
            System.Int16.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.Int32Tests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.Int32));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Int32));
            Bridge.Test.Assert.false(Bridge.is(System.Int64([2147483647,-1]), System.Int32));
            Bridge.Test.Assert.false(Bridge.is(2147483648, System.Int32));
            Bridge.Test.Assert.areEqual("System.Int32", Bridge.Reflection.getTypeFullName(System.Int32));

            var i = 0;
            Bridge.Test.Assert.true(Bridge.is(i, System.Int32));
            Bridge.Test.Assert.true(Bridge.is(i, System.IComparable$1(System.Int32)));
            Bridge.Test.Assert.true(Bridge.is(i, System.IEquatable$1(System.Int32)));
            Bridge.Test.Assert.true(Bridge.is(i, System.IFormattable));
        },
        castsWork: function () {
            var i1 = System.Int64([2147483647,-1]), i2 = System.Int64.lift(-2147483648), i3 = System.Int64(5754), i4 = System.Int64(2147483647), i5 = System.Int64(2147483648);
            var ni1 = System.Int64([2147483647,-1]), ni2 = System.Int64.lift(-2147483648), ni3 = System.Int64(5754), ni4 = System.Int64(2147483647), ni5 = System.Int64(2147483648), ni6 = System.Int64.lift(null);

            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(System.Nullable.getValue(i1)), "-2147483649 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(System.Nullable.getValue(i2)), "-2147483648 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(5754, System.Int64.clip32(System.Nullable.getValue(i3)), "5754 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(System.Nullable.getValue(i4)), "2147483647 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(System.Nullable.getValue(i5)), "2147483648 unchecked");

            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(ni1), "nullable -2147483649 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(ni2), "nullable -2147483648 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(5754, System.Int64.clip32(ni3), "nullable 5754 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(ni4), "nullable 2147483647 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(ni5), "nullable 2147483648 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, System.Int64.clip32(ni6), "null unchecked");

            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(System.Nullable.getValue(i1), System.Int32);
            }, $_.Bridge.ClientTest.SimpleTypes.Int32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.check(System.Nullable.getValue(i2), System.Int32), "-2147483648 checked");
            Bridge.Test.Assert.areStrictEqual$1(5754, System.Int64.check(System.Nullable.getValue(i3), System.Int32), "5754 checked");
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.check(System.Nullable.getValue(i4), System.Int32), "2147483647 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(System.Nullable.getValue(i5), System.Int32);
            }, $_.Bridge.ClientTest.SimpleTypes.Int32Tests.f1);

            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(ni1, System.Int32);
            }, $_.Bridge.ClientTest.SimpleTypes.Int32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.check(ni2, System.Int32), "nullable -2147483648 checked");
            Bridge.Test.Assert.areStrictEqual$1(5754, System.Int64.check(ni3, System.Int32), "nullable 5754 checked");
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.check(ni4, System.Int32), "nullable 2147483647 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(ni5, System.Int32);
            }, $_.Bridge.ClientTest.SimpleTypes.Int32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, System.Int64.check(ni6, System.Int32), "null checked");
        },
        typeIsWorksForInt32: function () {
            Bridge.Test.Assert.false(Bridge.is(null, System.Int32));
            Bridge.Test.Assert.false(Bridge.is(1.5, System.Int32));
            Bridge.Test.Assert.false(Bridge.is({  }, System.Int32));
            Bridge.Test.Assert.true(Bridge.is(1, System.Int32));
        },
        typeAsWorksForInt32: function () {
            Bridge.Test.Assert.false((null) != null);
            Bridge.Test.Assert.false((Bridge.as({  }, System.Int32, true)) != null);
            Bridge.Test.Assert.false((Bridge.as(1.5, System.Int32, true)) != null);
            Bridge.Test.Assert.true((Bridge.as(1, System.Int32, true)) != null);
        },
        unboxingWorksForInt32: function () {
            var _null = null;
            var o = {  };
            var d = 1.5;
            var i = 1;
            Bridge.Test.Assert.areEqual(null, Bridge.cast(_null, System.Int32, true));
            Bridge.Test.Assert.throws$5(function () {
                var _ = Bridge.cast(o, System.Int32, true);
            }, "Cannot cast object to int?");
            Bridge.Test.Assert.throws$5(function () {
                var _ = Bridge.cast(d, System.Int32, true);
            }, "Cannot cast decimal to int?");
            Bridge.Test.Assert.areEqual(1, Bridge.cast(i, System.Int32, true));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Int32));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.Int32));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(-2147483648, -2147483648);
            Bridge.Test.Assert.areEqual(2147483647, 2147483647);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Int32.format((291), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Int32.format((291), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Int32.tryParse("57574", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(57574, numberResult.v);

            result = System.Int32.tryParse("-14", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(-14, numberResult.v);

            result = System.Int32.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Int32.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Int32.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.Int32.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(57574, System.Int32.parse("57574"));
            Bridge.Test.Assert.areEqual(-14, System.Int32.parse("-14"));

            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);

            Bridge.Test.Assert.true(Bridge.equalsT(0, 0, System.Int32));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0, System.Int32));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1, System.Int32));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1, System.Int32));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0, false, System.Int32) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0, false, System.Int32) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1, false, System.Int32) < 0);
        },
        integerDivisionWorks: function () {
            var a = 17, b = 4, c = 0;
            Bridge.Test.Assert.areEqual(4, ((Bridge.Int.div(a, b)) | 0));
            Bridge.Test.Assert.areEqual(-4, ((Bridge.Int.div(((-a) | 0), b)) | 0));
            Bridge.Test.Assert.areEqual(-4, ((Bridge.Int.div(a, ((-b) | 0))) | 0));
            Bridge.Test.Assert.areEqual(4, ((Bridge.Int.div(((-a) | 0), ((-b) | 0))) | 0));
            Bridge.Test.Assert.throws(function () {
                var x = (Bridge.Int.div(a, c)) | 0;
            });
        },
        integerModuloWorks: function () {
            var a = 17, b = 4, c = 0;
            Bridge.Test.Assert.areEqual(1, a % b);
            Bridge.Test.Assert.areEqual(-1, ((-a) | 0) % b);
            Bridge.Test.Assert.areEqual(1, a % ((-b) | 0));
            Bridge.Test.Assert.areEqual(-1, ((-a) | 0) % ((-b) | 0));
            //Assert.Throws(() => { var x = a % c; });
        },
        integerDivisionByZeroThrowsDivideByZeroException: function () {
            var a = 17, b = 0;
            Bridge.Test.Assert.throws(function () {
                var x = (Bridge.Int.div(a, b)) | 0;
            });
        },
        doublesAreTruncatedWhenConvertedToIntegers: function () {
            var d1 = 4.5;
            var d2 = null;
            var d3 = 8.5;
            Bridge.Test.Assert.areEqual(4, Bridge.Int.clip32(d1));
            Bridge.Test.Assert.areEqual(-4, Bridge.Int.clip32(-d1));
            Bridge.Test.Assert.areEqual(null, Bridge.Int.clip32(d2));
            Bridge.Test.Assert.areEqual(8, Bridge.Int.clip32(System.Nullable.getValue(d3)));
            Bridge.Test.Assert.areEqual(-8, Bridge.Int.clip32(System.Nullable.getValue(System.Nullable.neg(d3))));
            Bridge.Test.Assert.areEqual(8, Bridge.Int.clip32(d3));
            Bridge.Test.Assert.areEqual(-8, Bridge.Int.clip32(System.Nullable.neg(d3)));
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.Int32Tests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.Int32Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Int32.parse("");
        },
        f3: function () {
            System.Int32.parse(null);
        },
        f4: function () {
            System.Int32.parse("notanumber");
        },
        f5: function () {
            System.Int32.parse("2147483648");
        },
        f6: function () {
            System.Int32.parse("-2147483649");
        },
        f7: function () {
            System.Int32.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.Int64Tests", {
        assertLong: function (expected, actual, message, checkedType) {
            if (message === void 0) { message = ""; }
            if (checkedType === void 0) { checkedType = "System.Int64"; }
            if (message == null) {
                message = "";
            }

            var typeMessage = System.String.concat(message, "Type is ", checkedType);
            Bridge.Test.Assert.areEqual$1(checkedType, Bridge.Reflection.getTypeFullName(Bridge.getType(actual)), typeMessage);

            Bridge.Test.Assert.areEqual$1(expected.toString(), actual.toString(), message);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Int64(0), System.Int64));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Int64));
            Bridge.Test.Assert.false(Bridge.is(1E+100, System.Int64));
            Bridge.Test.Assert.areEqual("System.Int64", Bridge.Reflection.getTypeFullName(System.Int64));

            var l = System.Int64(0);
            Bridge.Test.Assert.true(Bridge.is(l, System.Int64));
            Bridge.Test.Assert.true(Bridge.is(l, System.IComparable$1(System.Int64)));
            Bridge.Test.Assert.true(Bridge.is(l, System.IEquatable$1(System.Int64)));
            Bridge.Test.Assert.true(Bridge.is(l, System.IFormattable));
        },
        minMaxValuesAreCorrect: function () {
            this.assertLong("-9223372036854775808", System.Int64.MinValue);
            this.assertLong("9223372036854775807", System.Int64.MaxValue);
        },
        castsWork: function () {
            var i3 = System.UInt64(5754), i4 = System.UInt64(System.Int64([-808,2147483647])), i5 = System.UInt64([-1816395584,-517669143]);
            var ni3 = System.UInt64(5754), ni4 = System.UInt64(System.Int64([-808,2147483647])), ni5 = System.UInt64([-1816395584,-517669143]), ni6 = System.UInt64.lift(null);

            Bridge.Test.Assert.true$1(System.Int64(5754).equals(System.Int64.clip64(i3)), "5754 unchecked");
            Bridge.Test.Assert.true$1(System.Int64([-808,2147483647]).equals(System.Int64.clip64(i4)), "9223372036854775000 unchecked");
            Bridge.Test.Assert.true$1(System.Int64.clip64(i5).lt(System.Int64(0)), "16223372036854776000 unchecked");

            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64(5754), System.Int64.clip64(ni3)), "nullable 5754 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64([-808,2147483647]), System.Int64.clip64(ni4)), "nullable 9223372036854775000 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.liftcmp("lt", System.Int64.clip64(ni5), System.Int64(0)), "nullable 16223372036854776000 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64.lift(null), System.Int64.clip64(ni6)), "null unchecked");

            Bridge.Test.Assert.true$1(System.Int64(5754).equals(System.Int64.check(i3, System.Int64)), "5754 checked");
            Bridge.Test.Assert.true$1(System.Int64([-808,2147483647]).equals(System.Int64.check(i4, System.Int64)), "9223372036854775000 checked");

            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64(5754), System.Int64.check(ni3, System.Int64)), "nullable 5754 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64([-808,2147483647]), System.Int64.check(ni4, System.Int64)), "nullable 9223372036854775000 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64.lift(null), System.Int64.check(ni6, System.Int64)), "null checked");
        },
        overflowWorks: function () {
            var min = System.Int64.MinValue;
            var max = System.Int64.MaxValue;

            Bridge.Test.Assert.true$1((max.add(System.Int64(1))).equals(min), "max + 1 unchecked");
            Bridge.Test.Assert.true$1((min.sub(System.Int64(1))).equals(max), "min - 1 unchecked");
            Bridge.Test.Assert.true$1(min.neg().equals(min), "-min unchecked");

            Bridge.Test.Assert.throws$1(function () {
                var l = max.add(System.Int64(1), 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = min.sub(System.Int64(1), 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = max.mul(min, 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = max.mul(max, 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = min.mul(min, 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = min.neg(1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
        },
        combinedTypesOperationsWork: function () {
            var ub = 1;
            var sb = 2;
            var us = 3;
            var ss = 4;
            var ui = 5;
            var si = 6;
            var ul = System.UInt64(7);

            var l1 = System.Int64(256);
            var l2 = System.Int64(128);
            var l3 = System.Int64(65536);
            var l4 = System.Int64(32768);
            var l5 = System.Int64([0,1]);
            var l6 = System.Int64([-2147483648,0]);
            var l7 = System.Int64(1);

            this.assertLong("257", System.Int64(ub).add(l1));
            this.assertLong("130", System.Int64(sb).add(l2));
            this.assertLong("65539", System.Int64(us).add(l3));
            this.assertLong("32772", System.Int64(ss).add(l4));
            this.assertLong("4294967301", System.Int64(ui).add(l5));
            this.assertLong("2147483654", System.Int64(si).add(l6));
            this.assertLong("8", System.Int64.clip64(ul).add(l7));

            var dcml = System.Decimal(11.0);
            var dbl = 12.0;
            var flt = 13;

            var l = System.Int64(100);

            this.assertLong("111", dcml.add(System.Decimal(l)), null, "System.Decimal");
            this.assertLong("112", dbl + System.Int64.toNumber(l), null, "System.Int32");
            this.assertLong("113", flt + System.Int64.toNumber(l), null, "System.Int32");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.true(System.Int64(0).equals(this.getDefaultValue(System.Int64)));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.true(System.Int64(0).equals(new System.Int64()));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.true(System.Int64(0).equals(Bridge.createInstance(System.Int64)));
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.Int64(291)).format("x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.Int64(291)).toString("x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Int64.tryParse("57574", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.true(System.Int64(57574).equals(numberResult.v));

            result = System.Int64.tryParse("-14", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.true(System.Int64(-14).equals(numberResult.v));

            result = System.Int64.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.Int64(0).equals(numberResult.v));

            result = System.Int64.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.Int64(0).equals(numberResult.v));

            result = System.Int64.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.Int64(0).equals(numberResult.v));

            result = System.Int64.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.Int64(0).equals(numberResult.v));

            result = System.Int64.tryParse("-10000000000000000000", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(numberResult.v.equals(System.Int64(0)));

            result = System.Int64.tryParse("10000000000000000000", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(numberResult.v.equals(System.Int64(0)));
        },
        parseWorks: function () {
            Bridge.Test.Assert.true(System.Int64([568732647,3]).equals(System.Int64.parse("13453634535")));
            Bridge.Test.Assert.true(System.Int64([-1258093817,-54542]).equals(System.Int64.parse("-234253069384953")));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f7);
        },
        castingOfLargeDoublesToInt64Works: function () {
            var d1 = 5000000000.5, d2 = -d1;
            Bridge.Test.Assert.true$1(System.Int64([705032704,1]).equals(Bridge.Int.clip64(d1)), "Positive");
            Bridge.Test.Assert.true$1(System.Int64([-705032704,-2]).equals(Bridge.Int.clip64(d2)), "Negative");
        },
        divisionOfLargeInt64Works: function () {
            var v1 = System.Int64([-1539607552,11]), v2 = v1.neg(), v3 = System.Int64(3);
            Bridge.Test.Assert.true$1(System.Int64([-513202518,3]).equals((v1.div(v3))), "Positive");
            Bridge.Test.Assert.true$1(System.Int64([513202518,-4]).equals((v2.div(v3))), "Negative");
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.Int64(123)).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.Int64(123)).toString(10));
            Bridge.Test.Assert.areEqual("123", (System.Int64(291)).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((System.Int64(0))), Bridge.getHashCode((System.Int64(0))));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((System.Int64(1))), Bridge.getHashCode((System.Int64(1))));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((System.Int64(1))), Bridge.getHashCode((System.Int64(0))));
            Bridge.Test.Assert.true(System.Int64(Bridge.getHashCode(System.Int64([0,1]))).lte(System.Int64([-1,0])));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((System.Int64(0)), System.Int64(0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Int64(1)), System.Int64(0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Int64(0)), System.Int64(1)));
            Bridge.Test.Assert.true(Bridge.equals((System.Int64(1)), System.Int64(1)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((System.Int64(0)).equalsT(System.Int64(0)));
            Bridge.Test.Assert.false((System.Int64(1)).equalsT(System.Int64(0)));
            Bridge.Test.Assert.false((System.Int64(0)).equalsT(System.Int64(1)));
            Bridge.Test.Assert.true((System.Int64(1)).equalsT(System.Int64(1)));

            Bridge.Test.Assert.true(Bridge.equalsT(System.Int64(0), System.Int64(0), System.Int64));
            Bridge.Test.Assert.false(Bridge.equalsT(System.Int64(1), System.Int64(0), System.Int64));
            Bridge.Test.Assert.false(Bridge.equalsT(System.Int64(0), System.Int64(1), System.Int64));
            Bridge.Test.Assert.true(Bridge.equalsT(System.Int64(1), System.Int64(1), System.Int64));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true((System.Int64(0)).compareTo(System.Int64(0)) === 0);
            Bridge.Test.Assert.true((System.Int64(1)).compareTo(System.Int64(0)) > 0);
            Bridge.Test.Assert.true((System.Int64(0)).compareTo(System.Int64(1)) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(System.Int64(0), System.Int64(0), false, System.Int64) === 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Int64(1), System.Int64(0), false, System.Int64) > 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Int64(0), System.Int64(1), false, System.Int64) < 0);
        },
        shiftWorks: function () {
            var x = System.Int64(1);

            Bridge.Test.Assert.true(System.Int64(2).equals(x.shl(1)));

            Bridge.Test.Assert.true(System.Int64(256).equals(x.shl(8)));
            Bridge.Test.Assert.true(System.Int64(65536).equals(x.shl(16)));
            Bridge.Test.Assert.true(System.Int64(8388608).equals(x.shl(23)));
            Bridge.Test.Assert.true(System.Int64(16777216).equals(x.shl(24)));
            Bridge.Test.Assert.true(System.Int64(33554432).equals(x.shl(25)));
            Bridge.Test.Assert.true(System.Int64([0,1]).equals(x.shl(32)));
            Bridge.Test.Assert.true(System.Int64([0,32768]).equals(x.shl(47)));
            Bridge.Test.Assert.true(System.Int64([0,65536]).equals(x.shl(48)));
            Bridge.Test.Assert.true(System.Int64([0,131072]).equals(x.shl(49)));
            Bridge.Test.Assert.true(System.Int64([0,-2147483648]).equals(x.shl(63)));
            Bridge.Test.Assert.true(System.Int64(1).equals(x.shl(64)));

            var t = System.Int64(1);
            Bridge.Test.Assert.true(System.Int64(0).equals(t.shr(1)));

            var y = x.shl(63);
            Bridge.Test.Assert.true(System.Int64([0,-2147483648]).equals(y));
            Bridge.Test.Assert.true(System.Int64([0,-1073741824]).equals(y.shr(1)));
            Bridge.Test.Assert.true(System.Int64([0,-536870912]).equals(y.shr(2)));
            Bridge.Test.Assert.true(System.Int64([0,-268435456]).equals(y.shr(3)));
            Bridge.Test.Assert.true(System.Int64([0,-8388608]).equals(y.shr(8)));
            Bridge.Test.Assert.true(System.Int64([0,-2097152]).equals(y.shr(10)));
            Bridge.Test.Assert.true(System.Int64([0,-524288]).equals(y.shr(12)));
            Bridge.Test.Assert.true(System.Int64([0,-65536]).equals(y.shr(15)));
            Bridge.Test.Assert.true(System.Int64([0,-32768]).equals(y.shr(16)));
            Bridge.Test.Assert.true(System.Int64([0,-256]).equals(y.shr(23)));
            Bridge.Test.Assert.true(System.Int64([0,-128]).equals(y.shr(24)));
            Bridge.Test.Assert.true(System.Int64([0,-64]).equals(y.shr(25)));
            Bridge.Test.Assert.true(System.Int64(-2147483648).equals(y.shr(32)));
            Bridge.Test.Assert.true(System.Int64(-65536).equals(y.shr(47)));
            Bridge.Test.Assert.true(System.Int64(-32768).equals(y.shr(48)));
            Bridge.Test.Assert.true(System.Int64(-16384).equals(y.shr(49)));
            Bridge.Test.Assert.true(System.Int64(-1).equals(y.shr(63)));
            Bridge.Test.Assert.true(System.Int64([0,-2147483648]).equals(y.shr(64)));
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.Int64Tests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.Int64Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Int64.parse("");
        },
        f3: function () {
            System.Int64.parse(null);
        },
        f4: function () {
            System.Int64.parse("notanumber");
        },
        f5: function () {
            System.Int64.parse("2.5");
        },
        f6: function () {
            System.Int64.parse("-10000000000000000000");
        },
        f7: function () {
            System.Int64.parse("10000000000000000000");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.JsDateTimeTests", {
        statics: {
            dateTimes: function () {
                // TEST
                // [#83] by C#
                var str = "2015-03-24T10:48:09.1500225+03:00";
                var bridgeDate = Bridge.Date.parse(str);
                var bridgeDate1 = new Date(str);

                Bridge.Test.Assert.areDeepEqual$1(bridgeDate1, bridgeDate, "[#83] C# bridgeDate = bridgeDate1");

                // TEST
                // [#83] by JavaScript code. This is to check the same issue as above and just to check another way of calling QUnit from JavaScript
                //Script.Write<dynamic>("var str = \"2015-03-24T10:48:09.1500225+03:00\";");
                //Script.Write<dynamic>("var bridgeDate2 = Bridge.Date.parse(str);");
                //Script.Write<dynamic>("var jsDate = new Date(Date.parse(str));");
                //Script.Write<dynamic>("var format = \"yyyy-MM-dd hh:mm:ss\";");

                //Script.Write<dynamic>("assert.deepEqual(Bridge.Date.format(bridgeDate2, format), Bridge.Date.format(jsDate, format), \"[#83] js\");");
            }
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual("Date", Bridge.Reflection.getTypeFullName(Date));
            var o = new Date();
            Bridge.Test.Assert.true$1(Bridge.is(o, Date), "o is DateTime");
        },
        defaultConstructorReturnsTodaysDate: function () {
            var dt = new Date();
            Bridge.Test.Assert.true(dt.getFullYear() > 2011);
        },
        creatingInstanceReturnsDateZero: function () {
            var fullYear = Bridge.createInstance(Date).getFullYear();
            Bridge.Test.Assert.true$1(1971 >= fullYear, "1971 >= " + fullYear);
        },
        millisecondSinceEpochConstructorWorks: function () {
            var dt = new Date(System.Int64([250327040,10]).toNumber()/10000);
            Bridge.Test.Assert.areEqual(1970, new Date(dt.valueOf() + Math.round((1) * 864e5)).getFullYear());
        },
        stringConstructorWorks: function () {
            var dt = new Date("Aug 12, 2012");
            Bridge.Test.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        yMDConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        yMDHConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
            Bridge.Test.Assert.areEqual(13, dt.getHours());
        },
        yMDHNConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
            Bridge.Test.Assert.areEqual(13, dt.getHours());
            Bridge.Test.Assert.areEqual(42, dt.getMinutes());
        },
        yMDHNSConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
            Bridge.Test.Assert.areEqual(13, dt.getHours());
            Bridge.Test.Assert.areEqual(42, dt.getMinutes());
            Bridge.Test.Assert.areEqual(56, dt.getSeconds());
        },
        yMDHNSUConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
            Bridge.Test.Assert.areEqual(13, dt.getHours());
            Bridge.Test.Assert.areEqual(42, dt.getMinutes());
            Bridge.Test.Assert.areEqual(56, dt.getSeconds());
            Bridge.Test.Assert.areEqual(345, dt.getMilliseconds());
        },
        nowWorks: function () {
            var dt = new Date();
            Bridge.Test.Assert.true(dt.getFullYear() > 2011);
        },
        uTCNowWorks: function () {
            var UTC = Bridge.Date.utcNow();
            var local = new Date();
            Bridge.Test.Assert.true(Math.abs((Bridge.Date.subdd(new Date(local.getUTCFullYear(), (local.getUTCMonth() + 1) - 1, local.getUTCDate(), local.getUTCHours(), local.getUTCMinutes(), local.getUTCSeconds(), local.getUTCMilliseconds()), UTC)).getTotalMinutes()) < 1000);
        },
        toUniversalWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            var UTC = Bridge.Date.toUTC(dt);
            Bridge.Test.Assert.areEqual(UTC.getFullYear(), dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual((UTC.getMonth() + 1), (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(UTC.getDate(), dt.getUTCDate());
            Bridge.Test.Assert.areEqual(UTC.getHours(), dt.getUTCHours());
            Bridge.Test.Assert.areEqual(UTC.getMinutes(), dt.getUTCMinutes());
            Bridge.Test.Assert.areEqual(UTC.getSeconds(), dt.getUTCSeconds());
            Bridge.Test.Assert.areEqual(UTC.getMilliseconds(), dt.getUTCMilliseconds());
        },
        toLocalWorks: function () {
            var UTC = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            var dt = Bridge.Date.toLocal(UTC);
            Bridge.Test.Assert.areEqual(UTC.getFullYear(), dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual((UTC.getMonth() + 1), (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(UTC.getDate(), dt.getUTCDate());
            Bridge.Test.Assert.areEqual(UTC.getHours(), dt.getUTCHours());
            Bridge.Test.Assert.areEqual(UTC.getMinutes(), dt.getUTCMinutes());
            Bridge.Test.Assert.areEqual(UTC.getSeconds(), dt.getUTCSeconds());
            Bridge.Test.Assert.areEqual(UTC.getMilliseconds(), dt.getUTCMilliseconds());
        },
        todayWorks: function () {
            var dt = Bridge.Date.today();
            Bridge.Test.Assert.true(dt.getFullYear() > 2011);
            Bridge.Test.Assert.areEqual(0, dt.getHours());
            Bridge.Test.Assert.areEqual(0, dt.getMinutes());
            Bridge.Test.Assert.areEqual(0, dt.getSeconds());
            Bridge.Test.Assert.areEqual(0, dt.getMilliseconds());
        },
        formatWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13);
            Bridge.Test.Assert.areEqual("2011-07-12", Bridge.Date.format(dt, "yyyy-MM-dd"));
        },
        localeFormatWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13);
            Bridge.Test.Assert.areEqual("2011-07-12", Bridge.Date.format(dt, "yyyy-MM-dd"));
        },
        getFullYearWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
        },
        getMonthWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
        },
        getDateWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        getHoursWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(13, dt.getHours());
        },
        getMinutesWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(42, dt.getMinutes());
        },
        getSecondsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(56, dt.getSeconds());
        },
        getMillisecondsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(345, dt.getMilliseconds());
        },
        getDayWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(2, dt.getDay());
        },
        getTimeWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(1970, 1 - 1, 2)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.true(System.Int64(86400000).equals(System.Int64((dt).getTime())));
        },
        valueOfWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(1970, 1 - 1, 2)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(86400000, dt.valueOf());
        },
        getTimezoneOffsetWorks: function () {
            var dt = new Date(System.Int64(0).toNumber()/10000);
            Bridge.Test.Assert.areEqual(((Bridge.Int.div(System.Nullable.getValue(Bridge.cast((new Date(1970, 1 - 1, 1).valueOf()), System.Int32)), 60000)) | 0), dt.getTimezoneOffset());
        },
        getUTCFullYearWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(2011, dt.getUTCFullYear());
        },
        getUtcMonthWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(7, (dt.getUTCMonth() + 1));
        },
        getUTCDateWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(12, dt.getUTCDate());
        },
        getUTCHoursWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(13, dt.getUTCHours());
        },
        getUTCMinutesWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(42, dt.getUTCMinutes());
        },
        getUTCSecondsWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(56, dt.getUTCSeconds());
        },
        getUTCMillisecondsWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(345, dt.getUTCMilliseconds());
        },
        getUTCDayWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).mul(10000).toNumber()/10000);
            Bridge.Test.Assert.areEqual(2, dt.getUTCDay());
        },
        parseWorks: function () {
            var dt = Bridge.Date.parse("Aug 12, 2012");
            Bridge.Test.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        parseExactWorks: function () {
            var dt = Bridge.Date.parseExact("2012-12-08", "yyyy-dd-MM");
            Bridge.Test.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        parseExactWithCultureWorks: function () {
            var dt = Bridge.Date.parseExact("2012-12-08", "yyyy-dd-MM", System.Globalization.CultureInfo.invariantCulture);
            Bridge.Test.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        parseExactUTCWorks: function () {
            //var dt = DateTime.ParseExactUTC("2012-12-08", "yyyy-dd-MM");
            var dt = Bridge.Date.parseExact("2012-12-08", "yyyy-dd-MM", null, true);
            Bridge.Test.Assert.areEqual(2012, dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getUTCDate());
        },
        parseExactUTCWithCultureWorks: function () {
            var dt = Bridge.Date.parseExact("2012-12-08", "yyyy-dd-MM", System.Globalization.CultureInfo.invariantCulture, true);
            //var dt = DateTime.ParseExact("2012-12-08", "yyyy-dd-MM", CultureInfo.InvariantCulture);
            Bridge.Test.Assert.areEqual(2012, dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getUTCDate());
        },
        toDateStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toDateString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") < 0);
        },
        toTimeStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toTimeString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") < 0 && System.String.indexOf(s, "42") >= 0);
        },
        toUTCStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toUTCString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") >= 0);
        },
        toLocaleDateStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toLocaleDateString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") < 0);
        },
        toLocaleTimeStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toLocaleTimeString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") < 0 && System.String.indexOf(s, "42") >= 0);
        },
        assertDateUTC: function (dt, year, month, day, hours, minutes, seconds, milliseconds) {
            Bridge.Test.Assert.areEqual(year, dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual(month, (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(day, dt.getUTCDate());
            Bridge.Test.Assert.areEqual(hours, dt.getUTCHours());
            Bridge.Test.Assert.areEqual(minutes, dt.getUTCMinutes());
            Bridge.Test.Assert.areEqual(seconds, dt.getUTCSeconds());
            Bridge.Test.Assert.areEqual(milliseconds, dt.getUTCMilliseconds());
        },
        subtractingDatesWorks: function () {
            var ts = Bridge.Date.subdd(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 11));
            Bridge.Test.Assert.areEqual(86400000, ts.getTotalMilliseconds());
        },
        subtractMethodReturningTimeSpanWorks: function () {
            Bridge.Test.Assert.areDeepEqual(new System.TimeSpan(1, 0, 0, 0), Bridge.Date.subdd(new Date(2011, 6 - 1, 12), new Date(2011, 6 - 1, 11)));
            Bridge.Test.Assert.areDeepEqual(new System.TimeSpan(1, 2, 0, 0), Bridge.Date.subdd(new Date(2011, 6 - 1, 12, 15, 0, 0), new Date(2011, 6 - 1, 11, 13, 0, 0)));
        },
        dateEqualityWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 13)));
            Bridge.Test.Assert.areStrictEqual(false, Bridge.equals(new Date(2011, 7 - 1, 12), null));
            Bridge.Test.Assert.areStrictEqual(false, Bridge.equals(null, new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.areStrictEqual(true, Bridge.equals(null, null));
        },
        dateInequalityWorks: function () {
            Bridge.Test.Assert.false(!Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(!Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 13)));
            Bridge.Test.Assert.areStrictEqual(true, !Bridge.equals(new Date(2011, 7 - 1, 12), null));
            Bridge.Test.Assert.areStrictEqual(true, !Bridge.equals(null, new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.areStrictEqual(false, !Bridge.equals(null, null));
        },
        dateLessThanWorks: function () {
            Bridge.Test.Assert.true(Bridge.Date.lt(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.Date.lt(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.Date.lt(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateLessEqualWorks: function () {
            Bridge.Test.Assert.true(Bridge.Date.lte(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(Bridge.Date.lte(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.Date.lte(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateGreaterThanWorks: function () {
            Bridge.Test.Assert.false(Bridge.Date.gt(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.Date.gt(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(Bridge.Date.gt(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateGreaterEqualWorks: function () {
            Bridge.Test.Assert.false(Bridge.Date.gte(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(Bridge.Date.gte(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(Bridge.Date.gte(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(new Date(System.Int64(0).toNumber()/10000)), Bridge.getHashCode(new Date(System.Int64(0).toNumber()/10000)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(new Date(System.Int64(10000).toNumber()/10000)), Bridge.getHashCode(new Date(System.Int64(10000).toNumber()/10000)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(new Date(System.Int64(10000).toNumber()/10000)), Bridge.getHashCode(new Date(System.Int64(0).toNumber()/10000)));
            Bridge.Test.Assert.true(System.Int64(Bridge.getHashCode(new Date(3000, 1 - 1, 1))).lt(System.Int64([-1,0])));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals(new Date(System.Int64(0).toNumber()/10000), new Date(System.Int64(0).toNumber()/10000)));
            Bridge.Test.Assert.false(Bridge.equals(new Date(System.Int64(10000).toNumber()/10000), new Date(System.Int64(0).toNumber()/10000)));
            Bridge.Test.Assert.false(Bridge.equals(new Date(System.Int64(0).toNumber()/10000), new Date(System.Int64(10000).toNumber()/10000)));
            Bridge.Test.Assert.true(Bridge.equals(new Date(System.Int64(10000).toNumber()/10000), new Date(System.Int64(10000).toNumber()/10000)));
        },
        dateTimeEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equalsT(new Date(System.Int64(0).toNumber()/10000), new Date(System.Int64(0).toNumber()/10000)));
            Bridge.Test.Assert.false(Bridge.equalsT(new Date(System.Int64(10000).toNumber()/10000), new Date(System.Int64(0).toNumber()/10000)));
            Bridge.Test.Assert.false(Bridge.equalsT(new Date(System.Int64(0).toNumber()/10000), new Date(System.Int64(10000).toNumber()/10000)));
            Bridge.Test.Assert.true(Bridge.equalsT(new Date(System.Int64(10000).toNumber()/10000), new Date(System.Int64(10000).toNumber()/10000)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(new Date(System.Int64(0).toNumber()/10000), System.IEquatable$1(Date)), new Date(System.Int64(0).toNumber()/10000), Date));
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(new Date(System.Int64(10000).toNumber()/10000), System.IEquatable$1(Date)), new Date(System.Int64(0).toNumber()/10000), Date));
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(new Date(System.Int64(0).toNumber()/10000), System.IEquatable$1(Date)), new Date(System.Int64(10000).toNumber()/10000), Date));
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(new Date(System.Int64(10000).toNumber()/10000), System.IEquatable$1(Date)), new Date(System.Int64(10000).toNumber()/10000), Date));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(new Date(System.Int64(0).toNumber()/10000), new Date(System.Int64(0).toNumber()/10000)) === 0);
            Bridge.Test.Assert.true(Bridge.compare(new Date(System.Int64(10000).toNumber()/10000), new Date(System.Int64(0).toNumber()/10000)) > 0);
            Bridge.Test.Assert.true(Bridge.compare(new Date(System.Int64(0).toNumber()/10000), new Date(System.Int64(10000).toNumber()/10000)) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(Bridge.cast(new Date(System.Int64(0).toNumber()/10000), System.IComparable$1(Date)), new Date(System.Int64(0).toNumber()/10000), false, Date) === 0);
            Bridge.Test.Assert.true(Bridge.compare(Bridge.cast(new Date(System.Int64(10000).toNumber()/10000), System.IComparable$1(Date)), new Date(System.Int64(0).toNumber()/10000), false, Date) > 0);
            Bridge.Test.Assert.true(Bridge.compare(Bridge.cast(new Date(System.Int64(0).toNumber()/10000), System.IComparable$1(Date)), new Date(System.Int64(10000).toNumber()/10000), false, Date) < 0);
        },
        createUnixTimestampAndConvertBackToDateTime: function () {
            var now = new Date();
            var unixNow = Bridge.Date.subdd(now, new Date(1970, 1 - 1, 1)).getTicks();
            var parsedUnixNow = new Date(System.Int64((new Date(1970, 1 - 1, 1)).getTime()).add((unixNow).div(10000)).toNumber());

            Bridge.Test.Assert.true$1(now.getFullYear() === parsedUnixNow.getFullYear(), "[#1901] Year is the same");
            Bridge.Test.Assert.true$1((now.getMonth() + 1) === (parsedUnixNow.getMonth() + 1), "[#1901] Month is the same");
            Bridge.Test.Assert.true$1(now.getDate() === parsedUnixNow.getDate(), "[#1901] Day is the same");
            Bridge.Test.Assert.true$1(now.getHours() === parsedUnixNow.getHours(), "[#1901] Hour is the same");
            Bridge.Test.Assert.true$1(now.getMinutes() === parsedUnixNow.getMinutes(), "[#1901] Minute is the same");
            Bridge.Test.Assert.true$1(now.getSeconds() === parsedUnixNow.getSeconds(), "[#1901] Second is the same");
            Bridge.Test.Assert.true$1(now.getMilliseconds() === parsedUnixNow.getMilliseconds(), "[#1901] Millisecond is the same");
            Bridge.Test.Assert.true$1(System.Int64((now).getTime()).mul(10000).equals(System.Int64((parsedUnixNow).getTime()).mul(10000)), "[#1901] Ticks is the same");

            Bridge.Test.Assert.true$1(Bridge.equals(now, parsedUnixNow), "[#1901] DateTime == is true");
            Bridge.Test.Assert.true$1(Bridge.equalsT(now, parsedUnixNow), "[#1901] DateTime .Equals is true");

            // Compare the DateTimes as strings
            var result1 = Bridge.Date.format(now);
            var result2 = Bridge.Date.format(parsedUnixNow);

            Bridge.Test.Assert.true$1(Bridge.referenceEquals(result1, result2), "[#1901] DateTime to Timestamp back to DateTime is different");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.ObjectTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.hasValue({  }));
            Bridge.Test.Assert.areEqual("Object", Bridge.Reflection.getTypeFullName(Object));
        },
        canGetHashCodeForObject: function () {
            var o = {  };
            var c = Bridge.getHashCode(o);
            Bridge.Test.Assert.true(Bridge.is(c, System.Int32));
        },
        repeatedCallsToGetHashCodeReturnsSameValue: function () {
            var o = {  };
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(o), Bridge.getHashCode(o));
        },
        objectIsEqualToItself: function () {
            var o = {  };
            Bridge.Test.Assert.true(Bridge.equals(o, o));
        },
        objectIsNotEqualToOtherObject: function () {
            Bridge.Test.Assert.false(Bridge.equals({  }, {  }));
        },
        staticEqualsWorks: function () {
            var o1 = {  }, o2 = {  };
            Bridge.Test.Assert.true(Bridge.equals(null, null));
            Bridge.Test.Assert.false(Bridge.equals(null, o1));
            Bridge.Test.Assert.false(Bridge.equals(o1, null));
            Bridge.Test.Assert.true(Bridge.equals(o1, o1));
            Bridge.Test.Assert.false(Bridge.equals(o1, o2));
        },
        referenceEqualsWorks: function () {
            var o1 = {  }, o2 = {  }, n = null;
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(n, n), "n, n");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(n, undefined), "n, Script.Undefined");
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(o1, o2), "o1, o2");
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(o1, n), "o1, n");
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(o1, undefined), "o1, Script.Undefined");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(o1, o1), "o1, o1");
        },
        toStringOverride: function () {
            var c1 = new Bridge.ClientTest.SimpleTypes.ObjectTests.C1(), c2 = new Bridge.ClientTest.SimpleTypes.ObjectTests.C2();
            Bridge.Test.Assert.areEqual$1("test", c1.toString(), "#1");
            Bridge.Test.Assert.areEqual$1("test", c2.toString(), "#1");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.ObjectTests.C1", {
        toString: function () {
            return "test";
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.SByteTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.SByte));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.SByte));
            Bridge.Test.Assert.false(Bridge.is(-129, System.SByte));
            Bridge.Test.Assert.false(Bridge.is(128, System.SByte));
            Bridge.Test.Assert.areEqual("System.SByte", Bridge.Reflection.getTypeFullName(System.SByte));

            var b = 0;
            Bridge.Test.Assert.true(Bridge.is(b, System.SByte));
            Bridge.Test.Assert.true(Bridge.is(b, System.IFormattable));
        },
        castsWork: function () {
            var i1 = -129, i2 = -128, i3 = 80, i4 = 127, i5 = 128;
            var ni1 = -129, ni2 = -128, ni3 = 80, ni4 = 127, ni5 = 128, ni6 = null;

            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.sxb(i1 & 255), "-129 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.sxb(i2 & 255), "-128 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(80, Bridge.Int.sxb(i3 & 255), "80 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.sxb(i4 & 255), "127 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.sxb(i5 & 255), "128 unchecked");

            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.clip8(ni1), "nullable -129 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.clip8(ni2), "nullable -128 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(80, Bridge.Int.clip8(ni3), "nullable 80 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.clip8(ni4), "nullable 127 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.clip8(ni5), "nullable 128 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clip8(ni6), "null unchecked");

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.SByte);
            }, $_.Bridge.ClientTest.SimpleTypes.SByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.check(i2, System.SByte), "-128 checked");
            Bridge.Test.Assert.areStrictEqual$1(80, Bridge.Int.check(i3, System.SByte), "80 checked");
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.check(i4, System.SByte), "127 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.SByte);
            }, $_.Bridge.ClientTest.SimpleTypes.SByteTests.f1);

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.SByte);
            }, $_.Bridge.ClientTest.SimpleTypes.SByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.check(ni2, System.SByte), "nullable -128 checked");
            Bridge.Test.Assert.areStrictEqual$1(80, Bridge.Int.check(ni3, System.SByte), "nullable 80 checked");
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.check(ni4, System.SByte), "nullable 127 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.SByte);
            }, $_.Bridge.ClientTest.SimpleTypes.SByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.SByte), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.SByte));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.SByte));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(-128, -128);
            Bridge.Test.Assert.areEqual(127, 127);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("12", System.SByte.format((18), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("12", System.SByte.format((18), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.SByte.tryParse("124", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(124, numberResult.v);

            result = System.SByte.tryParse("-123", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(-123, numberResult.v);

            result = System.SByte.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.SByte.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.SByte.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.SByte.tryParse("54768", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(54768, numberResult.v);

            result = System.SByte.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(124, System.SByte.parse("124"));
            Bridge.Test.Assert.areEqual(-123, System.SByte.parse("-123"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f6);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("12", (18).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);

            Bridge.Test.Assert.true(Bridge.equalsT(0, 0, System.SByte));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0, System.SByte));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1, System.SByte));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1, System.SByte));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0, false, System.SByte) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0, false, System.SByte) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1, false, System.SByte) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.SByteTests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.SByteTests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.SByte.parse("");
        },
        f3: function () {
            System.SByte.parse(null);
        },
        f4: function () {
            System.SByte.parse("notanumber");
        },
        f5: function () {
            System.SByte.parse("54768");
        },
        f6: function () {
            System.SByte.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.SingleTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0.5, System.Single));
            Bridge.Test.Assert.areEqual("System.Single", Bridge.Reflection.getTypeFullName(System.Single));

            var f = 0.0;
            Bridge.Test.Assert.true(Bridge.is(f, System.Single));
            Bridge.Test.Assert.true(Bridge.is(f, System.IFormattable));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Single));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areEqual(0, Bridge.createInstance(System.Single));
        },
        constantsWork: function () {
            var zero = 0;
            Bridge.Test.Assert.true$1(System.Nullable.getValue(Bridge.cast(-3.40282347E+38, System.Single)) < -3.4E+38 && System.Nullable.getValue(Bridge.cast(-3.40282347E+38, System.Single)) > -3.5E+38, "MinValue should be correct");
            Bridge.Test.Assert.true$1(System.Nullable.getValue(Bridge.cast(3.40282347E+38, System.Single)) > 3.4E+38 && System.Nullable.getValue(Bridge.cast(3.40282347E+38, System.Single)) < 3.5E+38, "MaxValue should be correct");
            Bridge.Test.Assert.areEqual$1(1.401298E-45, 1.401298E-45, "Epsilon should be correct");
            Bridge.Test.Assert.true$1(isNaN(Number.NaN), "NaN should be correct");
            Bridge.Test.Assert.areStrictEqual$1(1 / zero, Number.POSITIVE_INFINITY, "PositiveInfinity should be correct");
            Bridge.Test.Assert.areStrictEqual$1(-1 / zero, Number.NEGATIVE_INFINITY, "NegativeInfinity should be correct");
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Single.format((291.0), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Single.format((291.0), "x"));
        },
        toStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Single.format((123.0), 'G'));
        },
        toExponentialWorks: function () {
            Bridge.Test.Assert.areEqual("1.23e+2", (123.0).toExponential());
        },
        toExponentialWithFractionalDigitsWorks: function () {
            Bridge.Test.Assert.areEqual("1.2e+2", (123.0).toExponential(1));
        },
        toFixed: function () {
            Bridge.Test.Assert.areEqual("123", (123.0).toFixed());
        },
        toFixedWithFractionalDigitsWorks: function () {
            Bridge.Test.Assert.areEqual("123.0", (123.0).toFixed(1));
        },
        toPrecisionWorks: function () {
            Bridge.Test.Assert.areEqual("12345", (12345.0).toPrecision());
        },
        toPrecisionWithPrecisionWorks: function () {
            Bridge.Test.Assert.areEqual("1.2e+4", (12345.0).toPrecision(2));
        },
        isPositiveInfinityWorks: function () {
            var inf = Infinity;
            // TODO Bug
            //Assert.True (float.IsPositiveInfinity(inf));
            Bridge.Test.Assert.false((-inf === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((0.0 === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Number.NaN === Number.POSITIVE_INFINITY));
        },
        isNegativeInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.Assert.false((inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.true((-inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.false((0.0 === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.false((Number.NaN === Number.NEGATIVE_INFINITY));
        },
        isInfinityWorks: function () {
            var inf = Infinity;
            Bridge.Test.Assert.true((Math.abs(inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.true((Math.abs(-inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Math.abs(0.0) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Math.abs(Number.NaN) === Number.POSITIVE_INFINITY));
        },
        isFiniteWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.Assert.true(isFinite(one));
            Bridge.Test.Assert.false(isFinite(one / zero));
            Bridge.Test.Assert.false(isFinite(zero / zero));
        },
        isNaNWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.Assert.false(isNaN(one));
            Bridge.Test.Assert.false(isNaN(one / zero));
            Bridge.Test.Assert.true(isNaN(zero / zero));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0.0)), Bridge.getHashCode((0.0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1.0)), Bridge.getHashCode((1.0)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1.0)), Bridge.getHashCode((0.0)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((0.5)), Bridge.getHashCode((0.0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0.0), 0.0));
            Bridge.Test.Assert.false(Bridge.equals((1.0), 0.0));
            Bridge.Test.Assert.false(Bridge.equals((0.0), 0.5));
            Bridge.Test.Assert.true(Bridge.equals((1.0), 1.0));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0.0) === 0.0);
            Bridge.Test.Assert.false((1.0) === 0.0);
            Bridge.Test.Assert.false((0.0) === 0.5);
            Bridge.Test.Assert.true((1.0) === 1.0);

            Bridge.Test.Assert.true(Bridge.equalsT(0.0, 0.0, System.Single));
            Bridge.Test.Assert.false(Bridge.equalsT(1.0, 0.0, System.Single));
            Bridge.Test.Assert.false(Bridge.equalsT(0.0, 0.5, System.Single));
            Bridge.Test.Assert.true(Bridge.equalsT(1.0, 1.0, System.Single));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0.0), 0.0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1.0), 0.0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0.0), 0.5) < 0);
            Bridge.Test.Assert.true(Bridge.compare((1.0), 1.0) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0.0, 0.0, false, System.Single) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1.0, 0.0, false, System.Single) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0.0, 0.5, false, System.Single) < 0);
            Bridge.Test.Assert.true(Bridge.compare(1.0, 1.0, false, System.Single) === 0);
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.StringTests", {
        statics: {
            strings: function () {
                var $t;
                // In PhantomJS some correct tests failed. We will skip them in this environment.
                var isPhantomJs = Bridge.ClientTest.Utilities.BrowserHelper.isPhantomJs();

                //var expectedCount = isPhantomJs ? 28 : 48;
                //assert.Expect(expectedCount);

                // TEST ToLower, ToLowerCase, ToLocaleLowerCase
                var s = ("HELLO").toLowerCase();
                Bridge.Test.Assert.areEqual$1("hello", s, "'HELLO'.ToLower()");

                s = "HELLO".toLowerCase();
                Bridge.Test.Assert.areEqual$1("hello", s, "'HELLO'.ToLowerCase()");

                s = "HELLO".toLocaleLowerCase();
                Bridge.Test.Assert.areEqual$1("hello", s, "'HELLO'.ToLocaleLowerCase()");

                // TEST ToUpper, ToUpperCase, ToLocaleUpperCase
                s = ("hello").toUpperCase();
                Bridge.Test.Assert.areEqual$1("HELLO", s, "'hello'.ToUpper()");

                s = "hello".toUpperCase();
                Bridge.Test.Assert.areEqual$1("HELLO", s, "'hello'.ToUpperCase()");

                s = "HELLO".toLocaleUpperCase();
                Bridge.Test.Assert.areEqual$1("HELLO", s, "'hello'.ToLocaleUpperCase()");

                s = "Hello Bridge.NET";

                // TEST String(char, count) constructor
                Bridge.Test.Assert.areEqual$1("----", System.String.fromCharCount(45, 4), "new String('-',4)");

                // TEST IndexOfAny
                var anyOf = [120, 98, 105];
                var sAnyOf = "['x','b','i']";

                Bridge.Test.Assert.areEqual$1(8, System.String.indexOfAny(s, anyOf), System.String.concat("'", s, "'.IndexOfAny(", sAnyOf, ")"));
                Bridge.Test.Assert.throws$5(function () {
                    System.String.indexOfAny(s, anyOf, 18, 8);
                }, System.String.concat("'", s, "'.IndexOfAny(", sAnyOf, ")"));
                Bridge.Test.Assert.throws$5(function () {
                    System.String.indexOfAny(s, null);
                }, System.String.concat("'", s, "'.IndexOfAny(null)"));

                s = "";
                Bridge.Test.Assert.areEqual$1(-1, System.String.indexOfAny(s, anyOf), System.String.concat("String.Empty.IndexOfAny(", sAnyOf, ")"));

                s = null;
                Bridge.Test.Assert.areEqual$1(-1, System.String.indexOfAny(s, anyOf), System.String.concat("null.IndexOfAny(", sAnyOf, ")"));

                // TEST IndexOf
                s = "Hello Bridge.NET";

                Bridge.Test.Assert.areEqual$1(1, System.String.indexOf(s, String.fromCharCode(101)), System.String.concat("'", s, "'.IndexOf('e')"));
                Bridge.Test.Assert.areEqual$1(11, System.String.indexOf(s, "e."), System.String.concat("'", s, "'.IndexOf('e.')"));
                Bridge.Test.Assert.areEqual$1(11, System.String.indexOf(s, String.fromCharCode(101), 6, 8), System.String.concat("'", s, "'.IndexOf('e', 6, 8)"));
                Bridge.Test.Assert.throws$5(function () {
                    System.String.indexOf(s, null);
                }, System.String.concat("'", s, "'.IndexOf(null)"));

                if (!isPhantomJs) {
                    Bridge.Test.Assert.areEqual$1(11, System.String.indexOf(s, "E", 6, 8, 1), System.String.concat("'", s, "'.IndexOf('E', 6, 8, StringComparison.CurrentCultureIgnoreCase)"));
                }

                s = "";
                Bridge.Test.Assert.areEqual$1(-1, System.String.indexOf(s, String.fromCharCode(101)), "String.Empty.IndexOf('e')");

                s = null;
                Bridge.Test.Assert.areEqual$1(-1, System.String.indexOf(s, String.fromCharCode(101)), "null.IndexOf('e')");

                // TEST Compare
                var s1 = "Animal";
                var s2 = "animal";

                Bridge.Test.Assert.areEqual$1(0, System.String.compare(s1, s2, true), System.String.concat("String.Compare('", s1, "', '", s2, "', true)"));

                if (!isPhantomJs) {
                    Bridge.Test.Assert.areEqual$1(1, System.String.compare(s1, s2, false), System.String.concat("String.Compare('", s1, "', '", s2, "', false)"));
                }

                if (!isPhantomJs) {
                    var threeIs = System.Array.init(3, null);
                    threeIs[0] = "i";
                    threeIs[1] = "ı";
                    threeIs[2] = "I";

                    var scValues = [0, 1, 2, 3, 4, 5];

                    var expected = [-1, -1, 1, -1, 0, 1, -1, -1, 1, -1, 0, 1, -1, 1, 1, 0, 0, 0];
                    var expectedIndex = 0;

                    $t = Bridge.getEnumerator(scValues);
                    while ($t.moveNext()) {
                        var sc = $t.getCurrent();
                        Bridge.ClientTest.SimpleTypes.StringTests.test(0, 1, sc, threeIs, expected, Bridge.identity(expectedIndex, (expectedIndex = (expectedIndex + 1) | 0)));
                        Bridge.ClientTest.SimpleTypes.StringTests.test(0, 2, sc, threeIs, expected, Bridge.identity(expectedIndex, (expectedIndex = (expectedIndex + 1) | 0)));
                        Bridge.ClientTest.SimpleTypes.StringTests.test(1, 2, sc, threeIs, expected, Bridge.identity(expectedIndex, (expectedIndex = (expectedIndex + 1) | 0)));
                    }
                }

                // TEST Contains
                s = "Hello Bridge.NET";

                Bridge.Test.Assert.areEqual$1(true, System.String.contains(s,"Bridge"), System.String.concat("'", s, "'.Contains('Bridge')"));
                Bridge.Test.Assert.areEqual$1(true, System.String.contains(s,""), System.String.concat("'", s, "'.Contains(String.Empty)"));
                Bridge.Test.Assert.areEqual$1(false, System.String.contains("","Bridge"), "String.Empty.Contains('Bridge')");
                Bridge.Test.Assert.throws$5(function () {
                    System.String.contains(s,null);
                }, "null.Contains('Bridge')");

                // TEST Concat
                s = [s, "2", "3", "4"].join('');
                Bridge.Test.Assert.areEqual$1("Hello Bridge.NET234", s, "string.Concat()");

                s = [null, true, 3, false].join('');
                Bridge.Test.Assert.areEqual$1("true3false", s, "string.Concat()");

                s = ["1", "2", "3", "4", "5"].toString().split(',').join('');
                Bridge.Test.Assert.areEqual$1("12345", s, "string.Concat()");

                s = [1, null, 2, null, 3].toString().split(',').join('');
                Bridge.Test.Assert.areEqual$1("123", s, "string.Concat()");
            },
            test: function (x, y, comparison, testI, expected, expectedIndex) {
                var cmpValue = 0;
                cmpValue = System.String.compare(testI[x], testI[y], comparison);
                Bridge.Test.Assert.areEqual$1(expected[expectedIndex], cmpValue, System.String.concat("String.Compare('", testI[x], "', '", testI[y], "',", System.Enum.toString(Number, comparison), ")"));
            },
            enumerable: function () {
                var $t;
                var a;
                var i = 0;
                var result = System.Array.init(5, function (){
                    return new System.Char();
                });
                $t = Bridge.getEnumerator("danny");
                while ($t.moveNext()) {
                    var c = $t.getCurrent();
                    a = c;
                    result[i] = a;

                    i = (i + 1) | 0;
                }

                Bridge.Test.Assert.areEqual(100, result[0]);
                Bridge.Test.Assert.areEqual(97, result[1]);
                Bridge.Test.Assert.areEqual(110, result[2]);
                Bridge.Test.Assert.areEqual(110, result[3]);
                Bridge.Test.Assert.areEqual(121, result[4]);
            }
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual("String", Bridge.Reflection.getTypeFullName(String));
            var s = "X";
            Bridge.Test.Assert.true(Bridge.is(s, String));
        },
        stringInterfaces: function () {
            var s = "X";
            Bridge.Test.Assert.true$1(Bridge.hasValue(s), "string is object");
            Bridge.Test.Assert.true(Bridge.is(s, System.IComparable$1(String)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IEquatable$1(String)));
        },
        defaultConstructorWorks: function () {
            Bridge.Test.Assert.areEqual("", String());
        },
        charAndCountConstructorWorks: function () {
            Bridge.Test.Assert.areEqual("xxxxx", System.String.fromCharCount(120, 5));
        },
        charArrayConstructorWorks: function () {
            Bridge.Test.Assert.areEqual("abC", String.fromCharCode.apply(null, [97, 98, 67]));
        },
        emptyFieldWorks: function () {
            Bridge.Test.Assert.areEqual("", "");
        },
        lengthPropertyWorks: function () {
            Bridge.Test.Assert.areEqual(4, ("abcd").length);
        },
        charAtWorks: function () {
            Bridge.Test.Assert.areEqual("c", ("abcd").charAt(2));
        },
        charCodeAtWorks: function () {
            Bridge.Test.Assert.areEqual(99, ("abcd").charCodeAt(2));
        },
        compareWorks: function () {
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcd") === 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcb") > 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abce") < 0);
        },
        compareWithIgnoreCaseArgWorks: function () {
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcd", false) === 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcb", false) > 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abce", false) < 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "ABCD", true) === 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "ABCB", true) > 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "ABCE", true) < 0);
        },
        concatWorks: function () {
            Bridge.Test.Assert.areEqual("ab", ["a", "b"].join(''));
            Bridge.Test.Assert.areEqual("abc", ["a", "b", "c"].join(''));
            Bridge.Test.Assert.areEqual("abcd", ["a", "b", "c", "d"].join(''));
            Bridge.Test.Assert.areEqual("abcde", ["a", "b", "c", "d", "e"].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("abcdef", ["a", "b", "c", "d", "e", "f"].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("abcdefg", ["a", "b", "c", "d", "e", "f", "g"].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("abcdefgh", ["a", "b", "c", "d", "e", "f", "g", "h"].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("abcdefghi", ["a", "b", "c", "d", "e", "f", "g", "h", "i"].toString().split(',').join(''));
        },
        concatWithObjectsWorks: function () {
            Bridge.Test.Assert.areEqual("1", [1].join(''));
            Bridge.Test.Assert.areEqual("12", [1, 2].join(''));
            Bridge.Test.Assert.areEqual("123", [1, 2, 3].join(''));
            Bridge.Test.Assert.areEqual("1234", [1, 2, 3, 4].join(''));
            Bridge.Test.Assert.areEqual("12345", [1, 2, 3, 4, 5].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("123456", [1, 2, 3, 4, 5, 6].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("1234567", [1, 2, 3, 4, 5, 6, 7].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("12345678", [1, 2, 3, 4, 5, 6, 7, 8].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("123456789", [1, 2, 3, 4, 5, 6, 7, 8, 9].toString().split(',').join(''));
        },
        endsWithCharWorks: function () {
            Bridge.Test.Assert.true(System.String.endsWith(("abcd"), "d"));
            Bridge.Test.Assert.false(System.String.endsWith(("abcd"), "e"));
        },
        endsWithStringWorks: function () {
            Bridge.Test.Assert.true(System.String.endsWith(("abcd"), "d"));
            Bridge.Test.Assert.false(System.String.endsWith(("abcd"), "e"));
        },
        staticEqualsWorks: function () {
            Bridge.Test.Assert.true(System.String.equals("abcd", "abcd"));
            Bridge.Test.Assert.false(System.String.equals("abcd", "abce"));
            Bridge.Test.Assert.false(System.String.equals("abcd", "ABCD"));
            Bridge.Test.Assert.true(System.String.equals("abcd", "abcd"));
            Bridge.Test.Assert.false(System.String.equals("abcd", "abce"));
            Bridge.Test.Assert.false(System.String.equals("abcd", "ABCD"));
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("x", System.String.format("x", null));
            Bridge.Test.Assert.areEqual("xa", System.String.format("x{0}", "a"));
            Bridge.Test.Assert.areEqual("xab", System.String.format("x{0}{1}", "a", "b"));
            Bridge.Test.Assert.areEqual("xabc", System.String.format("x{0}{1}{2}", "a", "b", "c"));
            Bridge.Test.Assert.areEqual("xabcd", System.String.format("x{0}{1}{2}{3}", "a", "b", "c", "d"));

            var arr1 = ["a"];
            var arr2 = ["a", "b"];
            var arr3 = ["a", "b", "c"];
            var arr4 = ["a", "b", "c", "d"];
            Bridge.Test.Assert.areEqual("xa", System.String.format.apply(System.String, ["x{0}"].concat(arr1)));
            Bridge.Test.Assert.areEqual("xab", System.String.format("x{0}{1}", arr2[0], arr2[1]));
            Bridge.Test.Assert.areEqual("xabc", System.String.format("x{0}{1}{2}", arr3[0], arr3[1], arr3[2]));
            Bridge.Test.Assert.areEqual("xabcd", System.String.format("x{0}{1}{2}{3}", arr4[0], arr4[1], arr4[2], arr4[3]));
        },
        formatWorksExtended: function () {
            var arr2 = ["a", "b"];
            var arr3 = ["a", "b", "c"];
            var arr4 = ["a", "b", "c", "d"];

            Bridge.Test.Assert.areEqual("xab", System.String.format.apply(System.String, ["x{0}{1}"].concat(arr2)));
            Bridge.Test.Assert.areEqual("xabc", System.String.format.apply(System.String, ["x{0}{1}{2}"].concat(arr3)));
            Bridge.Test.Assert.areEqual("xabcd", System.String.format.apply(System.String, ["x{0}{1}{2}{3}"].concat(arr4)));
        },
        formatWorksWithIFormattable: function () {
            Bridge.Test.Assert.areEqual("3.14", System.String.format("{0:F2}", 3.1428571428571428));
        },
        formatCanUseEscapedBraces: function () {
            Bridge.Test.Assert.areEqual("{0}", System.String.format("{{0}}", null));
        },
        fromCharCodeWorks: function () {
            Bridge.Test.Assert.areEqual("", String.fromCharCode());
            Bridge.Test.Assert.areEqual("a", String.fromCharCode(97));
            Bridge.Test.Assert.areEqual("ab", String.fromCharCode(97, 98));
            Bridge.Test.Assert.areEqual("abc", String.fromCharCode(97, 98, 99));
        },
        indexOfCharWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.indexOf(("abc"), String.fromCharCode(98)));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("abc"), String.fromCharCode(100)));
        },
        indexOfStringWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.indexOf(("abc"), "bc"));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("abc"), "bd"));
        },
        indexOfCharWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(4, System.String.indexOf(("abcabc"), String.fromCharCode(98), 3));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("abcabc"), String.fromCharCode(100), 3));
        },
        indexOfCharWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(7, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 8));
            Bridge.Test.Assert.areEqual(7, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 5));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 4));
        },
        indexOfStringWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(4, System.String.indexOf(("abcabc"), "bc", 3));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("abcabc"), "bd", 3));
        },
        indexOfStringWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(5, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 8));
            Bridge.Test.Assert.areEqual(5, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 5));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 4));
        },
        indexOfAnyWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.indexOfAny(("abcd"), [98]));
            Bridge.Test.Assert.areEqual(1, System.String.indexOfAny(("abcd"), [98, 120]));
            Bridge.Test.Assert.areEqual(1, System.String.indexOfAny(("abcd"), [98, 120, 121]));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOfAny(("abcd"), [120, 121]));
        },
        indexOfAnyWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98], 4));
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98, 120], 4));
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98, 120, 121], 4));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), [120, 121], 4));
        },
        indexOfAnyWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98], 4, 2));
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98, 120], 4, 2));
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98, 120, 121], 4, 2));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), [120, 121], 4, 2));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), [99], 4, 2));
        },
        insertWorks: function () {
            Bridge.Test.Assert.areEqual("abxyzcd", System.String.insert(2, ("abcd"), "xyz"));
        },
        isNullOrEmptyWorks: function () {
            Bridge.Test.Assert.true(System.String.isNullOrEmpty(null));
            Bridge.Test.Assert.true(System.String.isNullOrEmpty(""));
            Bridge.Test.Assert.false(System.String.isNullOrEmpty(" "));
            Bridge.Test.Assert.false(System.String.isNullOrEmpty("0"));
        },
        lastIndexOfCharWorks: function () {
            Bridge.Test.Assert.areEqual(1, ("abc").lastIndexOf("b"));
            Bridge.Test.Assert.areEqual(-1, ("abc").lastIndexOf("d"));
        },
        lastIndexOfStringWorks: function () {
            Bridge.Test.Assert.areEqual(1, ("abc").lastIndexOf("bc"));
            Bridge.Test.Assert.areEqual(-1, ("abc").lastIndexOf("bd"));
        },
        lastIndexOfCharWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, ("abcabc").lastIndexOf("b", 3));
            Bridge.Test.Assert.areEqual(-1, ("abcabc").lastIndexOf("d", 3));
        },
        lastIndexOfStringWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, ("abcabc").lastIndexOf("bc", 3));
            Bridge.Test.Assert.areEqual(-1, ("abcabc").lastIndexOf("bd", 3));
        },
        lastIndexOfCharWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(98), 3, 3));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(98), 3, 2));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(100), 3, 3));
        },
        lastIndexOfStringWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOf(("xbcxxxbc"), "bc", 3, 3));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOf(("xbcxxxbc"), "bc", 3, 2));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOf(("xbcxxxbc"), "bd", 3, 3));
        },
        lastIndexOfAnyWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98]));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98, 120]));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98, 120, 121]));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcd"), [120, 121]));
        },
        lastIndexOfAnyWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98], 4));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98, 120], 4));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98, 120, 121], 4));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), [120, 121], 4));
        },
        lastIndexOfAnyWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98], 4, 4));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98, 120], 4, 4));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98, 120, 121], 4, 4));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), [120, 121], 4, 4));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), [98], 4, 2));
        },
        localeCompareWorks: function () {
            Bridge.Test.Assert.true(("abcd").localeCompare("abcd") === 0);
            Bridge.Test.Assert.true(("abcd").localeCompare("abcb") > 0);
            Bridge.Test.Assert.true(("abcd").localeCompare("abce") < 0);
        },
        matchWorks: function () {
            var result = ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz").match(new RegExp("[A-E]", "gi"));
            Bridge.Test.Assert.areDeepEqual(["A", "B", "C", "D", "E", "a", "b", "c", "d", "e"], result);
        },
        padLeftWorks: function () {
            Bridge.Test.Assert.areEqual("  abc", System.String.alignString(("abc"), 5));
        },
        padLeftWithCharWorks: function () {
            Bridge.Test.Assert.areEqual("00abc", System.String.alignString(("abc"), 5, 48));
        },
        padRightWorks: function () {
            Bridge.Test.Assert.areEqual("abc  ", System.String.alignString(("abc"), -5));
        },
        padRightWithCharWorks: function () {
            Bridge.Test.Assert.areEqual("abc00", System.String.alignString(("abc"), -5, 48));
        },
        removeWorks: function () {
            Bridge.Test.Assert.areEqual("ab", System.String.remove(("abcde"), 2));

            var val = "Hello";
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, -2);
            });
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, 5);
            });

            var s = null;
            Bridge.Test.Assert.throws$6(System.NullReferenceException, function () {
                System.String.remove(s, 2);
            });
        },
        removeWithCountWorks: function () {
            Bridge.Test.Assert.areEqual("abe", System.String.remove(("abcde"), 2, 2));

            var val = "Hello";

            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 0, 0));
            Bridge.Test.Assert.areEqual("ello", System.String.remove(val, 0, 1));
            Bridge.Test.Assert.areEqual("llo", System.String.remove(val, 0, 2));
            Bridge.Test.Assert.areEqual("lo", System.String.remove(val, 0, 3));
            Bridge.Test.Assert.areEqual("o", System.String.remove(val, 0, 4));
            Bridge.Test.Assert.areEqual("", System.String.remove(val, 0, 5));

            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 1, 0));
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 2, 0));
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 3, 0));
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 4, 0));
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 5, 0));

            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, -2, 2);
            });
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, 2, -2);
            });
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, 2, 4);
            });

            var s = null;
            Bridge.Test.Assert.throws$6(System.NullReferenceException, function () {
                System.String.remove(s, 0, 0);
            });
        },
        replaceWorks: function () {
            Bridge.Test.Assert.areEqual("xbcxbcxbc", System.String.replaceAll(("abcabcabc"), "a", "x"));
            Bridge.Test.Assert.areEqual("xcxcxc", System.String.replaceAll(("abcabcabc"), "ab", "x"));
        },
        replaceCharWorks: function () {
            Bridge.Test.Assert.areEqual("xbcxbcxbc", System.String.replaceAll(("abcabcabc"), "a", "x"));
        },
        replaceRegexWithReplaceTextWorks: function () {
            Bridge.Test.Assert.areEqual("xxcxxcxxc", ("abcabcabc").replace(new RegExp("a|b", "g"), "x"));
        },
        replaceRegexWithReplaceCallbackWorks: function () {
            Bridge.Test.Assert.areEqual("xycxycxyc", ("abcabcabc").replace(new RegExp("a|b", "g"), $_.Bridge.ClientTest.SimpleTypes.StringTests.f1));
        },
        searchWorks: function () {
            Bridge.Test.Assert.areEqual(2, ("abcabcabc").search(new RegExp("ca")));
            Bridge.Test.Assert.areEqual(-1, ("abcabcabc").search(new RegExp("x")));
        },
        sliceWorks: function () {
            var numbers = "0123456789";

            // Let's start by using both begin and end.
            Bridge.Test.Assert.areEqual(numbers.slice(3, 7), "3456");

            // What happens when we start with a negative number.
            Bridge.Test.Assert.areEqual(numbers.slice(-7, 7), "3456");

            // What happens when we use two negative numbers.
            Bridge.Test.Assert.areEqual(numbers.slice(-7, -3), "3456");

            // What happens when we omit the last argument.
            Bridge.Test.Assert.areEqual(numbers.slice(3), "3456789");

            // And with the negative, end-relevant index.
            Bridge.Test.Assert.areEqual(numbers.slice(-7), "3456789");

            // If the index is out of range, it returns the empty string.
            Bridge.Test.Assert.areEqual(numbers.slice(100, 101), "");
        },
        splitWithStringWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ca", "ca", "c"], ("abcabcabc").split("b"));
        },
        splitWithCharWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ca", "ca", "c"], ("abcabcabc").split(String.fromCharCode(98)));
        },
        jsSplitWithStringAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ax"], ("abcaxbcabce").split("bc", 2));
        },
        jsSplitWithCharAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ca"], ("abcabcabc").split(String.fromCharCode(98), 2));
        },
        splitWithCharsAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "cabcabc"], System.String.split(("abcabcabc"), [98].map(function(i) {{ return String.fromCharCode(i); }}), 2));
        },
        splitWithCharsAndStringSplitOptionsAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "cabcabc"], System.String.split(("abxcabcabc"), [98, 120].map(function(i) {{ return String.fromCharCode(i); }}), 2, 1));
        },
        splitWithRegexWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ca", "ca", "c"], ("abcaxcaxc").split(new RegExp("b|x", "g")));
        },
        someNetSplitTests: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("axybcxzde"), ["xy", "xz"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de", ""], System.String.split(("axybcxzdexz"), ["xy", "xz"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "bc", "de", ""], System.String.split(("xzaxybcxzdexz"), ["xy", "xz"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "", "bc", "de", ""], System.String.split(("xzaxyxzbcxzdexz"), ["xy", "xz"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "", "", "bc", "de", ""], System.String.split(("xzaxyxzxybcxzdexz"), ["xy", "xz"], null, 0));

            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("axybcxzde"), ["xy", "xz"], null, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("axybcxzdexz"), ["xy", "xz"], null, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("xzaxybcxzdexz"), ["xy", "xz"], null, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("xzaxyxzbcxzdexz"), ["xy", "xz"], null, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("xzaxyxzxybcxzdexz"), ["xy", "xz"], null, 1));

            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("axybcxzde"), ["xy", "xz"], 100, 0));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de", ""], System.String.split(("axybcxzdexz"), ["xy", "xz"], 100, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "bc", "de", ""], System.String.split(("xzaxybcxzdexz"), ["xy", "xz"], 100, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "", "bc", "de", ""], System.String.split(("xzaxyxzbcxzdexz"), ["xy", "xz"], 100, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "", "", "bc", "de", ""], System.String.split(("xzaxyxzxybcxzdexz"), ["xy", "xz"], 100, 0));

            Bridge.Test.Assert.areDeepEqual(["a", "bcxzde"], System.String.split(("axybcxzde"), ["xy", "xz"], 2, 0));
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzdexz"], System.String.split(("axybcxzdexz"), ["xy", "xz"], 2, 0));
            Bridge.Test.Assert.areDeepEqual(["a", "xzbcxzdexz"], System.String.split(("axyxzbcxzdexz"), ["xy", "xz"], 2, 0));
            Bridge.Test.Assert.areDeepEqual(["", "axybcxzdexz"], System.String.split(("xzaxybcxzdexz"), ["xy", "xz"], 2, 0));

            Bridge.Test.Assert.areDeepEqual(["a", "bcxzde"], System.String.split(("axybcxzde"), ["xy", "xz"], 2, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzdexz"], System.String.split(("axybcxzdexz"), ["xy", "xz"], 2, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzdexz"], System.String.split(("axyxzbcxzdexz"), ["xy", "xz"], 2, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzdexz"], System.String.split(("xzaxyxzbcxzdexz"), ["xy", "xz"], 2, 1));
        },
        splitWithCharsWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["Lorem", "Ipsum", "", "dolor", "sit", "amet"], System.String.split(("Lorem Ipsum, dolor[sit amet"), [44, 32, 91].map(function(i) {{ return String.fromCharCode(i); }})));
            Bridge.Test.Assert.areDeepEqual(["Lorem", "Ipsum", "", "dolor", "sit", "amet"], System.String.split(("Lorem Ipsum, dolor[sit amet"), [44, 32, 91].map(function(i) {{ return String.fromCharCode(i); }}), null, 0));
            Bridge.Test.Assert.areDeepEqual(["Lorem", "Ipsum", "dolor", "sit", "amet"], System.String.split(("Lorem Ipsum, dolor[sit amet"), [44, 32, 91].map(function(i) {{ return String.fromCharCode(i); }}), null, 1));
        },
        splitWithStringsWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a ", " b ", " b ", " c and c ", "", "", " d ", " d ", " e"], System.String.split(("a is b if b is c and c isifis d if d is e"), ["is", "if"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["a ", " b ", " b ", " c and c ", " d ", " d ", " e"], System.String.split(("a is b if b is c and c isifis d if d is e"), ["is", "if"], null, 1));
        },
        splitWithStringsAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "abcabc"], System.String.split(("abcbcabcabc"), ["bc"], 2, 1));
        },
        startsWithCharWorks: function () {
            Bridge.Test.Assert.true(System.String.startsWith(("abc"), "a"));
            Bridge.Test.Assert.false(System.String.startsWith(("abc"), "b"));
        },
        startsWithStringWorks: function () {
            Bridge.Test.Assert.true(System.String.startsWith(("abc"), "ab"));
            Bridge.Test.Assert.false(System.String.startsWith(("abc"), "bc"));
        },
        substrWorks: function () {
            Bridge.Test.Assert.areEqual("cde", ("abcde").substr(2));
            Bridge.Test.Assert.areEqual("cd", ("abcde").substr(2, 2));

            var numbers = "0123456789";

            // Let's start by using both start and length
            Bridge.Test.Assert.areEqual(numbers.substr(3, 4), "3456");

            // What happens when we start with a negative number.
            Bridge.Test.Assert.areEqual(numbers.substr(-7, 4), "3456");

            // What happens when we omit the last argument.
            Bridge.Test.Assert.areEqual(numbers.substr(3), "3456789");

            // And with the negative, end-relevant index.
            Bridge.Test.Assert.areEqual(numbers.substr(-7), "3456789");

            // If the index is out of range, it returns the empty string.
            Bridge.Test.Assert.areEqual(numbers.substr(100, 1), "");

            Bridge.Test.Assert.areEqual(numbers.substr(2, 4), "2345");
        },
        substringWorks: function () {
            Bridge.Test.Assert.areEqual("cde", ("abcde").substr(2));
            Bridge.Test.Assert.areEqual("cd", ("abcde").substr(2, 2));

            var numbers = "0123456789";
            // Let's start by using both begin and end.
            Bridge.Test.Assert.areEqual(numbers.substr(3, 7), "3456789");

            // What happens when we start with a negative number.
            Bridge.Test.Assert.areEqual(numbers.substr(-7, 7), "3456789");

            // What happens when we use two negative numbers.
            Bridge.Test.Assert.areEqual(numbers.substr(-7, -3), "");

            // What happens when we omit the last argument.
            Bridge.Test.Assert.areEqual(numbers.substr(3), "3456789");

            // And with the negative, end-relevant index.
            Bridge.Test.Assert.areEqual(numbers.substr(-7), "3456789");

            // If the index is out of range, it returns the empty string.
            Bridge.Test.Assert.areEqual(numbers.substr(100, 101), "");

            Bridge.Test.Assert.areEqual(numbers.substr(2, 4), "2345");
        },
        jsSubstringWorks: function () {
            var numbers = "0123456789";

            // Let's start by using both begin and end.
            Bridge.Test.Assert.areEqual(numbers.substring(3, 7), "3456");

            // What happens when we start with a negative number.
            Bridge.Test.Assert.areEqual(numbers.substring(-7, 7), "0123456");

            // What happens when we use two negative numbers.
            Bridge.Test.Assert.areEqual(numbers.substring(-7, -3), "");

            // What happens when we omit the last argument.
            Bridge.Test.Assert.areEqual(numbers.substring(3), "3456789");

            // And with the negative, end-relevant index.
            Bridge.Test.Assert.areEqual(numbers.substring(-7), "0123456789");

            // If the index is out of range, it returns the empty string.
            Bridge.Test.Assert.areEqual(numbers.substring(100, 101), "");

            Bridge.Test.Assert.areEqual(numbers.substring(2, 4), "23");
        },
        toLowerCaseWorks: function () {
            Bridge.Test.Assert.areEqual("abcd", ("ABcd").toLowerCase());
        },
        toUpperCaseWorks: function () {
            Bridge.Test.Assert.areEqual("ABCD", ("ABcd").toUpperCase());
        },
        toLowerWorks: function () {
            Bridge.Test.Assert.areEqual("abcd", ("ABcd").toLowerCase());
        },
        toUpperWorks: function () {
            Bridge.Test.Assert.areEqual("ABCD", ("ABcd").toUpperCase());
        },
        trimWorks: function () {
            Bridge.Test.Assert.areEqual("abc", ("  abc  ").trim());
        },
        trimCharsWorks: function () {
            Bridge.Test.Assert.areEqual("aa, aa", System.String.trim((",., aa, aa,... "), [44, 46, 32]));
        },
        trimStartCharsWorks: function () {
            Bridge.Test.Assert.areEqual("aa, aa,... ", System.String.trimStart((",., aa, aa,... "), [44, 46, 32]));
        },
        trimEndCharsWorks: function () {
            Bridge.Test.Assert.areEqual(",., aa, aa", System.String.trimEnd((",., aa, aa,... "), [44, 46, 32]));
        },
        trimStartWorks: function () {
            Bridge.Test.Assert.areEqual("abc  ", System.String.trimStart(("  abc  ")));
        },
        trimEndWorks: function () {
            Bridge.Test.Assert.areEqual("  abc", System.String.trimEnd(("  abc  ")));
        },
        stringEqualityWorks: function () {
            var s1 = "abc", s2 = null, s3 = null;
            Bridge.Test.Assert.true(Bridge.referenceEquals(s1, "abc"));
            Bridge.Test.Assert.false(Bridge.referenceEquals(s1, "aBc"));
            Bridge.Test.Assert.false(Bridge.referenceEquals(s1, s2));
            Bridge.Test.Assert.true(Bridge.referenceEquals(s2, s3));
        },
        stringInequalityWorks: function () {
            var s1 = "abc", s2 = null, s3 = null;
            Bridge.Test.Assert.false(!Bridge.referenceEquals(s1, "abc"));
            Bridge.Test.Assert.true(!Bridge.referenceEquals(s1, "aBc"));
            Bridge.Test.Assert.true(!Bridge.referenceEquals(s1, s2));
            Bridge.Test.Assert.false(!Bridge.referenceEquals(s2, s3));
        },
        stringIndexingWorks: function () {
            var s = "abcd";
            Bridge.Test.Assert.areEqual(97, s.charCodeAt(0));
            Bridge.Test.Assert.areEqual(98, s.charCodeAt(1));
            Bridge.Test.Assert.areEqual(99, s.charCodeAt(2));
            Bridge.Test.Assert.areEqual(100, s.charCodeAt(3));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(("a")), Bridge.getHashCode(("a")));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(("b")), Bridge.getHashCode(("b")));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(("b")), Bridge.getHashCode(("a")));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(("ab")), Bridge.getHashCode(("a")));
            Bridge.Test.Assert.true(System.Int64(Bridge.getHashCode(("abcdefghijklmnopq"))).lt(System.Int64([-1,0])));
        },
        instanceEqualsWorks: function () {
            var r = "a";
            Bridge.Test.Assert.true(Bridge.equals(("a"), r));
            Bridge.Test.Assert.false(Bridge.equals(("b"), r));
            r = "b";
            Bridge.Test.Assert.false(Bridge.equals(("a"), r));
            Bridge.Test.Assert.true(Bridge.equals(("b"), r));
            r = "A";
            Bridge.Test.Assert.false(Bridge.equals(("a"), r));
            r = "ab";
            Bridge.Test.Assert.false(Bridge.equals(("a"), r));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true(System.String.equals(("a"), "a"));
            Bridge.Test.Assert.false(System.String.equals(("b"), "a"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "b"));
            Bridge.Test.Assert.true(System.String.equals(("b"), "b"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "A"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "ab"));

            Bridge.Test.Assert.true(Bridge.equalsT("a", "a", String));
            Bridge.Test.Assert.false(Bridge.equalsT("b", "a", String));
            Bridge.Test.Assert.false(Bridge.equalsT("a", "b", String));
            Bridge.Test.Assert.true(Bridge.equalsT("b", "b", String));
            Bridge.Test.Assert.false(Bridge.equalsT("a", "A", String));
            Bridge.Test.Assert.false(Bridge.equalsT("a", "ab", String));
        },
        stringEqualsWorks: function () {
            Bridge.Test.Assert.true(System.String.equals(("a"), "a"));
            Bridge.Test.Assert.false(System.String.equals(("b"), "a"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "b"));
            Bridge.Test.Assert.true(System.String.equals(("b"), "b"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "A"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "ab"));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcd") === 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcD") !== 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcb") > 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abce") < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare("abcd", "abcd", false, String) === 0);
            Bridge.Test.Assert.true(Bridge.compare("abcd", "abcD", false, String) !== 0);
            Bridge.Test.Assert.true(Bridge.compare("abcd", "abcb", false, String) > 0);
            Bridge.Test.Assert.true(Bridge.compare("abcd", "abce", false, String) < 0);

            Bridge.Test.Assert.true(Bridge.compare("", null, false, String) > 0);
        },
        joinWorks: function () {
            Bridge.Test.Assert.areEqual("a, ab, abc, abcd", ["a", "ab", "abc", "abcd"].join(", "));
            Bridge.Test.Assert.areEqual("ab, abc", ["a", "ab", "abc", "abcd"].slice(1, 1 + 2).join(", "));

            var intValues = new (Bridge.ClientTest.SimpleTypes.StringTests.MyEnumerable$1(System.Int32))([1, 5, 6]);
            Bridge.Test.Assert.areEqual("1, 5, 6", Bridge.toArray(intValues).join(", "));
            var stringValues = new (Bridge.ClientTest.SimpleTypes.StringTests.MyEnumerable$1(String))(["a", "ab", "abc", "abcd"]);
            Bridge.Test.Assert.areEqual("a, ab, abc, abcd", Bridge.toArray(stringValues).join(", "));

            // TODO: c# makes it False but js false
            Bridge.Test.Assert.areEqual("a, 1, abc, false", ["a", 1, "abc", false].join(", ")); // False");
        },
        containsWorks: function () {
            var text = "Lorem ipsum dolor sit amet";
            Bridge.Test.Assert.true(System.String.contains(text,"Lorem"));
            Bridge.Test.Assert.false(System.String.contains(text,"lorem"));
            Bridge.Test.Assert.true(System.String.contains(text,text));
        },
        toCharArrayWorks: function () {
            var text = "Lorem sit dolor";
            Bridge.Test.Assert.areDeepEqual([76, 111, 114, 101, 109, 32, 115, 105, 116, 32, 100, 111, 108, 111, 114], System.String.toCharArray(text, 0, text.length));
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.StringTests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.StringTests, {
        f1: function (s) {
            return Bridge.referenceEquals(s, "a") ? "x" : "y";
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.StringTests.MyEnumerable$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        _items: null,
        config: {
            alias: [
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$getEnumerator"
            ]
        },
        ctor: function (items) {
            this.$initialize();
            this._items = items;
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        },
        getEnumerator: function () {
            return Bridge.cast(Bridge.getEnumerator(this._items), System.Collections.Generic.IEnumerator$1(T));
        }
    }; });

    Bridge.define("Bridge.ClientTest.SimpleTypes.TestVersion", {
        statics: {
            testConstructors: function () {
                var v1 = new System.Version.ctor();

                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v1, null), "v1 created");
                Bridge.Test.Assert.areEqual$1(0, v1.getMajor(), "v1.Major 0");
                Bridge.Test.Assert.areEqual$1(0, v1.getMinor(), "v1.Minor 0");
                Bridge.Test.Assert.areEqual$1(-1, v1.getBuild(), "v1.Build -1");
                Bridge.Test.Assert.areEqual$1(-1, v1.getRevision(), "v1.Revision -1");
                Bridge.Test.Assert.areEqual$1(-1, v1.getMajorRevision(), "v1.MajorRevision -1");
                Bridge.Test.Assert.areEqual$1(-1, v1.getMinorRevision(), "v1.MinorRevision -1");

                var v2 = new System.Version.$ctor4("2.4.1128.2");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v2, null), "v2 created");
                Bridge.Test.Assert.areEqual$1(2, v2.getMajor(), "v2.Major 2");
                Bridge.Test.Assert.areEqual$1(4, v2.getMinor(), "v2.Minor 4");
                Bridge.Test.Assert.areEqual$1(1128, v2.getBuild(), "v2.Build 1128");
                Bridge.Test.Assert.areEqual$1(2, v2.getRevision(), "v2.Revision 2");
                Bridge.Test.Assert.areEqual$1(0, v2.getMajorRevision(), "v2.MajorRevision 0");
                Bridge.Test.Assert.areEqual$1(2, v2.getMinorRevision(), "v2.MinorRevision 2");

                var v3 = new System.Version.$ctor4("2.4.1128.65537");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v3, null), "v3 created");
                Bridge.Test.Assert.areEqual$1(2, v3.getMajor(), "v3.Major 2");
                Bridge.Test.Assert.areEqual$1(4, v3.getMinor(), "v3.Minor 4");
                Bridge.Test.Assert.areEqual$1(1128, v3.getBuild(), "v3.Build 1128");
                Bridge.Test.Assert.areEqual$1(65537, v3.getRevision(), "v3.Revision 65537");
                Bridge.Test.Assert.areEqual$1(1, v3.getMajorRevision(), "v3.MajorRevision 1");
                Bridge.Test.Assert.areEqual$1(1, v3.getMinorRevision(), "v3.MinorRevision 1");

                var v4 = new System.Version.$ctor1(20, 10);
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v4, null), "v4 created");
                Bridge.Test.Assert.areEqual$1(20, v4.getMajor(), "v4.Major 20");
                Bridge.Test.Assert.areEqual$1(10, v4.getMinor(), "v4.Minor 10");
                Bridge.Test.Assert.areEqual$1(-1, v4.getBuild(), "v4.Build -1");
                Bridge.Test.Assert.areEqual$1(-1, v4.getRevision(), "v4.Revision -1");
                Bridge.Test.Assert.areEqual$1(-1, v4.getMajorRevision(), "v4.MajorRevision -1");
                Bridge.Test.Assert.areEqual$1(-1, v4.getMinorRevision(), "v4.MinorRevision -1");

                var v5 = new System.Version.$ctor2(200, 100, 300);
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v5, null), "v5 created");
                Bridge.Test.Assert.areEqual$1(200, v5.getMajor(), "v5.Major 200");
                Bridge.Test.Assert.areEqual$1(100, v5.getMinor(), "v5.Minor 100");
                Bridge.Test.Assert.areEqual$1(300, v5.getBuild(), "v5.Build 300");
                Bridge.Test.Assert.areEqual$1(-1, v5.getRevision(), "v5.Revision -1");
                Bridge.Test.Assert.areEqual$1(-1, v5.getMajorRevision(), "v5.MajorRevision -1");
                Bridge.Test.Assert.areEqual$1(-1, v5.getMinorRevision(), "v5.MinorRevision -1");

                var v6 = new System.Version.$ctor3(2000, 1000, 3000, 22613920);
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v6, null), "v6 created");
                Bridge.Test.Assert.areEqual$1(2000, v6.getMajor(), "v6.Major 2000");
                Bridge.Test.Assert.areEqual$1(1000, v6.getMinor(), "v6.Minor 1000");
                Bridge.Test.Assert.areEqual$1(3000, v6.getBuild(), "v6.Build 3000");
                Bridge.Test.Assert.areEqual$1(22613920, v6.getRevision(), "v6.Revision (345 << 16) + 4000 = 22613920");
                Bridge.Test.Assert.areEqual$1(345, v6.getMajorRevision(), "v6.MajorRevision 345");
                Bridge.Test.Assert.areEqual$1(4000, v6.getMinorRevision(), "v6.MinorRevision 4");
            },
            testCloneCompare: function () {
                var v1 = new System.Version.$ctor3(1, 2, 3, 262149);

                var o = v1.clone();
                Bridge.Test.Assert.true$1(o != null, "v1 Cloned");

                var v2 = Bridge.as(o, System.Version);
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v2, null), "v1 Cloned as Version");

                Bridge.Test.Assert.areEqual$1(1, v2.getMajor(), "v2.Major 1");
                Bridge.Test.Assert.areEqual$1(2, v2.getMinor(), "v2.Minor 2");
                Bridge.Test.Assert.areEqual$1(3, v2.getBuild(), "v2.Build 3");
                Bridge.Test.Assert.areEqual$1(262149, v2.getRevision(), "v2.Revision  (4 << 16) + 5 = 262149");
                Bridge.Test.Assert.areEqual$1(4, v2.getMajorRevision(), "v2.MajorRevision 4");
                Bridge.Test.Assert.areEqual$1(5, v2.getMinorRevision(), "v2.MinorRevision 5");

                var v3 = new System.Version.$ctor3(1, 2, 2, 262149);
                Bridge.Test.Assert.areEqual$1(1, v1.compareTo(v3), "v1.CompareTo(v3)");

                var v4 = new System.Version.$ctor3(1, 3, 3, 262149);
                Bridge.Test.Assert.areEqual$1(-1, v1.compareTo(v4), "v1.CompareTo(v4)");

                Bridge.Test.Assert.areEqual$1(0, v1.compareTo$1(o), "v1.CompareTo(o)");
                Bridge.Test.Assert.areEqual$1(0, v1.compareTo(v2), "v1.CompareTo(v2)");
                Bridge.Test.Assert.areNotEqual$1(0, v1.compareTo(null), "v1.CompareTo(null)");
            },
            testEqualsGetHashCode: function () {
                var v1 = new System.Version.$ctor3(100, 200, 300, 26214900);
                var v2 = new System.Version.$ctor3(100, 200, 300, 26214900);
                var v3 = new System.Version.$ctor3(101, 200, 300, 26214900);
                var o = {  };
                var o2 = v2;

                Bridge.Test.Assert.true$1(v1.equalsT(v2), "v1.Equals(v2)");
                Bridge.Test.Assert.false$1(v1.equalsT(v3), "v1.Equals(v3)");
                Bridge.Test.Assert.false$1(v1.equals(o), "v1.Equals(o)");
                Bridge.Test.Assert.false$1(v1.equalsT(null), "v1.Equals(null)");
                Bridge.Test.Assert.false$1(v1.equals(100), "v1.Equals(100)");
                Bridge.Test.Assert.true$1(v1.equals(o2), "v1.Equals(o2)");

                Bridge.Test.Assert.areEqual$1(1283637748, v1.getHashCode(), "v1.GetHashCode()");
                Bridge.Test.Assert.areEqual$1(1283637748, v2.getHashCode(), "v2.GetHashCode()");
                Bridge.Test.Assert.areEqual$1(1552073204, v3.getHashCode(), "v3.GetHashCode()");
            },
            testToString: function () {
                var v1 = new System.Version.$ctor4("2.4.1128.65537");
                var v2 = new System.Version.$ctor3(100, 200, 300, 26214900);
                var v3 = new System.Version.$ctor2(100, 200, 300);
                var v4 = new System.Version.$ctor1(100, 200);
                var v5 = new System.Version.ctor();

                Bridge.Test.Assert.areEqual$1("2.4.1128.65537", v1.toString(), "c1.ToString()");
                Bridge.Test.Assert.areEqual$1("100.200.300.26214900", v2.toString(), "c2.ToString()");
                Bridge.Test.Assert.areEqual$1("100.200.300", v3.toString(), "c3.ToString()");
                Bridge.Test.Assert.areEqual$1("100.200", v4.toString(), "c4.ToString()");
                Bridge.Test.Assert.areEqual$1("0.0", v5.toString(), "c5.ToString()");

                Bridge.Test.Assert.areEqual$1("2", v1.toString$1(1), "c1.ToString(1)");
                Bridge.Test.Assert.areEqual$1("2.4", v1.toString$1(2), "c1.ToString(2)");
                Bridge.Test.Assert.areEqual$1("2.4.1128", v1.toString$1(3), "c1.ToString(3)");
                Bridge.Test.Assert.areEqual$1("2.4.1128.65537", v1.toString$1(4), "c1.ToString(4)");
                Bridge.Test.Assert.throws$5(function () {
                    v1.toString$1(5);
                }, "c1.ToString(5)");
            },
            testParse: function () {
                var s1 = "105.1.1128.65547";
                var v1 = new System.Version.$ctor4(s1);

                Bridge.Test.Assert.areEqual$1(v1.toString(), System.Version.parse(s1).toString(), "Version.Parse(s1)");

                var s2 = "105.1";
                var v2 = new System.Version.$ctor4(s2);

                Bridge.Test.Assert.areEqual$1(v2.toString(), System.Version.parse(s2).toString(), "Version.Parse(s2)");

                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.SimpleTypes.TestVersion.f1, "Version.Parse(\"12,123.23.12\")");

                var vp1 = { };
                var b1 = System.Version.tryParse("12,123.23.12", vp1);
                Bridge.Test.Assert.areEqual$1(false, b1, "b1");

                var vp2 = { };
                var b2 = System.Version.tryParse("12.3.2.1", vp2);
                Bridge.Test.Assert.areEqual$1(true, b2, "b2");
                Bridge.Test.Assert.areEqual$1("12.3.2.1", vp2.v.toString(), "vp2.ToString()");
            },
            testOperators: function () {
                var v1 = new System.Version.$ctor3(1, 2, 3, 262149);
                var v2 = new System.Version.$ctor3(1, 2, 3, 262149);
                var v3 = new System.Version.$ctor3(1, 3, 3, 262149);

                Bridge.Test.Assert.true$1(System.Version.op_Equality(v1, v2), "v1 == v2");
                Bridge.Test.Assert.false$1(System.Version.op_Inequality(v1, v2), "v1 != v2");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThan(v1, v2), "v1 > v2");
                Bridge.Test.Assert.true$1(System.Version.op_GreaterThanOrEqual(v1, v2), "v1 >= v2");
                Bridge.Test.Assert.false$1(System.Version.op_LessThan(v1, v2), "v1 < v2");
                Bridge.Test.Assert.true$1(System.Version.op_LessThanOrEqual(v1, v2), "v1 <= v2");

                Bridge.Test.Assert.false$1(System.Version.op_Equality(v1, v3), "v1 == v3");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v1, v3), "v1 != v3");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThan(v1, v3), "v1 > v3");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThanOrEqual(v1, v3), "v1 >= v3");
                Bridge.Test.Assert.true$1(System.Version.op_LessThan(v1, v3), "v1 < v3");
                Bridge.Test.Assert.true$1(System.Version.op_LessThanOrEqual(v1, v3), "v1 <= v3");

                Bridge.Test.Assert.false$1(System.Version.op_Equality(v1, null), "v1 == null");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v1, null), "v1 != null");
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    var b = System.Version.op_GreaterThan(v1, null);
                }, "v1 > null");
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    var b = System.Version.op_GreaterThanOrEqual(v1, null);
                }, "v1 >= null");
                Bridge.Test.Assert.false$1(System.Version.op_LessThan(v1, null), "v1 < null");
                Bridge.Test.Assert.false$1(System.Version.op_LessThanOrEqual(v1, null), "v1 <= null");

                Bridge.Test.Assert.false$1(System.Version.op_Equality(null, v3), "null == v3");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(null, v3), "null != v3");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThan(null, v3), "null > v3");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThanOrEqual(null, v3), "null >= v3");
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    var b = System.Version.op_LessThan(null, v3);
                }, "null < v3");
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    var b = System.Version.op_LessThanOrEqual(null, v3);
                }, "null <= v3");

                var v4 = null;
                var v5 = null;

                Bridge.Test.Assert.true$1(System.Version.op_Equality(v4, v5), "v4 == v5");
                Bridge.Test.Assert.false$1(System.Version.op_Inequality(v4, v5), "v4 != v5");
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    var b = System.Version.op_GreaterThan(v4, v5);
                }, "v4 > v5");
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    var b = System.Version.op_GreaterThanOrEqual(v4, v5);
                }, "v4 >= v5");
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    var b = System.Version.op_LessThan(v4, v5);
                }, "v4 < v5");
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    var b = System.Version.op_LessThanOrEqual(v4, v5);
                }, "v4 <= v5");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.TestVersion", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.TestVersion, {
        f1: function () {
            System.Version.parse("12,123.23.12");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.TimeSpanTests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual("System.TimeSpan", Bridge.Reflection.getTypeFullName(System.TimeSpan));
            var d = new System.TimeSpan();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.TimeSpan), "d is TimeSpan");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.IComparable$1(System.TimeSpan)), "d is IComparable<TimeSpan>");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.IEquatable$1(System.TimeSpan)), "d is IEquatable<TimeSpan>");
        },
        defaultConstructorWorks: function () {
            var time = new System.TimeSpan();
            Bridge.Test.Assert.true(System.Int64(0).equals(time.getTicks()));
        },
        defaultValueWorks: function () {
            var ts = Bridge.getDefaultValue(System.TimeSpan);
            Bridge.Test.Assert.true(System.Int64(0).equals(ts.getTicks()));
        },
        zeroWorks: function () {
            var ts = System.TimeSpan.zero;
            Bridge.Test.Assert.true(System.Int64(0).equals(ts.getTicks()));
        },
        creatingInstanceReturnsTimeSpanWithZeroValue: function () {
            var ts = Bridge.createInstance(System.TimeSpan);
            Bridge.Test.Assert.true(System.Int64(0).equals(ts.getTicks()));
        },
        parameterConstructorsWorks: function () {
            var time = new System.TimeSpan(System.Int64(34567));
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "ticks type");
            Bridge.Test.Assert.true$1(System.Int64(34567).equals(time.getTicks()), "ticks value");

            time = new System.TimeSpan(10, 20, 5);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "h, m, s type");
            Bridge.Test.Assert.true$1(System.Int64([-1612154752,86]).equals(time.getTicks()), "h, m, s value");

            time = new System.TimeSpan(15, 10, 20, 5);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "d, h, m, s type");
            Bridge.Test.Assert.true$1(System.Int64([471513216,3104]).equals(time.getTicks()), "d, h, m, s value");

            time = new System.TimeSpan(15, 10, 20, 5, 14);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "full type");
            Bridge.Test.Assert.true$1(System.Int64([471653216,3104]).equals(time.getTicks()), "full value");
        },
        factoryMethodsWork: function () {
            var time = System.TimeSpan.fromDays(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromDays type");
            Bridge.Test.Assert.true$1(System.Int64([2134720512,603]).equals(time.getTicks()), "FromDays value");

            time = System.TimeSpan.fromHours(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromHours type");
            Bridge.Test.Assert.true$1(System.Int64([625817600,25]).equals(time.getTicks()), "FromHours value");

            time = System.TimeSpan.fromMinutes(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromMinutes type");
            Bridge.Test.Assert.true$1(System.Int64(1800000000).equals(time.getTicks()), "FromMinutes value");

            time = System.TimeSpan.fromSeconds(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromSeconds type");
            Bridge.Test.Assert.true$1(System.Int64(30000000).equals(time.getTicks()), "FromSeconds value");

            time = System.TimeSpan.fromMilliseconds(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromMilliseconds type");
            Bridge.Test.Assert.true$1(System.Int64(30000).equals(time.getTicks()), "FromMilliseconds value");

            time = System.TimeSpan.fromTicks(System.Int64(3));
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromTicks type");
            Bridge.Test.Assert.true$1(System.Int64(3).equals(time.getTicks()), "FromTicks value");
        },
        propertiesWork: function () {
            var time = new System.TimeSpan(15, 10, 20, 5, 14);
            Bridge.Test.Assert.areEqual(15, time.getDays());
            Bridge.Test.Assert.areEqual(10, time.getHours());
            Bridge.Test.Assert.areEqual(20, time.getMinutes());
            Bridge.Test.Assert.areEqual(5, time.getSeconds());
            Bridge.Test.Assert.areEqual(14, time.getMilliseconds());
            this.assertAlmostEqual(time.getTotalDays(), 15.430613587962963);
            this.assertAlmostEqual(time.getTotalHours(), 370.33472611111108);
            this.assertAlmostEqual(time.getTotalMinutes(), 22220.083566666668);
            this.assertAlmostEqual(time.getTotalSeconds(), 1333205.014);
            this.assertAlmostEqual(time.getTotalMilliseconds(), 1333205014.0);
            Bridge.Test.Assert.true(System.Int64([471653216,3104]).equals(time.getTicks()));
        },
        compareToWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);
            Bridge.Test.Assert.areEqual(time1.compareTo(time1), 0);
            Bridge.Test.Assert.areEqual(time1.compareTo(time2), 0);
            Bridge.Test.Assert.areEqual(time1.compareTo(time3), 1);
            Bridge.Test.Assert.areEqual(time1.compareTo(time4), -1);
        },
        compareWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);
            Bridge.Test.Assert.areEqual(time1.compareTo(time1), 0);
            Bridge.Test.Assert.areEqual(time1.compareTo(time2), 0);
            Bridge.Test.Assert.areEqual(time1.compareTo(time3), 1);
            Bridge.Test.Assert.areEqual(time1.compareTo(time4), -1);
        },
        staticEqualsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);

            Bridge.Test.Assert.false((time1).ticks.eq((time2).ticks));
            Bridge.Test.Assert.true((time1).ticks.eq((time3).ticks));
        },
        equalsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);

            Bridge.Test.Assert.false(time1.equalsT(time2));
            Bridge.Test.Assert.true(time1.equalsT(time3));
        },
        iEquatableEqualsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);

            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(time1, System.IEquatable$1(System.TimeSpan)), time2, System.TimeSpan));
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(time1, System.IEquatable$1(System.TimeSpan)), time3, System.TimeSpan));
        },
        toStringWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 2);
            var time3 = new System.TimeSpan(15, 11, 20, 6, 14);
            var time4 = new System.TimeSpan(1, 2, 3);
            Bridge.Test.Assert.areEqual("15.10:20:05.0140000", time1.toString());
            Bridge.Test.Assert.areEqual("14.10:20:05.0020000", time2.toString());
            Bridge.Test.Assert.areEqual("15.11:20:06.0140000", time3.toString());
            Bridge.Test.Assert.areEqual("01:02:03", time4.toString());
        },
        addWorks: function () {
            var time1 = new System.TimeSpan(2, 3, 4, 5, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = time1.add(time2);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(457751013, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        subtractWorks: function () {
            var time1 = new System.TimeSpan(4, 3, 7, 2, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = time1.subtract(time2);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(82915999, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        durationWorks: function () {
            var time1 = new System.TimeSpan(-3, -2, -1, -5, -4);
            var time2 = new System.TimeSpan(2, 1, 5, 4, 3);
            var actual1 = time1.duration();
            var actual2 = time2.duration();
            Bridge.Test.Assert.true$1(Bridge.is(time1, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(266465004, actual1.getTotalMilliseconds(), "Negative should be negated");
            Bridge.Test.Assert.areEqual$1(176704003, actual2.getTotalMilliseconds(), "Positive should be preserved");
        },
        negateWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = time.negate();
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        },
        assertAlmostEqual: function (d1, d2) {
            var diff = d2 - d1;
            if (diff < 0) {
                diff = -diff;
            }
            Bridge.Test.Assert.true(diff < 1E-08);
        },
        comparisonOperatorsWork: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);

            Bridge.Test.Assert.false$1(System.TimeSpan.gt(time1, time2), "> 1");
            Bridge.Test.Assert.true$1(System.TimeSpan.gt(time1, time3), "> 2");
            Bridge.Test.Assert.false$1(System.TimeSpan.gt(time1, time4), "> 3");

            Bridge.Test.Assert.true$1(System.TimeSpan.gte(time1, time2), ">= 1");
            Bridge.Test.Assert.true$1(System.TimeSpan.gte(time1, time3), ">= 2");
            Bridge.Test.Assert.false$1(System.TimeSpan.gte(time1, time4), ">= 3");

            Bridge.Test.Assert.false$1(System.TimeSpan.lt(time1, time2), "< 1");
            Bridge.Test.Assert.false$1(System.TimeSpan.lt(time1, time3), "< 2");
            Bridge.Test.Assert.true$1(System.TimeSpan.lt(time1, time4), "< 3");

            Bridge.Test.Assert.true$1(System.TimeSpan.lte(time1, time2), "<= 1");
            Bridge.Test.Assert.false$1(System.TimeSpan.lte(time1, time3), "<= 2");
            Bridge.Test.Assert.true$1(System.TimeSpan.lte(time1, time4), "<= 3");

            Bridge.Test.Assert.true$1(System.TimeSpan.eq(time1, time1), "== 1");
            Bridge.Test.Assert.true$1(System.TimeSpan.eq(time1, time2), "== 2");
            Bridge.Test.Assert.false$1(System.TimeSpan.eq(time1, time3), "== 3");
            Bridge.Test.Assert.false$1(System.TimeSpan.eq(time1, time4), "== 4");

            Bridge.Test.Assert.false$1(System.TimeSpan.neq(time1, time1), "!= 1");
            Bridge.Test.Assert.false$1(System.TimeSpan.neq(time1, time2), "!= 2");
            Bridge.Test.Assert.true$1(System.TimeSpan.neq(time1, time3), "!= 3");
            Bridge.Test.Assert.true$1(System.TimeSpan.neq(time1, time4), "!= 4");
        },
        additionOperatorWorks: function () {
            var time1 = new System.TimeSpan(2, 3, 4, 5, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = System.TimeSpan.add(time1, time2);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(457751013, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        subtractionOperatorWorks: function () {
            var time1 = new System.TimeSpan(4, 3, 7, 2, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = System.TimeSpan.sub(time1, time2);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(82915999, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        unaryPlusWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = System.TimeSpan.plus(time);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(-252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        },
        unaryMinusWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = System.TimeSpan.neg(time);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.TupleTests", {
        tuple1Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a" } : { item1: "a" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
            }
        },
        tuple2Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b" } : { item1: "a", item2: "b" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
            }
        },
        tuple3Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c" } : { item1: "a", item2: "b", item3: "c" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
            }
        },
        tuple4Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d" } : { item1: "a", item2: "b", item3: "c", item4: "d" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
            }
        },
        tuple5Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.Assert.areStrictEqual("e", t.item5);
            }
        },
        tuple6Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.Assert.areStrictEqual("f", t.item6);
            }
        },
        tuple7Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.Assert.areStrictEqual("f", t.item6);
                Bridge.Test.Assert.areStrictEqual("g", t.item7);
            }
        },
        tuple8Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g", rest: "h" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g", rest: "h" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.Assert.areStrictEqual("f", t.item6);
                Bridge.Test.Assert.areStrictEqual("g", t.item7);
                Bridge.Test.Assert.areStrictEqual("h", t.rest);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.UInt16Tests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.UInt16));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.UInt16));
            Bridge.Test.Assert.false(Bridge.is(-1, System.UInt16));
            Bridge.Test.Assert.false(Bridge.is(65536, System.UInt16));
            Bridge.Test.Assert.areEqual("System.UInt16", Bridge.Reflection.getTypeFullName(System.UInt16));

            var s = 0;
            Bridge.Test.Assert.true(Bridge.is(s, System.UInt16));
            Bridge.Test.Assert.true(Bridge.is(s, System.IComparable$1(System.UInt16)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IEquatable$1(System.UInt16)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IFormattable));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 65535, i5 = 65536;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 65535, ni5 = 65536, ni6 = null;

            Bridge.Test.Assert.areStrictEqual$1(65535, (i1 & 65535), "-1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i2 & 65535), "0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, (i3 & 65535), "234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(65535, (i4 & 65535), "65535 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i5 & 65535), "65536 unchecked");

            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni1), "nullable -1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni2), "nullable 0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.clipu16(ni3), "nullable 234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni4), "nullable 65535 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni5), "nullable 65536 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clipu16(ni6), "null unchecked");

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.UInt16);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.UInt16), "0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.UInt16), "234 checked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.check(i4, System.UInt16), "65535 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.UInt16);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f1);

            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.UInt16);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.UInt16), "nullable 0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.UInt16), "nullable 234 checked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.check(ni4, System.UInt16), "nullable 65535 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.UInt16);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.UInt16), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.UInt16));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.UInt16));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(0, 0);
            Bridge.Test.Assert.areEqual(65535, 65535);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.UInt16.format((291), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.UInt16.format((291), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.UInt16.tryParse("23445", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(23445, numberResult.v);

            result = System.UInt16.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.UInt16.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.UInt16.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.UInt16.tryParse("32768", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(32768, numberResult.v);

            result = System.UInt16.tryParse("-1", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(-1, numberResult.v);

            result = System.UInt16.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(23445, System.UInt16.parse("23445"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);

            Bridge.Test.Assert.true(Bridge.equalsT(0, 0, System.UInt16));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0, System.UInt16));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1, System.UInt16));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1, System.UInt16));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0, false, System.UInt16) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0, false, System.UInt16) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1, false, System.UInt16) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.UInt16Tests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.UInt16Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.UInt16.parse("");
        },
        f3: function () {
            System.UInt16.parse(null);
        },
        f4: function () {
            System.UInt16.parse("notanumber");
        },
        f5: function () {
            System.UInt16.parse("65536");
        },
        f6: function () {
            System.UInt16.parse("-1");
        },
        f7: function () {
            System.UInt16.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.UInt32Tests", {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.UInt32));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.UInt32));
            Bridge.Test.Assert.false(Bridge.is(-1, System.UInt32));
            Bridge.Test.Assert.false(Bridge.is(System.Int64([0,1]), System.UInt32));
            Bridge.Test.Assert.areEqual("System.UInt32", Bridge.Reflection.getTypeFullName(System.UInt32));
            var i = 0;
            Bridge.Test.Assert.true(Bridge.is(i, System.UInt32));
            Bridge.Test.Assert.true(Bridge.is(i, System.IComparable$1(System.UInt32)));
            Bridge.Test.Assert.true(Bridge.is(i, System.IEquatable$1(System.UInt32)));
            Bridge.Test.Assert.true(Bridge.is(i, System.IFormattable));
        },
        castsWork: function () {
            var i1 = System.Int64(-1), i2 = System.Int64(0), i3 = System.Int64(234), i4 = System.Int64(4294967295), i5 = System.Int64([0,1]);
            var ni1 = System.Int64.lift(-1), ni2 = System.Int64(0), ni3 = System.Int64(234), ni4 = System.Int64(4294967295), ni5 = System.Int64([0,1]), ni6 = System.Int64.lift(null);

            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(i1), "-1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.clipu32(i2), "0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, System.Int64.clipu32(i3), "234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(i4), "4294967295 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.clipu32(i5), "4294967296 unchecked");

            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(ni1), "nullable -1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.clipu32(ni2), "nullable 0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, System.Int64.clipu32(ni3), "nullable 234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(ni4), "nullable 4294967295 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.clipu32(ni5), "nullable 4294967296 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, System.Int64.clipu32(ni6), "null unchecked");

            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(i1, System.UInt32);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.check(i2, System.UInt32), "0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, System.Int64.check(i3, System.UInt32), "234 checked");
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.check(i4, System.UInt32), "4294967295 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(i5, System.UInt32);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f1);

            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(ni1, System.UInt32);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.check(ni2, System.UInt32), "nullable 0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, System.Int64.check(ni3, System.UInt32), "nullable 234 checked");
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.check(ni4, System.UInt32), "nullable 4294967295 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(ni5, System.UInt32);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, System.Int64.check(ni6, System.UInt32), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.UInt32));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.UInt32));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(0, 0);
            Bridge.Test.Assert.areEqual(4294967295, 4294967295);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.UInt32.format((291), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.UInt32.format((291), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.UInt32.tryParse("23445", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(23445, numberResult.v);

            result = System.UInt32.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.UInt32.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.UInt32.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);

            result = System.UInt32.tryParse("-1", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(-1, numberResult.v);

            result = System.UInt32.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(23445, System.UInt32.parse("23445"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);

            Bridge.Test.Assert.true(Bridge.equalsT(0, 0, System.UInt32));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0, System.UInt32));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1, System.UInt32));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1, System.UInt32));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0, false, System.UInt32) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0, false, System.UInt32) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1, false, System.UInt32) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.UInt32Tests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.UInt32Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.UInt32.parse("");
        },
        f3: function () {
            System.UInt32.parse(null);
        },
        f4: function () {
            System.UInt32.parse("notanumber");
        },
        f5: function () {
            System.UInt32.parse("4294967296");
        },
        f6: function () {
            System.UInt32.parse("-1");
        },
        f7: function () {
            System.UInt32.parse("2.5");
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.UInt64Tests", {
        assertULong: function (expected, actual, message, checkedType) {
            if (message === void 0) { message = ""; }
            if (checkedType === void 0) { checkedType = "System.UInt64"; }
            if (message == null) {
                message = "";
            }

            var typeMessage = System.String.concat(message, "Type is ", checkedType);
            Bridge.Test.Assert.areEqual$1(checkedType, Bridge.Reflection.getTypeFullName(Bridge.getType(actual)), typeMessage);

            Bridge.Test.Assert.areEqual$1(expected.toString(), actual.toString(), message);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(System.UInt64(0), System.UInt64));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.UInt64));
            Bridge.Test.Assert.areEqual("System.UInt64", Bridge.Reflection.getTypeFullName(System.UInt64));
            var l = System.UInt64(0);
            Bridge.Test.Assert.true(Bridge.is(l, System.UInt64));
            Bridge.Test.Assert.true(Bridge.is(l, System.IComparable$1(System.UInt64)));
            Bridge.Test.Assert.true(Bridge.is(l, System.IEquatable$1(System.UInt64)));
            Bridge.Test.Assert.true(Bridge.is(l, System.IFormattable));
        },
        minMaxValuesAreCorrect: function () {
            this.assertULong("0", System.UInt64.MinValue);
            this.assertULong("18446744073709551615", System.UInt64.MaxValue);
        },
        castsWork: function () {
            var i2 = System.Int64(0), i3 = System.Int64(234), i4 = System.Int64([-808,2147483647]);
            var ni2 = System.Int64(0), ni3 = System.Int64(234), ni4 = System.Int64([-808,2147483647]), ni6 = System.Int64.lift(null);

            Bridge.Test.Assert.true$1(System.UInt64(0).equals(System.Int64.clipu64(i2)), "0 unchecked");
            Bridge.Test.Assert.true$1(System.UInt64(234).equals(System.Int64.clipu64(i3)), "234 unchecked");
            Bridge.Test.Assert.true$1(System.UInt64(System.Int64([-808,2147483647])).equals(System.Int64.clipu64(i4)), "9223372036854775000 unchecked");

            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(0), System.Int64.clipu64(ni2)), "nullable 0 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(234), System.Int64.clipu64(ni3)), "nullable 234 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(System.Int64([-808,2147483647])), System.Int64.clipu64(ni4)), "nullable 9223372036854775000 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64.lift(null), System.Int64.clipu64(ni6)), "null unchecked");

            Bridge.Test.Assert.true$1(System.UInt64(0).equals(System.Int64.check(i2, System.UInt64)), "0 checked");
            Bridge.Test.Assert.true$1(System.UInt64(234).equals(System.Int64.check(i3, System.UInt64)), "234 checked");
            Bridge.Test.Assert.true$1(System.UInt64(System.Int64([-808,2147483647])).equals(System.Int64.check(i4, System.UInt64)), "9223372036854775000 checked");

            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(0), System.Int64.check(ni2, System.UInt64)), "nullable 0 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(234), System.Int64.check(ni3, System.UInt64)), "nullable 234 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(System.Int64([-808,2147483647])), System.Int64.check(ni4, System.UInt64)), "nullable 9223372036854775000 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64.lift(null), System.Int64.check(ni6, System.UInt64)), "null checked");
        },
        overflowWorks: function () {
            var min = System.UInt64.MinValue;
            var max = System.UInt64.MaxValue;

            Bridge.Test.Assert.true$1((max.add(System.UInt64(1))).equals(min), "max + 1 unchecked");
            Bridge.Test.Assert.true$1((min.sub(System.UInt64(1))).equals(max), "min - 1 unchecked");

            Bridge.Test.Assert.throws$2(function () {
                var l = max.add(System.UInt64(1), 1);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f1, "max + 1 should be OverflowException");
            Bridge.Test.Assert.throws$2(function () {
                var l = min.sub(System.UInt64(1), 1);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f1, "min - 1 should be OverflowException");
            Bridge.Test.Assert.throws$2(function () {
                var l = max.mul(max, 1);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f1, "max * max should be OverflowException");
        },
        combinedTypesOperationsWork: function () {
            var ub = 1;
            var sb = 2;
            var us = 3;
            var ss = 4;
            var ui = 5;
            var si = 6;
            var sl = System.Int64(7);

            var l1 = System.UInt64(256);
            var l2 = System.UInt64(128);
            var l3 = System.UInt64(65536);
            var l4 = System.UInt64(32768);
            var l5 = System.UInt64([0,1]);
            var l6 = System.UInt64(2147483648);
            var l7 = System.UInt64(1);

            this.assertULong("257", System.UInt64(ub).add(l1));
            this.assertULong("130", Bridge.Int.clipu64(sb).add(l2));
            this.assertULong("65539", System.UInt64(us).add(l3));
            this.assertULong("32772", Bridge.Int.clipu64(ss).add(l4));
            this.assertULong("4294967301", System.UInt64(ui).add(l5));
            this.assertULong("2147483654", Bridge.Int.clipu64(si).add(l6));
            this.assertULong("8", System.Int64.clipu64(sl).add(l7));

            var dcml = System.Decimal(11.0);
            var dbl = 12.0;
            var flt = 13;

            var l = System.Int64(100);

            this.assertULong("111", dcml.add(System.Decimal(l)), null, "System.Decimal");
            this.assertULong("112", dbl + System.Int64.toNumber(l), null, "System.Int32");
            this.assertULong("113", flt + System.Int64.toNumber(l), null, "System.Int32");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.true(System.UInt64(0).equals(this.getDefaultValue(System.UInt64)));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.true(System.UInt64(0).equals(new System.UInt64()));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.true(System.UInt64(0).equals(Bridge.createInstance(System.UInt64)));
        },
        constantsWork: function () {
            Bridge.Test.Assert.true(true);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.UInt64(291)).format("x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.UInt64(291)).toString("x"));
        },
        castingOfLargeValuesToUInt64Works: function () {
            var d1 = 5000000000.5, d2 = -d1;
            Bridge.Test.Assert.true$1(System.UInt64(System.Int64([705032704,1])).equals(Bridge.Int.clipu64(d1)), "Positive");
            Bridge.Test.Assert.false$1(Bridge.Int.clipu64(d2).gt(System.UInt64(2147483647)), "Negative");
        },
        divisionOfLargeUInt64Works: function () {
            var v1 = System.UInt64(System.Int64([-1539607552,11])), v2 = System.UInt64(3);
            Bridge.Test.Assert.true(System.UInt64(System.Int64([-513202518,3])).equals((v1.div(v2))));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.UInt64.tryParse("23445", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.true(System.UInt64(23445).equals(numberResult.v));

            result = System.UInt64.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));

            result = System.UInt64.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));

            result = System.UInt64.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));

            result = System.UInt64.tryParse("-1", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));

            result = System.UInt64.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));

            result = System.UInt64.tryParse("100000000000000000000", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(numberResult.v.equals(System.UInt64(0)));
        },
        parseWorks: function () {
            Bridge.Test.Assert.true(System.UInt64(23445).equals(System.UInt64.parse("23445")));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.UInt64(123)).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.UInt64(123)).toString(10));
            Bridge.Test.Assert.areEqual("123", (System.UInt64(291)).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((System.UInt64(0))), Bridge.getHashCode((System.UInt64(0))));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((System.UInt64(1))), Bridge.getHashCode((System.UInt64(1))));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((System.UInt64(1))), Bridge.getHashCode((System.UInt64(0))));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((System.UInt64(0)), System.UInt64(0)));
            Bridge.Test.Assert.false(Bridge.equals((System.UInt64(1)), System.UInt64(0)));
            Bridge.Test.Assert.false(Bridge.equals((System.UInt64(0)), System.UInt64(1)));
            Bridge.Test.Assert.true(Bridge.equals((System.UInt64(1)), System.UInt64(1)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((System.UInt64(0)).equalsT(System.UInt64(0)));
            Bridge.Test.Assert.false((System.UInt64(1)).equalsT(System.UInt64(0)));
            Bridge.Test.Assert.false((System.UInt64(0)).equalsT(System.UInt64(1)));
            Bridge.Test.Assert.true((System.UInt64(1)).equalsT(System.UInt64(1)));

            Bridge.Test.Assert.true(Bridge.equalsT(System.UInt64(0), System.UInt64(0), System.UInt64));
            Bridge.Test.Assert.false(Bridge.equalsT(System.UInt64(1), System.UInt64(0), System.UInt64));
            Bridge.Test.Assert.false(Bridge.equalsT(System.UInt64(0), System.UInt64(1), System.UInt64));
            Bridge.Test.Assert.true(Bridge.equalsT(System.UInt64(1), System.UInt64(1), System.UInt64));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true((System.UInt64(0)).compareTo(System.UInt64(0)) === 0);
            Bridge.Test.Assert.true((System.UInt64(1)).compareTo(System.UInt64(0)) > 0);
            Bridge.Test.Assert.true((System.UInt64(0)).compareTo(System.UInt64(1)) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(System.UInt64(0), System.UInt64(0), false, System.UInt64) === 0);
            Bridge.Test.Assert.true(Bridge.compare(System.UInt64(1), System.UInt64(0), false, System.UInt64) > 0);
            Bridge.Test.Assert.true(Bridge.compare(System.UInt64(0), System.UInt64(1), false, System.UInt64) < 0);
        }
    });

    Bridge.ns("Bridge.ClientTest.SimpleTypes.UInt64Tests", $_);

    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.UInt64Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.UInt64.parse("");
        },
        f3: function () {
            System.UInt64.parse(null);
        },
        f4: function () {
            System.UInt64.parse("notanumber");
        },
        f5: function () {
            System.UInt64.parse("-1");
        },
        f6: function () {
            System.UInt64.parse("2.5");
        },
        f7: function () {
            System.UInt64.parse("100000000000000000000");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexTestBase", {
        validateMatchNotFound: function (match) {
            this.validateMatch(match, 0, 0, "", 1, false);
        },
        validateMatch: function (match, index, length, value, groupCount, success) {
            if (success === void 0) { success = true; }
            var matchCapCount = success ? 1 : 0;
            this.validateGroupImpl(match, index, length, success, value, matchCapCount, "ValidateMatch: Match");

            Bridge.Test.Assert.notNull$1(match.getGroups(), "ValidateMatch: Match.Groups is not NULL");
            Bridge.Test.Assert.areEqual(groupCount, match.getGroups().getCount());
            if (groupCount > 0) {
                this.validateGroupImpl(match.getGroups().get(0), index, length, success, value, matchCapCount, "ValidateMatch: Match.Group0");
            }

            Bridge.Test.Assert.notNull$1(match.getCaptures(), "ValidateMatch: Match.Captures is not NULL");
            Bridge.Test.Assert.areEqual$1(matchCapCount, match.getCaptures().getCount(), "ValidateMatch: Match.Captures.Count");
            if (success) {
                this.validateCaptureImpl(match.getCaptures().get(0), index, length, value, "ValidateMatch: Match.Capture0");
            }
        },
        validateGroup: function (match, groupIndex, index, length, success, value, captureCount) {
            var group = match.getGroups().get(groupIndex);
            this.validateGroupImpl(group, index, length, success, value, captureCount, "ValidateGroup: Group" + groupIndex);
        },
        validateGroupImpl: function (group, index, length, success, value, captureCount, descr) {
            this.validateCaptureImpl(group, index, length, value, descr);
            Bridge.Test.Assert.areEqual$1(success, group.getSuccess(), System.String.concat(descr, ".Success"));

            Bridge.Test.Assert.notNull$1(group.getCaptures(), System.String.concat(descr, ".Captures is not NULL"));
            Bridge.Test.Assert.areEqual$1(captureCount, group.getCaptures().getCount(), System.String.concat(descr, ".Captures.Count"));
        },
        validateCapture: function (match, groupIndex, captureIndex, index, length, value) {
            Bridge.Test.Assert.notNull$1(match, "ValidateCapture: Match is not NULL");
            Bridge.Test.Assert.notNull$1(match.getGroups(), "ValidateCapture: Match.Groups is not NULL");
            var group = match.getGroups().get(groupIndex);

            Bridge.Test.Assert.notNull$1(group, "ValidateCapture: Group" + groupIndex + " is not NULL");
            Bridge.Test.Assert.notNull$1(group.getCaptures(), "ValidateCapture: Group" + groupIndex + ".Captures is not NULL");
            var capture = group.getCaptures().get(captureIndex);

            this.validateCaptureImpl(capture, index, length, value, "ValidateCapture: Group" + groupIndex + ".Capture" + captureIndex);
        },
        validateCaptureImpl: function (capture, index, length, value, descr) {
            Bridge.Test.Assert.notNull$1(capture, System.String.concat(descr, " is not NULL"));

            Bridge.Test.Assert.areEqual$1(index, capture.getIndex(), System.String.concat(descr, ".Index"));
            Bridge.Test.Assert.areEqual$1(length, capture.getLength(), System.String.concat(descr, ".Length"));
            Bridge.Test.Assert.areEqual$1(value, capture.getValue(), System.String.concat(descr, ".Value"));
            Bridge.Test.Assert.areEqual$1(value, capture.toString(), System.String.concat(descr, ".ToString()"));
        },
        capturesAreEqual: function (expected, actual, descr) {
            if (expected == null) {
                Bridge.Test.Assert.null$1(actual, System.String.concat(descr, " is NULL"));
            } else {
                Bridge.Test.Assert.notNull$1(actual, System.String.concat(descr, " is not NULL"));

                Bridge.Test.Assert.areEqual$1(expected.getIndex(), actual.getIndex(), System.String.concat(descr, ".Index"));
                Bridge.Test.Assert.areEqual$1(expected.getLength(), actual.getLength(), System.String.concat(descr, ".Length"));
                Bridge.Test.Assert.areEqual$1(expected.getValue(), actual.getValue(), System.String.concat(descr, ".Value"));
                Bridge.Test.Assert.areEqual$1(expected.toString(), actual.toString(), System.String.concat(descr, ".ToString()"));
            }
        },
        groupsAreEqual: function (expected, actual, descr) {
            if (expected == null) {
                Bridge.Test.Assert.null$1(actual, System.String.concat(descr, " is NULL"));
            } else {
                Bridge.Test.Assert.notNull$1(actual, System.String.concat(descr, " is not NULL"));

                this.capturesAreEqual(expected, actual, descr);
                Bridge.Test.Assert.areEqual$1(expected.getSuccess(), actual.getSuccess(), System.String.concat(descr, ".Success"));

                if (expected.getCaptures() == null) {
                    Bridge.Test.Assert.null$1(actual.getCaptures(), System.String.concat(descr, ".Captures is NULL"));
                } else {
                    Bridge.Test.Assert.notNull$1(actual.getCaptures(), System.String.concat(descr, ".Captures is not NULL"));
                    Bridge.Test.Assert.areEqual$1(expected.getCaptures().getCount(), actual.getCaptures().getCount(), System.String.concat(descr, ".Captures.Count"));
                    for (var i = 0; i < expected.getCaptures().getCount(); i = (i + 1) | 0) {
                        this.capturesAreEqual(expected.getCaptures().get(i), actual.getCaptures().get(i), System.String.concat(descr, ".Captures[", i, "]"));
                    }
                }
            }
        },
        matchesAreEqual: function (expected, actual, descr) {
            if (expected == null) {
                Bridge.Test.Assert.null$1(actual, System.String.concat(descr, " is NULL"));
            } else {
                Bridge.Test.Assert.notNull$1(actual, System.String.concat(descr, " is not NULL"));
                this.groupsAreEqual(expected, actual, descr);

                if (expected.getGroups() == null) {
                    Bridge.Test.Assert.null$1(actual.getGroups(), System.String.concat(descr, ".Groups is NULL"));
                } else {
                    Bridge.Test.Assert.notNull$1(actual.getGroups(), System.String.concat(descr, ".Groups is not NULL"));
                    Bridge.Test.Assert.areEqual$1(expected.getGroups().getCount(), actual.getGroups().getCount(), System.String.concat(descr, ".Groups.Count"));
                    for (var i = 0; i < expected.getGroups().getCount(); i = (i + 1) | 0) {
                        this.capturesAreEqual(expected.getGroups().get(i), actual.getGroups().get(i), System.String.concat(descr, ".Groups[", i, "]"));
                    }
                }
            }
        },
        validateCollection: function (T, expected, actual, msg) {
            if (expected == null) {
                Bridge.Test.Assert.null$1(actual, System.String.concat(msg, " is NULL"));
            } else {
                Bridge.Test.Assert.notNull$1(actual, System.String.concat(msg, " is not NULL"));
                Bridge.Test.Assert.areEqual$1(expected.length, actual.length, System.String.concat(msg, ".Length"));

                var minLength = Math.min(expected.length, actual.length);
                for (var i = 0; i < minLength; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual$1(expected[i], actual[i], System.String.concat(msg, "[", i, "]"));
                }
            }
        },
        validateMatchResults: function (rgx, inputs, expected) {
            for (var i = 0; i < inputs.length; i = (i + 1) | 0) {
                var m = rgx.match(inputs[i]);
                if (expected[i] == null) {
                    Bridge.Test.Assert.false(m.getSuccess());
                } else {
                    Bridge.Test.Assert.true(m.getSuccess());
                    if (m.getSuccess()) {
                        Bridge.Test.Assert.areEqual(expected[i], m.getValue());
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests", {
        statics: {
            escapeWorks: function () {
                var escaped = Bridge.regexpEscape("[-/\\^$*+?.()|[]{}]");
                Bridge.Test.Assert.areEqual("\\[\\-\\/\\\\\\^\\$\\*\\+\\?\\.\\(\\)\\|\\[\\]\\{\\}\\]", escaped);
            }
        },
        typePropertiesAreCorrect: function () {
            var re = new RegExp("");
            Bridge.Test.Assert.areEqual("RegExp", Bridge.Reflection.getTypeFullName(RegExp));
            Bridge.Test.Assert.true(Bridge.hasValue(re));
        },
        stringOnlyConstructorWorks: function () {
            var re = new RegExp("test123");
            Bridge.Test.Assert.areEqual("test123", re.source);
            Bridge.Test.Assert.false(re.global);
        },
        constructorWithFlagsWorks: function () {
            var re = new RegExp("test123", "g");
            Bridge.Test.Assert.areEqual("test123", re.source);
            Bridge.Test.Assert.true(re.global);
        },
        globalFlagWorks: function () {
            Bridge.Test.Assert.false(new RegExp("x", "").global);
            Bridge.Test.Assert.true(new RegExp("x", "g").global);
        },
        ignoreCaseFlagWorks: function () {
            Bridge.Test.Assert.false(new RegExp("x", "").ignoreCase);
            Bridge.Test.Assert.true(new RegExp("x", "i").ignoreCase);
        },
        multilineFlagWorks: function () {
            Bridge.Test.Assert.false(new RegExp("x", "").multiline);
            Bridge.Test.Assert.true(new RegExp("x", "m").multiline);
        },
        patternPropertyWorks: function () {
            Bridge.Test.Assert.areEqual("test123", new RegExp("test123", "").source);
        },
        sourcePropertyWorks: function () {
            Bridge.Test.Assert.areEqual("test123", new RegExp("test123", "").source);
        },
        execWorks: function () {
            var re = new RegExp("a|b", "g");
            var m = re.exec("xaybz");
            //Assert.AreEqual(m.Index, 1);
            Bridge.Test.Assert.areEqual(1, m.length);
            Bridge.Test.Assert.areEqual("a", m[0]);
        },
        lastIndexWorks: function () {
            var re = new RegExp("a|b", "g");
            re.exec("xaybz");
            Bridge.Test.Assert.areEqual(2, re.lastIndex);
        },
        testWorks: function () {
            Bridge.Test.Assert.true(new RegExp("a|b").test("xaybz"));
            Bridge.Test.Assert.false(new RegExp("c").test("xaybz"));
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests", {
        _isMatchTestData: null,
        _isMatchWithOffsetTestData: null,
        config: {
            init: function () {
                this._isMatchTestData = $_.Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests.f1(new (System.Collections.Generic.List$1(Object))());
                this._isMatchWithOffsetTestData = $_.Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests.f2(new (System.Collections.Generic.List$1(Object))());
            }
        },
        isMatchTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$");
            for (var i = 0; i < this._isMatchTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchTestData.getItem(i).item1;
                var exptected = this._isMatchTestData.getItem(i).item2;

                var actual = rgx.isMatch(testValue);
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        },
        isMatchWithOffsetTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]");
            for (var i = 0; i < this._isMatchWithOffsetTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchWithOffsetTestData.getItem(i).item1;
                var exptected = this._isMatchWithOffsetTestData.getItem(i).item2;

                var startAt = System.String.indexOf(testValue, String.fromCharCode(58));
                var actual = rgx.isMatch$1(testValue, startAt);
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        },
        isMatchStaticTest: function () {
            var pattern = "^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$";
            for (var i = 0; i < this._isMatchTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchTestData.getItem(i).item1;
                var exptected = this._isMatchTestData.getItem(i).item2;

                var actual = System.Text.RegularExpressions.Regex.isMatch(testValue, pattern);
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        },
        isMatchStaticWithOptionsTest: function () {
            var pattern = "^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$";
            for (var i = 0; i < this._isMatchTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchTestData.getItem(i).item1;
                var exptected = this._isMatchTestData.getItem(i).item2;

                var actual = System.Text.RegularExpressions.Regex.isMatch$1(testValue, pattern, 0);
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        },
        isMatchStaticWithOptionsAndTimeoutTest: function () {
            var pattern = "^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$";
            for (var i = 0; i < this._isMatchTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchTestData.getItem(i).item1;
                var exptected = this._isMatchTestData.getItem(i).item2;

                var actual = System.Text.RegularExpressions.Regex.isMatch$2(testValue, pattern, 0, System.TimeSpan.fromDays(1));
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests, {
        f1: function (_o6) {
            _o6.add({ item1: "1298-673-4192", item2: true });
            _o6.add({ item1: "1298-673-4192", item2: true });
            _o6.add({ item1: "A08Z-931-468A", item2: true });
            _o6.add({ item1: "_A90-123-129X", item2: false });
            _o6.add({ item1: "12345-KKA-1230", item2: false });
            _o6.add({ item1: "0919-2893-1256", item2: false });
            return _o6;
        },
        f2: function (_o7) {
            _o7.add({ item1: "ID: 1234-567-8901", item2: true });
            _o7.add({ item1: "Identifier: A170-222-777z", item2: true });
            _o7.add({ item1: "1234-567-8901 IDENTITY: 9287-5555-1233", item2: false });
            return _o7;
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests", {
        statics: {
            capText: function (m) {
                // Get the matched string.
                var x = m.toString();
                // If the first char is lower case...
                if (Bridge.isLower(x.charCodeAt(0))) {
                    // Capitalize it.
                    return System.String.concat(String.fromCharCode(String.fromCharCode(x.charCodeAt(0)).toUpperCase().charCodeAt(0)), x.substr(1, ((x.length - 1) | 0)));
                }
                return x;
            },
            reverseLetter: function (match) {
                return System.Text.RegularExpressions.Regex.replace$1(match.getValue(), "([ie])([ie])", "$2$1", 1);
            },
            wordScrambler: function (match) {
                // Adjusted logic here. Will just reverse the value string.

                var value = match.getValue();
                var letters = System.Array.init(value.length, function (){
                    return new System.Char();
                });
                for (var i = 0; i < value.length; i = (i + 1) | 0) {
                    letters[i] = value.charCodeAt(((((value.length - i) | 0) - 1) | 0));
                }

                return String.fromCharCode.apply(null, letters);
            }
        },
        replaceTest1: function () {
            var expected = "This is text with far too much whitespace.";

            var input = "This is   text with   far  too   much   whitespace.";
            var pattern = "\\s+";
            var replacement = " ";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var result = rgx.replace(input, replacement);

            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceAtPositionTest: function () {
            var expected = "abcdefghijkklmm";

            var str = "aabccdeefgghiijkklmm";
            var pattern = "(\\w)\\1";
            var replacement = "$1";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            var result = rgx.replace$1(str, replacement, 5);
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceAtPositionAndLengthTest: function () {
            var expected = "Instantiating a New Type\n\nGenerally, there are two ways that an\n\ninstance of a class or structure can\n\nbe instantiated. ";

            var input = "Instantiating a New Type\nGenerally, there are two ways that an\ninstance of a class or structure can\nbe instantiated. ";
            var pattern = "^.*$";
            var replacement = "\n$&";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 2);

            var match = rgx.match(input);

            var result = rgx.replace$2(input, replacement, -1, ((((match.getIndex() + match.getLength()) | 0) + 1) | 0));
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceWithEvaluatorTest: function () {
            var expected = "Four Score And Seven Years Ago";
            var text = "four score and seven years ago";
            var rx = new System.Text.RegularExpressions.Regex.ctor("\\w+");
            var result = rx.replace$3(text, Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests.capText);
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceWithEvaluatorAndCountTest: function () {
            var expected = "decieve releive acheive belief fierce receive";
            var input = "deceive relieve achieve belief fierce receive";
            var pattern = "\\w*(ie|ei)\\w*";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 1);

            var result = rgx.replace$4(input, Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests.reverseLetter, ((Bridge.Int.div(input.split(String.fromCharCode(32)).length, 2)) | 0));
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceWithEvaluatorAndCountAtPostitionTest: function () {
            var expected = "deceive releive acheive belief fierce receive";
            var input = "deceive relieve achieve belief fierce receive";
            var pattern = "\\w*(ie|ei)\\w*";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 1);

            var result = rgx.replace$5(input, Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests.reverseLetter, ((((Bridge.Int.div(input.split(String.fromCharCode(32)).length, 2)) | 0) - 1) | 0), 7);
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceStaticTest1: function () {
            var expected = "This is text with far too much whitespace.";

            var input = "This is   text with   far  too   much   whitespace.";
            var pattern = "\\s+";
            var replacement = " ";
            var result = System.Text.RegularExpressions.Regex.replace(input, pattern, replacement);

            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceStaticTest2: function () {
            var pattern = "\\\\\\\\MyMachine(?:\\.\\w+)*\\\\([cde])\\$";
            var replacement = "$1:";
            var uncPaths = ["\\\\MyMachine.domain1.mycompany.com\\c$\\ThingsToDo.txt", "\\\\MyMachine\\c$\\ThingsToDo.txt", "\\\\MyMachine\\d$\\documents\\mydocument.docx"];
            var expected = ["c:\\ThingsToDo.txt", "c:\\ThingsToDo.txt", "d:\\documents\\mydocument.docx"];

            for (var i = 0; i < uncPaths.length; i = (i + 1) | 0) {
                var uncPath = uncPaths[i];
                var result = System.Text.RegularExpressions.Regex.replace(uncPath, pattern, replacement);
                Bridge.Test.Assert.areEqual$1(expected[i], result, "Result at #" + i);
            }
        },
        replaceStaticWithOptionsTest: function () {
            var pattern = "\\\\\\\\MyMachine(?:\\.\\w+)*\\\\([cde])\\$";
            var replacement = "$1:";
            var uncPaths = ["\\\\MyMachine.domain1.mycompany.com\\C$\\ThingsToDo.txt", "\\\\MyMachine\\c$\\ThingsToDo.txt", "\\\\MyMachine\\D$\\documents\\mydocument.docx"];
            var expected = ["C:\\ThingsToDo.txt", "c:\\ThingsToDo.txt", "D:\\documents\\mydocument.docx"];

            for (var i = 0; i < uncPaths.length; i = (i + 1) | 0) {
                var uncPath = uncPaths[i];
                var result = System.Text.RegularExpressions.Regex.replace$1(uncPath, pattern, replacement, 1);
                Bridge.Test.Assert.areEqual$1(expected[i], result, "Result at #" + i);
            }
        },
        replaceStaticWithOptionsAndTimeoutTest: function () {
            var pattern = "\\\\\\\\MyMachine(?:\\.\\w+)*\\\\([cde])\\$";
            var replacement = "$1:";
            var uncPaths = ["\\\\MyMachine.domain1.mycompany.com\\C$\\ThingsToDo.txt", "\\\\MyMachine\\c$\\ThingsToDo.txt", "\\\\MyMachine\\D$\\documents\\mydocument.docx"];
            var expected = ["C:\\ThingsToDo.txt", "c:\\ThingsToDo.txt", "D:\\documents\\mydocument.docx"];

            for (var i = 0; i < uncPaths.length; i = (i + 1) | 0) {
                var uncPath = uncPaths[i];
                var result = System.Text.RegularExpressions.Regex.replace$2(uncPath, pattern, replacement, 1, System.TimeSpan.fromSeconds(1));
                Bridge.Test.Assert.areEqual$1(expected[i], result, "Result at #" + i);
            }
        },
        replaceStaticWithEvaluatorTest: function () {
            var expected = "rettel lacitebahpla gnissim kcal esaeler tnahcnep kcals cillyrca yrdnual esaec";
            var words = "letter alphabetical missing lack release penchant slack acryllic laundry cease";

            var pattern = "\\w+";
            var evaluator = Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests.wordScrambler;

            var result = System.Text.RegularExpressions.Regex.replace$3(words, pattern, evaluator);
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceStaticWithEvaluatorAndOptionsTest: function () {
            var expected1 = "LETTER lacitebahpla gnissim kcal esaeler tnahcnep kcals cillyrca yrdnual esaec";
            var expected2 = "RETTEL lacitebahpla gnissim kcal esaeler tnahcnep kcals cillyrca yrdnual esaec";
            var words = "LETTER alphabetical missing lack release penchant slack acryllic laundry cease";

            var pattern = "[a-z]+";
            var evaluator = Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests.wordScrambler;

            var result1 = System.Text.RegularExpressions.Regex.replace$4(words, pattern, evaluator, 0);
            Bridge.Test.Assert.areEqual(expected1, result1);

            var result2 = System.Text.RegularExpressions.Regex.replace$4(words, pattern, evaluator, 1);
            Bridge.Test.Assert.areEqual(expected2, result2);
        },
        replaceStaticWithEvaluatorAndOptionsAndTimoutTest: function () {
            var expected = "RETTEL lacitebahpla gnissim kcal esaeler tnahcnep kcals cillyrca yrdnual esaec";
            var words = "LETTER alphabetical missing lack release penchant slack acryllic laundry cease";

            var pattern = "[a-z]+";
            var evaluator = Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests.wordScrambler;

            var result = System.Text.RegularExpressions.Regex.replace$5(words, pattern, evaluator, 1, System.TimeSpan.fromSeconds(1));
            Bridge.Test.Assert.areEqual(expected, result);
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests", {
        validateResult: function (expected, actual) {
            Bridge.Test.Assert.areEqual$1(expected.length, actual.length, "Length");
            for (var i = 0; i < actual.length; i = (i + 1) | 0) {
                Bridge.Test.Assert.areEqual$1(expected[i], actual[i], "Result at " + i);
            }
        },
        splitTest1: function () {
            var expected = ["plum", "", "pear"];

            var regex = new System.Text.RegularExpressions.Regex.ctor("-"); // Split on hyphens.
            var substrings = regex.split("plum--pear");

            this.validateResult(expected, substrings);
        },
        splitTest2: function () {
            var expected = ["", "ABCDE", "FGHIJKL", "MNOPQ", ""];

            var pattern = "\\d+";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var input = "123ABCDE456FGHIJKL789MNOPQ012";
            var substrings = rgx.split(input);

            this.validateResult(expected, substrings);
        },
        splitTest3: function () {
            var expected = ["plum", "-", "pear"];

            var regex = new System.Text.RegularExpressions.Regex.ctor("(-)"); // Split on hyphens.
            var substrings = regex.split("plum-pear");

            this.validateResult(expected, substrings);
        },
        splitTest4: function () {
            var expected = ["07", "/", "14", "/", "2007"];

            var input = "07/14/2007";
            var pattern = "(-)|(/)";
            var regex = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var substrings = regex.split(input);

            this.validateResult(expected, substrings);
        },
        splitTest5: function () {
            var expected = ["", "c", "h", "a", "r", "a", "c", "t", "e", "r", "s", ""];

            var input = "characters";
            var regex = new System.Text.RegularExpressions.Regex.ctor("");
            var substrings = regex.split(input);

            this.validateResult(expected, substrings);
        },
        splitWithCountTest1: function () {
            var expected = ["", "ABCDE", "FGHIJKL789MNOPQ012"];

            var pattern = "\\d+";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var input = "123ABCDE456FGHIJKL789MNOPQ012";
            var substrings = rgx.split$1(input, 3);

            this.validateResult(expected, substrings);
        },
        splitWithCountTest2: function () {
            var expected = ["apple", "-", "apricot", "-", "plum", "-", "pear-banana"];

            var pattern = "(-)";
            var input = "apple-apricot-plum-pear-banana";
            var regex = new System.Text.RegularExpressions.Regex.ctor(pattern); // Split on hyphens.
            var substrings = regex.split$1(input, 4);

            this.validateResult(expected, substrings);
        },
        splitWithCountTest3: function () {
            var expected = ["07", "/", "14/2007"];

            var input = "07/14/2007";
            var pattern = "(-)|(/)";
            var regex = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var substrings = regex.split$1(input, 2);

            this.validateResult(expected, substrings);
        },
        splitWithCountTest4: function () {
            var expected = ["", "c", "h", "a", "r", "a", "c", "t", "e", "rs"];

            var input = "characters";
            var regex = new System.Text.RegularExpressions.Regex.ctor("");
            var substrings = regex.split$1(input, input.length);

            this.validateResult(expected, substrings);
        },
        splitWithCountAndStartAtTest1: function () {
            var expected = ["", "ABCDE", "FGHIJ789KLMNO012PQRST"];

            var pattern = "\\d+";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var input = "123ABCDE456FGHIJ789KLMNO012PQRST";
            var m = rgx.match(input);
            if (m.getSuccess()) {
                var startAt = m.getIndex();
                var substrings = rgx.split$2(input, 3, startAt);

                this.validateResult(expected, substrings);
            }
        },
        splitWithCountAndStartAtTest2: function () {
            var expected = ["apple-apricot-plum", "-", "pear", "-", "pomegranate", "-", "pineapple-peach"];

            var pattern = "(-)";
            var input = "apple-apricot-plum-pear-pomegranate-pineapple-peach";

            var regex = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var substrings = regex.split$2(input, 4, 15); // Split on hyphens from 15th character on

            this.validateResult(expected, substrings);
        },
        splitWithCountAndStartAtTest3: function () {
            var expected = ["apple|apricot|plum", "|", "pear", "|", "pomegranate", "|", "pineapple|peach"];

            var pattern = "(-)|([|])"; // possible delimiters found in string
            var input = "apple|apricot|plum|pear|pomegranate|pineapple|peach";
            var regex = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var substrings = regex.split$2(input, 4, 15); // Split on delimiters from 15th character on

            this.validateResult(expected, substrings);
        },
        splitWithCountAndStartAtTest4: function () {
            var expected = ["ch", "a", "r", "a", "c", "t", "e", "r", "s", ""];

            var input = "characters";
            var regex = new System.Text.RegularExpressions.Regex.ctor("");
            var substrings = regex.split$2(input, input.length, System.String.indexOf(input, "a"));

            this.validateResult(expected, substrings);
        },
        splitStaticTest1: function () {
            var expected = ["plum", "", "pear"];

            var substrings = System.Text.RegularExpressions.Regex.split("plum--pear", "-");

            this.validateResult(expected, substrings);
        },
        splitStaticTest2: function () {
            var expected = ["", "ABCDE", "FGHIJKL", "MNOPQ", ""];

            var pattern = "\\d+";
            var input = "123ABCDE456FGHIJKL789MNOPQ012";
            var substrings = System.Text.RegularExpressions.Regex.split(input, pattern);

            this.validateResult(expected, substrings);
        },
        splitStaticTest3: function () {
            var expected = ["plum", "-", "pear"];

            var substrings = System.Text.RegularExpressions.Regex.split("plum-pear", "(-)");

            this.validateResult(expected, substrings);
        },
        splitStaticTest4: function () {
            var expected = ["07", "/", "14", "/", "2007"];

            var input = "07/14/2007";
            var pattern = "(-)|(/)";
            var substrings = System.Text.RegularExpressions.Regex.split(input, pattern);

            this.validateResult(expected, substrings);
        },
        splitStaticTest5: function () {
            var expected = ["", "c", "h", "a", "r", "a", "c", "t", "e", "r", "s", ""];

            var input = "characters";
            var substrings = System.Text.RegularExpressions.Regex.split(input, "");

            this.validateResult(expected, substrings);
        },
        splitStaticWithOptionsTest: function () {
            var expected = ["", "1234", "5678", "9012", ""];

            var pattern = "[a-z]+";
            var input = "Abc1234Def5678Ghi9012Jklm";
            var substrings = System.Text.RegularExpressions.Regex.split$1(input, pattern, 1);

            this.validateResult(expected, substrings);
        },
        splitStaticWithOptionsAndTimeout: function () {
            var expected = ["", "1234", "5678", "9012", ""];

            var pattern = "[a-z]+";
            var input = "Abc1234Def5678Ghi9012Jklm";
            var substrings = System.Text.RegularExpressions.Regex.split$2(input, pattern, 1, System.TimeSpan.fromMilliseconds(500));

            this.validateResult(expected, substrings);
        }
    });

    Bridge.define("Bridge.ClientTest.Text.StringBuilderTests", {
        statics: {
            stringBuilders: function () {
                // TEST constructors
                var sb = new System.Text.StringBuilder();
                var sb1 = new System.Text.StringBuilder("", 128);
                Bridge.Test.Assert.areEqual$1("", sb.toString(), "StringBuilder() .ctor");
                Bridge.Test.Assert.areEqual$1(sb1.toString(), sb.toString(), "StringBuilder(capacity) .ctor");

                sb = new System.Text.StringBuilder("foo");
                sb1 = new System.Text.StringBuilder("foo", 2);
                Bridge.Test.Assert.areEqual$1("foo", sb.toString(), "StringBuilder(string) .ctor");
                Bridge.Test.Assert.areEqual$1(sb1.toString(), sb.toString(), "StringBuilder(string, capacity) .ctor");

                sb = new System.Text.StringBuilder("foo bar", 4, 3);
                Bridge.Test.Assert.areEqual$1("bar", sb.toString(), "StringBuilder(string) .ctor");

                // TEST properties

                // Capacity
                sb = new System.Text.StringBuilder("", 128);
                Bridge.Test.Assert.areEqual$1(128, sb.getCapacity(), ".Capacity");
                sb = new System.Text.StringBuilder("foo", 2);
                Bridge.Test.Assert.areEqual$1(16, sb.getCapacity(), ".Capacity");
                sb.setCapacity(10);
                Bridge.Test.Assert.areEqual$1(10, sb.getCapacity(), ".Capacity");

                // Length
                Bridge.Test.Assert.areEqual$1(("foo").length, sb.getLength(), ".Length");

                // TEST methods

                // Clear
                sb.clear();
                Bridge.Test.Assert.areEqual$1(0, sb.getLength(), ".Clear()");
                Bridge.Test.Assert.areEqual$1("", sb.toString(), ".Clear()");

                // Append
                sb.append("foo");
                sb.append("foo bar", 3, 4);
                sb.append(true);
                sb.append(String.fromCharCode(61));
                sb.append(123);
                Bridge.Test.Assert.areEqual$1("foo bartrue=123", sb.toString(), ".Append()");

                // AppendLine
                sb.appendLine();
                Bridge.Test.Assert.areEqual$1("foo bartrue=123\r\n", sb.toString(), ".AppendLine()");
                sb.appendLine("foo bar");
                Bridge.Test.Assert.areEqual$1("foo bartrue=123\r\nfoo bar\r\n", sb.toString(), ".AppendLine(string)");

                // AppendFormat
                sb.appendFormat("({0}, {1})", "foo", false);
                Bridge.Test.Assert.areEqual$1("foo bartrue=123\r\nfoo bar\r\n(foo, false)", sb.toString(), ".AppendFormat(format, args)");

                // Insert
                sb.insert(0, 56.7);
                Bridge.Test.Assert.areEqual$1("56.7foo bartrue=123\r\nfoo bar\r\n(foo, false)", sb.toString(), ".Insert()");

                // Remove
                sb.remove(4, 7);
                Bridge.Test.Assert.areEqual$1("56.7true=123\r\nfoo bar\r\n(foo, false)", sb.toString(), ".Remove(start, length)");

                // Replace
                sb.replace("foo bar", "bar foo");
                Bridge.Test.Assert.areEqual$1("56.7true=123\r\nbar foo\r\n(foo, false)", sb.toString(), ".Replace(string, string)");
                sb.replace(String.fromCharCode(13), String.fromCharCode(10));
                Bridge.Test.Assert.areEqual$1("56.7true=123\n\nbar foo\n\n(foo, false)", sb.toString(), ".Replace(char, char)");
                sb.replace(String.fromCharCode(102), String.fromCharCode(70), 23, 6);
                Bridge.Test.Assert.areEqual$1("56.7true=123\n\nbar foo\n\n(Foo, false)", sb.toString(), ".Replace(char, char, start, length)");
                sb.replace("Foo", "foo", 23, 6);
                Bridge.Test.Assert.areEqual$1("56.7true=123\n\nbar foo\n\n(foo, false)", sb.toString(), ".Replace(string, string, start, length)");
            }
        },
        typePropertiesAreCorrect: function () {
            var sb = new System.Text.StringBuilder();
            Bridge.Test.Assert.areEqual("System.Text.StringBuilder", Bridge.Reflection.getTypeFullName(System.Text.StringBuilder));
            Bridge.Test.Assert.true(Bridge.hasValue(sb));
        },
        defaultConstructorWorks: function () {
            var sb = new System.Text.StringBuilder();
            Bridge.Test.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        constructorWithCapacityWorks: function () {
            var sb = new System.Text.StringBuilder("", 55);
            Bridge.Test.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        initialTextConstructorWorks: function () {
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.Assert.areEqual$1("some text", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(9, sb.getLength(), "Length");
        },
        initialTextConstructorWithCapacityWorks: function () {
            var sb = new System.Text.StringBuilder("some text", 55);
            Bridge.Test.Assert.areEqual$1("some text", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(9, sb.getLength(), "Length");
        },
        substringConstructorWorks: function () {
            var sb = new System.Text.StringBuilder("some text", 5, 3);
            Bridge.Test.Assert.areEqual$1("tex", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(3, sb.getLength(), "Length");
        },
        appendBoolWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(true), sb));
            Bridge.Test.Assert.areEqual$1("|true", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(5, sb.getLength(), "Length");
        },
        appendCharWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(String.fromCharCode(99)), sb));
            Bridge.Test.Assert.areEqual$1("|c", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(2, sb.getLength(), "Length");
        },
        appendIntWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(123), sb));
            Bridge.Test.Assert.areEqual$1("|123", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(4, sb.getLength(), "Length");
        },
        appendDoubleWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(123.0), sb));
            Bridge.Test.Assert.areEqual$1("|123", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(4, sb.getLength(), "Length");
        },
        appendObjectWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(new Bridge.ClientTest.Text.StringBuilderTests.SomeClass()), sb));
            Bridge.Test.Assert.areEqual$1("|some text", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(10, sb.getLength(), "Length");
        },
        appendStringWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append("some text"), sb));
            Bridge.Test.Assert.areEqual$1("|some text", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(10, sb.getLength(), "Length");
        },
        appendLineWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.appendLine(), sb));
            Bridge.Test.Assert.areEqual$1("|\r\n", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(3, sb.getLength(), "Length");
        },
        appendLineStringWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.appendLine("some text"), sb));
            Bridge.Test.Assert.areEqual$1("|some text\r\n", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(12, sb.getLength(), "Length");
        },
        clearWorks: function () {
            var sb = new System.Text.StringBuilder("some text");
            sb.clear();
            Bridge.Test.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        toStringWorks: function () {
            // Yes, this is tested by every other test as well. Included for completeness only
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.Assert.areEqual("some text", sb.toString());
        },
        lengthPropertyWorks: function () {
            // Yes, this is tested by every other test as well. Included for completeness only
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.Assert.areEqual(9, sb.getLength());
        }
    });

    Bridge.define("Bridge.ClientTest.Text.StringBuilderTests.SomeClass", {
        toString: function () {
            return "some text";
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.AsyncTests", {
        asyncVoid: function () {
            var done = Bridge.Test.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    state = 2;
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            };

            someMethod();

            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            task.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");
                done();
            });

            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setResult(0);
        },
        asyncTask: function () {
            var done = Bridge.Test.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                            $task1 = task;
                                            $step = 1;
                                            $task1.continueWith($asyncBody);
                                            return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            };

            var asyncTask = someMethod();

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            asyncTask.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, asyncTask.status, "asyncTask should run to completion");
                Bridge.Test.Assert.true$1(asyncTask.exception == null, "asyncTask should not throw an exception");
                Bridge.Test.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");

                done();
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setResult(0);
        },
        asyncTaskBodyThrowsException: function () {
            var done = Bridge.Test.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex = new System.Exception("Some text");

            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                            $task1 = task;
                                            $step = 1;
                                            $task1.continueWith($asyncBody);
                                            return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                            throw ex;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            };

            var asyncTask = someMethod();

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            asyncTask.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, asyncTask.status, "asyncTask should fault");
                Bridge.Test.Assert.true$1(asyncTask.exception != null, "asyncTask should have an exception");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(asyncTask.exception.innerExceptions.get(0), ex), "asyncTask should throw the correct exception");
                Bridge.Test.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");

                done();
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setResult(0);
        },
        awaitTaskThatFaults: function () {
            var done = Bridge.Test.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex = new System.Exception("Some text");

            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                            $task1 = task;
                                            $step = 1;
                                            $task1.continueWith($asyncBody);
                                            return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            };

            var asyncTask = someMethod();

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            asyncTask.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, asyncTask.status, "asyncTask should fault");
                Bridge.Test.Assert.true$1(asyncTask.exception != null, "asyncTask should have an exception");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(asyncTask.exception.innerExceptions.get(0), ex), "asyncTask should throw the correct exception");
                Bridge.Test.Assert.areEqual$1(1, state, "Async method should not have reach anything after the faulting await");

                done();
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setException(ex);
        },
        aggregateExceptionsAreUnwrappedWhenAwaitingTask: function () {
            var done = Bridge.Test.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var ex = new System.Exception("Some text");
            tcs.setException(ex);

            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ex2, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {

                                    case 1: {
                                        $task1 = task;
                                            $step = 2;
                                            $task1.continueWith($asyncBody);
                                            return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        Bridge.Test.Assert.fail$1("Await should have thrown");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex, ex2), "The exception should be correct");
                                            $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        state = 1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ){
                                ex2 = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            };

            someMethod();

            task.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(1, state, "Should have reached the termination state");

                done();
            });
        },
        asyncTaskThatReturnsValue: function () {
            var done = Bridge.Test.Assert.async();

            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                            $task1 = task;
                                            $step = 1;
                                            $task1.continueWith($asyncBody);
                                            return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                            $tcs.setResult(42);
                                            return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            };

            var asyncTask = someMethod();

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");

            asyncTask.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, asyncTask.status, "asyncTask should run to completion");
                Bridge.Test.Assert.true$1(asyncTask.exception == null, "asyncTask should not throw an exception");
                Bridge.Test.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");
                Bridge.Test.Assert.areEqual$1(42, asyncTask.getResult(), "Result should be correct");

                done();
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");

            tcs.setResult(0);
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.CancellationTokenTests", {
        typePropertiesForCancellationTokenSourceAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.CancellationTokenSource", Bridge.Reflection.getTypeFullName(System.Threading.CancellationTokenSource), "FullName");
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.Assert.true(Bridge.is(cts, System.Threading.CancellationTokenSource));
            Bridge.Test.Assert.true(Bridge.is(cts, System.IDisposable));
        },
        typePropertiesForCancellationTokenAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.CancellationToken", Bridge.Reflection.getTypeFullName(System.Threading.CancellationToken), "FullName");

            Bridge.Test.Assert.true(Bridge.hasValue(new System.Threading.CancellationToken()));
            Bridge.Test.Assert.true(Bridge.hasValue(System.Threading.CancellationToken.none));
            Bridge.Test.Assert.true(Bridge.hasValue(new System.Threading.CancellationTokenSource().token));
        },
        typePropertiesForCancellationTokenRegistrationAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.CancellationTokenRegistration", Bridge.Reflection.getTypeFullName(System.Threading.CancellationTokenRegistration), "FullName");

            var ctr = new System.Threading.CancellationTokenRegistration();
            Bridge.Test.Assert.true$1(Bridge.is(ctr, System.Threading.CancellationTokenRegistration), "CancellationTokenRegistration");
            Bridge.Test.Assert.true$1(Bridge.is(ctr, System.IDisposable), "IDisposable");
            Bridge.Test.Assert.true$1(Bridge.is(ctr, System.IEquatable$1(System.Threading.CancellationTokenRegistration)), "IEquatable<CancellationTokenRegistration>");
        },
        cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe: function () {
            var ct = new System.Threading.CancellationToken();
            Bridge.Test.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe: function () {
            var ct = new System.Threading.CancellationToken(false);
            Bridge.Test.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled: function () {
            var ct = new System.Threading.CancellationToken(true);
            Bridge.Test.Assert.true$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.true$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            Bridge.Test.Assert.throws(function () {
                ct.throwIfCancellationRequested();
            });
        },
        cancellationTokenNoneIsNotCancelledAndCannotBe: function () {
            Bridge.Test.Assert.false$1(System.Threading.CancellationToken.none.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(System.Threading.CancellationToken.none.getIsCancellationRequested(), "IsCancellationRequested");
            System.Threading.CancellationToken.none.throwIfCancellationRequested();
        },
        creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function () {
            var ct = Bridge.getDefaultValue(System.Threading.CancellationToken);
            Bridge.Test.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function () {
            var ct = Bridge.createInstance(System.Threading.CancellationToken);
            Bridge.Test.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource: function () {
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.Assert.true$1(cts.token.getCanBeCanceled(), "cts.Token");
        },
        isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod: function () {
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.Assert.false$1(cts.isCancellationRequested, "cts.IsCancellationRequested false");
            Bridge.Test.Assert.false$1(cts.token.getIsCancellationRequested(), "cts.Token.IsCancellationRequested false");
            cts.cancel();
            Bridge.Test.Assert.true$1(cts.isCancellationRequested, "cts.IsCancellationRequested true");
            Bridge.Test.Assert.true$1(cts.token.getIsCancellationRequested(), "cts.Token.IsCancellationRequested true");
        },
        throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.token.throwIfCancellationRequested();
            cts.cancel();
            Bridge.Test.Assert.throws$5(function () {
                cts.token.throwIfCancellationRequested();
            }, "cts.Token.ThrowIfCancellationRequested");
        },
        cancelWithoutArgumentsWorks: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new (System.Collections.Generic.List$1(System.Int32))();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });

            try {
                cts.cancel();
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.Assert.areEqual$1(2, ex.innerExceptions.getCount(), "count");
                    Bridge.Test.Assert.true$1(ex.innerExceptions.contains(ex1), "ex1");
                    Bridge.Test.Assert.true$1(ex.innerExceptions.contains(ex2), "ex2");
                } else {
                    throw $e1;
                }
            }

            Bridge.Test.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1) && calledHandlers.contains(2) && calledHandlers.contains(3) && calledHandlers.contains(4));
        },
        cancelWorksWhenThrowOnFirstExceptionIsFalse: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new (System.Collections.Generic.List$1(System.Int32))();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });

            try {
                cts.cancel(false);
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.Assert.areEqual$1(2, ex.innerExceptions.getCount(), "ex count");
                    Bridge.Test.Assert.true$1(ex.innerExceptions.contains(ex1), "ex1");
                    Bridge.Test.Assert.true$1(ex.innerExceptions.contains(ex2), "ex2");
                } else {
                    throw $e1;
                }
            }

            Bridge.Test.Assert.areEqual$1(5, calledHandlers.getCount(), "called handler count");
            Bridge.Test.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1) && calledHandlers.contains(2) && calledHandlers.contains(3) && calledHandlers.contains(4));
        },
        cancelWorksWhenThrowOnFirstExceptionIsTrue: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new (System.Collections.Generic.List$1(System.Int32))();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });

            try {
                cts.cancel(true);
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex, ex1), "ex");
            }

            Bridge.Test.Assert.areEqual$1(2, calledHandlers.getCount(), "called handler count");
            Bridge.Test.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1));
        },
        registerOnACancelledSourceWithoutContextInvokesTheCallback: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            var state = 0;
            cts.token.register(function () {
                state = 1;
            });
            Bridge.Test.Assert.areEqual(1, state);
        },
        registerWithArgumentOnACancelledSourceInvokesTheCallback: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var context = {  };
            cts.cancel();
            var state = 0;
            cts.token.register(function (c) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                state = 1;
            }, context);
            Bridge.Test.Assert.areEqual(1, state);
        },
        registerOnACancelledSourceWithoutContextRethrowsAThrownException: function () {
            var ex1 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            try {
                cts.token.register(function () {
                    throw ex1;
                });
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex, ex1), "Exception");
            }
        },
        registerOnACancelledSourceWithContextRethrowsAThrownException: function () {
            var ex1 = new System.Exception();
            var context = {  };
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            try {
                cts.token.register(function (c) {
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                    throw ex1;
                }, context);
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex, ex1), "Exception");
            }
        },
        registerOverloadsWithUseSynchronizationContextWork: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var context = {  };
            cts.cancel();
            var numCalled = 0;
            cts.token.register(function (c) {
                Bridge.identity(numCalled, (numCalled = (numCalled + 1) | 0));
            }, true);
            cts.token.register(function (c) {
                Bridge.identity(numCalled, (numCalled = (numCalled + 1) | 0));
            }, false);
            cts.token.register(function (c) {
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                    numCalled = (numCalled + 1) | 0;
                }, context);
            cts.token.register(function (c) {
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                    numCalled = (numCalled + 1) | 0;
                }, context);
            Bridge.Test.Assert.areEqual(4, numCalled);
        },
        cancellationTokenSourceCanBeDisposed: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.dispose();

            Bridge.Test.Assert.true(true);
        },
        registerOnCancellationTokenCreatedNonCancelledDoesNothing: function () {
            var ct = new System.Threading.CancellationToken(false);

            var state = 0;
            ct.register(function () {
                state = 1;
            });

            Bridge.Test.Assert.areEqual(0, state);
        },
        registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately: function () {
            var ct = new System.Threading.CancellationToken(true);

            var state = 0;
            var context = {  };
            ct.register(function () {
                state = 1;
            });
            Bridge.Test.Assert.areEqual$1(1, state, "state 1");
            ct.register(function (c) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                state = 2;
            }, context);
            Bridge.Test.Assert.areEqual$1(2, state, "state 2");
        },
        duplicateCancelDoesNotCauseCallbacksToBeCalledTwice: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var calls = 0;
            cts.token.register(function () {
                calls = 1;
            });
            cts.cancel();
            cts.cancel();

            Bridge.Test.Assert.areEqual(1, calls);
        },
        registrationsCanBeCompared: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var ctr1 = cts.token.register($_.Bridge.ClientTest.Threading.CancellationTokenTests.f1);
            var ctr2 = cts.token.register($_.Bridge.ClientTest.Threading.CancellationTokenTests.f1);

            Bridge.Test.Assert.true$1(ctr1.equalsT(ctr1), "#1");
            Bridge.Test.Assert.false$1(ctr1.equalsT(ctr2), "#2");
            Bridge.Test.Assert.true$1(Bridge.equals(ctr1, ctr1), "#3");
            Bridge.Test.Assert.false$1(Bridge.equals(ctr1, ctr2), "#4");

            Bridge.Test.Assert.true$1(Bridge.equals(ctr1, ctr1), "#5");
            Bridge.Test.Assert.false$1(Bridge.equals(ctr1, ctr2), "#6");
            Bridge.Test.Assert.false$1(!Bridge.equals(ctr1, ctr1), "#7");
            Bridge.Test.Assert.true$1(!Bridge.equals(ctr1, ctr2), "#8");
        },
        registrationsCanBeUnregistered: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new (System.Collections.Generic.List$1(System.Int32))();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            var reg = cts.token.register(function () {
                calledHandlers.add(1);
            });
            Bridge.Test.Assert.true(Bridge.hasValue(reg));

            cts.token.register(function () {
                calledHandlers.add(2);
            });

            reg.dispose();

            cts.cancel();

            Bridge.Test.Assert.areEqual(2, calledHandlers.getCount());
            Bridge.Test.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(2));
        },
        creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm: function () {
            var ct = Bridge.getDefaultValue(System.Threading.CancellationTokenRegistration);
            Bridge.Test.Assert.notNull$1(ct, "not null");
            Bridge.Test.Assert.true$1(Bridge.hasValue(ct), "is CancellationTokenRegistration");
            ct.dispose();
        },
        linkedSourceWithTwoTokensWorks: function () {
            {
                var cts1 = new System.Threading.CancellationTokenSource();
                var cts2 = new System.Threading.CancellationTokenSource();
                var linked = System.Threading.CancellationTokenSource.createLinked(cts1.token, cts2.token);

                Bridge.Test.Assert.false$1(linked.isCancellationRequested, "#1");
                cts1.cancel();
                Bridge.Test.Assert.true$1(linked.isCancellationRequested, "#2");
            }

            {
                var cts11 = new System.Threading.CancellationTokenSource();
                var cts21 = new System.Threading.CancellationTokenSource();
                var linked1 = System.Threading.CancellationTokenSource.createLinked(cts11.token, cts21.token);

                Bridge.Test.Assert.false$1(linked1.isCancellationRequested, "#1");
                cts21.cancel();
                Bridge.Test.Assert.true$1(linked1.isCancellationRequested, "#2");
            }
        },
        linkedSourceWithThreeTokensWorks: function () {
            {
                var cts1 = new System.Threading.CancellationTokenSource();
                var cts2 = new System.Threading.CancellationTokenSource();
                var cts3 = new System.Threading.CancellationTokenSource();
                var linked = System.Threading.CancellationTokenSource.createLinked(cts1.token, cts2.token, cts3.token);

                Bridge.Test.Assert.false$1(linked.isCancellationRequested, "#1 1");
                cts1.cancel();
                Bridge.Test.Assert.true$1(linked.isCancellationRequested, "#1 2");
            }

            {
                var cts11 = new System.Threading.CancellationTokenSource();
                var cts21 = new System.Threading.CancellationTokenSource();
                var cts31 = new System.Threading.CancellationTokenSource();
                var linked1 = System.Threading.CancellationTokenSource.createLinked(cts11.token, cts21.token, cts31.token);

                Bridge.Test.Assert.false$1(linked1.isCancellationRequested, "#2 1");
                cts21.cancel();
                Bridge.Test.Assert.true$1(linked1.isCancellationRequested, "#2 2");
            }

            {
                var cts12 = new System.Threading.CancellationTokenSource();
                var cts22 = new System.Threading.CancellationTokenSource();
                var cts32 = new System.Threading.CancellationTokenSource();
                var linked2 = System.Threading.CancellationTokenSource.createLinked(cts12.token, cts22.token, cts32.token);

                Bridge.Test.Assert.false$1(linked2.isCancellationRequested, "#3 1");
                cts32.cancel();
                Bridge.Test.Assert.true$1(linked2.isCancellationRequested, "#3 2");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Threading.CancellationTokenTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Threading.CancellationTokenTests, {
        f1: function () {
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.PromiseTests", {
        config: {
            properties: {
                PromiseProgress: 0
            }
        },
        createPromise: function () {
            return new Bridge.ClientTest.Threading.PromiseTests.SimplePromise();
        },
        taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise);

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");

            var continuationRun = false;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });

            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.resolve([42, "result 123", 101]);

            task1.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.Assert.areDeepEqual$1([42, "result 123", 101], task.getResult(), "The result should be correct");

                completeAsync();
            });
        },
        taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var trh = $_.Bridge.ClientTest.Threading.PromiseTests.f1;

            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise, trh);

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");

            var continuationRun = false;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });

            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.resolve([42, "result 123", 101]);

            task1.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.Assert.areDeepEqual(Bridge.merge(new Bridge.ClientTest.Threading.PromiseTests.TaskResult(), {
                    setI: 42,
                    setS: "result 123",
                    setJ: 101
                } ), task.getResult());

                completeAsync();
            });
        },
        taskFromPromiseWorksWhenPromiseFails: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise);

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");

            var continuationRun = false;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });

            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.reject([42, "result 123", 101]);

            task1.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should have faulted after the promise was rejected.");
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was rejected.");
                Bridge.Test.Assert.true$1(Bridge.is(task.exception, System.AggregateException), "Exception should be an AggregateException");
                Bridge.Test.Assert.areEqual$1(1, task.exception.innerExceptions.getCount(), "Exception should have one inner exception");
                Bridge.Test.Assert.true$1(Bridge.is(task.exception.innerExceptions.get(0), Bridge.PromiseException), "Inner exception should be a PromiseException");
                Bridge.Test.Assert.areDeepEqual$1([42, "result 123", 101], Bridge.cast(task.exception.innerExceptions.get(0), Bridge.PromiseException).arguments, "The PromiseException arguments should be correct");

                completeAsync();
            });
        },
        completingPromiseCanBeAwaited: function () {
            var $step = 0,
                $task1, 
                $taskResult1, 
                $jumpFromFinally, 
                completeAsync, 
                promise, 
                result, 
                task, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1], $step);
                        switch ($step) {
                            case 0: {
                                completeAsync = Bridge.Test.Assert.async();

                                    promise = this.createPromise();
                                    result = null;

                                    task = System.Threading.Tasks.Task.run(function () {
                                        Bridge.Test.Assert.true$1(result == null, "Await should not finish too early (a).");
                                        promise.resolve([42, "result 123", 101]);
                                    });

                                    Bridge.Test.Assert.true$1(result == null, "Await should not finish too early (b).");

                                    $task1 = System.Threading.Tasks.Task.fromPromise(promise);
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                            }
                            case 1: {
                                $taskResult1 = $task1.getAwaitedResult();
                                result = $taskResult1;

                                    Bridge.Test.Assert.areEqual$1([42, "result 123", 101], result, "The result should be correct");
                                    completeAsync();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);

            $asyncBody();
        },
        failingPromiseCanBeAwaited: function () {
            var $step = 0,
                $task1, 
                $taskResult1, 
                $jumpFromFinally, 
                $returnValue, 
                completeAsync, 
                promise, 
                continuationRun, 
                task, 
                ex, 
                ex1, 
                $async_e, 
                $async_e1, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5], $step);
                            switch ($step) {
                                case 0: {
                                    completeAsync = Bridge.Test.Assert.async();

                                        promise = this.createPromise();

                                        continuationRun = false;

                                        task = System.Threading.Tasks.Task.run(function () {
                                            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early (a).");
                                            promise.reject([42, "result 123", 101]);
                                        });
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early (b).");
                                        $task1 = System.Threading.Tasks.Task.fromPromise(promise);
                                        $step = 2;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                }
                                case 2: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    
                                        Bridge.Test.Assert.fail$1("Await should throw");
                                    $step = 5;
                                    continue;
                                }
                                case 3: {
                                    continuationRun = true;
                                        Bridge.Test.Assert.areEqual$1([42, "result 123", 101], ex.arguments, "The PromiseException arguments should be correct");
                                        $async_e = null;
                                    $step = 5;
                                    continue;
                                }
                                case 4: {
                                    Bridge.Test.Assert.fail$1(System.String.concat("Thrown exception should have been an AggregateException, was ", Bridge.Reflection.getTypeFullName(Bridge.getType(ex1))));
                                        $async_e = null;
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    
                                        Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was rejected.");

                                        completeAsync();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        if ( $step >= 1 && $step <= 2 ){
                            if (Bridge.is($async_e, Bridge.PromiseException)) {
                                ex = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            } else {
                                ex1 = $async_e;
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                        }
                        throw $async_e;
                    }
                }, arguments);

            $asyncBody();
        },
        handleProgress: function (args) {
            if (args === void 0) { args = []; }
            var i = System.Nullable.getValue(Bridge.cast(args[0], System.Int32));
            this.setPromiseProgress(i);
        },
        taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var promise = this.createPromise();

            this.setPromiseProgress(-1);
            var task = System.Threading.Tasks.Task.fromPromise(promise, null, null, Bridge.fn.bind(this, this.handleProgress));

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");

            var continuationRun = false;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });

            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");

            promise.progress([20]);
            Bridge.Test.Assert.areEqual$1(20, this.getPromiseProgress(), "Progress 20");

            // Resolve will set Progress to 100%
            promise.resolve([42, "result 123", 101]);
            Bridge.Test.Assert.areEqual$1(100, this.getPromiseProgress(), "Progress 100");

            task1.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.Assert.areDeepEqual$1([42, "result 123", 101], task.getResult(), "The result should be correct");

                completeAsync();
            });
        }
    });

    Bridge.ns("Bridge.ClientTest.Threading.PromiseTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Threading.PromiseTests, {
        f1: function (i, s, j) {
            return Bridge.merge(new Bridge.ClientTest.Threading.PromiseTests.TaskResult(), {
                setI: i,
                setS: s,
                setJ: j
            } );
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.PromiseTests.SimplePromise", {
        inherits: [Bridge.IPromise],
        doThen: null,
        config: {
            properties: {
                Thens: null
            },
            alias: [
            "then", "Bridge$IPromise$then"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.setThens(new (System.Collections.Generic.List$1(Bridge.ClientTest.Threading.PromiseTests.SimplePromise.A))());

            this.doThen = Bridge.fn.bind(this, $_.Bridge.ClientTest.Threading.PromiseTests.SimplePromise.f1);
        },
        then: function (fulfilledHandler, errorHandler, progressHandler) {
            if (errorHandler === void 0) { errorHandler = null; }
            if (progressHandler === void 0) { progressHandler = null; }
            this.doThen(fulfilledHandler, errorHandler, progressHandler);
        },
        resolve: function (args) {
            if (args === void 0) { args = []; }
            this.complete(Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which.Resolve, args);
        },
        reject: function (args) {
            if (args === void 0) { args = []; }
            this.complete(Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which.Reject, args);
        },
        progress: function (args) {
            if (args === void 0) { args = []; }
            var i = 0;
            while (i < this.getThens().getCount()) {
                var aThen = this.getThens().getItem(i);

                if (!Bridge.staticEquals(aThen.getProgress(), null)) {
                    aThen.getProgress()(args);
                }

                i = (i + 1) | 0;
            }
        },
        complete: function (which, args) {
            if (args === void 0) { args = []; }
            if (which === Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which.Resolve) {
                this.doThen = Bridge.fn.bind(this, function (f, e, p) {
                    this.resolve(args);
                });
            } else {
                this.doThen = Bridge.fn.bind(this, function (f, e, p) {
                    this.reject(args);
                });
            }

            var i = 0;
            while (i < this.getThens().getCount()) {
                var aThen = this.getThens().getItem(i);

                if (which === Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which.Resolve) {
                    if (!Bridge.staticEquals(aThen.getFilled(), null)) {
                        aThen.getFilled().apply(null, args);
                    }
                } else {
                    if (!Bridge.staticEquals(aThen.getError(), null)) {
                        aThen.getError().apply(null, args);
                    }
                }

                if (!Bridge.staticEquals(aThen.getProgress(), null)) {
                    aThen.getProgress()([100]);
                }

                i = (i + 1) | 0;
            }
            this.getThens().clear();
        }
    });

    Bridge.ns("Bridge.ClientTest.Threading.PromiseTests.SimplePromise", $_);

    Bridge.apply($_.Bridge.ClientTest.Threading.PromiseTests.SimplePromise, {
        f1: function (f, e, p) {
            this.getThens().add(Bridge.merge(new Bridge.ClientTest.Threading.PromiseTests.SimplePromise.A(), {
                setFilled: f,
                setError: e,
                setProgress: p
            } ));
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.PromiseTests.SimplePromise.A", {
        config: {
            properties: {
                Filled: null,
                Error: null,
                Progress: null
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which", {
        $kind: "enum",
        statics: {
            Resolve: 0,
            Reject: 1
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.PromiseTests.TaskResult", {
        config: {
            properties: {
                I: 0,
                S: null,
                J: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.TaskTests", {
        makeEnumerable: function (T, args) {
            var $t;
            if (args === void 0) { args = []; }
            var $yield = [];
            $t = Bridge.getEnumerator(args);
            while ($t.moveNext()) {
                var a = $t.getCurrent();
                $yield.push(a);
            }
            return System.Array.toEnumerable($yield);
        },
        taskCompletionSourceTypePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.Tasks.TaskCompletionSource", Bridge.Reflection.getTypeFullName(System.Threading.Tasks.TaskCompletionSource), "FullName should be correct");
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.Assert.true(Bridge.hasValue(tcs));
        },
        taskTypePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.Tasks.Task", Bridge.Reflection.getTypeFullName(System.Threading.Tasks.Task), "FullName for non-generic task should be correct");
            Bridge.Test.Assert.areEqual$1("System.Threading.Tasks.Task", Bridge.Reflection.getTypeFullName(System.Threading.Tasks.Task), "FullName for generic task should be correct");

            var task = new System.Threading.Tasks.TaskCompletionSource().task;
            Bridge.Test.Assert.true(Bridge.hasValue(task));
            Bridge.Test.Assert.true(Bridge.is(task, System.Threading.Tasks.Task));
            Bridge.Test.Assert.true(Bridge.is(task, System.IDisposable));

            task.dispose(); // Should not throw
        },
        taskCompletionSourceWorksWhenSettingResult: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();

            var task = tcs.task;

            task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed when in the callback");
                Bridge.Test.Assert.areEqual$1(1, task.getResult(), "Result should be 1 after the callback");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "Exception should be null in the callback");

                callbackRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before SetResult is called");
            Bridge.Test.Assert.false$1(callbackRun, "Callback should not be run before SetResult() is called");

            tcs.setResult(1);

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed directly after SetResult() is called");
            Bridge.Test.Assert.areEqual$1(1, task.getResult(), "Result should be set immediately");
            Bridge.Test.Assert.areEqual$1(null, task.exception, "Exception should be null after SetResult()");

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.true$1(callbackRun, "Callback should be run");

                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenSettingASingleException: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var ex = new System.Exception("Some text");

            task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted in the callback");
                Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "The exception should be correct");
                Bridge.Test.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");

                callbackRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetException() call");
            Bridge.Test.Assert.false$1(callbackRun, "Callback should not be run before SetException() is called");

            tcs.setException(ex);

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "The task should be faulted immediately after the SetException() call");
            Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "The exception should be correct immediately after SetException()");
            Bridge.Test.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetException() should throw");

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.true$1(callbackRun, "Callback should be run");

                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenSettingTwoExceptions: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex1 = new System.Exception("Some text");
            var ex2 = new System.Exception("Some other text");

            task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted in the callback");
                Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex1), "InnerExceptions[0] should be correct in callback");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(1), ex2), "InnerExceptions[1] should be correct in callback");
                Bridge.Test.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");

                callbackRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetException() call");
            Bridge.Test.Assert.false$1(callbackRun, "Callback should not be run before SetException() is called");

            tcs.setException(this.makeEnumerable(System.Exception, [ex1, ex2]));

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "The task should be faulted immediately after the SetException() call");
            Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex1), "InnerExceptions[0] should be correct immediately after SetException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(1), ex2), "InnerExceptions[1] should be correct immediately after SetException");
            Bridge.Test.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetException() should throw");

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.true$1(callbackRun, "Callback should be run");

                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenCancelling: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "Task should be cancelled in the callback");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null in the callback");
                Bridge.Test.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");

                callbackRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetCanceled() call");
            Bridge.Test.Assert.false$1(callbackRun, "Callback should not be run before SetCanceled() is called");

            tcs.setCanceled();

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "The task should be cancelled immediately after the SetCanceled() call");
            Bridge.Test.Assert.true$1(task.exception == null, "The exception should be correct immediately after SetCanceled()");
            Bridge.Test.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetCanceled() should throw");

            task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(callbackRun, "The callback should be run");

                completeAsync();
            });
        },
        cancelledTaskThrowsTaskCanceledExceptionWhenAwaited: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();

            var caughtException = null;

            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $returnValue, 
                    ex, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {

                                    case 1: {
                                        $task1 = tcs.task;
                                            $step = 2;
                                            $task1.continueWith($asyncBody, true);
                                            return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        
                                            Bridge.Test.Assert.fail$1("Await should throw");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        caughtException = ex;
                                            $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ){
                                if (Bridge.is($async_e, System.Threading.Tasks.TaskCanceledException)) {
                                    ex = $async_e;
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                            }
                            throw $async_e;
                        }
                    }, arguments);

                $asyncBody();
            };

            someMethod();

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.notNull$1(caughtException, "Should catch");
                Bridge.Test.Assert.true(Bridge.referenceEquals(tcs.task, caughtException.task));

                completeAsync();
            });
        },
        cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();

            try {
                var r = tcs.task.getResult();

                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.Assert.areEqual$1(1, ex.innerExceptions.getCount(), "InnerExceptions.Count");
                    var tce = Bridge.as(ex.innerExceptions.get(0), System.Threading.Tasks.TaskCanceledException);
                    Bridge.Test.Assert.notNull$1(tce, "is TaskCanceledException");
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals(tcs.task, tce.task), "Task");
                } else {
                    throw $e1;
                }
            }
        },
        setResultFailsWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setResult(1);
            Bridge.Test.Assert.throws(function () {
                tcs.setResult(1);
            });
        },
        setCanceledFailsWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();
            Bridge.Test.Assert.throws(function () {
                tcs.setCanceled();
            });
        },
        setExceptionFailsWhenTheTaskIsCompleted: function () {
            var ex = new System.Exception();
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setException(ex);
            Bridge.Test.Assert.throws(function () {
                tcs.setException(ex);
            });
        },
        completedTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setResult(1);
            Bridge.Test.Assert.true(tcs.task.isCompleted());
            Bridge.Test.Assert.false(tcs.task.isFaulted());
            Bridge.Test.Assert.false(tcs.task.isCanceled());
        },
        cancelledTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();
            Bridge.Test.Assert.true(tcs.task.isCompleted());
            Bridge.Test.Assert.false(tcs.task.isFaulted());
            Bridge.Test.Assert.true(tcs.task.isCanceled());
        },
        faultedTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setException(new System.Exception());
            Bridge.Test.Assert.true(tcs.task.isCompleted());
            Bridge.Test.Assert.true(tcs.task.isFaulted());
            Bridge.Test.Assert.false(tcs.task.isCanceled());
        },
        trySetResultReturnsFalseWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.Assert.true(tcs.trySetResult(1));
            Bridge.Test.Assert.false(tcs.trySetResult(1));
        },
        trySetCanceledReturnsFalseWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.Assert.true(tcs.trySetCanceled());
            Bridge.Test.Assert.false(tcs.trySetCanceled());
        },
        trySetExceptionReturnsFalseWhenTheTaskIsCompleted: function () {
            var ex = new System.Exception();
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.Assert.true(tcs.trySetException(ex));
            Bridge.Test.Assert.false(tcs.trySetException(ex));
        },
        continueWithForNonGenericTaskWorkWithNoResultAndNoException: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var complete = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;

            continuedTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");
            });

            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");

                complete = true;
            });

            tcs.setResult(0);

            continuedTask1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(complete, "We should not time out");

                completeAsync();
            });
        },
        continueWithWhenCallbackThrowsAnException: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var cb1Invoked = false, cb2Invoked = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var t1 = task.continueWith(function (t) {
                cb1Invoked = true;
                throw new System.Exception("Test");
            });

            var t2 = task.continueWith(function (t) {
                cb2Invoked = true;
            });

            tcs.setResult(0);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task status should be RanToCompletion");

                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, t1.status, "t1 status should be Faulted");
                Bridge.Test.Assert.true$1(cb1Invoked, "Callback 1 should have been invoked");

                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t2.status, "t2 status should be RanToCompletion");
                Bridge.Test.Assert.true$1(cb2Invoked, "Callback 2 should have been invoked");

                completeAsync();
            });
        },
        exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var complete = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;

            continuedTask = task.continueWith($_.Bridge.ClientTest.Threading.TaskTests.f1);

            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areNotEqual$1(null, continuedTask.exception, "continuedTask should have an exception");
                Bridge.Test.Assert.true(Bridge.is(continuedTask.exception, System.AggregateException));
                Bridge.Test.Assert.areEqual("This is a test message", continuedTask.exception.innerExceptions.get(0).getMessage());

                complete = true;
            });

            tcs.setResult(0);

            continuedTask1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(complete, "We should not time out");

                completeAsync();
            });
        },
        continueWithForNonGenericTaskCanReturnAValue: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;
            continuedTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");

                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");

                return 42;
            });

            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");
                Bridge.Test.Assert.areEqual(42, t.getResult());

                done = true;
            });

            tcs.setResult(0);

            continuedTask1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(done, "We should not time out");

                completeAsync();
            });
        },
        continueWithWithNoReturnValueForGenericTaskWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;

            continuedTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");
            });

            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");

                done = true;
            });

            tcs.setResult(0);

            continuedTask1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(done, "We should not time out");

                completeAsync();
            });
        },
        continueWithForGenericTaskCanReturnAValue: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var continuedTask = null;

            continuedTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");

                return t.getResult() + "_";
            });

            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");

            var doneTask = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");
                Bridge.Test.Assert.areEqual("42_", t.getResult());

                done = true;
            });

            tcs.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(done, "We should not time out");

                completeAsync();
            });
        },
        delayWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var done = false;

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(done, "Done should not be set too early");
            });

            var delay = System.Threading.Tasks.Task.delay(100);

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, delay.status, "delay should be running at point 1");

            var afterDelay = delay.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, delay), "argument to delay.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, delay.status, "delay should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, delay.exception, "delay should not have an exception");

                done = true;
            });

            afterDelay.continueWith(function (x) {
                Bridge.Test.Assert.true$1(done, "We should not time out");

                completeAsync();
            });
        },
        fromResultWorks: function () {
            var t = System.Threading.Tasks.Task.fromResult(3);
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Task should be finished");
            Bridge.Test.Assert.areEqual$1(3, t.getResult(), "Result should be correct");
            Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception should be null");
        },
        runWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
            var bodyRun = false, continuationRun = false;

            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");

                continuationRun = true;
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        runWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
            var bodyRun = false, continuationRun = false;

            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
                return 42;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual(42, task.getResult());
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");

                continuationRun = true;
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        runWorksWhenBodyThrows: function () {
            var completeAsync = Bridge.Test.Assert.async();
            var bodyRun = false, continuationRun = false;

            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
                eval("throw 'This is a test message'");
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "task should have faulted at point 2");
                Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.Assert.areEqual("This is a test message", task.exception.innerExceptions.get(0).getMessage());

                continuationRun = true;
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllParamArrayWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(tcs1.task, tcs2.task, tcs3.task);

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.areEqual$1([101, 3, 42], t.getResult(), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllEnumerableWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task, [tcs1.task, tcs2.task, tcs3.task]));

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.areEqual$1([101, 3, 42], t.getResult(), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllParamArrayWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task));

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllEnumerableWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task)]));

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs4 = new System.Threading.Tasks.TaskCompletionSource();

            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs4.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var ex1 = new System.Exception("exception 1");
            var ex2 = new System.Exception("exception 1");

            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task), Bridge.cast(tcs4.task, System.Threading.Tasks.Task)]));

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs2.task.status, "Task2 should be faulted");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs3.task.status, "Task3 should be faulted");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs4.task.status, "Task4 should be cancelled");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.true$1(Bridge.hasValue(t.exception), "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(2, t.exception.innerExceptions.getCount(), "Should be 2 inner exceptions");
                Bridge.Test.Assert.true$1(t.exception.innerExceptions.contains(ex1), "ex1 should be propagated");
                Bridge.Test.Assert.true$1(t.exception.innerExceptions.contains(ex2), "ex2 should be propagated");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, t.status, "Aggregate task should be faulted");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setException(ex1);
            tcs1.setResult(101);
            tcs3.setException(ex2);
            tcs4.setCanceled();

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });

            var task = System.Threading.Tasks.Task.whenAll(tcs1.task, tcs2.task, tcs3.task);

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs1.task.status, "Task1 should be cancelled");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);
            tcs1.setCanceled();
            tcs3.setResult(42);

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyParamArrayWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;

            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(tcs1.task, tcs2.task, tcs3.task);

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(3, t.getResult().getResult(), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyEnumerableWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [tcs1.task, tcs2.task, tcs3.task]));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(3, t.getResult().getResult(), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyParamArrayWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;

            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyEnumerableWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;

            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task)]));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Aggregate task should have run to completion");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setResult(3);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyFaultsIfTheFirstTaskFaulted: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;

            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            var ex = new System.Exception("Some text");

            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [tcs1.task, tcs2.task, tcs3.task]));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs2.task.status, "Task2 should have faulted");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.areEqual$1(1, t.exception.innerExceptions.getCount(), "There should be one inner exception");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.exception.innerExceptions.get(0), ex), "Exception for the aggregate task should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Aggregate task should have faulted");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setException(ex);

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        whenAnyIsCancelledIfTheFirstTaskWasCancelled: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();

            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [tcs1.task, tcs2.task, tcs3.task]));

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs2.task.status, "Task2 should be cancelled");

                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");

                Bridge.Test.Assert.areEqual$1(null, t.exception, "Aggregate task should not have exception");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "Aggregate task should be cancelled");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");

            tcs2.setCanceled();

            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");

                tcs1.setResult(101);
                tcs3.setResult(42);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");

                completeAsync();
            });
        },
        constructorWithOnlyActionWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var taskRun = false, continuationRun = false;

            var task = new System.Threading.Tasks.Task(function () {
                taskRun = true;
            });

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();

                Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });

            task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");
                completeAsync();
            });
        },
        constructorWithActionAndStateWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var taskRun = false, continuationRun = false;
            var state = {  };

            var task = new System.Threading.Tasks.Task(function (s) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(state, s), "The state should be correct.");
                taskRun = true;
            }, state);

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();

                Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });

            task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");

                completeAsync();
            });
        },
        exceptionInManuallyCreatedTaskIsStoredOnTheTask: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var taskRun = false, continuationRun = false;
            var ex = new System.Exception();

            var task = new System.Threading.Tasks.Task(function () {
                taskRun = true;
                throw ex;
            });

            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted");
                Bridge.Test.Assert.true$1(Bridge.is(task.exception, System.AggregateException), "Exception should be correct");
                Bridge.Test.Assert.areEqual$1(1, task.exception.innerExceptions.getCount(), "There should be one inner exception");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "InnerException should be correct");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();
            });

            task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");

                completeAsync();
            });
        },
        constructorWithOnlyFunctionWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var taskRun = false, continuationRun = false;

            var task = new System.Threading.Tasks.Task(function () {
                taskRun = true;
                return 42;
            });

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.Assert.areEqual$1(42, task.getResult(), "Result should be correct");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();

                Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");

                completeAsync();
            });
        },
        constructorWithFunctionAndStateWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();

            var taskRun = false, continuationRun = false;
            var state = {  };

            var task = new System.Threading.Tasks.Task(function (s) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(state, s), "The state should be correct.");
                taskRun = true;
                return 42;
            }, state);

            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.Assert.areEqual$1(42, task.getResult(), "Result should be correct");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null");

                continuationRun = true;
            });

            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);

            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");

                task.start();

                Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });

            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");

                completeAsync();
            });
        }
    });

    Bridge.ns("Bridge.ClientTest.Threading.TaskTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Threading.TaskTests, {
        f1: function (t) {
            eval("throw 'This is a test message'");
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.TimerTests", {
        statics: {
            config: {
                properties: {
                    StaticCounter: 0,
                    StaticData: null
                }
            },
            staticHandleTimer: function (state) {
                Bridge.ClientTest.Threading.TimerTests.setStaticCounter((Bridge.ClientTest.Threading.TimerTests.getStaticCounter() + 1) | 0);
                Bridge.ClientTest.Threading.TimerTests.setStaticData(state);
            },
            testStaticCallbackWithDispose: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    done, 
                    timer, 
                    count, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();

                                        Bridge.ClientTest.Threading.TimerTests.setStaticCounter(0);
                                        Bridge.ClientTest.Threading.TimerTests.setStaticData(null);

                                        timer = new System.Threading.Timer.$ctor1(Bridge.ClientTest.Threading.TimerTests.staticHandleTimer, "SomeState", 1, 1);

                                        $task1 = System.Threading.Tasks.Task.delay(200);
                                        $step = 1;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    
                                        count = Bridge.ClientTest.Threading.TimerTests.getStaticCounter();
                                        timer.dispose();

                                        Bridge.Test.Assert.throws$7(System.InvalidOperationException, function () {
                                            timer.change(1, 1);
                                        }, "No change after Dispose allowed");
                                        Bridge.Test.Assert.true$1(count > 0, "Ticks: " + count);
                                        Bridge.Test.Assert.areEqual$1("SomeState", Bridge.ClientTest.Threading.TimerTests.getStaticData(), "State works");

                                        $task2 = System.Threading.Tasks.Task.delay(200);
                                        $step = 2;
                                        $task2.continueWith($asyncBody, true);
                                        return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    
                                        Bridge.Test.Assert.areEqual$1(count, Bridge.ClientTest.Threading.TimerTests.getStaticCounter(), "Timer disposed - no more ticks");

                                        done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            testInstanceCallbackWithDispose: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    done, 
                    ts, 
                    timer, 
                    count, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();

                                        ts = new Bridge.ClientTest.Threading.TimerTests.TimerState();
                                        timer = new System.Threading.Timer.$ctor1(Bridge.fn.bind(ts, ts.handleTimer), "SomeState", 1, 1);

                                        $task1 = System.Threading.Tasks.Task.delay(200);
                                        $step = 1;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    
                                        count = ts.getCounter();
                                        timer.dispose();

                                        Bridge.Test.Assert.throws$7(System.InvalidOperationException, function () {
                                            timer.change(1, 1);
                                        }, "No change after Dispose allowed");
                                        Bridge.Test.Assert.true$1(count > 0, "Ticks: " + count);
                                        Bridge.Test.Assert.areEqual$1("SomeState", ts.getData(), "State works");

                                        $task2 = System.Threading.Tasks.Task.delay(200);
                                        $step = 2;
                                        $task2.continueWith($asyncBody, true);
                                        return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    
                                        Bridge.Test.Assert.areEqual$1(count, ts.getCounter(), "Timer disposed - no more ticks");

                                        done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            }
        },
        testTimerThrows: function () {
            var ts = new Bridge.ClientTest.Threading.TimerTests.TimerState();
            var tc = Bridge.fn.bind(ts, ts.handleTimer);

            var okSpan = System.TimeSpan.fromMilliseconds(1);
            var smallSpan = System.TimeSpan.fromMilliseconds(-2);
            var bigSpan = System.TimeSpan.fromMilliseconds(System.Int64([0,1]));

            var small = -2;
            var big = System.Int64([0,1]);

            Bridge.Test.Assert.throws$7(System.ArgumentNullException, $_.Bridge.ClientTest.Threading.TimerTests.f1, "Null callback");

            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor1(tc, null, small, 1);
            }, "Small due int");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor1(tc, null, 1, small);
            }, "Small period int ");

            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor2(tc, null, System.Int64(small), System.Int64(1));
            }, "Small due long");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor2(tc, null, System.Int64(1), System.Int64(small));
            }, "Small period long");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor2(tc, null, big, System.Int64(1));
            }, "Big due long");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor2(tc, null, System.Int64(1), big);
            }, "Big period long");

            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor3(tc, null, smallSpan, okSpan);
            }, "Small due TimeSpan");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor3(tc, null, okSpan, smallSpan);
            }, "Small period TimeSpan");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor3(tc, null, bigSpan, okSpan);
            }, "Big due TimeSpan");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer.$ctor3(tc, null, okSpan, bigSpan);
            }, "Big period TimeSpan");
        },
        testStaticCallbackWithChange: function () {
            var $step = 0,
                $task1, 
                $task2, 
                $jumpFromFinally, 
                done, 
                copy, 
                timer, 
                count, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1,2], $step);
                        switch ($step) {
                            case 0: {
                                done = Bridge.Test.Assert.async();

                                    Bridge.ClientTest.Threading.TimerTests.setStaticCounter(0);
                                    Bridge.ClientTest.Threading.TimerTests.setStaticData(null);

                                    copy = null;

                                    timer = new System.Threading.Timer.$ctor1(Bridge.ClientTest.Threading.TimerTests.staticHandleTimer, "SomeState", 1, 1);

                                    copy = timer;

                                    $task1 = System.Threading.Tasks.Task.delay(200);
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                            }
                            case 1: {
                                $task1.getAwaitedResult();
                                
                                    count = Bridge.ClientTest.Threading.TimerTests.getStaticCounter();
                                    timer.change(-1, 0);

                                    Bridge.Test.Assert.true$1(count > 0, "Ticks: " + count);
                                    Bridge.Test.Assert.areEqual$1("SomeState", Bridge.ClientTest.Threading.TimerTests.getStaticData(), "State works");

                                    $task2 = System.Threading.Tasks.Task.delay(200);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                            }
                            case 2: {
                                $task2.getAwaitedResult();
                                
                                    Bridge.Test.Assert.areEqual$1(count, Bridge.ClientTest.Threading.TimerTests.getStaticCounter(), "Timer disposed");

                                    timer.dispose();

                                    Bridge.Test.Assert.throws$7(System.InvalidOperationException, function () {
                                        copy.change(1, 1);
                                    }, "No change after Dispose allowed");

                                    done();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);

            $asyncBody();
        },
        testInstanceCallbackWithChange: function () {
            var $step = 0,
                $task1, 
                $task2, 
                $jumpFromFinally, 
                done, 
                ts, 
                copy, 
                timer, 
                count, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1,2], $step);
                        switch ($step) {
                            case 0: {
                                done = Bridge.Test.Assert.async();

                                    ts = new Bridge.ClientTest.Threading.TimerTests.TimerState();

                                    copy = null;

                                    timer = new System.Threading.Timer.$ctor1(Bridge.fn.bind(ts, ts.handleTimer), "SomeState", 1, 1);

                                    copy = timer;

                                    $task1 = System.Threading.Tasks.Task.delay(200);
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                            }
                            case 1: {
                                $task1.getAwaitedResult();
                                
                                    count = ts.getCounter();
                                    timer.change(-1, 0);

                                    Bridge.Test.Assert.true$1(count > 0, "Ticks: " + count);
                                    Bridge.Test.Assert.areEqual$1("SomeState", ts.getData(), "State works");

                                    $task2 = System.Threading.Tasks.Task.delay(200);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                            }
                            case 2: {
                                $task2.getAwaitedResult();
                                
                                    timer.dispose();

                                    Bridge.Test.Assert.areEqual$1(count, ts.getCounter(), "Timer disposed");

                                    Bridge.Test.Assert.throws$7(System.InvalidOperationException, function () {
                                        copy.change(1, 1);
                                    }, "No change after Dispose allowed");

                                    done();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);

            $asyncBody();
        },
        testInfiniteTimer: function () {
            var $step = 0,
                $task1, 
                $task2, 
                $jumpFromFinally, 
                done, 
                ts, 
                timer, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1,2], $step);
                        switch ($step) {
                            case 0: {
                                done = Bridge.Test.Assert.async();

                                    ts = new Bridge.ClientTest.Threading.TimerTests.TimerState();

                                    timer = new System.Threading.Timer.$ctor1(Bridge.fn.bind(ts, ts.handleTimer), null, -1, 1);
                                    $task1 = System.Threading.Tasks.Task.delay(200);
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                            }
                            case 1: {
                                $task1.getAwaitedResult();
                                Bridge.Test.Assert.areEqual$1(ts.getCounter(), 0, "new -1, 1");

                                    timer.change(-1, -1);
                                    $task2 = System.Threading.Tasks.Task.delay(200);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                            }
                            case 2: {
                                $task2.getAwaitedResult();
                                Bridge.Test.Assert.areEqual$1(ts.getCounter(), 0, "Change -1, -1");

                                    done();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);

            $asyncBody();
        }
    });

    Bridge.ns("Bridge.ClientTest.Threading.TimerTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Threading.TimerTests, {
        f1: function () {
            new System.Threading.Timer.$ctor1(null, null, 1, 1);
        }
    });

    Bridge.define("Bridge.ClientTest.Threading.TimerTests.TimerState", {
        config: {
            properties: {
                Counter: 0,
                Data: null
            }
        },
        handleTimer: function (state) {
            this.setCounter((this.getCounter() + 1) | 0);
            this.setData(state);
        }
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests", {
        gettingBaseTypeWorks: function () {
            Bridge.Test.Assert.areEqual$1(null, Bridge.Reflection.getBaseType(Bridge.ClientTest.TypeSystemTests.I1), "#1");
            Bridge.Test.Assert.areEqual$1(null, Bridge.Reflection.getBaseType(Bridge.ClientTest.TypeSystemTests.I2), "#2");
            Bridge.Test.Assert.areEqual$1(Object, Bridge.Reflection.getBaseType(Bridge.ClientTest.TypeSystemTests.B), "#3");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.TypeSystemTests.B, Bridge.Reflection.getBaseType(Bridge.ClientTest.TypeSystemTests.C), "#4");
            Bridge.Test.Assert.areEqual$1(null, Bridge.Reflection.getBaseType(Object), "#5");

            var t = null;
            Bridge.Test.Assert.throws$7(System.NullReferenceException, function () {
                var b = Bridge.Reflection.getBaseType(t);
            }, "NullReferenceException");
        },
        isAssignableFromWorks: function () {
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1), "#1");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1, Object), "#2");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Object, Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1), "#3");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Object), "#4");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Object, Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1), "#5");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3, Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1), "#6");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3), "#7");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.D1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1), "#8");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D1), "#9");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D1), "#10");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#11");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(String), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#12");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#13");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(String), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#14");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#15");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(String), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3), "#16");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3), "#17");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3), "#18");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(String), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3), "#19");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.I5$1(String)), "#20");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.I5$1(System.Int32)), "#21");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I5$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32)), "#22");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D4), "#23");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D4), "#24");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I4, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D4), "#25");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.X2), "#26");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.E1, Bridge.ClientTest.TypeSystemTests.E2), "#30");
            Bridge.Test.Assert.false$1(Bridge.Reflection.isAssignableFrom(System.Int32, Bridge.ClientTest.TypeSystemTests.E1), "#31");
            Bridge.Test.Assert.true$1(Bridge.Reflection.isAssignableFrom(Object, Bridge.ClientTest.TypeSystemTests.E1), "#32");
        }
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes");

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1");

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1", {
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1", function (T1) { return {
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I4", {
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I7$1", function (T) { return {
        $kind: "interface",
        $variance: [2]
    }; });

    Bridge.definei("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I6$1", function (T) { return {
        $kind: "interface",
        $variance: [1]
    }; });

    Bridge.definei("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I9$2", function (T1, T2) { return {
        $kind: "interface",
        $variance: [0,1]
    }; });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.I1", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.I3", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.E1", {
        $kind: "enum"
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.E2", {
        $kind: "enum",
        $flags: true
    });

    Bridge.define("Bridge.ClientTest.Utilities.BrowserHelper", {
        statics: {
            isPhantomJs: function () {
                return System.String.contains(navigator.userAgent,"PhantomJS");
            },
            isFirefox: function () {
                return System.String.contains(navigator.userAgent,"Firefox");
            },
            isChrome: function () {
                return System.String.contains(navigator.userAgent,"Chrome");
            },
            getBrowserInfo: function () {
                var userAgent = navigator.userAgent;
                var appVersion = navigator.appVersion;
                var product = navigator.product;
                var appName = navigator.appName;
                var appCodeName = navigator.appCodeName;

                return System.String.format("userAgent:{0} appVersion:{1} product:{2} appName:{3} appCodeName:{4}", userAgent, appVersion, product, appName, appCodeName);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Utilities.DecimalHelper", {
        statics: {
            assertIsDecimalAndEqualTo$1: function (v, d, message) {
                if (message === void 0) { message = null; }
                Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Decimal), message);
                Bridge.Test.Assert.areStrictEqual$1(System.Double.format(d, 'G'), v.toString(), message);
            },
            assertIsDecimalAndEqualTo: function (v, d, message) {
                if (message === void 0) { message = null; }
                Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Decimal), message);
                Bridge.Test.Assert.areStrictEqual$1(Bridge.Int.format(d, 'G'), v.toString(), message);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Utilities.Group", {
        statics: {
            getGroups: function () {
                var groups = new (System.Collections.Generic.List$1(Bridge.ClientTest.Utilities.Group))();
                groups.add(Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "A",
                    setLimit: 1000
                } ));
                groups.add(Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "B",
                    setLimit: 400
                } ));
                groups.add(Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "C",
                    setLimit: 800
                } ));
                groups.add(Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "D",
                    setLimit: 200
                } ));

                return groups;
            }
        },
        config: {
            properties: {
                Name: null,
                Limit: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Utilities.Person", {
        statics: {
            getPersons: function () {
                var persons = new (System.Collections.Generic.List$1(Bridge.ClientTest.Utilities.Person))();

                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 1,
                    setName: "Frank",
                    setCity: "Edmonton",
                    setCount: 300,
                    setGroup: "A"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 2,
                    setName: "Zeppa",
                    setCity: "Tokyo",
                    setCount: 100,
                    setGroup: "C"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 3,
                    setName: "John",
                    setCity: "Lisbon",
                    setCount: 700,
                    setGroup: "B"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 4,
                    setName: "Billy",
                    setCity: "Paris",
                    setCount: 500,
                    setGroup: "C"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 5,
                    setName: "Dora",
                    setCity: "Budapest",
                    setCount: 50,
                    setGroup: "B"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 6,
                    setName: "Ian",
                    setCity: "Rome",
                    setCount: 550,
                    setGroup: "B"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 7,
                    setName: "Mary",
                    setCity: "Dortmund",
                    setCount: 700,
                    setGroup: "B"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 8,
                    setName: "Nemo",
                    setCity: "Ocean",
                    setCount: 3000,
                    setGroup: null
                } ));

                return persons;
            }
        },
        config: {
            properties: {
                ID: 0,
                Name: null,
                City: null,
                Count: 0,
                Group: null
            }
        }
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.D1", {
        inherits: [Bridge.ClientTest.ArrayTests.ArrayTestsSet2.B1]
    });

    Bridge.define("Bridge.ClientTest.ArrayTests.ArrayTestsSet2.D2", {
        inherits: [Bridge.ClientTest.ArrayTests.ArrayTestsSet2.B2]
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestAbstractClass.B", {
        inherits: [Bridge.ClientTest.BasicCSharp.TestAbstractClass.A],
        getString: function () {
            this.setData((this.getData() + 1) | 0);
            return "B";
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInheritance.B", {
        inherits: [Bridge.ClientTest.BasicCSharp.TestInheritance.A],
        config: {
            properties: {
                Y: 0
            }
        },
        ctor: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.BasicCSharp.TestInheritance.A.ctor.call(this, x);
            this.setY(y);
        },
        handleNumber$1: function (i) {
            return ((i * 100) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInterfaces.A", {
        inherits: [Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple],
        config: {
            properties: {
                Data: 0
            },
            alias: [
            "getData", "Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getData",
            "setData", "Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$setData",
            "getString", "Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getString"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.setData(1);
        },
        getString: function () {
            return "A.ISimple";
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInterfaces.B", {
        inherits: [Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple],
        data: 0,
        ctor: function () {
            this.$initialize();
            this.data = 2;
        },
        Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getData: function () {
            return this.data;
        },
        Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$setData: function (value) {
            this.data = value;
        },
        Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getString: function () {
            return "explicit B.ISimple";
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestInterfaces.C", {
        inherits: [Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple,Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimpleAsWell],
        data: 0,
        dataAsWell: 0,
        config: {
            alias: [
            "getDataAsWell", "Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimpleAsWell$getDataAsWell",
            "setDataAsWell", "Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimpleAsWell$setDataAsWell",
            "getStringAsWell", "Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimpleAsWell$getStringAsWell"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.data = 3;
            this.dataAsWell = 4;
        },
        Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getData: function () {
            return this.data;
        },
        Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$setData: function (value) {
            this.data = value;
        },
        getDataAsWell: function () {
            return this.dataAsWell;
        },
        setDataAsWell: function (value) {
            this.dataAsWell = value;
        },
        Bridge$ClientTest$BasicCSharp$TestInterfaces$ISimple$getString: function () {
            return "C.ISimple";
        },
        getStringAsWell: function () {
            return "C.ISimpleAsWell";
        }
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestVirtualMethods.B", {
        inherits: [Bridge.ClientTest.BasicCSharp.TestVirtualMethods.A],
        testA: function () {
            return Bridge.ClientTest.BasicCSharp.TestVirtualMethods.A.prototype.test.call(this);
        },
        test: function () {
            return "B";
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToBooleanTests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(Boolean)],
        fromBoolean: function () {
            var testValues = [true, false];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toBoolean(value); }, testValues, testValues);
        },
        fromByte: function () {
            var testValues = [0, 255];
            var expectedValues = [false, true];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal.One, System.Decimal.Zero, System.Decimal(0.0), System.Decimal(0.0), System.Decimal(1.5), System.Decimal(-1.5), System.Decimal(500.0)];
            var expectedValues = [true, true, true, false, false, false, true, true, true];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromDouble: function () {
            var testValues = [4.94065645841247E-324, System.Double.max, System.Double.min, Number.NaN, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 0.0, 0.0, 1.5, -1.5, 1.5E+300, 0.0, -1.7E+300, -1.69958582169389E-320];
            var expectedValues = [true, true, true, true, true, true, false, false, true, true, true, false, true, true];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromInt16: function () {
            var testValues = [-32768, 32767, 0];
            var expectedValues = [true, true, false];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [-2147483648, 2147483647, 0];
            var expectedValues = [true, true, false];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64.MinValue, System.Int64.MaxValue, System.Int64(0)];
            var expectedValues = [true, true, false];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromString: function () {
            var testValues = [null, "True", "true ", " true", " true ", " false ", " false", "false ", "False"];
            var expectedValues = [false, true, true, true, true, false, false, false, false];
            this.verifyFromString(function (value) { return System.Convert.toBoolean(value); }, function (value, provider) { return System.Convert.toBoolean(value, provider); }, testValues, expectedValues);

            var invalidValues = ["Hello"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toBoolean(value); }, function (value, provider) { return System.Convert.toBoolean(value, provider); }, invalidValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [false];
            this.verifyFromObject(function (value) { return System.Convert.toBoolean(value); }, function (value, provider) { return System.Convert.toBoolean(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toBoolean(value); }, function (value, provider) { return System.Convert.toBoolean(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [0, 127, -128];
            var expectedValues = [false, true, true];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [1.401298E-45, 3.40282347E+38, -3.40282347E+38, Number.NaN, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 0.0, 0.0, 1.5, -1.5, 1.5E+30, 0.0, -1.7E+30, -1.699999E-40];
            var expectedValues = [true, true, true, true, true, true, false, false, true, true, true, false, true, true];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromUInt16: function () {
            var testValues = [0, 65535];
            var expectedValues = [false, true];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [0, 4294967295];
            var expectedValues = [false, true];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64.MinValue, System.UInt64.MaxValue];
            var expectedValues = [false, true];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToByteTests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Byte)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65, 0];
            var expectedValues = [65, 0];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [65535];
            this.verifyThrowsViaObj(System.OverflowException, System.Char, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(255), System.Decimal(0), System.Decimal(254.01), System.Decimal(254.9)];
            var expectedValues = [255, 0, 254, 255];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [System.Decimal.MinValue, System.Decimal.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [0, 255, 100.0, 254.9, 255.2];
            var expectedValues = [0, 255, 100, 255, 255];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [-System.Double.max, System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [0, 255, 10, 2];
            var expectedValues = [0, 255, 10, 2];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [-32768, 32767];
            this.verifyThrowsViaObj(System.OverflowException, System.Int16, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [0, 255, 10];
            var expectedValues = [0, 255, 10];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [-2147483648, 2147483647];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(0), System.Int64(255), System.Int64(10)];
            var expectedValues = [0, 255, 10];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MinValue, System.Int64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [0, 10, 127];
            var expectedValues = [0, 10, 127];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [-128];
            this.verifyThrowsViaObj(System.OverflowException, System.SByte, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromSingle: function () {
            var testValues = [255, 0, 254.01, 254.9];
            var expectedValues = [255, 0, 254, 255];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [-3.40282347E+38, 3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromString: function () {
            var byteMinValue = 0;
            var byteMaxValue = 255;
            var intMinValue = -2147483648;
            var intMaxValue = 2147483647;

            var testValues = [byteMaxValue.toString(), byteMinValue.toString(), "0", "100", null];
            var expectedValues = [byteMaxValue, byteMinValue, 0, 100, 0];
            this.verifyFromString(function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, testValues, expectedValues);

            var overflowValues = [intMinValue.toString(), intMaxValue.toString()];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, overflowValues);

            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, "10", "100", "1011", "ff", "0xff", "77", "11", "11111111"];
            var testBases = [10, 2, 8, 16, 10, 10, 2, 16, 16, 8, 2, 2];
            var expectedValues = [0, 0, 0, 0, 10, 100, 11, 255, 255, 63, 3, 255];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 6); }, testValues, testBases, expectedValues);

            var overflowValues = ["256", "111111111", "ffffe", "7777777", "-1"];
            var overflowBases = [10, 2, 16, 8, 10];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 6); }, overflowValues, overflowBases);

            var formatExceptionValues = ["fffg", "0xxfff", "8", "112", "!56"];
            var formatExceptionBases = [16, 16, 8, 2, 10];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 6); }, formatExceptionValues, formatExceptionBases);

            var argumentExceptionValues = [null];
            var argumentExceptionBases = [11];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 6); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [0, 255, 10, 100];
            var expectedValues = [0, 255, 10, 100];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [65535];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt16, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromUInt32: function () {
            var testValues = [0, 255, 10, 100];
            var expectedValues = [0, 255, 10, 100];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(0), System.UInt64(255), System.UInt64(10), System.UInt64(100)];
            var expectedValues = [0, 255, 10, 100];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);

            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toByte(value); }, overflowValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToCharTests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Char)],
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verify(System.Byte, function (value) { return System.Convert.toChar(value, null, 6); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65535, 0, 98];
            var expectedValues = [65535, 0, 98];
            this.verify(System.Char, function (value) { return System.Convert.toChar(value, null, 4); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var invalidValues = [System.Decimal(0.0), System.Decimal.MinValue, System.Decimal.MaxValue];
            this.verifyThrows(System.InvalidCastException, System.Decimal, function (value) { return System.Convert.toChar(value, null, 15); }, invalidValues);
        },
        fromDecimalViaObject: function () {
            var invalidValues = [System.Decimal(0.0), System.Decimal.MinValue, System.Decimal.MaxValue];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toChar(value, null, 1); }, function (value, provider) { return System.Convert.toChar(value, provider, 1); }, invalidValues);
        },
        fromDouble: function () {
            var invalidValues = [0.0, System.Double.min, System.Double.max];
            this.verifyThrows(System.InvalidCastException, System.Double, function (value) { return System.Convert.toChar(value, null, 14); }, invalidValues);
        },
        fromDoubleViaObject: function () {
            var invalidValues = [0.0, System.Double.min, System.Double.max];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toChar(value, null, 1); }, function (value, provider) { return System.Convert.toChar(value, provider, 1); }, invalidValues);
        },
        fromInt16: function () {
            var testValues = [32767, 0];
            var expectedValues = [32767, 0];
            this.verify(System.Int16, function (value) { return System.Convert.toChar(value, null, 7); }, testValues, expectedValues);

            var overflowValues = [-32768, -1000];
            this.verifyThrows(System.OverflowException, System.Int16, function (value) { return System.Convert.toChar(value, null, 7); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verify(System.Int32, function (value) { return System.Convert.toChar(value, null, 9); }, testValues, expectedValues);

            var overflowValues = [-2147483648, 2147483647, 65536, -1000];
            this.verifyThrows(System.OverflowException, System.Int32, function (value) { return System.Convert.toChar(value, null, 9); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(0), System.Int64(98), System.Int64(65535)];
            var expectedValues = [0, 98, 65535];
            this.verify(System.Int64, function (value) { return System.Convert.toChar(value, null, 11); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MinValue, System.Int64.MaxValue, System.Int64(-1)];
            this.verifyThrows(System.OverflowException, System.Int64, function (value) { return System.Convert.toChar(value, null, 11); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verify(Object, function (value) { return System.Convert.toChar(value, null, 1); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyThrows(System.InvalidCastException, Object, function (value) { return System.Convert.toChar(value, null, 1); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [127, 0];
            var expectedValues = [127, 0];
            this.verify(System.SByte, function (value) { return System.Convert.toChar(value, null, 5); }, testValues, expectedValues);

            var overflowValues = [-128, -100, -1];
            this.verifyThrows(System.OverflowException, System.SByte, function (value) { return System.Convert.toChar(value, null, 5); }, overflowValues);
        },
        fromSingle: function () {
            var invalidValues = [0.0, -3.40282347E+38, 3.40282347E+38];
            this.verifyThrows(System.InvalidCastException, System.Single, function (value) { return System.Convert.toChar(value, null, 13); }, invalidValues);
        },
        fromSingleViaObject: function () {
            var invalidValues = [0.0, -3.40282347E+38, 3.40282347E+38];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toChar(value, null, 1); }, function (value, provider) { return System.Convert.toChar(value, provider, 1); }, invalidValues);
        },
        fromString: function () {
            var testValues = ["a", "T", "z", "a"];
            var expectedValues = [97, 84, 122, 97];
            this.verifyFromString(function (value) { return System.Convert.toChar(value, null, 18); }, function (value, provider) { return System.Convert.toChar(value, provider, 18); }, testValues, expectedValues);

            var formatExceptionValues = ["", "ab"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toChar(value, null, 18); }, function (value, provider) { return System.Convert.toChar(value, provider, 18); }, formatExceptionValues);
            this.verifyFromStringThrows(System.ArgumentNullException, function (value) { return System.Convert.toChar(value, null, 18); }, function (value, provider) { return System.Convert.toChar(value, provider, 18); }, [null]);
        },
        fromUInt16: function () {
            var testValues = [0, 98, 65535];
            var expectedValues = [0, 98, 65535];
            this.verify(System.UInt16, function (value) { return System.Convert.toChar(value, null, 8); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verify(System.UInt32, function (value) { return System.Convert.toChar(value, null, 10); }, testValues, expectedValues);

            var overflowValues = [4294967295];
            this.verifyThrows(System.OverflowException, System.UInt32, function (value) { return System.Convert.toChar(value, null, 10); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(0), System.UInt64(98), System.UInt64(65535)];
            var expectedValues = [0, 98, 65535];
            this.verify(System.UInt64, function (value) { return System.Convert.toChar(value, null, 12); }, testValues, expectedValues);

            var overflowValues = [System.UInt64.MaxValue, System.UInt64(65536)];
            this.verifyThrows(System.OverflowException, System.UInt64, function (value) { return System.Convert.toChar(value, null, 12); }, overflowValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(Date)],
        statics: {
            s_dateTimeFormatInfo: null,
            config: {
                init: function () {
                    this.s_dateTimeFormatInfo = new System.Globalization.DateTimeFormatInfo();
                }
            }
        },
        fromString: function () {
            var expectedValues = [new Date(1999, 12 - 1, 31, 23, 59, 59), new Date(100, 1 - 1, 1, 0, 0, 0), new Date(2216, 2 - 1, 29, 0, 0, 0), new Date(1, 1 - 1, 1, 0, 0, 0)];

            if (Bridge.ClientTest.Utilities.BrowserHelper.isPhantomJs()) {
                // AppVeyor Chutzpah engine adjustment
                expectedValues[1] = new Date(1950, 2 - 1, 2, 4, 10, 50);
            }

            var dateTimeFormat = System.Globalization.CultureInfo.getCurrentCulture().dateTimeFormat;
            var pattern = System.String.concat(dateTimeFormat.longDatePattern, String.fromCharCode(32), dateTimeFormat.longTimePattern);
            var testValues = System.Array.init(expectedValues.length, null);
            for (var i = 0; i < expectedValues.length; i = (i + 1) | 0) {
                testValues[i] = Bridge.Date.format(expectedValues[i], pattern, dateTimeFormat);
            }

            this.verifyFromString(function (value) { return System.Convert.toDateTime(value); }, function (value, provider) { return System.Convert.toDateTime(value, provider); }, testValues, expectedValues);
            this.verifyFromObject(function (value) { return System.Convert.toDateTime(value); }, function (value, provider) { return System.Convert.toDateTime(value, provider); }, testValues, expectedValues);

            var formatExceptionValues = ["null", "201-5-14T00:00:00"];

            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toDateTime(value); }, function (value, provider) { return System.Convert.toDateTime(value, provider); }, formatExceptionValues);
        },
        fromStringWithCustomFormatProvider: function () {
            var testValues = ["1999/12/31 11:59:59 PM", "2005/01/01 12:00:00 AM", "1492/02/29 12:00:00 AM", "1930/01/01 12:00:00 AM"];
            var expectedValues = [new Date(1999, 12 - 1, 31, 23, 59, 59), new Date(2005, 1 - 1, 1, 0, 0, 0), new Date(1492, 2 - 1, 29, 0, 0, 0), new Date(1930, 1 - 1, 1, 0, 0, 0)];
            Bridge.Test.Assert.areEqual(expectedValues.length, testValues.length);

            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                var result = System.Convert.toDateTime(testValues[i], Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.s_dateTimeFormatInfo);
                Bridge.Test.Assert.areEqual(expectedValues[i], result);
                result = System.Convert.toDateTime(testValues[i], Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.s_dateTimeFormatInfo);
                Bridge.Test.Assert.areEqual(expectedValues[i], result);
            }

            //#348
            //string minDateExpected;
            //if (Utilities.BrowserHelper.IsFirefox())
            //{
            //    minDateExpected = "Mon Jan 01 0001";
            //}
            //else
            //{
            //    minDateExpected = "Mon Jan 01 1";
            //}

            //var minDate = Convert.ToDateTime(null);
            //Assert.AreEqual(minDateExpected, minDate.ToDateString());
        },
        fromDateTime: function () {
            var expectedValues = [new Date(1999, 12 - 1, 31, 23, 59, 59), new Date(100, 1 - 1, 1, 0, 0, 0), new Date(1492, 2 - 1, 29, 0, 0, 0), new Date(1, 1 - 1, 1, 0, 0, 0)];
            for (var i = 0; i < expectedValues.length; i = (i + 1) | 0) {
                var result = System.Convert.toDateTime(expectedValues[i]);
                Bridge.Test.Assert.areEqual(expectedValues[i], result);
            }
        },
        fromObject: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f1, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f3, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromBoolean: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f4, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromChar: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f5, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromInt16: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f6, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromInt32: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f6, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromInt64: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f7, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromUInt16: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f6, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromUInt32: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f6, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromUInt64: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f8, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromSingle: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f9, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromDouble: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f10, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromDecimal: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f11, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        }
    });

    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests", $_);

    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests, {
        f1: function () {
            System.Convert.toDateTime({  });
        },
        f2: function (err) {
            return Bridge.is(err, System.InvalidCastException);
        },
        f3: function () {
            System.Convert.toDateTime({  }, Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.s_dateTimeFormatInfo);
        },
        f4: function () {
            System.Convert.toDateTime(false);
        },
        f5: function () {
            System.Convert.toDateTime(97);
        },
        f6: function () {
            System.Convert.toDateTime(5);
        },
        f7: function () {
            System.Convert.toDateTime(System.Int64(5));
        },
        f8: function () {
            System.Convert.toDateTime(System.UInt64(5));
        },
        f9: function () {
            System.Convert.toDateTime(1.0);
        },
        f10: function () {
            System.Convert.toDateTime(1.1);
        },
        f11: function () {
            System.Convert.toDateTime(System.Decimal(1.0));
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToDecimalTests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Decimal)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [System.Decimal(1.0), System.Decimal.Zero];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [System.Decimal(255), System.Decimal(0)];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal(0)];
            var expectedValues = [System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal(0)];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 100.0, 0.0, 0.001, -1000.0, -100.0];
            var expectedValues = [System.Decimal(1000.0), System.Decimal(100.0), System.Decimal(0.0), System.Decimal(0.001), System.Decimal(-1000.0), System.Decimal(-100.0)];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);

            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toDecimal(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [32767, -32768, 0];
            var expectedValues = [System.Decimal(32767), System.Decimal(-32768), System.Decimal(0)];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [System.Decimal(2147483647), System.Decimal(-2147483648), System.Decimal(0)];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var longMinValue = System.Int64.MinValue;
            var longMaxValue = System.Int64.MaxValue;

            var testValues = [longMaxValue, longMinValue, System.Int64(0)];
            var expectedValues = [System.Decimal(longMaxValue), System.Decimal(longMinValue), System.Decimal(0)];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [System.Decimal(0)];
            this.verifyFromObject(function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [-128, 127, 0];
            var expectedValues = [System.Decimal(-128), System.Decimal(127), System.Decimal(0)];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [1000.0, 100.0, 0.0, -1.0, -100.0];
            var expectedValues = [System.Decimal(1000.0), System.Decimal(100.0), System.Decimal(0.0), System.Decimal(-1.0), System.Decimal(-100.0)];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);

            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toDecimal(value); }, overflowValues);
        },
        fromString: function () {
            var longMaxValue = System.Int64.MaxValue;
            var intMaxValue = 2147483647;

            var decimalMaxValueStr = System.Decimal.MaxValue.toFixed(0, 4);
            var decimalMinValueStr = System.Decimal.MinValue.toFixed(0, 4);

            var testValues = [intMaxValue.toString(), longMaxValue.toString(), decimalMaxValueStr, decimalMinValueStr, "0", null];
            var expectedValues = [System.Decimal(intMaxValue), System.Decimal(longMaxValue), System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal(0), System.Decimal(0)];
            this.verifyFromString(function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, testValues, expectedValues);

            var overflowValues = ["792281625142643000000000000000"];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, overflowValues);

            var formatExceptionValues = ["100E12"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, formatExceptionValues);
        },
        fromUInt16: function () {
            var testValues = [65535, 0];
            var expectedValues = [System.Decimal(65535), System.Decimal(0)];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [4294967295, 0];
            var expectedValues = [System.Decimal(4294967295), System.Decimal(0)];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var ulongMaxValue = System.UInt64.MaxValue;

            var testValues = [ulongMaxValue, System.UInt64(0)];
            var expectedValues = [System.Decimal(ulongMaxValue), System.Decimal(0)];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToDoubleTests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Double)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1.0, 0.0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal(0.0)];
            var expectedValues = [System.Decimal.toFloat(System.Decimal.MaxValue), System.Decimal.toFloat(System.Decimal.MinValue), 0.0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromDouble: function () {
            var testValues = [System.Double.max, System.Double.min, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 4.94065645841247E-324];
            var expectedValues = [System.Double.max, System.Double.min, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 4.94065645841247E-324];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromInt16: function () {
            var testValues = [32767, -32768, 0];
            var expectedValues = [32767, -32768, 0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [2147483647, -2147483648, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64.MaxValue, System.Int64.MinValue, System.Int64(0)];
            var expectedValues = [9.2233720368547758E+18, -9.2233720368547758E+18, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0.0];
            this.verifyFromObject(function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [127, -128];
            var expectedValues = [127, -128];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [3.40282347E+38, -3.40282347E+38, 0.0];
            var expectedValues = [3.40282347E+38, -3.40282347E+38, 0.0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromString: function () {
            var doubleMaxValue = System.Double.max;
            var doubleMinValue = -System.Double.max;

            var testValues = [System.Double.format(doubleMinValue, "R"), System.Double.format(doubleMaxValue, "R"), System.Double.format((0.0), 'G'), System.Double.format((10.0), 'G'), System.Double.format((-10.0), 'G'), null];
            var expectedValues = [-System.Double.max, System.Double.max, 0.0, 10.0, -10.0, 0.0];
            this.verifyFromString(function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, testValues, expectedValues);

            var overflowValues = ["1.79769313486232E+308", "-1.79769313486232E+308"];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, overflowValues);

            var formatExceptionValues = ["123xyz"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, formatExceptionValues);
        },
        fromUInt16: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [4294967295, 0];
            var expectedValues = [4294967295, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64.MaxValue, System.UInt64.MinValue];
            var expectedValues = [1.8446744073709552E+19, 0.0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToInt16Tests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Int16)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65, 0];
            var expectedValues = [65, 0];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(100.0), System.Decimal(-100.0), System.Decimal(0.0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);

            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [100.0, -100.0, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);

            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [32767, -32768, 0];
            var expectedValues = [32767, -32768, 0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);

            var overflowValues = [2147483647, -2147483648];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [100.0, -100.0, 0.0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);

            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromString: function () {
            var shortMinValue = -32768;
            var shortMaxValue = 32767;
            var intMinValue = -2147483648;
            var intMaxValue = 2147483647;

            var testValues = ["100", "-100", "0", shortMinValue.toString(), shortMaxValue.toString(), null];
            var expectedValues = [100, -100, 0, shortMinValue, shortMaxValue, 0];
            this.verifyFromString(function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, testValues, expectedValues);

            var overflowValues = [intMinValue.toString(), intMaxValue.toString()];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, overflowValues);

            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_16, (32767).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_16, (-32768).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [0, 0, 0, 0, 32767, 32767, 32767, 32767, -32768, -32768, -32768, -32768];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 7); }, testValues, testBases, expectedValues);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MIN_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 7); }, overflowValues, overflowBases);

            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 7); }, formatExceptionValues, formatExceptionBases);

            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 7); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);

            var overflowValues = [65535];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt16, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);

            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);

            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToInt32Tests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Int32)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [0, 65535, 98];
            var expectedValues = [0, 65535, 98];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(100.0), System.Decimal(-100.0), System.Decimal(0.0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);

            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [100.0, -100.0, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);

            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [2147483647, -2147483648, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [100.0, -100.0, 0.0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);

            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromString: function () {
            var intMinValue = -2147483648;
            var intMaxValue = 2147483647;
            var longMinValue = System.Int64.MinValue;
            var longMaxValue = System.Int64.MaxValue;

            var testValues = ["100", "-100", "0", intMinValue.toString(), intMaxValue.toString(), null];
            var expectedValues = [100, -100, 0, intMinValue, intMaxValue, 0];
            this.verifyFromString(function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, testValues, expectedValues);

            var overflowValues = [longMinValue.toString(), longMaxValue.toString()];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, overflowValues);

            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_16, (2147483647).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_16, (-2147483648).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [0, 0, 0, 0, 2147483647, 2147483647, 2147483647, 2147483647, -2147483648, -2147483648, -2147483648, -2147483648];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 9); }, testValues, testBases, expectedValues);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MIN_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 9); }, overflowValues, overflowBases);

            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 9); }, formatExceptionValues, formatExceptionBases);

            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 9); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);

            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);

            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToInt64Tests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Int64)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [System.Int64(1), System.Int64(0)];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [System.Int64(255), System.Int64(0)];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65535, 0, 98];
            var expectedValues = [System.Int64(65535), System.Int64(0), System.Int64(98)];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(100.0), System.Decimal(-100.0), System.Decimal(0.0)];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);

            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toInt64(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [100.0, -100.0, 0];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);

            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toInt64(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [System.Int64(2147483647), System.Int64(-2147483648), System.Int64(0)];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64.MaxValue, System.Int64.MinValue, System.Int64(0)];
            var expectedValues = [System.Int64.MaxValue, System.Int64.MinValue, System.Int64(0)];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [System.Int64(0)];
            this.verifyFromObject(function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [100.0, -100.0, 0.0];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);

            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toInt64(value); }, overflowValues);
        },
        fromString: function () {
            var longMinValue = System.Int64.MinValue;
            var longMaxValue = System.Int64.MaxValue;

            var testValues = ["100", "-100", "0", longMinValue.toString(), longMaxValue.toString(), null];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0), longMinValue, longMaxValue, System.Int64(0)];
            this.verifyFromString(function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, testValues, expectedValues, true);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_OVERFLOW_MIN_STRING];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, overflowValues);

            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var minSafeValue = System.Int64.MinValue;
            var maxSafeValue = System.Int64.MaxValue;

            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_16, maxSafeValue.toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_16, minSafeValue.toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [System.Int64(0), System.Int64(0), System.Int64(0), System.Int64(0), maxSafeValue, maxSafeValue, maxSafeValue, maxSafeValue, minSafeValue, minSafeValue, minSafeValue, minSafeValue];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 11); }, testValues, testBases, expectedValues, true);

            var overflowValues = ["FFE0000000000001", "1777400000000000000001", "1111111111100000000000000000000000000000000000000000000000000001", "9223372036854775808", "-9223372036854775809", "11111111111111111111111111111111111111111111111111111111111111111", "1FFFFffffFFFFffff", "7777777777777777777777777"];
            var overflowBases = [16, 8, 2, 10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 11); }, overflowValues, overflowBases);

            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 11); }, formatExceptionValues, formatExceptionBases);

            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 11); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [System.Int64(100), System.Int64(0)];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [System.Int64(100), System.Int64(0)];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [System.Int64(100), System.Int64(0)];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);

            var overflowValues = [System.UInt64([0,-2147483648])];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toInt64(value); }, overflowValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToSByteTests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.SByte)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [255];
            this.verifyThrowsViaObj(System.OverflowException, System.Byte, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromChar: function () {
            var testValues = [65, 0];
            var expectedValues = [65, 0];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(100.0), System.Decimal(-100.0), System.Decimal(0.0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [100.0, -100.0, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [2147483647, -2147483648];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toSByte(value); }, function (value, provider) { return System.Convert.toSByte(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toSByte(value); }, function (value, provider) { return System.Convert.toSByte(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [127, -128];
            var expectedValues = [127, -128];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [100.0, -100.0, 0.0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromString: function () {
            var sbyteMinValue = -128;
            var sbyteMaxValue = 127;
            var shortMinValue = -32768;
            var shortMaxValue = 32767;

            var testValues = ["100", "-100", "0", sbyteMinValue.toString(), sbyteMaxValue.toString()];
            var expectedValues = [100, -100, 0, sbyteMinValue, sbyteMaxValue];
            this.verifyFromString(function (value) { return System.Convert.toSByte(value, null, 18); }, function (value, provider) { return System.Convert.toSByte(value, provider, 18); }, testValues, expectedValues);

            var overflowValues = [shortMinValue.toString(), shortMaxValue.toString()];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toSByte(value, null, 18); }, function (value, provider) { return System.Convert.toSByte(value, provider, 18); }, overflowValues);

            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toSByte(value, null, 18); }, function (value, provider) { return System.Convert.toSByte(value, provider, 18); }, formatExceptionValues);

            // Note: Only the Convert.ToSByte(String, IFormatProvider) overload throws an ArgumentNullException.
            // This is inconsistent with the other numeric conversions, but fixing this behavior is not worth making
            // a breaking change which will affect the desktop CLR.
            this.verifyThrows(System.ArgumentNullException, String, $_.Bridge.ClientTest.ConvertTests.ConvertToSByteTests.f1, [null]);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MAX_STRING_BASE_16, (127).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MIN_STRING_BASE_16, (-128).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MIN_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MIN_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [0, 0, 0, 0, 127, 127, 127, 127, -128, -128, -128, -128];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 5); }, testValues, testBases, expectedValues);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MIN_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 5); }, overflowValues, overflowBases);

            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 5); }, formatExceptionValues, formatExceptionBases);

            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 5); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [65535];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt16, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);

            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        }
    });

    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToSByteTests", $_);

    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToSByteTests, {
        f1: function (input) {
            return System.Convert.toSByte(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(System.SByte).s_instance, 18);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToSingleTests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Single)],
        fromBoolean: function () {
            var testValues = [false, true];
            var expectedValues = [0.0, 1.0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(1000.0), System.Decimal(0.0), System.Decimal(-1000.0), System.Decimal.MaxValue, System.Decimal.MinValue];
            var expectedValues = [1000.0, 0.0, -1000.0, System.Decimal.toFloat(System.Decimal.MaxValue), System.Decimal.toFloat(System.Decimal.MinValue)];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 100.0, 0.0, -100.0, -1000.0, System.Double.max, -System.Double.max];
            var expectedValues = [1000.0, 100.0, 0.0, -100.0, -1000.0, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromInt16: function () {
            var testValues = [32767, -32768, 0];
            var expectedValues = [32767, -32768, 0.0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [2147483647, -2147483648, 0.0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64.MaxValue, System.Int64.MinValue, System.Int64(0)];
            var expectedValues = [System.Int64.toNumber(System.Int64.MaxValue), System.Int64.toNumber(System.Int64.MinValue), 0.0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0.0];
            this.verifyFromObject(function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100.0, -100.0, 0.0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [3.40282347E+38, -3.40282347E+38, Number(), Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 1.401298E-45];
            var expectedValues = [3.40282347E+38, -3.40282347E+38, Number(), Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 1.401298E-45];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromString: function () {
            var testValues = [System.Single.format(3.40282347E+38, "R"), System.Single.format((0.0), 'G'), System.Single.format(-3.40282347E+38, "R"), null];
            var expectedValues = [3.40282347E+38, 0.0, -3.40282347E+38, 0.0];
            this.verifyFromString(function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, testValues, expectedValues);

            var doubleMaxValue = System.Double.max;
            var doubleMinValue = -System.Double.max;
            var overflowValues = [System.Double.format(doubleMinValue, "R"), System.Double.format(doubleMaxValue, "R")];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, overflowValues);

            var formatExceptionValues = ["1f2d"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, formatExceptionValues);
        },
        fromUInt16: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [4294967295, 0];
            var expectedValues = [4294967295, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64.MaxValue, System.UInt64.MinValue];
            var expectedValues = [System.Int64.toNumber(System.UInt64.MaxValue), System.Int64.toNumber(System.UInt64.MinValue)];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.UInt16)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65535, 0, 98];
            var expectedValues = [65535, 0, 98];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(1000.0), System.Decimal(0.0)];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var overflowValues = [System.Double.max, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [1000, 0, 32767];
            var expectedValues = [1000, 0, 32767];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var overflowValues = [-32768];
            this.verifyThrowsViaObj(System.OverflowException, System.Int16, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [1000, 0];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var overflowValues = [-2147483648, 2147483647];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(1000), System.Int64(0)];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MinValue, System.Int64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var values = [-128];
            this.verifyThrowsViaObj(System.OverflowException, System.SByte, function (value) { return System.Convert.toUInt16(value); }, values);
        },
        fromSingle: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var values = [3.40282347E+38, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toUInt16(value); }, values);
        },
        fromString: function () {
            var ushortMaxValue = 65535;

            var testValues = ["1000", (0).toString(), ushortMaxValue.toString(), null];
            var expectedValues = [1000, 0, ushortMaxValue, 0];
            this.verifyFromString(function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, testValues, expectedValues);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MIN_STRING, System.Decimal.MaxValue.toFixed(0, 4)];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, overflowValues);

            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_MAX_STRING_BASE_16, (65535).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_MAX_STRING_BASE_2, (0).toString(), (0).toString(), (0).toString(), (0).toString()];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [0, 0, 0, 0, 65535, 65535, 65535, 65535, 0, 0, 0, 0];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 8); }, testValues, testBases, expectedValues);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MIN_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 8); }, overflowValues, overflowBases);

            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 8); }, formatExceptionValues, formatExceptionBases);

            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 8); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);

            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.UInt32)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [0, 65535, 98];
            var expectedValues = [0, 65535, 98];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(1000.0), System.Decimal(0.0)];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);

            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 0.0, -0.5, 4294967295.49999, 472.2, 472.6, 472.5, 471.5];
            var expectedValues = [1000, 0, 0, 4294967295, 472, 473, 472, 472];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);

            var overflowValues = [System.Double.max, -0.500000000001, -100.0, System.Int64.toNumber(System.Int64([0,1])), 4294967295.5];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [1000, 0, 32767];
            var expectedValues = [1000, 0, 32767];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);

            var overflowValues = [-32768];
            this.verifyThrowsViaObj(System.OverflowException, System.Int16, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [1000, 0, 2147483647];
            var expectedValues = [1000, 0, 2147483647];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);

            var overflowValues = [-2147483648];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(1000), System.Int64(0)];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);

            var overflowValues = [-128];
            this.verifyThrowsViaObj(System.OverflowException, System.SByte, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromSingle: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);

            var overflowValues = [3.40282347E+38, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromString: function () {
            var ushortMaxValue = 65535;
            var intMaxValue = 2147483647;
            var uintMaxValue = 4294967295;

            var testValues = ["1000", "0", ushortMaxValue.toString(), uintMaxValue.toString(), intMaxValue.toString(), "2147483648", "2147483649", null];
            var expectedValues = [1000, 0, 65535, 4294967295, 2147483647, 2147483648, 2147483649, 0];
            this.verifyFromString(function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, testValues, expectedValues);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MIN_STRING, System.Decimal.MaxValue.toFixed(0, 4)];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, overflowValues);

            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_MAX_STRING_BASE_16, (4294967295).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_MAX_STRING_BASE_2, "0", "0", "0", "0", "2147483647", "2147483648", "2147483649"];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2, 10, 10, 10];
            var expectedValues = [0, 0, 0, 0, 4294967295, 4294967295, 4294967295, 4294967295, 0, 0, 0, 0, 2147483647, 2147483648, 2147483649];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 10); }, testValues, testBases, expectedValues);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MIN_STRING, "18446744073709551618", "18446744073709551619", "18446744073709551620", "-4294967297", Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 10, 10, 10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 10); }, overflowValues, overflowBases);

            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 10); }, formatExceptionValues, formatExceptionBases);

            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 10); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [4294967295, 0];
            var expectedValues = [4294967295, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);

            var values = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toUInt32(value); }, values);
        }
    });

    Bridge.define("Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests", {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.UInt64)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [System.UInt64(1), System.UInt64(0)];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [System.UInt64(255), System.UInt64(0)];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65535, 0, 98];
            var expectedValues = [System.UInt64(65535), System.UInt64(0), System.UInt64(98)];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(1000.0), System.Decimal(0.0)];
            var expectedValues = [System.UInt64(1000), System.UInt64(0)];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);

            var overflowValues = [System.Decimal.MinValue, System.Decimal.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [System.UInt64(1000), System.UInt64(0)];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);

            var overflowValues = [System.Double.max, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [1000, 0, 32767];
            var expectedValues = [System.UInt64(1000), System.UInt64(0), System.UInt64(32767)];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);

            var overflowValues = [-32768];
            this.verifyThrowsViaObj(System.OverflowException, System.Int16, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [1000, 0, 2147483647];
            var expectedValues = [System.UInt64(1000), System.UInt64(0), System.UInt64(2147483647)];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);

            var overflowValues = [-2147483648];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(1000), System.Int64(0), System.Int64.MaxValue];
            var expectedValues = [System.UInt64(1000), System.UInt64(0), System.UInt64(System.Int64.MaxValue)];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);

            var overflowValues = [System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [System.UInt64(0)];
            this.verifyFromObject(function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, testValues, expectedValues);

            var invalidValues = [{  }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, 0];
            var expectedValues = [System.UInt64(100), System.UInt64(0)];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);

            var overflowValues = [-128];
            this.verifyThrowsViaObj(System.OverflowException, System.SByte, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromSingle: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [System.UInt64(1000), System.UInt64(0)];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);

            var overflowValues = [3.40282347E+38, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromString: function () {
            var ushortMaxValue = 65535;
            var uintMaxValue = 4294967295;

            var testValues = ["1000", "0", ushortMaxValue.toString(), uintMaxValue.toString(), null];
            var expectedValues = [System.UInt64(1000), System.UInt64(0), System.UInt64(65535), System.UInt64(4294967295), System.UInt64(0)];
            this.verifyFromString(function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, testValues, expectedValues);

            var longMaxValue = System.UInt64.MaxValue;
            var testValuesLong = [longMaxValue.toString()];
            var expectedValuesLong = [longMaxValue];
            this.verifyFromString(function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, testValuesLong, expectedValuesLong);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MIN_STRING, System.Decimal.MaxValue.toFixed(0, 4)];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, overflowValues);

            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var maxSafeValue = System.UInt64.MaxValue;

            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_MAX_STRING_BASE_16, maxSafeValue.toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_MAX_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2];
            var expectedValues = [System.UInt64(0), System.UInt64(0), System.UInt64(0), System.UInt64(0), maxSafeValue, maxSafeValue, maxSafeValue, maxSafeValue];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, testValues, testBases, expectedValues, true);

            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MIN_STRING];
            var overflowBases = [10, 10];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, overflowValues, overflowBases);

            var overflowValuesBig = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBasesBig = [2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, overflowValuesBig, overflowBasesBig);

            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, formatExceptionValues, formatExceptionBases);

            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [System.UInt64(100), System.UInt64(0)];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [0, 4294967295];
            var expectedValues = [System.UInt64(0), System.UInt64(4294967295)];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64.MaxValue, System.UInt64.MinValue];
            var expectedValues = [System.UInt64.MaxValue, System.UInt64.MinValue];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        }
    });

    Bridge.define("Bridge.ClientTest.Exceptions.CommonExceptionTests.E2", {
        inherits: [Bridge.ClientTest.Exceptions.CommonExceptionTests.E1],
        ctor: function (message) {
            this.$initialize();
            Bridge.ClientTest.Exceptions.CommonExceptionTests.E1.ctor.call(this, message);
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.Bridge1529.DS", {
        inherits: [Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS],
        $literal: true,
        ctor: function () {
            var $this = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.ctor();
            (function(){
                this.field = 0;
            }).call($this);
            return $this;
        }
    });

    Bridge.define("Bridge.ClientTest.ObjectLiteralTests.Bridge1529.TS", {
        inherits: [Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS],
        $literal: true,
        ctor: function () {
            var $this = Bridge.ClientTest.ObjectLiteralTests.Bridge1529.BS.$ctor1(8);
            (function(){

            }).call($this);
            return $this;
        }
    });

    Bridge.define("Bridge.ClientTest.PropertyAccessorTests.D3", {
        inherits: [Bridge.ClientTest.PropertyAccessorTests.B3],
        getP1: function () {
            return ((Bridge.ClientTest.PropertyAccessorTests.B3.prototype.getP1.call(this) + 1) | 0);
        },
        setP1: function (value) {
            Bridge.ClientTest.PropertyAccessorTests.B3.prototype.setP1.call(this, (value - 1) | 0);
        },
        getP2: function () {
            return ((Bridge.ClientTest.PropertyAccessorTests.B3.prototype.getP2.call(this) + 1) | 0);
        },
        setP3: function (value) {
            Bridge.ClientTest.PropertyAccessorTests.B3.prototype.setP3.call(this, (value - 1) | 0);
        }
    });

    Bridge.define("Bridge.ClientTest.PropertyAccessorTests.D4$1", function (T) { return {
        inherits: [Bridge.ClientTest.PropertyAccessorTests.B4$1(T)],
        getP1: function () {
            return Bridge.ClientTest.PropertyAccessorTests.B4$1(T).prototype.getP1.call(this) + 1;
        },
        setP1: function (value) {
            Bridge.ClientTest.PropertyAccessorTests.B4$1(T).prototype.setP1.call(this, value - 1);
        },
        getP2: function () {
            return Bridge.ClientTest.PropertyAccessorTests.B4$1(T).prototype.getP2.call(this) + 1;
        },
        setP3: function (value) {
            Bridge.ClientTest.PropertyAccessorTests.B4$1(T).prototype.setP3.call(this, value - 1);
        }
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C3", {
        inherits: [Bridge.ClientTest.Reflection.AttributeTests.C2]
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C5", {
        inherits: [Bridge.ClientTest.Reflection.AttributeTests.C2]
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C6", {
        inherits: [Bridge.ClientTest.Reflection.AttributeTests.C2]
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C8", {
        inherits: [Bridge.ClientTest.Reflection.AttributeTests.C7]
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.C1", {
        inherits: [Bridge.ClientTest.Reflection.GetMembersTests.B1],
        statics: {
            FCS1: 0,
            FCS2: 0,
            config: {
                properties: {
                    PCS1: 0,
                    PCS2: 0
                }
            },
            addECS1: function (value) {
            },
            removeECS1: function (value) {
            },
            addECS2: function (value) {
            },
            removeECS2: function (value) {
            },
            MCS: function () {
            },
            MCS$1: function (x) {
            },
            MCS$2: function (x, y) {
            },
            MCS2: function (x, y) {
            }
        },
        FC1: 0,
        FC2: 0,
        config: {
            properties: {
                PC1: 0,
                PC2: 0
            }
        },
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Reflection.GetMembersTests.B1.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            Bridge.ClientTest.Reflection.GetMembersTests.B1.ctor.call(this);
        },
        $ctor2: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.Reflection.GetMembersTests.B1.ctor.call(this);
        },
        getItem$1: function (x) {
            return 0;
        },
        setItem$1: function (x, value) {
        },
        addEC1: function (value) {
        },
        removeEC1: function (value) {
        },
        addEC2: function (value) {
        },
        removeEC2: function (value) {
        },
        MC: function () {
        },
        MC$1: function (x) {
        },
        MC$2: function (x, y) {
        },
        MC2: function (x, y) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.C2", {
        inherits: [Bridge.ClientTest.Reflection.GetMembersTests.B2],
        statics: {
            FS: 0,
            FCS: 0,
            config: {
                events: {
                    ES: null,
                    ECS: null
                },
                properties: {
                    PS: 0,
                    PCS: 0
                }
            },
            MS: function () {
            },
            MCS: function () {
            },
            M2S: function (x) {
            },
            M2S$1: function (x) {
            },
            M2CS: function (x) {
            },
            M2CS$1: function (x) {
            },
            M3S: function (x) {
            }
        },
        f$1: 0,
        FC: 0,
        config: {
            events: {
                E$1: null,
                EC: null
            },
            properties: {
                P$1: 0,
                PC: 0
            }
        },
        getItem$2: function (x) {
            return 0;
        },
        setItem$2: function (x, value) {
        },
        getItem$3: function (x) {
            return 0;
        },
        setItem$3: function (x, value) {
        },
        m$1: function () {
        },
        MC: function () {
        },
        M2$2: function (x) {
        },
        M2$3: function (x) {
        },
        M2C: function (x) {
        },
        M2C$1: function (x) {
        },
        M3$1: function (x) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.I2", {
        inherits: [Bridge.ClientTest.Reflection.GetMembersTests.I1],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C10$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(T),Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(T),Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D3", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C2$1(System.Int32),Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(String)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I3", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.DS", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.BS],
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.BS.ctor.call(this, 0);
        }
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(T1),Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I5$1", function (T1) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I2$1(T1)],
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I1]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1", function (T) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y4$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I9$2(T1,T2)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.I2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.I1],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseMethodInvocationTypes.D", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.BaseMethodInvocationTypes.B],
        f: function (x, y) {
            return ((x + y) | 0);
        },
        g: function (T, x, y) {
            return ((x + y) | 0);
        },
        doIt: function (x, y) {
            return Bridge.ClientTest.Reflection.TypeSystemTests.BaseMethodInvocationTypes.B.prototype.f.call(this, x, y);
        },
        doItGeneric: function (x, y) {
            return Bridge.ClientTest.Reflection.TypeSystemTests.BaseMethodInvocationTypes.B.prototype.g.call(this, String, x, y);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.D", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.B],
        messageD: null,
        ctor: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithArgumentsTypes.B.ctor.call(this, ((x + 1) | 0), ((y + 1) | 0));
            this.messageD = x + " " + y;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.D", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.B],
        messageD: null,
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemTests.BaseNamedConstructorWithoutArgumentsTypes.B.ctor.call(this);
            this.messageD = "Y";
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.D", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.B],
        messageD: null,
        ctor: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithArgumentsTypes.B.ctor.call(this, ((x + 1) | 0), ((y + 1) | 0));
            this.messageD = x + " " + y;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.D", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.B],
        messageD: null,
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemTests.BaseUnnamedConstructorWithoutArgumentsTypes.B.ctor.call(this);
            this.messageD = "Y";
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.I4", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.I3],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.E", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D],
        g: null,
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D.ctor.call(this);
            this.g = " and derived ctor";
        },
        getMessage: function () {
            return System.String.concat(Bridge.ClientTest.Reflection.TypeSystemTests.ConstructingInstanceWithNamedConstructorTypes.D.prototype.getMessage.call(this), this.g);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.DS", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.BS],
        ctor: function (x) {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemTests.BS.ctor.call(this, x);
        },
        getX: function () {
            return this.X;
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.DS2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.BS],
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemTests.BS.ctor.call(this, 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.G$2", function (T1, T2) { return {
        inherits: function () { return [Bridge.ClientTest.Reflection.TypeSystemTests.BX$1(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(T1,Bridge.ClientTest.Reflection.TypeSystemTests.C)),Bridge.ClientTest.Reflection.TypeSystemTests.IG$1(Bridge.ClientTest.Reflection.TypeSystemTests.G$2(T2,String))]; },
        statics: {
            ctor: function () {
                Bridge.ClientTest.Reflection.TypeSystemTests.G$2(T1,T2).field = System.String.concat(Bridge.Reflection.getTypeFullName(T1), " ", Bridge.Reflection.getTypeFullName(T2));
            },
            field: null
        }
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(T),Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(T),Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D3", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.C2$1(System.Int32),Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(String)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I3", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1],
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(T1),Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I5$1", function (T1) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I2$1(T1)],
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I1]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1", function (T) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y4$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I9$2(T1,T2)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C1]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.D3", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsSubclassOfTypes.C2$1(System.Int32)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.D", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.B],
        ctor: function (m) {
            this.$initialize();
            Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.B.ctor.call(this, m);
        },
        f: function (x, y) {
            return ((((x - y) | 0) - this.m) | 0);
        },
        g: function (T, x, y) {
            return System.String.concat(((((x - y) | 0) - this.m) | 0), Bridge.Reflection.getTypeName(T));
        },
        getF: function () {
            return Bridge.fn.bind(this, Bridge.ClientTest.Reflection.TypeSystemTests.MethodGroupConversionTypes.B.prototype.f);
        },
        getG: function () {
            return Bridge.fn.bind(this, function (x, y) { return this.g(String, x, y); });
        }
    });

    Bridge.define("Bridge.ClientTest.SimpleTypes.ObjectTests.C2", {
        inherits: [Bridge.ClientTest.SimpleTypes.ObjectTests.C1]
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex.ctor(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }

                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.getTestDataMatch();

            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);

            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");

            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");

            var m2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.getTestDataMatch(2);

            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);

            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");

            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        captureCollectionFieldsTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.getTestDataMatch();
            var group = m.getGroups().get(1);
            var captures = group.getCaptures();

            Bridge.Test.Assert.areEqual$1(4, captures.getCount(), "Captures.Count");
            Bridge.Test.Assert.areEqual$1(true, captures.getIsReadOnly(), "Captures.IsReadOnly");
            Bridge.Test.Assert.areEqual$1(false, captures.getIsSynchronized(), "Captures.IsSynchronized");
            Bridge.Test.Assert.areEqual$1(group, captures.getSyncRoot(), "Captures.SyncRoot");
        },
        captureCollectionForeachTest: function () {
            var $t;
            var m = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.getTestDataMatch();
            var group = m.getGroups().get(1);
            var captures = group.getCaptures();

            var i = 0;
            $t = Bridge.getEnumerator(captures);
            while ($t.moveNext()) {
                var captureObj = $t.getCurrent();
                var capture = Bridge.as(captureObj, System.Text.RegularExpressions.Capture);
                this.capturesAreEqual(captures.get(i), capture, "Captures[" + i + "]");
                i = (i + 1) | 0;
            }
        },
        captureCollectionEnumeratorTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.getTestDataMatch();
            var group = m.getGroups().get(1);
            var captures = group.getCaptures();

            var en = captures.getEnumerator();

            Bridge.Test.Assert.true$1(en.System$Collections$IEnumerator$moveNext(), "First call - MoveNext()");

            var i = 0;
            do {
                var capture = Bridge.as(en.System$Collections$IEnumerator$getCurrent(), System.Text.RegularExpressions.Capture);
                this.capturesAreEqual(captures.get(i), capture, "Captures[" + i + "]");
                i = (i + 1) | 0;
            } while (en.System$Collections$IEnumerator$moveNext());

            Bridge.Test.Assert.areEqual$1(captures.getCount(), i, "Captures.Count");
        },
        captureCollectionCopyToTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.getTestDataMatch();
            var group = m.getGroups().get(1);
            var captures = group.getCaptures();

            var dstArray = System.Array.init(captures.getCount(), null);
            captures.copyTo(dstArray, 0);

            for (var i = 0; i < captures.getCount(); i = (i + 1) | 0) {
                this.capturesAreEqual(captures.get(i), dstArray[i], "Captures[" + i + "]");
            }

            Bridge.Test.Assert.throws$2(function () {
                captures.copyTo(null, 0);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.f1, "Exception: Array is not null.");
            Bridge.Test.Assert.throws$2(function () {
                captures.copyTo(dstArray, 1);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests.f2, "Exception: Out of range.");
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests, {
        f1: function (err) {
            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(System.ArgumentNullException));
        },
        f2: function (err) {
            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(System.IndexOutOfRangeException));
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex.ctor(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }

                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests.getTestDataMatch();

            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);

            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");

            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");

            var m2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests.getTestDataMatch(2);

            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);

            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");

            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        getGroupNamesTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("");
            var names = rgx.getGroupNames();
            this.validateCollection(String, ["0"], names, "EmptyRegex");

            rgx = new System.Text.RegularExpressions.Regex.ctor("()");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1"], names, "EmptyGroup");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1)");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1"], names, "Group1");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1)(group2)");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1", "2"], names, "Group2");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1())(group2)");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1", "2", "3"], names, "Group3");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>)");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "name1"], names, "NameGroup1");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>)(?'name2')");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "name1", "name2"], names, "NameGroup2");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>(?'inner1'))(?'name2')");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "name1", "inner1", "name2"], names, "NameGroup3");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<test>)()");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1", "test"], names, "NameGroupAndNoname1");
        },
        getGroupNumbersTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("");
            var numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0], numbers, "EmptyRegex");

            rgx = new System.Text.RegularExpressions.Regex.ctor("()");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1], numbers, "EmptyGroup");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1)");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1], numbers, "Group1");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1)(group2)");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2], numbers, "Group2");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1())(group2)");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2, 3], numbers, "Group3");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>)");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1], numbers, "NameGroup1");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>)(?'name2')");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2], numbers, "NameGroup2");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>(?'inner1'))(?'name2')");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2, 3], numbers, "NameGroup3");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<test>)()");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2], numbers, "NameGroupAndNoname1");
        },
        groupNameFromNumberTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "EmptyRegex.GroupNameFromNumber(0)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("()");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "EmptyGroup.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "EmptyGroup.GroupNameFromNumber(1)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "Group1.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "Group1.GroupNameFromNumber(1)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1)(group2)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "Group2.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "Group2.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("2", rgx.groupNameFromNumber(2), "Group2.GroupNameFromNumber(2)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1())(group2)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "Group3.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "Group3.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("2", rgx.groupNameFromNumber(2), "Group3.GroupNameFromNumber(2)");
            Bridge.Test.Assert.areEqual$1("3", rgx.groupNameFromNumber(3), "Group3.GroupNameFromNumber(3)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "NameGroup1.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("name1", rgx.groupNameFromNumber(1), "NameGroup1.GroupNameFromNumber(1)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>)(?'name2')");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "NameGroup2.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("name1", rgx.groupNameFromNumber(1), "NameGroup2.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("name2", rgx.groupNameFromNumber(2), "NameGroup2.GroupNameFromNumber(2)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>(?'inner1'))(?'name2')");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "NameGroup3.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("name1", rgx.groupNameFromNumber(1), "NameGroup3.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("inner1", rgx.groupNameFromNumber(2), "NameGroup3.GroupNameFromNumber(2)");
            Bridge.Test.Assert.areEqual$1("name2", rgx.groupNameFromNumber(3), "NameGroup3.GroupNameFromNumber(3)");

            Bridge.Test.Assert.areEqual$1("", rgx.groupNameFromNumber(999), "NameGroup3.GroupNameFromNumber(999)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<test>)()");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "NameGroupAndNoname1.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "NameGroupAndNoname1.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("test", rgx.groupNameFromNumber(2), "NameGroupAndNoname1.GroupNameFromNumber(2)");
        },
        groupNumberFromNameTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "EmptyRegex.GroupNumberFromName(\"0\")");

            rgx = new System.Text.RegularExpressions.Regex.ctor("()");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "EmptyGroup.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("1"), "EmptyGroup.GroupNumberFromName(\"1\")");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1)");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "Group1.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("1"), "Group1.GroupNumberFromName(\"1\")");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1)(group2)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "Group2.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "Group2.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("2", rgx.groupNameFromNumber(2), "Group2.GroupNameFromNumber(2)");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(group1())(group2)");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "Group3.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("1"), "Group3.GroupNumberFromName(\"1\")");
            Bridge.Test.Assert.areEqual$1(2, rgx.groupNumberFromName("2"), "Group3.GroupNumberFromName(\"2\")");
            Bridge.Test.Assert.areEqual$1(3, rgx.groupNumberFromName("3"), "Group3.GroupNumberFromName(\"3\")");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>)");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "NameGroup1.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("name1"), "NameGroup1.GroupNumberFromName(\"name1\")");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>)(?'name2')");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "NameGroup2.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("name1"), "NameGroup2.GroupNumberFromName(\"name1\")");
            Bridge.Test.Assert.areEqual$1(2, rgx.groupNumberFromName("name2"), "NameGroup2.GroupNumberFromName(\"name2\")");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<name1>(?'inner1'))(?'name2')");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "NameGroup3.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("name1"), "NameGroup3.GroupNumberFromName(\"name1\")");
            Bridge.Test.Assert.areEqual$1(2, rgx.groupNumberFromName("inner1"), "NameGroup3.GroupNumberFromName(\"inner1\")");
            Bridge.Test.Assert.areEqual$1(3, rgx.groupNumberFromName("name2"), "NameGroup3.GroupNumberFromName(\"name2\")");

            Bridge.Test.Assert.areEqual$1(-1, rgx.groupNumberFromName("Fake"), "NameGroup3.GroupNumberFromName(\"Fake\")");

            rgx = new System.Text.RegularExpressions.Regex.ctor("(?<test>)()");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "NameGroupAndNoname1.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("1"), "NameGroupAndNoname1.GroupNumberFromName(\"1\")");
            Bridge.Test.Assert.areEqual$1(2, rgx.groupNumberFromName("test"), "NameGroupAndNoname1.GroupNumberFromName(\"test\")");
        },
        supportedOptionsTest: function () {
            var $t;
            var supportedOptions = $_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests.f1(new (System.Collections.Generic.Dictionary$2(System.Text.RegularExpressions.RegexOptions,Boolean))());

            $t = Bridge.getEnumerator(supportedOptions);
            while ($t.moveNext()) {
                (function () {
                    var supportedOption = $t.getCurrent();
                    if (supportedOption.value) {
                        var rgx = new System.Text.RegularExpressions.Regex.$ctor1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests.Pattern, supportedOption.key);
                    } else {
                        Bridge.Test.Assert.throws$6(System.NotSupportedException, function () {
                            new System.Text.RegularExpressions.Regex.$ctor1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests.Pattern, supportedOption.key);
                        });
                    }
                }).call(this);
            }
        },
        matchNamedGroupTest: function () {
            var pattern = "(?<test>A)(B)";
            var text = "AB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 2, "AB", 3, true);

            this.validateGroup(m, 0, 0, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 0, 2, "AB");

            this.validateGroup(m, 1, 1, 1, true, "B", 1);
            this.validateCapture(m, 1, 0, 1, 1, "B");

            this.validateGroup(m, 2, 0, 1, true, "A", 1);
            this.validateCapture(m, 2, 0, 0, 1, "A");

            this.groupsAreEqual(m.getGroups().get(2), m.getGroups().getByName("test"), "Named Group is correct");
        },
        matchInnerNamedGroupTest1: function () {
            var pattern = "((?<test>A)(B))";
            var text = "AB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 2, "AB", 4, true);

            this.validateGroup(m, 0, 0, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 0, 2, "AB");

            this.validateGroup(m, 1, 0, 2, true, "AB", 1);
            this.validateCapture(m, 1, 0, 0, 2, "AB");

            this.validateGroup(m, 2, 1, 1, true, "B", 1);
            this.validateCapture(m, 2, 0, 1, 1, "B");

            this.validateGroup(m, 3, 0, 1, true, "A", 1);
            this.validateCapture(m, 3, 0, 0, 1, "A");

            this.groupsAreEqual(m.getGroups().get(3), m.getGroups().getByName("test"), "Named Group is correct");
        },
        matchInnerNamedGroupTest2: function () {
            var pattern = "(?<outer>(C)(?<inner1>(?<inner2>A)+)(B))";
            var text = "CAAAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "CAAAB", 6, true);

            this.validateGroup(m, 0, 0, 5, true, "CAAAB", 1);
            this.validateCapture(m, 0, 0, 0, 5, "CAAAB");

            this.validateGroup(m, 1, 0, 1, true, "C", 1);
            this.validateCapture(m, 1, 0, 0, 1, "C");

            this.validateGroup(m, 2, 4, 1, true, "B", 1);
            this.validateCapture(m, 2, 0, 4, 1, "B");

            this.validateGroup(m, 3, 0, 5, true, "CAAAB", 1);
            this.validateCapture(m, 3, 0, 0, 5, "CAAAB");

            this.validateGroup(m, 4, 1, 3, true, "AAA", 1);
            this.validateCapture(m, 4, 0, 1, 3, "AAA");

            this.validateGroup(m, 5, 3, 1, true, "A", 3);
            this.validateCapture(m, 5, 0, 1, 1, "A");
            this.validateCapture(m, 5, 1, 2, 1, "A");
            this.validateCapture(m, 5, 2, 3, 1, "A");

            this.groupsAreEqual(m.getGroups().get(4), m.getGroups().getByName("inner1"), "Named Group is correct");
        },
        groupOrderingTest: function () {
            var $t;
            var pattern = "(C)(?<group1>A)+(B)";
            var text = "CAAAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "CAAAB", 4, true);

            var expected = new (System.Collections.Generic.List$1(String))();

            this.validateGroup(m, 0, 0, 5, true, "CAAAB", 1);
            this.validateCapture(m, 0, 0, 0, 5, "CAAAB");
            expected.add("CAAAB");

            this.validateGroup(m, 1, 0, 1, true, "C", 1);
            this.validateCapture(m, 1, 0, 0, 1, "C");
            expected.add("C");

            this.validateGroup(m, 2, 4, 1, true, "B", 1);
            this.validateCapture(m, 2, 0, 4, 1, "B");
            expected.add("B");

            this.validateGroup(m, 3, 3, 1, true, "A", 3);
            this.validateCapture(m, 3, 0, 1, 1, "A");
            this.validateCapture(m, 3, 1, 2, 1, "A");
            this.validateCapture(m, 3, 2, 3, 1, "A");
            expected.add("A");

            var i = 0;
            $t = Bridge.getEnumerator(m.getGroups());
            while ($t.moveNext()) {
                var group = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Group);
                Bridge.Test.Assert.areEqual$1(expected.getItem(i), group.getValue(), "Group[" + i + "].Value is correct");
                i = (i + 1) | 0;
            }
        },
        repeatingGroupTest: function () {
            var pattern = "((A(\\d)*A)x(B(\\d)*B)+)";
            var text = "A123AxBBB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 8, "A123AxBB", 6, true);

            this.validateGroup(m, 0, 0, 8, true, "A123AxBB", 1);
            this.validateCapture(m, 0, 0, 0, 8, "A123AxBB");

            this.validateGroup(m, 1, 0, 8, true, "A123AxBB", 1);
            this.validateCapture(m, 1, 0, 0, 8, "A123AxBB");

            this.validateGroup(m, 2, 0, 5, true, "A123A", 1);
            this.validateCapture(m, 2, 0, 0, 5, "A123A");

            this.validateGroup(m, 3, 3, 1, true, "3", 3);
            this.validateCapture(m, 3, 0, 1, 1, "1");
            this.validateCapture(m, 3, 1, 2, 1, "2");
            this.validateCapture(m, 3, 2, 3, 1, "3");

            this.validateGroup(m, 4, 6, 2, true, "BB", 1);
            this.validateCapture(m, 4, 0, 6, 2, "BB");

            this.validateGroup(m, 5, 0, 0, false, "", 0);
        },
        zeroResultTest: function () {
            // Case 1:
            var pattern = "()";
            var text = "ABC";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 2, true);

            this.validateGroup(m, 0, 0, 0, true, "", 1);
            this.validateCapture(m, 0, 0, 0, 0, "");

            this.validateGroup(m, 1, 0, 0, true, "", 1);
            this.validateCapture(m, 1, 0, 0, 0, "");

            // Case 2:
            pattern = "(B?)";
            text = "ABC";
            rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 2, true);

            this.validateGroup(m, 0, 0, 0, true, "", 1);
            this.validateCapture(m, 0, 0, 0, 0, "");

            this.validateGroup(m, 1, 0, 0, true, "", 1);
            this.validateCapture(m, 1, 0, 0, 0, "");

            // Case 3:
            pattern = "(B)?";
            text = "ABC";
            rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 2, true);

            this.validateGroup(m, 0, 0, 0, true, "", 1);
            this.validateCapture(m, 0, 0, 0, 0, "");

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        nonCapturingGroupsTest: function () {
            var pattern = "(?:Q(?<noncapInner>A)Z)(B)(?:C)";
            var text = "QAZBC";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "QAZBC", 3, true);

            this.validateGroup(m, 0, 0, 5, true, "QAZBC", 1);
            this.validateCapture(m, 0, 0, 0, 5, "QAZBC");

            this.validateGroup(m, 1, 3, 1, true, "B", 1);
            this.validateCapture(m, 1, 0, 3, 1, "B");

            this.validateGroup(m, 2, 1, 1, true, "A", 1);
            this.validateCapture(m, 2, 0, 1, 1, "A");
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests, {
        f1: function (_o8) {
            _o8.add(0, true);
            _o8.add(1, true);
            _o8.add(2, true);
            _o8.add(4, true);
            _o8.add(8, false);
            _o8.add(16, true);
            _o8.add(32, true);
            _o8.add(64, false);
            _o8.add(256, false);
            _o8.add(512, false);
            return _o8;
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex.ctor(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }

                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.getTestDataMatch();

            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);

            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");

            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");

            var m2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.getTestDataMatch(2);

            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);

            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");

            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        groupCollectionFieldsTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.getTestDataMatch();
            var groups = m.getGroups();

            Bridge.Test.Assert.areEqual$1(2, groups.getCount(), "Groups.Count");
            Bridge.Test.Assert.areEqual$1(true, groups.getIsReadOnly(), "Groups.IsReadOnly");
            Bridge.Test.Assert.areEqual$1(false, groups.getIsSynchronized(), "Groups.IsSynchronized");
            Bridge.Test.Assert.areEqual$1(m, groups.getSyncRoot(), "Groups.SyncRoot");
        },
        groupCollectionForeachTest: function () {
            var $t;
            var m = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.getTestDataMatch();
            var groups = m.getGroups();

            var i = 0;
            $t = Bridge.getEnumerator(groups);
            while ($t.moveNext()) {
                var groupObj = $t.getCurrent();
                var group = Bridge.as(groupObj, System.Text.RegularExpressions.Group);
                this.groupsAreEqual(groups.get(i), group, "Groups[" + i + "]");
                i = (i + 1) | 0;
            }
        },
        groupCollectionEnumeratorTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.getTestDataMatch();
            var groups = m.getGroups();

            var en = groups.getEnumerator();

            Bridge.Test.Assert.true$1(en.System$Collections$IEnumerator$moveNext(), "First call - MoveNext()");

            var i = 0;
            do {
                var group = Bridge.as(en.System$Collections$IEnumerator$getCurrent(), System.Text.RegularExpressions.Group);
                this.groupsAreEqual(groups.get(i), group, "Groups[" + i + "]");
                i = (i + 1) | 0;
            } while (en.System$Collections$IEnumerator$moveNext());

            Bridge.Test.Assert.areEqual$1(groups.getCount(), i, "Groups.Count");
        },
        groupCollectionCopyToTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.getTestDataMatch();
            var groups = m.getGroups();

            var dstArray = System.Array.init(groups.getCount(), null);
            groups.copyTo(dstArray, 0);

            for (var i = 0; i < groups.getCount(); i = (i + 1) | 0) {
                this.groupsAreEqual(groups.get(i), dstArray[i], "Groups[" + i + "]");
            }

            Bridge.Test.Assert.throws$2(function () {
                groups.copyTo(null, 0);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.f1, "Exception: Array is not null.");
            Bridge.Test.Assert.throws$2(function () {
                groups.copyTo(dstArray, 1);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests.f2, "Exception: Out of range.");
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests, {
        f1: function (err) {
            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(System.ArgumentNullException));
        },
        f2: function (err) {
            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(System.IndexOutOfRangeException));
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex.ctor(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }

                return m;
            },
            getTestDataMatches: function () {
                var rgx = new System.Text.RegularExpressions.Regex.ctor(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.Pattern);
                var m = rgx.matches(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.Text);
                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatch();

            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);

            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");

            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");

            var m2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatch(2);

            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);

            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");

            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        matchCollectionFieldsTest: function () {
            var matches = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatches();

            Bridge.Test.Assert.areEqual$1(2, matches.getCount(), "Matches.Count");
            Bridge.Test.Assert.areEqual$1(true, matches.getIsReadOnly(), "Matches.IsReadOnly");
            Bridge.Test.Assert.areEqual$1(false, matches.getIsSynchronized(), "Matches.IsSynchronized");
            Bridge.Test.Assert.areEqual$1(matches, matches.getSyncRoot(), "Matches.SyncRoot");
        },
        matchCollectionItemsTest: function () {
            var match1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatch();
            var match2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatch(2);
            var expected = [match1, match2];

            var matches = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatches();

            Bridge.Test.Assert.areEqual(expected.length, matches.getCount());
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                this.matchesAreEqual(expected[i], matches.get(i), "Matches[" + i + "]");
            }
        },
        matchCollectionForeachTest: function () {
            var $t;
            var match1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatch();
            var match2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatch(2);
            var expected = [match1, match2];

            var matches = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatches();
            var i = 0;
            $t = Bridge.getEnumerator(matches);
            while ($t.moveNext()) {
                var matchObj = $t.getCurrent();
                var match = Bridge.as(matchObj, System.Text.RegularExpressions.Match);
                this.matchesAreEqual(expected[i], match, "Matches[" + i + "]");
                i = (i + 1) | 0;
            }
        },
        matchCollectionEnumeratorTest: function () {
            var match1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatch();
            var match2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatch(2);
            var expected = [match1, match2];

            var matches = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatches();

            var en = matches.getEnumerator();

            Bridge.Test.Assert.true$1(en.System$Collections$IEnumerator$moveNext(), "First call - MoveNext()");

            var i = 0;
            do {
                var match = Bridge.as(en.System$Collections$IEnumerator$getCurrent(), System.Text.RegularExpressions.Match);
                this.matchesAreEqual(expected[i], match, "Matches[" + i + "]");
                i = (i + 1) | 0;
            } while (en.System$Collections$IEnumerator$moveNext());

            Bridge.Test.Assert.areEqual$1(expected.length, i, "Matches.Count");
        },
        matchCollectionCopyToTest: function () {
            var matches = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.getTestDataMatches();
            var dstArray = System.Array.init(matches.getCount(), null);
            matches.copyTo(dstArray, 0);

            for (var i = 0; i < matches.getCount(); i = (i + 1) | 0) {
                this.matchesAreEqual(matches.get(i), dstArray[i], "Matches[" + i + "]");
            }

            Bridge.Test.Assert.throws$2(function () {
                matches.copyTo(null, 0);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.f1, "Exception: Array is not null.");
            Bridge.Test.Assert.throws$2(function () {
                matches.copyTo(dstArray, 1);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests.f2, "Exception: Out of range.");
        },
        matchCollectionWithEmptyPatternTest: function () {
            var pattern = "";
            var tstText = "characters";

            var rx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var matches = rx.matches(tstText);

            Bridge.Test.Assert.areEqual(((tstText.length + 1) | 0), matches.getCount());
            for (var i = 0; i < matches.getCount(); i = (i + 1) | 0) {
                Bridge.Test.Assert.areEqual$1(i, matches.get(i).getIndex(), "Matches[" + i + "].Index");
                Bridge.Test.Assert.areEqual$1(0, matches.get(i).getLength(), "Matches[" + i + "].Length");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests, {
        f1: function (err) {
            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(System.ArgumentNullException));
        },
        f2: function (err) {
            return Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(err)), Bridge.Reflection.getTypeFullName(System.IndexOutOfRangeException));
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex.ctor(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }

                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests.getTestDataMatch();

            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);

            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");

            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");

            var m2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests.getTestDataMatch(2);

            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);

            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");

            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        matchEmptyPatternTest: function () {
            var pattern = "";
            var tstText = "characters";

            var rx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rx.match(tstText);

            this.validateMatch(m, 0, 0, "", 1, true);
        },
        matchEmptyFieldsTest: function () {
            var m = System.Text.RegularExpressions.Match.getEmpty();
            this.validateMatchNotFound(m);
        },
        matchNextMatchTest: function () {
            var match1 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests.getTestDataMatch();
            var match2 = Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests.getTestDataMatch(2);

            var actual = match1.nextMatch();
            this.matchesAreEqual(match2, actual, "Matches[1]");

            actual = actual.nextMatch();
            this.matchesAreEqual(System.Text.RegularExpressions.Match.getEmpty(), actual, "Matches[1] is Empty");

            actual = System.Text.RegularExpressions.Match.getEmpty().nextMatch();
            this.matchesAreEqual(System.Text.RegularExpressions.Match.getEmpty(), actual, "Empty.NextMatch()");
        },
        matchNextMatchWithEmptyPatternTest: function () {
            var pattern = "";
            var tstText = "characters";

            var rx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rx.match(tstText);
            this.validateMatch(m, 0, 0, "", 1, true);

            for (var i = 1; i < ((tstText.length + 1) | 0); i = (i + 1) | 0) {
                m = m.nextMatch();
                this.validateMatch(m, i, 0, "", 1, true);
            }

            m = m.nextMatch();
            this.validateMatchNotFound(m);
        },
        matchResultTest: function () {
            var $t;
            var expected = ["(decisively)", "(whatever time it was)"];
            var actual = new (System.Collections.Generic.List$1(String))();

            var pattern = "--(.+?)--";
            var replacement = "($1)";
            var input = "He said--decisively--that the time--whatever time it was--had come.";
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches(input, pattern));
            while ($t.moveNext()) {
                var match = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                var result = match.result(replacement);
                actual.add(result);
            }

            this.validateCollection(String, expected, actual.toArray(), "Result");
        },
        matchSearchGroupByNameTest: function () {
            var groupNames = ["groupName1", "groupName2", "groupName3"];

            var pattern = System.String.concat("(?<", groupNames[0], ">\\d+)(?'", groupNames[1], "'ZZ)(?<", groupNames[2], ">\\s+)");
            var tstText = "Number123ZZ   ";

            var rx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rx.match(tstText);

            for (var i = 1; i < 4; i = (i + 1) | 0) {
                var groupName = groupNames[((i - 1) | 0)];
                var g = m.getGroups().getByName(groupName);
                this.validateGroup(m, i, g.getIndex(), g.getLength(), g.getSuccess(), g.getValue(), g.getCaptures().getCount());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        groupOrderingTest1: function () {
            var pattern = "(a)(b)(?<name>c)(d)";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "abcd", 5, true);

            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");

            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");

            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");

            this.validateGroup(m, 3, 3, 1, true, "d", 1);
            this.validateCapture(m, 3, 0, 3, 1, "d");

            this.validateGroup(m, 4, 2, 1, true, "c", 1);
            this.validateCapture(m, 4, 0, 2, 1, "c");
        },
        groupOrderingTest2: function () {
            var pattern = "(a)(b)(?<4>c)(?<name>d)(e)";
            var text = "abcde";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "abcde", 6, true);

            this.validateGroup(m, 0, 0, 5, true, "abcde", 1);
            this.validateCapture(m, 0, 0, 0, 5, "abcde");

            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");

            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");

            this.validateGroup(m, 3, 4, 1, true, "e", 1);
            this.validateCapture(m, 3, 0, 4, 1, "e");

            this.validateGroup(m, 4, 2, 1, true, "c", 1);
            this.validateCapture(m, 4, 0, 2, 1, "c");

            this.validateGroup(m, 5, 3, 1, true, "d", 1);
            this.validateCapture(m, 5, 0, 3, 1, "d");
        },
        groupOrderingTest3: function () {
            var pattern = "(a)(b)(?<5>c)(?<name>d)(e)";
            var text = "abcde";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "abcde", 6, true);

            this.validateGroup(m, 0, 0, 5, true, "abcde", 1);
            this.validateCapture(m, 0, 0, 0, 5, "abcde");

            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");

            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");

            this.validateGroup(m, 3, 4, 1, true, "e", 1);
            this.validateCapture(m, 3, 0, 4, 1, "e");

            this.validateGroup(m, 4, 3, 1, true, "d", 1);
            this.validateCapture(m, 4, 0, 3, 1, "d");

            this.validateGroup(m, 5, 2, 1, true, "c", 1);
            this.validateCapture(m, 5, 0, 2, 1, "c");
        },
        sparseOrderingTest: function () {
            var pattern = "(?<60>n)(?<50>a)(b)(?<3>c)(?<name>d)(?<70>e)(f)";
            var text = "nabcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 7, "nabcdef", 8, true);

            this.validateGroup(m, 0, 0, 7, true, "nabcdef", 1);
            this.validateCapture(m, 0, 0, 0, 7, "nabcdef");

            this.validateGroup(m, 1, 2, 1, true, "b", 1);
            this.validateCapture(m, 1, 0, 2, 1, "b");

            this.validateGroup(m, 2, 6, 1, true, "f", 1);
            this.validateCapture(m, 2, 0, 6, 1, "f");

            this.validateGroup(m, 3, 3, 1, true, "c", 1);
            this.validateCapture(m, 3, 0, 3, 1, "c");

            this.validateGroup(m, 4, 4, 1, true, "d", 1);
            this.validateCapture(m, 4, 0, 4, 1, "d");

            this.validateGroup(m, 50, 1, 1, true, "a", 1);
            this.validateCapture(m, 50, 0, 1, 1, "a");

            this.validateGroup(m, 60, 0, 1, true, "n", 1);
            this.validateCapture(m, 60, 0, 0, 1, "n");

            this.validateGroup(m, 70, 5, 1, true, "e", 1);
            this.validateCapture(m, 70, 0, 5, 1, "e");
        },
        groupCapturesMergeTest: function () {
            var pattern = "(a)(b)(?<2>c)(?<name>d)(e)";
            var text = "abcde";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "abcde", 5, true);

            this.validateGroup(m, 0, 0, 5, true, "abcde", 1);
            this.validateCapture(m, 0, 0, 0, 5, "abcde");

            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");

            this.validateGroup(m, 2, 2, 1, true, "c", 2);
            this.validateCapture(m, 2, 0, 1, 1, "b");
            this.validateCapture(m, 2, 1, 2, 1, "c");

            this.validateGroup(m, 3, 4, 1, true, "e", 1);
            this.validateCapture(m, 3, 0, 4, 1, "e");

            this.validateGroup(m, 4, 3, 1, true, "d", 1);
            this.validateCapture(m, 4, 0, 3, 1, "d");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnEscapeTest: function () {
            var $t, $t1;
            var expected1 = ["?", "?"];
            var actual1 = new (System.Collections.Generic.List$1(String))();

            var expected2 = ["[what kind?]", "[by whom?]"];
            var actual2 = new (System.Collections.Generic.List$1(String))();

            var pattern = "[(.*?)]";
            var input = "The animal [what kind?] was visible [by whom?] from the window";

            var matches = System.Text.RegularExpressions.Regex.matches(input, pattern);
            $t = Bridge.getEnumerator(matches);
            while ($t.moveNext()) {
                var match = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                actual1.add(match.getValue());
            }
            this.validateCollection(String, expected1, actual1.toArray(), "MatchValues1");

            pattern = System.String.concat(System.Text.RegularExpressions.Regex.escape("["), "(.*?)]");
            var matches2 = System.Text.RegularExpressions.Regex.matches(input, pattern);
            $t1 = Bridge.getEnumerator(matches2);
            while ($t1.moveNext()) {
                var match1 = Bridge.cast($t1.getCurrent(), System.Text.RegularExpressions.Match);
                actual2.add(match1.getValue());
            }

            this.validateCollection(String, expected2, actual2.toArray(), "MatchValues2");
        },
        msdnUnescapeTest: function () {
            var pattern = "\n\r\t\f[](){}!123abc \\, *, +, ?, |, {, [, (,), ^, $,., #,  \u0007, \b, \t, and \u000b";
            var escaped = System.Text.RegularExpressions.Regex.escape(pattern);
            var unescaped = System.Text.RegularExpressions.Regex.unescape(escaped);

            Bridge.Test.Assert.areEqual(pattern, unescaped);
        },
        escapeCharSetTest: function () {
            var $t;
            var escapable = "!\"#%&'()*,-./:;?@ABDGSWZ[\\]abdefnrstvwz{}";
            $t = Bridge.getEnumerator(escapable);
            while ($t.moveNext()) {
                var ch = $t.getCurrent();
                try {
                    var rgx = new System.Text.RegularExpressions.Regex.ctor("\\" + String.fromCharCode(ch));
                    rgx.match("" + String.fromCharCode(ch));
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    Bridge.Test.Assert.false$1(true, "Char must be escapable: " + String.fromCharCode(ch));
                }
            }
        },
        nonEscapeCharSetTest: function () {
            var $t;
            var escapable = "CEFHIJKLMNOPQRTUVXY_cghijklmopquxy";
            $t = Bridge.getEnumerator(escapable);
            while ($t.moveNext()) {
                (function () {
                    var ch = $t.getCurrent();
                    Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                        var rgx = new System.Text.RegularExpressions.Regex.ctor("\\" + String.fromCharCode(ch));
                        rgx.match("" + String.fromCharCode(ch));
                    }, "Char must not be escapable: " + String.fromCharCode(ch));
                }).call(this);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        matchesTest: function () {
            var $t;
            var expectedMatchValues = ["writes", "notes"];
            var expectedMatchIndexes = [4, 17];

            var actualMatchValues = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var pattern = "\\b\\w+es\\b";
            var sentence = "Who writes these notes?";

            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            $t = Bridge.getEnumerator(rgx.matches(sentence));
            while ($t.moveNext()) {
                var match = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                actualMatchValues.add(match.getValue());
                actualMatchIndexes.add(match.getIndex());
            }

            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchesAtPositionTest: function () {
            var $t;
            var expectedMatchValues = ["writes", "notes", "uses"];
            var expectedMatchIndexes = [4, 17, 27];

            var actualMatchValues = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var pattern = "\\b\\w+es\\b";
            var sentence = "Who writes these notes and uses our paper?";

            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            var match = rgx.match(sentence);
            actualMatchValues.add(match.getValue());
            actualMatchIndexes.add(match.getIndex());

            $t = Bridge.getEnumerator(rgx.matches$1(sentence, ((match.getIndex() + match.getLength()) | 0)));
            while ($t.moveNext()) {
                var m = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                actualMatchValues.add(m.getValue());
                actualMatchIndexes.add(m.getIndex());
            }

            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchesStaticTest: function () {
            var $t;
            var expectedMatchValues = ["writes", "notes"];
            var expectedMatchIndexes = [4, 17];

            var actualMatchValues = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var pattern = "\\b\\w+es\\b";
            var sentence = "Who writes these notes?";

            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches(sentence, pattern));
            while ($t.moveNext()) {
                var match = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                actualMatchValues.add(match.getValue());
                actualMatchIndexes.add(match.getIndex());
            }

            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchesStaticWithOptionsTest: function () {
            var $t, $t1;
            var expectedMatchValues1 = ["notes"];
            var expectedMatchIndexes1 = [11];

            var expectedMatchValues2 = ["NOTES", "notes"];
            var expectedMatchIndexes2 = [0, 11];

            var actualMatchValues1 = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes1 = new (System.Collections.Generic.List$1(System.Int32))();

            var actualMatchValues2 = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes2 = new (System.Collections.Generic.List$1(System.Int32))();

            var pattern = "\\b\\w+es\\b";
            var sentence = "NOTES: Any notes or comments are optional.";
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches$1(sentence, pattern, 0));
            while ($t.moveNext()) {
                var match = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                actualMatchValues1.add(match.getValue());
                actualMatchIndexes1.add(match.getIndex());
            }

            $t1 = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches$1(sentence, pattern, 1));
            while ($t1.moveNext()) {
                var match1 = Bridge.cast($t1.getCurrent(), System.Text.RegularExpressions.Match);
                actualMatchValues2.add(match1.getValue());
                actualMatchIndexes2.add(match1.getIndex());
            }

            this.validateCollection(String, expectedMatchValues1, actualMatchValues1.toArray(), "MatchValues1");
            this.validateCollection(System.Int32, expectedMatchIndexes1, actualMatchIndexes1.toArray(), "MatchIndexes1");

            this.validateCollection(String, expectedMatchValues2, actualMatchValues2.toArray(), "MatchValues2");
            this.validateCollection(System.Int32, expectedMatchIndexes2, actualMatchIndexes2.toArray(), "MatchIndexes2");
        },
        matchesStaticWithOptionsAndTimeoutTest: function () {
            var $t, $t1;
            var expectedMatchValues1 = ["notes"];
            var expectedMatchIndexes1 = [11];

            var expectedMatchValues2 = ["NOTES", "notes"];
            var expectedMatchIndexes2 = [0, 11];

            var actualMatchValues1 = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes1 = new (System.Collections.Generic.List$1(System.Int32))();

            var actualMatchValues2 = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes2 = new (System.Collections.Generic.List$1(System.Int32))();

            var pattern = "\\b\\w+es\\b";
            var sentence = "NOTES: Any notes or comments are optional.";
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches$2(sentence, pattern, 0, System.TimeSpan.fromSeconds(1)));
            while ($t.moveNext()) {
                var match = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                actualMatchValues1.add(match.getValue());
                actualMatchIndexes1.add(match.getIndex());
            }

            $t1 = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches$2(sentence, pattern, 1, System.TimeSpan.fromSeconds(1)));
            while ($t1.moveNext()) {
                var match1 = Bridge.cast($t1.getCurrent(), System.Text.RegularExpressions.Match);
                actualMatchValues2.add(match1.getValue());
                actualMatchIndexes2.add(match1.getIndex());
            }

            this.validateCollection(String, expectedMatchValues1, actualMatchValues1.toArray(), "MatchValues1");
            this.validateCollection(System.Int32, expectedMatchIndexes1, actualMatchIndexes1.toArray(), "MatchIndexes1");

            this.validateCollection(String, expectedMatchValues2, actualMatchValues2.toArray(), "MatchValues2");
            this.validateCollection(System.Int32, expectedMatchIndexes2, actualMatchIndexes2.toArray(), "MatchIndexes2");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        matchTest: function () {
            var expectedGroupValues = ["One", "car", "red", "car", "blue", "car"];
            var expectedCaptureValues = ["One", "car", "red", "car", "blue", "car"];
            var expectedCaptureIndexes = [0, 4, 8, 12, 16, 21];

            var actualGroupValues = new (System.Collections.Generic.List$1(String))();
            var actualCaptureValues = new (System.Collections.Generic.List$1(String))();
            var actualCaptureIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var text = "One car red car blue car";
            var pat = "(\\w+)\\s+(car)";

            // Instantiate the regular expression object.
            var r = new System.Text.RegularExpressions.Regex.$ctor1(pat, 1);

            // Match the regular expression pattern against a text string.
            var m = r.match(text);
            while (m.getSuccess()) {
                for (var i = 1; i <= 2; i = (i + 1) | 0) {
                    var g = m.getGroups().get(i);
                    actualGroupValues.add(g.toString());

                    var cc = g.getCaptures();
                    for (var j = 0; j < cc.getCount(); j = (j + 1) | 0) {
                        var c = cc.get(j);
                        actualCaptureValues.add(c.toString());
                        actualCaptureIndexes.add(c.getIndex());
                    }
                }
                m = m.nextMatch();
            }

            this.validateCollection(String, expectedGroupValues, actualGroupValues.toArray(), "GroupValues");
            this.validateCollection(String, expectedCaptureValues, actualCaptureValues.toArray(), "CaptureValues");
            this.validateCollection(System.Int32, expectedCaptureIndexes, actualCaptureIndexes.toArray(), "CaptureIndexes");
        },
        matchAtPositionTest: function () {
            var expectedGroupValues = ["red", "car", "blue", "car"];
            var expectedCaptureValues = ["red", "car", "blue", "car"];
            var expectedCaptureIndexes = [8, 12, 16, 21];

            var actualGroupValues = new (System.Collections.Generic.List$1(String))();
            var actualCaptureValues = new (System.Collections.Generic.List$1(String))();
            var actualCaptureIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var text = "One car red car blue car";
            var pat = "(\\w+)\\s+(car)";

            // Instantiate the regular expression object.
            var r = new System.Text.RegularExpressions.Regex.$ctor1(pat, 1);

            // Match the regular expression pattern against a text string.
            var m = r.match$1(text, 3);
            while (m.getSuccess()) {
                for (var i = 1; i <= 2; i = (i + 1) | 0) {
                    var g = m.getGroups().get(i);
                    actualGroupValues.add(g.toString());

                    var cc = g.getCaptures();
                    for (var j = 0; j < cc.getCount(); j = (j + 1) | 0) {
                        var c = cc.get(j);
                        actualCaptureValues.add(c.toString());
                        actualCaptureIndexes.add(c.getIndex());
                    }
                }
                m = m.nextMatch();
            }

            this.validateCollection(String, expectedGroupValues, actualGroupValues.toArray(), "GroupValues");
            this.validateCollection(String, expectedCaptureValues, actualCaptureValues.toArray(), "CaptureValues");
            this.validateCollection(System.Int32, expectedCaptureIndexes, actualCaptureIndexes.toArray(), "CaptureIndexes");
        },
        matchAtPositionAndLengthTest: function () {
            var expectedGroupValues = ["red", "car"];
            var expectedCaptureValues = ["red", "car"];
            var expectedCaptureIndexes = [8, 12];

            var actualGroupValues = new (System.Collections.Generic.List$1(String))();
            var actualCaptureValues = new (System.Collections.Generic.List$1(String))();
            var actualCaptureIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var text = "One car red car blue car";
            var pat = "(\\w+)\\s+(car)";

            // Instantiate the regular expression object.
            var r = new System.Text.RegularExpressions.Regex.$ctor1(pat, 1);

            // Match the regular expression pattern against a text string.
            var m = r.match$2(text, 3, 15);
            while (m.getSuccess()) {
                for (var i = 1; i <= 2; i = (i + 1) | 0) {
                    var g = m.getGroups().get(i);
                    actualGroupValues.add(g.toString());

                    var cc = g.getCaptures();
                    for (var j = 0; j < cc.getCount(); j = (j + 1) | 0) {
                        var c = cc.get(j);
                        actualCaptureValues.add(c.toString());
                        actualCaptureIndexes.add(c.getIndex());
                    }
                }
                m = m.nextMatch();
                if (m.getIndex() > 15) {
                    break;
                }
            }

            this.validateCollection(String, expectedGroupValues, actualGroupValues.toArray(), "GroupValues");
            this.validateCollection(String, expectedCaptureValues, actualCaptureValues.toArray(), "CaptureValues");
            this.validateCollection(System.Int32, expectedCaptureIndexes, actualCaptureIndexes.toArray(), "CaptureIndexes");
        },
        matchStaticTest: function () {
            var expectedMatchValues = ["ablaze", "dozen", "glaze", "jazz", "pizza", "quiz", "whiz", "zealous"];
            var expectedMatchIndexes = [0, 21, 46, 65, 104, 110, 157, 174];

            var actualMatchValues = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var pattern = "\\b\\w*z+\\w*\\b";
            var input = "ablaze beagle choral dozen elementary fanatic glaze hunger inept jazz kitchen lemon minus night optical pizza quiz restoration stamina train unrest vertical whiz xray yellow zealous";

            var m = System.Text.RegularExpressions.Regex.match(input, pattern);
            while (m.getSuccess()) {
                actualMatchValues.add(m.getValue());
                actualMatchIndexes.add(m.getIndex());
                m = m.nextMatch();
            }

            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchStaticWithOptionsTest: function () {
            var expectedMatchValues = ["An"];
            var expectedMatchIndexes = [0];

            var actualMatchValues = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var pattern = "\\ba\\w*\\b";
            var input = "An extraordinary day dawns with each new day.";

            var m = System.Text.RegularExpressions.Regex.match$1(input, pattern, 1);
            while (m.getSuccess()) {
                actualMatchValues.add(m.getValue());
                actualMatchIndexes.add(m.getIndex());
                m = m.nextMatch();
            }

            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchStaticWithOptionsAndTimeoutTest: function () {
            var expectedMatchValues = ["An"];
            var expectedMatchIndexes = [0];

            var actualMatchValues = new (System.Collections.Generic.List$1(String))();
            var actualMatchIndexes = new (System.Collections.Generic.List$1(System.Int32))();

            var pattern = "\\ba\\w*\\b";
            var input = "An extraordinary day dawns with each new day.";

            var m = System.Text.RegularExpressions.Regex.match$2(input, pattern, 1, System.TimeSpan.fromSeconds(1));
            while (m.getSuccess()) {
                actualMatchValues.add(m.getValue());
                actualMatchIndexes.add(m.getIndex());
                m = m.nextMatch();
            }

            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnSimpleAlternationTest1: function () {
            var inputs = ["the", "sample: this is the day"];
            var expected = ["the", "this"];

            var pattern = "th(e|is|at)";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnSimpleAlternationTest2: function () {
            var pattern = "\\bgr[ae]y\\b";
            var text = "The gray wolf blended in among the grey rocks.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 4, 4, "gray", 1, true);

            this.validateGroup(ms.get(0), 0, 4, 4, true, "gray", 1);
            this.validateCapture(ms.get(0), 0, 0, 4, 4, "gray");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 35, 4, "grey", 1, true);

            this.validateGroup(ms.get(1), 0, 35, 4, true, "grey", 1);
            this.validateCapture(ms.get(1), 0, 0, 35, 4, "grey");
        },
        msdnSimpleAlternationTest3: function () {
            var pattern = "\\bgr(a|e)y\\b";
            var text = "The gray wolf blended in among the grey rocks.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 4, 4, "gray", 2, true);

            this.validateGroup(ms.get(0), 0, 4, 4, true, "gray", 1);
            this.validateCapture(ms.get(0), 0, 0, 4, 4, "gray");

            this.validateGroup(ms.get(0), 1, 6, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 1, 0, 6, 1, "a");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 35, 4, "grey", 2, true);

            this.validateGroup(ms.get(1), 0, 35, 4, true, "grey", 1);
            this.validateCapture(ms.get(1), 0, 0, 35, 4, "grey");

            this.validateGroup(ms.get(1), 1, 37, 1, true, "e", 1);
            this.validateCapture(ms.get(1), 1, 0, 37, 1, "e");
        },
        msdnAlternationExprTest1: function () {
            var pattern = "(?(A)A\\d{2}\\b|\\b\\d{3}\\b)";
            var text = "A10 C103 910";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "A10", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "A10", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "A10");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 9, 3, "910", 1, true);

            this.validateGroup(ms.get(1), 0, 9, 3, true, "910", 1);
            this.validateCapture(ms.get(1), 0, 0, 9, 3, "910");
        },
        msdnAlternationExprTest2: function () {
            var pattern = "\\b(?(\\d{2}-)\\d{2}-\\d{7}|\\d{3}-\\d{2}-\\d{4})\\b";
            var text = "01-9999999 020-333333 777-88-9999";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 10, "01-9999999", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 10, true, "01-9999999", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 10, "01-9999999");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 22, 11, "777-88-9999", 1, true);

            this.validateGroup(ms.get(1), 0, 22, 11, true, "777-88-9999", 1);
            this.validateCapture(ms.get(1), 0, 0, 22, 11, "777-88-9999");
        },
        msdnAlternationGroupNameExprTest1: function () {
            var pattern = "(?<quoted>\")?(?(quoted).+?\"|\\S+\\s)";
            var text = "Dogs.jpg \"Yiska playing.jpg\"";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 9, "Dogs.jpg ", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 9, true, "Dogs.jpg ", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 9, "Dogs.jpg ");

            this.validateGroup(ms.get(0), 1, 0, 0, false, "", 0);

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 9, 19, "\"Yiska playing.jpg\"", 2, true);

            this.validateGroup(ms.get(1), 0, 9, 19, true, "\"Yiska playing.jpg\"", 1);
            this.validateCapture(ms.get(1), 0, 0, 9, 19, "\"Yiska playing.jpg\"");

            this.validateGroup(ms.get(1), 1, 9, 1, true, "\"", 1);
            this.validateCapture(ms.get(1), 1, 0, 9, 1, "\"");
        },
        msdnAlternationGroupNameExprTest2: function () {
            var pattern = "\\b(?<n2>\\d{2}-)*(?(n2)\\d{7}|\\d{3}-\\d{2}-\\d{4})\\b";
            var text = "01-9999999 020-333333 777-88-9999";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 10, "01-9999999", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 10, true, "01-9999999", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 10, "01-9999999");

            this.validateGroup(ms.get(0), 1, 0, 3, true, "01-", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 3, "01-");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 22, 11, "777-88-9999", 2, true);

            this.validateGroup(ms.get(1), 0, 22, 11, true, "777-88-9999", 1);
            this.validateCapture(ms.get(1), 0, 0, 22, 11, "777-88-9999");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);
        },
        msdnAlternationGroupNumberExprTest: function () {
            var pattern = "\\b(\\d{2}-)*(?(1)\\d{7}|\\d{3}-\\d{2}-\\d{4})\\b";
            var text = "01-9999999 020-333333 777-88-9999";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 10, "01-9999999", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 10, true, "01-9999999", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 10, "01-9999999");

            this.validateGroup(ms.get(0), 1, 0, 3, true, "01-", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 3, "01-");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 22, 11, "777-88-9999", 2, true);

            this.validateGroup(ms.get(1), 0, 22, 11, true, "777-88-9999", 1);
            this.validateCapture(ms.get(1), 0, 0, 22, 11, "777-88-9999");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);
        },
        simpleAlternationTest: function () {
            var pattern = "(A|B|C).";
            var text = "AXBYCZ";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 2, "AX", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 2, true, "AX", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 2, "AX");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "A", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "A");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 2, 2, "BY", 2, true);

            this.validateGroup(ms.get(1), 0, 2, 2, true, "BY", 1);
            this.validateCapture(ms.get(1), 0, 0, 2, 2, "BY");

            this.validateGroup(ms.get(1), 1, 2, 1, true, "B", 1);
            this.validateCapture(ms.get(1), 1, 0, 2, 1, "B");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 4, 2, "CZ", 2, true);

            this.validateGroup(ms.get(2), 0, 4, 2, true, "CZ", 1);
            this.validateCapture(ms.get(2), 0, 0, 4, 2, "CZ");

            this.validateGroup(ms.get(2), 1, 4, 1, true, "C", 1);
            this.validateCapture(ms.get(2), 1, 0, 4, 1, "C");
        },
        simpleAlternationTest2: function () {
            var pattern = "(A|B)+";
            var text = "ABA";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "ABA", 2, true);

            this.validateGroup(m, 0, 0, 3, true, "ABA", 1);
            this.validateCapture(m, 0, 0, 0, 3, "ABA");

            this.validateGroup(m, 1, 2, 1, true, "A", 3);
            this.validateCapture(m, 1, 0, 0, 1, "A");
            this.validateCapture(m, 1, 1, 1, 1, "B");
            this.validateCapture(m, 1, 2, 2, 1, "A");
        },
        simpleAlternationTest3: function () {
            var pattern = "(((A|B)+(C|D)+)|X)+";
            var text = "AAXABCADDCABBADXAA";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 2, 14, "XABCADDCABBADX", 5, true);

            this.validateGroup(m, 0, 2, 14, true, "XABCADDCABBADX", 1);
            this.validateCapture(m, 0, 0, 2, 14, "XABCADDCABBADX");

            this.validateGroup(m, 1, 15, 1, true, "X", 5);
            this.validateCapture(m, 1, 0, 2, 1, "X");
            this.validateCapture(m, 1, 1, 3, 3, "ABC");
            this.validateCapture(m, 1, 2, 6, 4, "ADDC");
            this.validateCapture(m, 1, 3, 10, 5, "ABBAD");
            this.validateCapture(m, 1, 4, 15, 1, "X");

            this.validateGroup(m, 2, 10, 5, true, "ABBAD", 3);
            this.validateCapture(m, 2, 0, 3, 3, "ABC");
            this.validateCapture(m, 2, 1, 6, 4, "ADDC");
            this.validateCapture(m, 2, 2, 10, 5, "ABBAD");

            this.validateGroup(m, 3, 13, 1, true, "A", 7);
            this.validateCapture(m, 3, 0, 3, 1, "A");
            this.validateCapture(m, 3, 1, 4, 1, "B");
            this.validateCapture(m, 3, 2, 6, 1, "A");
            this.validateCapture(m, 3, 3, 10, 1, "A");
            this.validateCapture(m, 3, 4, 11, 1, "B");
            this.validateCapture(m, 3, 5, 12, 1, "B");
            this.validateCapture(m, 3, 6, 13, 1, "A");

            this.validateGroup(m, 4, 14, 1, true, "D", 5);
            this.validateCapture(m, 4, 0, 5, 1, "C");
            this.validateCapture(m, 4, 1, 7, 1, "D");
            this.validateCapture(m, 4, 2, 8, 1, "D");
            this.validateCapture(m, 4, 3, 9, 1, "C");
            this.validateCapture(m, 4, 4, 14, 1, "D");
        },
        alternationWithGroupTest: function () {
            var pattern = "((A)|X)+";
            var text = "AAX";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "AAX", 3, true);

            this.validateGroup(m, 0, 0, 3, true, "AAX", 1);
            this.validateCapture(m, 0, 0, 0, 3, "AAX");

            this.validateGroup(m, 1, 2, 1, true, "X", 3);
            this.validateCapture(m, 1, 0, 0, 1, "A");
            this.validateCapture(m, 1, 1, 1, 1, "A");
            this.validateCapture(m, 1, 2, 2, 1, "X");

            this.validateGroup(m, 2, 1, 1, true, "A", 2);
            this.validateCapture(m, 2, 0, 0, 1, "A");
            this.validateCapture(m, 2, 1, 1, 1, "A");
        },
        alternationGroupTest: function () {
            var pattern = "(?(A)AB|BC)";
            var text = "AB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 2, "AB", 1, true);

            this.validateGroup(m, 0, 0, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 0, 2, "AB");
        },
        alternationGroupNonCapturingTest: function () {
            var pattern = "(?(?:A)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 1, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");
        },
        alternationGroupPositiveLookaheadTest: function () {
            var pattern = "(?(?=A)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 1, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");
        },
        alternationGroupNegativeLookaheadTest1: function () {
            var pattern = "(?(?!D)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 1, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");
        },
        alternationGroupNegativeLookaheadTest2: function () {
            var pattern = "(?(?!A)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        alternationGroupPositiveLookbehindTest: function () {
            var pattern = "(?(?<=A)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 1, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");
        },
        alternationGroupNegativeLookbehindTest1: function () {
            var pattern = "(?(?<!D)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 1, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");
        },
        alternationGroupNegativeLookbehindTest2: function () {
            var pattern = "(?(?<!A)AB|BC)";
            var text = "AABZAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 4, 2, "AB", 1, true);

            this.validateGroup(m, 0, 4, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 4, 2, "AB");
        },
        alternationGroupNonBacktrackingTest: function () {
            var pattern = "(?(?>A)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 1, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");
        },
        alternationGroupCommentTest: function () {
            Bridge.Test.Assert.throws$6(System.ArgumentException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests.f1);
        },
        alternationGroupWithNameInConditionTest: function () {
            Bridge.Test.Assert.throws$6(System.ArgumentException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests.f2);
        },
        alternationGroupWithIncorrectRefTest1: function () {
            Bridge.Test.Assert.throws$6(System.ArgumentException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests.f3);
        },
        alternationGroupWithIncorrectRefTest2: function () {
            Bridge.Test.Assert.throws$6(System.ArgumentException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests.f4);
        },
        alternationGroupWithImnsxTest1: function () {
            var pattern = "(?(?i:a)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 1, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");
        },
        alternationGroupWithImnsxTest2: function () {
            var pattern = "(?(?i:a)AB|BC)";
            var text = "AaB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        alternationGroupWithImnsxTest3: function () {
            var pattern = "(?(i)iAB|BC)";
            var text = "iAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "iAB", 1, true);

            this.validateGroup(m, 0, 0, 3, true, "iAB", 1);
            this.validateCapture(m, 0, 0, 0, 3, "iAB");
        },
        alternationConditionWithGroupTest1: function () {
            var pattern = "(?(A(B))AB|BC)";
            var text = "zAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 2, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");

            this.validateGroup(m, 1, 2, 1, true, "B", 1);
            this.validateCapture(m, 1, 0, 2, 1, "B");
        },
        alternationConditionWithGroupTest2: function () {
            var pattern = "(?(A(?:B(C)))ABCD|XYZ)";
            var text = "zABCD";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 4, "ABCD", 2, true);

            this.validateGroup(m, 0, 1, 4, true, "ABCD", 1);
            this.validateCapture(m, 0, 0, 1, 4, "ABCD");

            this.validateGroup(m, 1, 3, 1, true, "C", 1);
            this.validateCapture(m, 1, 0, 3, 1, "C");
        },
        alternationConditionWithGroupTest3: function () {
            var pattern = "(?(?:A(B(C)))ABCD|XYZ)";
            var text = "zABCD";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 4, "ABCD", 3, true);

            this.validateGroup(m, 0, 1, 4, true, "ABCD", 1);
            this.validateCapture(m, 0, 0, 1, 4, "ABCD");

            this.validateGroup(m, 1, 3, 1, true, "C", 1);
            this.validateCapture(m, 1, 0, 3, 1, "C");

            this.validateGroup(m, 2, 0, 0, false, "", 0);
        },
        alternationConditionWithGroupTest4: function () {
            var pattern = "(?(?=(A)(B))ABCD|XYZ)";
            var text = "xyzABCD";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 3, 4, "ABCD", 3, true);

            this.validateGroup(m, 0, 3, 4, true, "ABCD", 1);
            this.validateCapture(m, 0, 0, 3, 4, "ABCD");

            this.validateGroup(m, 1, 4, 1, true, "B", 1);
            this.validateCapture(m, 1, 0, 4, 1, "B");

            this.validateGroup(m, 2, 0, 0, false, "", 0);
        },
        alternationConditionWithGroupTest5: function () {
            var pattern = "(?(?=(?:A(B))(C)(D))ABCD|XYZ)";
            var text = "xyzABCD";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 3, 4, "ABCD", 4, true);

            this.validateGroup(m, 0, 3, 4, true, "ABCD", 1);
            this.validateCapture(m, 0, 0, 3, 4, "ABCD");

            this.validateGroup(m, 1, 5, 1, true, "C", 1);
            this.validateCapture(m, 1, 0, 5, 1, "C");

            this.validateGroup(m, 2, 6, 1, true, "D", 1);
            this.validateCapture(m, 2, 0, 6, 1, "D");

            this.validateGroup(m, 3, 0, 0, false, "", 0);
        },
        alternationGroupNonCapturingWithGroupTest: function () {
            var pattern = "(?(?:A(B))AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 2, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        alternationGroupPositiveLookaheadWithGroupTest: function () {
            var pattern = "(?(?=A(B))AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 2, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        alternationGroupNegativeLookaheadWithGroupTest: function () {
            var pattern = "(?(?!(A))AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        alternationGroupPositiveLookbehindWithGroupTest: function () {
            var pattern = "(?(?<=(A))AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 2, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        alternationGroupNegativeLookbehindWithGroupTest: function () {
            var pattern = "(?(?<!(A))AB|BC)";
            var text = "AABZAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 4, 2, "AB", 2, true);

            this.validateGroup(m, 0, 4, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 4, 2, "AB");

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        alternationGroupNonBacktrackingWithGroupTest: function () {
            var pattern = "(?(?>A(B))AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 2, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        alternationGroupWithImnsxAndGroupTest: function () {
            var pattern = "(?(?i:(a))AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "AB", 2, true);

            this.validateGroup(m, 0, 1, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 1, 2, "AB");

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        alternationGroupWithoutAlternativeBranchTest1: function () {
            var pattern = "(?<gr1>test)?(?(gr1)(ab)|)";
            var text = "testab";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 6, "testab", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 6, true, "testab", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 6, "testab");

            this.validateGroup(ms.get(0), 1, 4, 2, true, "ab", 1);
            this.validateCapture(ms.get(0), 1, 0, 4, 2, "ab");

            this.validateGroup(ms.get(0), 2, 0, 4, true, "test", 1);
            this.validateCapture(ms.get(0), 2, 0, 0, 4, "test");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 6, 0, "", 3, true);

            this.validateGroup(ms.get(1), 0, 6, 0, true, "", 1);
            this.validateCapture(ms.get(1), 0, 0, 6, 0, "");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 2, 0, 0, false, "", 0);
        },
        alternationGroupWithoutAlternativeBranchTest2: function () {
            var pattern = "(?<gr1>test)?(?(gr1)(ab)|)";
            var text = "tesab";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(6, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 0, "", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 0, true, "", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 0, "");

            this.validateGroup(ms.get(0), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(0), 2, 0, 0, false, "", 0);

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 0, "", 3, true);

            this.validateGroup(ms.get(1), 0, 1, 0, true, "", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 0, "");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 2, 0, 0, false, "", 0);

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 2, 0, "", 3, true);

            this.validateGroup(ms.get(2), 0, 2, 0, true, "", 1);
            this.validateCapture(ms.get(2), 0, 0, 2, 0, "");

            this.validateGroup(ms.get(2), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(2), 2, 0, 0, false, "", 0);

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 3, 0, "", 3, true);

            this.validateGroup(ms.get(3), 0, 3, 0, true, "", 1);
            this.validateCapture(ms.get(3), 0, 0, 3, 0, "");

            this.validateGroup(ms.get(3), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(3), 2, 0, 0, false, "", 0);

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 4, 0, "", 3, true);

            this.validateGroup(ms.get(4), 0, 4, 0, true, "", 1);
            this.validateCapture(ms.get(4), 0, 0, 4, 0, "");

            this.validateGroup(ms.get(4), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(4), 2, 0, 0, false, "", 0);

            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 5, 0, "", 3, true);

            this.validateGroup(ms.get(5), 0, 5, 0, true, "", 1);
            this.validateCapture(ms.get(5), 0, 0, 5, 0, "");

            this.validateGroup(ms.get(5), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(5), 2, 0, 0, false, "", 0);
        },
        alternationGroupWithoutAlternativeBranchExceptionTest: function () {
            Bridge.Test.Assert.throws$6(System.NotSupportedException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests.f5);
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests, {
        f1: function () {
            var pattern = "(?(?#A)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            rgx.match(text);
        },
        f2: function () {
            var pattern = "(?(?<name>A)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            rgx.match(text);
        },
        f3: function () {
            var pattern = "(?(?<5>A)AB|BC)";
            var text = "AAB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            rgx.match(text);
        },
        f4: function () {
            var pattern = "(?(5A)5AB|BC)";
            var text = "5AB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            rgx.match(text);
        },
        f5: function () {
            var pattern = "(?<gr1>test)?(?(gr1)(ab))";
            var text = "tesab";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            rgx.matches(text);
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnStartOfStringOrLineTest: function () {
            var $t;
            var startPos = 0, endPos = 70;
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957\nChicago Cubs, National League, 1903-present\nDetroit Tigers, American League, 1901-present\nNew York Giants, National League, 1885-1957\nWashington Senators, American League, 1901-1960\n";
            var pattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957."];

            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match(input, pattern);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Capture);
                        actual = System.String.concat(actual, capture.getValue());
                    }
                    actual = System.String.concat(actual, ".");
                    actuals.add(actual);

                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnStartOfStringOrLineMultilineModeTest: function () {
            var $t;
            var startPos = 0, endPos = 70;
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957\nChicago Cubs, National League, 1903-present\nDetroit Tigers, American League, 1901-present\nNew York Giants, National League, 1885-1957\nWashington Senators, American League, 1901-1960\n";
            var pattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957.", "The Chicago Cubs played in the National League in 1903-present.", "The Detroit Tigers played in the American League in 1901-present.", "The New York Giants played in the National League in 1885-1957.", "The Washington Senators played in the American League in 1901-1960."];

            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match$1(input, pattern, 2);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Capture);
                        actual = System.String.concat(actual, capture.getValue());
                    }
                    actual = System.String.concat(actual, ".");
                    actuals.add(actual);

                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnEndOfStringOrLineTest1: function () {
            var $t;
            // Attempting to match the entire input string

            var startPos = 0, endPos = 70;
            var cr = '\n';
            var input = System.String.concat("Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", cr, "Chicago Cubs, National League, 1903-present", cr, "Detroit Tigers, American League, 1901-present", cr, "New York Giants, National League, 1885-1957", cr, "Washington Senators, American League, 1901-1960", cr);

            var basePattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
            var pattern = System.String.concat(basePattern, "$");

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = System.Array.init(0, null);

            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match(input, pattern);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Capture);
                        actual = System.String.concat(actual, capture.getValue());
                    }
                    actual = System.String.concat(actual, ".");
                    actuals.add(actual);

                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnEndOfStringOrLineTest2: function () {
            var $t, $t1;
            // Attempting to match each element in a string array

            var cr = '\n';
            var input = System.String.concat("Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", cr, "Chicago Cubs, National League, 1903-present", cr, "Detroit Tigers, American League, 1901-present", cr, "New York Giants, National League, 1885-1957", cr, "Washington Senators, American League, 1901-1960", cr);

            var basePattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
            var pattern = System.String.concat(basePattern, "$");

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957.", "The Chicago Cubs played in the National League in 1903-present.", "The Detroit Tigers played in the American League in 1901-present.", "The New York Giants played in the National League in 1885-1957.", "The Washington Senators played in the American League in 1901-1960."];

            var teams = System.String.split(input, [cr], null, 1);
            $t = Bridge.getEnumerator(teams);
            while ($t.moveNext()) {
                var team = $t.getCurrent();
                if (team.length > 70) {
                    continue;
                }

                var match = System.Text.RegularExpressions.Regex.match(team, pattern);
                if (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t1 = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t1.moveNext()) {
                        var capture = Bridge.cast($t1.getCurrent(), System.Text.RegularExpressions.Capture);
                        actual = System.String.concat(actual, capture.getValue());
                    }
                    actual = System.String.concat(actual, ".");
                    actuals.add(actual);
                }
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnEndOfStringOrLineTest3: function () {
            var $t;
            // Attempting to match each line of an input string with '$'

            var cr = "\r\n";
            var input = System.String.concat("Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", cr, "Chicago Cubs, National League, 1903-present", cr, "Detroit Tigers, American League, 1901-present", cr, "New York Giants, National League, 1885-1957", cr, "Washington Senators, American League, 1901-1960", cr);

            var basePattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
            var pattern = System.String.concat(basePattern, "$");

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = System.Array.init(0, null);

            var startPos = 0;
            var endPos = 70;
            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match$1(input, pattern, 2);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Capture);
                        actual = System.String.concat(actual, capture.getValue());
                    }
                    actual = System.String.concat(actual, ".");
                    actuals.add(actual);

                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnEndOfStringOrLineTest4: function () {
            var $t;
            // Attempting to match each line of an input string with '\r?$'

            var cr = '\n';
            var input = System.String.concat("Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", cr, "Chicago Cubs, National League, 1903-present", cr, "Detroit Tigers, American League, 1901-present", cr, "New York Giants, National League, 1885-1957", cr, "Washington Senators, American League, 1901-1960", cr);

            var basePattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
            var pattern;

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957.", "The Chicago Cubs played in the National League in 1903-present.", "The Detroit Tigers played in the American League in 1901-present.", "The New York Giants played in the National League in 1885-1957.", "The Washington Senators played in the American League in 1901-1960."];

            var startPos = 0;
            var endPos = 70;
            pattern = System.String.concat(basePattern, "\r?$");
            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match$1(input, pattern, 2);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Capture);
                        actual = System.String.concat(actual, capture.getValue());
                    }
                    actual = System.String.concat(actual, ".");
                    actuals.add(actual);

                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnStartOfStringOnlyTest: function () {
            var $t;
            var startPos = 0, endPos = 70;
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957\nChicago Cubs, National League, 1903-present\nDetroit Tigers, American League, 1901-present\nNew York Giants, National League, 1885-1957\nWashington Senators, American League, 1901-1960\n";

            var pattern = "\\A((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957."];

            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match$1(input, pattern, 2);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Capture);
                        actual = System.String.concat(actual, capture.getValue());
                    }
                    actual = System.String.concat(actual, ".");
                    actuals.add(actual);

                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnEndOfStringOrNewlineTest: function () {
            var $t;
            var inputs = ["Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", System.String.concat("Chicago Cubs, National League, 1903-present", '\n'), System.String.concat("Detroit Tigers, American League, 1901-present", System.Text.RegularExpressions.Regex.unescape("\\n")), "New York Giants, National League, 1885-1957", System.String.concat("Washington Senators, American League, 1901-1960", '\n')];
            var pattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+\\r?\\Z";

            var actuals = new (System.Collections.Generic.List$1(Boolean))();
            var expecteds = [true, true, true, true, true];

            $t = Bridge.getEnumerator(inputs);
            while ($t.moveNext()) {
                var input = $t.getCurrent();
                if (input.length > 70 || !System.String.contains(input,",")) {
                    continue;
                }
                var match = System.Text.RegularExpressions.Regex.match(input, pattern);
                actuals.add(match.getSuccess());
            }

            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        msdnEndOfStringOnlyTest: function () {
            var $t;
            var inputs = ["Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", "Chicago Cubs, National League, 1903-present\r\n", System.String.concat("Detroit Tigers, American League, 1901-present", System.Text.RegularExpressions.Regex.unescape("\\n")), "New York Giants, National League, 1885-1957", "Washington Senators, American League, 1901-1960\r\n"];
            var pattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+\\r?\\z";

            var actuals = new (System.Collections.Generic.List$1(Boolean))();
            var expecteds = [true, false, false, true, false];

            $t = Bridge.getEnumerator(inputs);
            while ($t.moveNext()) {
                var input = $t.getCurrent();
                if (input.length > 70 || !System.String.contains(input,",")) {
                    continue;
                }
                var match = System.Text.RegularExpressions.Regex.match(input, pattern);
                actuals.add(match.getSuccess());
            }

            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        msdnContiguousMatchesTest: function () {
            var input = "capybara,squirrel,chipmunk,porcupine,gopher,beaver,groundhog,hamster,guinea pig,gerbil,chinchilla,prairie dog,mouse,rat";

            var pattern = "\\G(\\w+\\s?\\w*),?";

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["capybara", "squirrel", "chipmunk", "porcupine", "gopher", "beaver", "groundhog", "hamster", "guinea pig", "gerbil", "chinchilla", "prairie dog", "mouse", "rat"];

            var match = System.Text.RegularExpressions.Regex.match(input, pattern);
            while (match.getSuccess()) {
                actuals.add(match.getGroups().get(1).getValue());
                match = match.nextMatch();
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnWordBoundaryTest: function () {
            var $t;
            var input = "area bare arena mare";
            var pattern = "\\bare\\w*\\b";

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["area_0", "arena_10"];

            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches(input, pattern));
            while ($t.moveNext()) {
                var match = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                actuals.add(System.String.format("{0}_{1}", match.getValue(), match.getIndex()));
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        msdnNonWordBoundaryTest: function () {
            var $t;
            var input = "equity queen equip acquaint quiet";
            var pattern = "\\Bqu\\w+";

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["quity_1", "quip_14", "quaint_21"];

            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches(input, pattern));
            while ($t.moveNext()) {
                var match = Bridge.cast($t.getCurrent(), System.Text.RegularExpressions.Match);
                actuals.add(System.String.format("{0}_{1}", match.getValue(), match.getIndex()));
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        startAndEndOfStringCustomTest1: function () {
            var pattern = "^.*$";
            var text = "abc\ndef";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 2);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "abc", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "abc", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "abc");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 4, 3, "def", 1, true);

            this.validateGroup(ms.get(1), 0, 4, 3, true, "def", 1);
            this.validateCapture(ms.get(1), 0, 0, 4, 3, "def");
        },
        startAndEndOfStringCustomTest2: function () {
            var pattern = ".*$";
            var text = "abc\ndef";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 2);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "abc", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "abc", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "abc");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 0, "", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 0, true, "", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 0, "");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 4, 3, "def", 1, true);

            this.validateGroup(ms.get(2), 0, 4, 3, true, "def", 1);
            this.validateCapture(ms.get(2), 0, 0, 4, 3, "def");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 7, 0, "", 1, true);

            this.validateGroup(ms.get(3), 0, 7, 0, true, "", 1);
            this.validateCapture(ms.get(3), 0, 0, 7, 0, "");
        },
        endOfStringOrNewlineCustomTest1: function () {
            var actuals = new (System.Collections.Generic.List$1(Boolean))();
            var expecteds = [false, false, true];

            var text = "line1\nline2\nline3\n";

            var match = System.Text.RegularExpressions.Regex.match(text, "line1\\Z");
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match(text, "line2\\Z");
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match(text, "line3\\Z");
            actuals.add(match.getSuccess());

            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOrNewlineCustomTest2: function () {
            var actuals = new (System.Collections.Generic.List$1(Boolean))();
            var expecteds = [false, false, true];

            var text = "line1\nline2\nline3\n";

            var match = System.Text.RegularExpressions.Regex.match$1(text, "line1\\Z", 2);
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match$1(text, "line2\\Z", 2);
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match$1(text, "line3\\Z", 2);
            actuals.add(match.getSuccess());

            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOnlyCustomTest1: function () {
            var actuals = new (System.Collections.Generic.List$1(Boolean))();
            var expecteds = [false, false, false];

            var text = "line1\nline2\nline3\n";

            var match = System.Text.RegularExpressions.Regex.match(text, "line1\\z");
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match(text, "line2\\z");
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match(text, "line3\\z");
            actuals.add(match.getSuccess());

            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOnlyCustomTest2: function () {
            var actuals = new (System.Collections.Generic.List$1(Boolean))();
            var expecteds = [false, false, false];

            var text = "line1\nline2\nline3\n";

            var match = System.Text.RegularExpressions.Regex.match$1(text, "line1\\z", 2);
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match$1(text, "line2\\z", 2);
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match$1(text, "line3\\z", 2);
            actuals.add(match.getSuccess());

            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOnlyCustomTest3: function () {
            var actuals = new (System.Collections.Generic.List$1(Boolean))();
            var expecteds = [false, false, true];

            var text = "line1\nline2\nline3";

            var match = System.Text.RegularExpressions.Regex.match$1(text, "line1\\z", 2);
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match$1(text, "line2\\z", 2);
            actuals.add(match.getSuccess());

            match = System.Text.RegularExpressions.Regex.match$1(text, "line3\\z", 2);
            actuals.add(match.getSuccess());

            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        contiguousMatchesCustomTest1: function () {
            var pattern = "\\GContiguous";
            var input = "ContiguousContiguous";

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["Contiguous", "Contiguous"];

            var match = System.Text.RegularExpressions.Regex.match(input, pattern);
            while (match.getSuccess()) {
                actuals.add(match.getValue());
                match = match.nextMatch();
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        contiguousMatchesCustomTest2: function () {
            var pattern = "\\GContiguous";
            var input = "ContiguousNonContiguous";

            var actuals = new (System.Collections.Generic.List$1(String))();
            var expecteds = ["Contiguous"];

            var match = System.Text.RegularExpressions.Regex.match(input, pattern);
            while (match.getSuccess()) {
                actuals.add(match.getValue());
                match = match.nextMatch();
            }

            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnNumberedBackrefTest: function () {
            var pattern = "(\\w)\\1";
            var text = "trellis llama webbing dresser swagger";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            this.validateMatch(ms.get(0), 3, 2, "ll", 2, true);

            this.validateGroup(ms.get(0), 0, 3, 2, true, "ll", 1);
            this.validateCapture(ms.get(0), 0, 0, 3, 2, "ll");

            this.validateGroup(ms.get(0), 1, 3, 1, true, "l", 1);
            this.validateCapture(ms.get(0), 1, 0, 3, 1, "l");

            // Match #1:
            this.validateMatch(ms.get(1), 8, 2, "ll", 2, true);

            this.validateGroup(ms.get(1), 0, 8, 2, true, "ll", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 2, "ll");

            this.validateGroup(ms.get(1), 1, 8, 1, true, "l", 1);
            this.validateCapture(ms.get(1), 1, 0, 8, 1, "l");

            // Match #2:
            this.validateMatch(ms.get(2), 16, 2, "bb", 2, true);

            this.validateGroup(ms.get(2), 0, 16, 2, true, "bb", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 2, "bb");

            this.validateGroup(ms.get(2), 1, 16, 1, true, "b", 1);
            this.validateCapture(ms.get(2), 1, 0, 16, 1, "b");

            // Match #3:
            this.validateMatch(ms.get(3), 25, 2, "ss", 2, true);

            this.validateGroup(ms.get(3), 0, 25, 2, true, "ss", 1);
            this.validateCapture(ms.get(3), 0, 0, 25, 2, "ss");

            this.validateGroup(ms.get(3), 1, 25, 1, true, "s", 1);
            this.validateCapture(ms.get(3), 1, 0, 25, 1, "s");

            // Match #4:
            this.validateMatch(ms.get(4), 33, 2, "gg", 2, true);

            this.validateGroup(ms.get(4), 0, 33, 2, true, "gg", 1);
            this.validateCapture(ms.get(4), 0, 0, 33, 2, "gg");

            this.validateGroup(ms.get(4), 1, 33, 1, true, "g", 1);
            this.validateCapture(ms.get(4), 1, 0, 33, 1, "g");
        },
        msdnNamedBackrefTest: function () {
            var pattern = "(?<char>\\w)\\k<char>";
            var text = "trellis llama webbing dresser swagger";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            this.validateMatch(ms.get(0), 3, 2, "ll", 2, true);

            this.validateGroup(ms.get(0), 0, 3, 2, true, "ll", 1);
            this.validateCapture(ms.get(0), 0, 0, 3, 2, "ll");

            this.validateGroup(ms.get(0), 1, 3, 1, true, "l", 1);
            this.validateCapture(ms.get(0), 1, 0, 3, 1, "l");

            // Match #1:
            this.validateMatch(ms.get(1), 8, 2, "ll", 2, true);

            this.validateGroup(ms.get(1), 0, 8, 2, true, "ll", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 2, "ll");

            this.validateGroup(ms.get(1), 1, 8, 1, true, "l", 1);
            this.validateCapture(ms.get(1), 1, 0, 8, 1, "l");

            // Match #2:
            this.validateMatch(ms.get(2), 16, 2, "bb", 2, true);

            this.validateGroup(ms.get(2), 0, 16, 2, true, "bb", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 2, "bb");

            this.validateGroup(ms.get(2), 1, 16, 1, true, "b", 1);
            this.validateCapture(ms.get(2), 1, 0, 16, 1, "b");

            // Match #3:
            this.validateMatch(ms.get(3), 25, 2, "ss", 2, true);

            this.validateGroup(ms.get(3), 0, 25, 2, true, "ss", 1);
            this.validateCapture(ms.get(3), 0, 0, 25, 2, "ss");

            this.validateGroup(ms.get(3), 1, 25, 1, true, "s", 1);
            this.validateCapture(ms.get(3), 1, 0, 25, 1, "s");

            // Match #4:
            this.validateMatch(ms.get(4), 33, 2, "gg", 2, true);

            this.validateGroup(ms.get(4), 0, 33, 2, true, "gg", 1);
            this.validateCapture(ms.get(4), 0, 0, 33, 2, "gg");

            this.validateGroup(ms.get(4), 1, 33, 1, true, "g", 1);
            this.validateCapture(ms.get(4), 1, 0, 33, 1, "g");
        },
        msdnNamedBackrefWithNumberAsNameTest: function () {
            var pattern = "(?<2>\\w)\\k<2>";
            var text = "trellis llama webbing dresser swagger";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 3, 2, "ll", 2, true);

            this.validateGroup(ms.get(0), 0, 3, 2, true, "ll", 1);
            this.validateCapture(ms.get(0), 0, 0, 3, 2, "ll");

            this.validateGroup(ms.get(0), 2, 3, 1, true, "l", 1);
            this.validateCapture(ms.get(0), 2, 0, 3, 1, "l");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 2, "ll", 2, true);

            this.validateGroup(ms.get(1), 0, 8, 2, true, "ll", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 2, "ll");

            this.validateGroup(ms.get(1), 2, 8, 1, true, "l", 1);
            this.validateCapture(ms.get(1), 2, 0, 8, 1, "l");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 16, 2, "bb", 2, true);

            this.validateGroup(ms.get(2), 0, 16, 2, true, "bb", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 2, "bb");

            this.validateGroup(ms.get(2), 2, 16, 1, true, "b", 1);
            this.validateCapture(ms.get(2), 2, 0, 16, 1, "b");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 25, 2, "ss", 2, true);

            this.validateGroup(ms.get(3), 0, 25, 2, true, "ss", 1);
            this.validateCapture(ms.get(3), 0, 0, 25, 2, "ss");

            this.validateGroup(ms.get(3), 2, 25, 1, true, "s", 1);
            this.validateCapture(ms.get(3), 2, 0, 25, 1, "s");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 33, 2, "gg", 2, true);

            this.validateGroup(ms.get(4), 0, 33, 2, true, "gg", 1);
            this.validateCapture(ms.get(4), 0, 0, 33, 2, "gg");

            this.validateGroup(ms.get(4), 2, 33, 1, true, "g", 1);
            this.validateCapture(ms.get(4), 2, 0, 33, 1, "g");
        },
        msdnNamedBackrefWithRedefinedGroupTest: function () {
            var pattern = "(?<1>a)(?<1>\\1b)*";
            var text = "aababb";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "aababb", 2, true);

            this.validateGroup(m, 0, 0, 6, true, "aababb", 1);
            this.validateCapture(m, 0, 0, 0, 6, "aababb");

            this.validateGroup(m, 1, 3, 3, true, "abb", 3);
            this.validateCapture(m, 1, 0, 0, 1, "a");
            this.validateCapture(m, 1, 1, 1, 2, "ab");
            this.validateCapture(m, 1, 2, 3, 3, "abb");
        },
        msdnNamedBackrefWithEmptyCaptureTest1: function () {
            var pattern = "\\b([A-Z]{2})(\\d{2})?([A-Z]{2})\\b";
            var text = "AA22ZZ";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "AA22ZZ", 4, true);

            this.validateGroup(m, 0, 0, 6, true, "AA22ZZ", 1);
            this.validateCapture(m, 0, 0, 0, 6, "AA22ZZ");

            this.validateGroup(m, 1, 0, 2, true, "AA", 1);
            this.validateCapture(m, 1, 0, 0, 2, "AA");

            this.validateGroup(m, 2, 2, 2, true, "22", 1);
            this.validateCapture(m, 2, 0, 2, 2, "22");

            this.validateGroup(m, 3, 4, 2, true, "ZZ", 1);
            this.validateCapture(m, 3, 0, 4, 2, "ZZ");
        },
        msdnNamedBackrefWithEmptyCaptureTest2: function () {
            var pattern = "\\b([A-Z]{2})(\\d{2})?([A-Z]{2})\\b";
            var text = "AABB";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "AABB", 4, true);

            this.validateGroup(m, 0, 0, 4, true, "AABB", 1);
            this.validateCapture(m, 0, 0, 0, 4, "AABB");

            this.validateGroup(m, 1, 0, 2, true, "AA", 1);
            this.validateCapture(m, 1, 0, 0, 2, "AA");

            this.validateGroup(m, 2, 0, 0, false, "", 0);

            this.validateGroup(m, 3, 2, 2, true, "BB", 1);
            this.validateCapture(m, 3, 0, 2, 2, "BB");
        },
        namedBackrefToUnreachableGroupTest: function () {
            var pattern = "(a)\\2(b)";
            var text = "abb";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);

            this.validateGroup(m, 1, 0, 0, false, "", 0);

            this.validateGroup(m, 2, 0, 0, false, "", 0);
        },
        namedBackrefToSelfGroupTest: function () {
            var pattern = "(?<gr1>a\\k<gr1>)";
            var text = "aaa";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        namedBackrefToParentGroupTest: function () {
            var pattern = "(?<parent>a(?<child>b\\k<parent>))";
            var text = "aabb";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);

            this.validateGroup(m, 1, 0, 0, false, "", 0);

            this.validateGroup(m, 2, 0, 0, false, "", 0);
        },
        numberedBackrefTest: function () {
            var pattern = "((abc)def)\\2";
            var text = "abcdefabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 9, "abcdefabc", 3, true);

            this.validateGroup(m, 0, 0, 9, true, "abcdefabc", 1);
            this.validateCapture(m, 0, 0, 0, 9, "abcdefabc");

            this.validateGroup(m, 1, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 1, 0, 0, 6, "abcdef");

            this.validateGroup(m, 2, 0, 3, true, "abc", 1);
            this.validateCapture(m, 2, 0, 0, 3, "abc");
        },
        numberedBackrefInGroupTest: function () {
            var pattern = "((abc)def)(\\2)";
            var text = "abcdefabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 9, "abcdefabc", 4, true);

            this.validateGroup(m, 0, 0, 9, true, "abcdefabc", 1);
            this.validateCapture(m, 0, 0, 0, 9, "abcdefabc");

            this.validateGroup(m, 1, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 1, 0, 0, 6, "abcdef");

            this.validateGroup(m, 2, 0, 3, true, "abc", 1);
            this.validateCapture(m, 2, 0, 0, 3, "abc");

            this.validateGroup(m, 3, 6, 3, true, "abc", 1);
            this.validateCapture(m, 3, 0, 6, 3, "abc");
        },
        namedBackrefInGroupTest: function () {
            var pattern = "((?<name>abc)def)(\\k<name>)";
            var text = "abcdefabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 9, "abcdefabc", 4, true);

            this.validateGroup(m, 0, 0, 9, true, "abcdefabc", 1);
            this.validateCapture(m, 0, 0, 0, 9, "abcdefabc");

            this.validateGroup(m, 1, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 1, 0, 0, 6, "abcdef");

            this.validateGroup(m, 2, 6, 3, true, "abc", 1);
            this.validateCapture(m, 2, 0, 6, 3, "abc");

            this.validateGroup(m, 3, 0, 3, true, "abc", 1);
            this.validateCapture(m, 3, 0, 0, 3, "abc");
        },
        numberedBackrefRecursiveGroupTest: function () {
            var pattern = "(a)(?<1>\\1b)+";
            var text = "aababbabbb";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 10, "aababbabbb", 2, true);

            this.validateGroup(m, 0, 0, 10, true, "aababbabbb", 1);
            this.validateCapture(m, 0, 0, 0, 10, "aababbabbb");

            this.validateGroup(m, 1, 6, 4, true, "abbb", 4);
            this.validateCapture(m, 1, 0, 0, 1, "a");
            this.validateCapture(m, 1, 1, 1, 2, "ab");
            this.validateCapture(m, 1, 2, 3, 3, "abb");
            this.validateCapture(m, 1, 3, 6, 4, "abbb");
        },
        namedBackrefRecursiveGroupTest: function () {
            var pattern = "(?<gr>a)(?<gr>\\k<gr>b)+";
            var text = "aababbabbb";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 10, "aababbabbb", 2, true);

            this.validateGroup(m, 0, 0, 10, true, "aababbabbb", 1);
            this.validateCapture(m, 0, 0, 0, 10, "aababbabbb");

            this.validateGroup(m, 1, 6, 4, true, "abbb", 4);
            this.validateCapture(m, 1, 0, 0, 1, "a");
            this.validateCapture(m, 1, 1, 1, 2, "ab");
            this.validateCapture(m, 1, 2, 3, 3, "abb");
            this.validateCapture(m, 1, 3, 6, 4, "abbb");
        },
        complexBackrefTest1: function () {
            var pattern = "((a)(\\2b))((\\1)(\\2))(\\3(\\4))";
            var text = "aabaabaabaaba";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 13, "aabaabaabaaba", 9, true);

            this.validateGroup(m, 0, 0, 13, true, "aabaabaabaaba", 1);
            this.validateCapture(m, 0, 0, 0, 13, "aabaabaabaaba");

            this.validateGroup(m, 1, 0, 3, true, "aab", 1);
            this.validateCapture(m, 1, 0, 0, 3, "aab");

            this.validateGroup(m, 2, 0, 1, true, "a", 1);
            this.validateCapture(m, 2, 0, 0, 1, "a");

            this.validateGroup(m, 3, 1, 2, true, "ab", 1);
            this.validateCapture(m, 3, 0, 1, 2, "ab");

            this.validateGroup(m, 4, 3, 4, true, "aaba", 1);
            this.validateCapture(m, 4, 0, 3, 4, "aaba");

            this.validateGroup(m, 5, 3, 3, true, "aab", 1);
            this.validateCapture(m, 5, 0, 3, 3, "aab");

            this.validateGroup(m, 6, 6, 1, true, "a", 1);
            this.validateCapture(m, 6, 0, 6, 1, "a");

            this.validateGroup(m, 7, 7, 6, true, "abaaba", 1);
            this.validateCapture(m, 7, 0, 7, 6, "abaaba");

            this.validateGroup(m, 8, 9, 4, true, "aaba", 1);
            this.validateCapture(m, 8, 0, 9, 4, "aaba");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnBalancingGroupTest1: function () {
            var pattern = "^[^<>]*(((?'Open'<)[^<>]*)+((?'Close-Open'>)[^<>]*)+)*(?(Open)(?!)|)$";
            var text = "<abc><mno<xyz>>";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 15, "<abc><mno<xyz>>", 6, true);

            this.validateGroup(m, 0, 0, 15, true, "<abc><mno<xyz>>", 1);
            this.validateCapture(m, 0, 0, 0, 15, "<abc><mno<xyz>>");

            this.validateGroup(m, 1, 5, 10, true, "<mno<xyz>>", 2);
            this.validateCapture(m, 1, 0, 0, 5, "<abc>");
            this.validateCapture(m, 1, 1, 5, 10, "<mno<xyz>>");

            this.validateGroup(m, 2, 9, 4, true, "<xyz", 3);
            this.validateCapture(m, 2, 0, 0, 4, "<abc");
            this.validateCapture(m, 2, 1, 5, 4, "<mno");
            this.validateCapture(m, 2, 2, 9, 4, "<xyz");

            this.validateGroup(m, 3, 14, 1, true, ">", 3);
            this.validateCapture(m, 3, 0, 4, 1, ">");
            this.validateCapture(m, 3, 1, 13, 1, ">");
            this.validateCapture(m, 3, 2, 14, 1, ">");

            this.validateGroup(m, 4, 0, 0, false, "", 0);

            this.validateGroup(m, 5, 6, 8, true, "mno<xyz>", 3);
            this.validateCapture(m, 5, 0, 1, 3, "abc");
            this.validateCapture(m, 5, 1, 10, 3, "xyz");
            this.validateCapture(m, 5, 2, 6, 8, "mno<xyz>");
        },
        msdnBalancingGroupTest2: function () {
            var pattern = "(((?'Open'\\()[^\\(\\)]*)+((?'Close-Open'\\))[^\\(\\)]*)+)*(?(Open)(?!)|)$";
            var text = "3+2^((1-3)*(3-1))";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 4, 13, "((1-3)*(3-1))", 6, true);

            this.validateGroup(ms.get(0), 0, 4, 13, true, "((1-3)*(3-1))", 1);
            this.validateCapture(ms.get(0), 0, 0, 4, 13, "((1-3)*(3-1))");

            this.validateGroup(ms.get(0), 1, 11, 6, true, "(3-1))", 2);
            this.validateCapture(ms.get(0), 1, 0, 4, 7, "((1-3)*");
            this.validateCapture(ms.get(0), 1, 1, 11, 6, "(3-1))");

            this.validateGroup(ms.get(0), 2, 11, 4, true, "(3-1", 3);
            this.validateCapture(ms.get(0), 2, 0, 4, 1, "(");
            this.validateCapture(ms.get(0), 2, 1, 5, 4, "(1-3");
            this.validateCapture(ms.get(0), 2, 2, 11, 4, "(3-1");

            this.validateGroup(ms.get(0), 3, 16, 1, true, ")", 3);
            this.validateCapture(ms.get(0), 3, 0, 9, 2, ")*");
            this.validateCapture(ms.get(0), 3, 1, 15, 1, ")");
            this.validateCapture(ms.get(0), 3, 2, 16, 1, ")");

            this.validateGroup(ms.get(0), 4, 0, 0, false, "", 0);

            this.validateGroup(ms.get(0), 5, 5, 11, true, "(1-3)*(3-1)", 3);
            this.validateCapture(ms.get(0), 5, 0, 6, 3, "1-3");
            this.validateCapture(ms.get(0), 5, 1, 12, 3, "3-1");
            this.validateCapture(ms.get(0), 5, 2, 5, 11, "(1-3)*(3-1)");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 17, 0, "", 6, true);

            this.validateGroup(ms.get(1), 0, 17, 0, true, "", 1);
            this.validateCapture(ms.get(1), 0, 0, 17, 0, "");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 2, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 3, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 4, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 5, 0, 0, false, "", 0);
        },
        balancingGroupTest: function () {
            var pattern = "(?<g1>a)b(?<g2-g1>c)?";
            var text = "abc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "abc", 3, true);

            this.validateGroup(m, 0, 0, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 0, 3, "abc");

            this.validateGroup(m, 1, 0, 0, false, "", 0);

            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");
        },
        balancingGroupWithoutName1Test: function () {
            var pattern = "(?<g1>a)+b(?<-g1>c)?";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "aaabc", 2, true);

            this.validateGroup(m, 0, 0, 5, true, "aaabc", 1);
            this.validateCapture(m, 0, 0, 0, 5, "aaabc");

            this.validateGroup(m, 1, 1, 1, true, "a", 2);
            this.validateCapture(m, 1, 0, 0, 1, "a");
            this.validateCapture(m, 1, 1, 1, 1, "a");
        },
        balancingGroupWithQuantifierTest: function () {
            var pattern = "(?<g1>a)+b(?<g2-g1>c)?";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "aaabc", 3, true);

            this.validateGroup(m, 0, 0, 5, true, "aaabc", 1);
            this.validateCapture(m, 0, 0, 0, 5, "aaabc");

            this.validateGroup(m, 1, 1, 1, true, "a", 2);
            this.validateCapture(m, 1, 0, 0, 1, "a");
            this.validateCapture(m, 1, 1, 1, 1, "a");

            this.validateGroup(m, 2, 3, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 3, 1, "b");
        },
        balancingGroupWithEmptyIntervalTest: function () {
            var pattern = "(?<g1>a)+(?<g2-g1>c)";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);

            this.validateGroup(m, 1, 0, 0, false, "", 0);

            this.validateGroup(m, 2, 0, 0, false, "", 0);
        },
        balancingGroupStackApproachTest: function () {
            var pattern = "(?:[^{}]|(?<Open>{)|(?<Content-Open>}))+(?(Open)(?!)|)";
            var text = "0 {1 2 {3} {4 5 {6}} 7} 8";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 25, "0 {1 2 {3} {4 5 {6}} 7} 8", 3, true);

            this.validateGroup(m, 0, 0, 25, true, "0 {1 2 {3} {4 5 {6}} 7} 8", 1);
            this.validateCapture(m, 0, 0, 0, 25, "0 {1 2 {3} {4 5 {6}} 7} 8");

            this.validateGroup(m, 1, 0, 0, false, "", 0);

            this.validateGroup(m, 2, 3, 19, true, "1 2 {3} {4 5 {6}} 7", 4);
            this.validateCapture(m, 2, 0, 8, 1, "3");
            this.validateCapture(m, 2, 1, 17, 1, "6");
            this.validateCapture(m, 2, 2, 12, 7, "4 5 {6}");
            this.validateCapture(m, 2, 3, 3, 19, "1 2 {3} {4 5 {6}} 7");
        },
        balancingGroupWithNumberReferenceTest1: function () {
            var pattern = "(a)+b(?<-1>c)?";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "aaabc", 2, true);

            this.validateGroup(m, 0, 0, 5, true, "aaabc", 1);
            this.validateCapture(m, 0, 0, 0, 5, "aaabc");

            this.validateGroup(m, 1, 1, 1, true, "a", 2);
            this.validateCapture(m, 1, 0, 0, 1, "a");
            this.validateCapture(m, 1, 1, 1, 1, "a");
        },
        balancingGroupWithNumberReferenceTest2: function () {
            var pattern = "(a)+b(?<5-1>c)?";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "aaabc", 3, true);

            this.validateGroup(m, 0, 0, 5, true, "aaabc", 1);
            this.validateCapture(m, 0, 0, 0, 5, "aaabc");

            this.validateGroup(m, 1, 1, 1, true, "a", 2);
            this.validateCapture(m, 1, 0, 0, 1, "a");
            this.validateCapture(m, 1, 1, 1, 1, "a");

            this.validateGroup(m, 5, 3, 1, true, "b", 1);
            this.validateCapture(m, 5, 0, 3, 1, "b");
        },
        balancingGroupIncorrectReferenceTest1: function () {
            Bridge.Test.Assert.throws$6(System.ArgumentException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests.f1);
        },
        balancingGroupIncorrectReferenceTest2: function () {
            Bridge.Test.Assert.throws$6(System.ArgumentException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests.f2);
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests, {
        f1: function () {
            var pattern = "(?<gr1>a)b(?<gr2-gr55>c)";
            var text = "abc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            rgx.match(text);
        },
        f2: function () {
            var pattern = "(?<gr1>a)b(?<gr2-55>c)";
            var text = "abc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            rgx.match(text);
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnCharGroupTest1: function () {
            var pattern = "[ae]";
            var text = "lane";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 1, 1, "a", 1, true);

            this.validateGroup(ms.get(0), 0, 1, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 0, 0, 1, 1, "a");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 1, "e", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 1, true, "e", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 1, "e");
        },
        msdnCharGroupTest3: function () {
            var pattern = "\\b[A-Z]\\w*\\b";
            var text = "A city Albany Zulu maritime Marseilles";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "A", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "A", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "A");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 7, 6, "Albany", 1, true);

            this.validateGroup(ms.get(1), 0, 7, 6, true, "Albany", 1);
            this.validateCapture(ms.get(1), 0, 0, 7, 6, "Albany");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 14, 4, "Zulu", 1, true);

            this.validateGroup(ms.get(2), 0, 14, 4, true, "Zulu", 1);
            this.validateCapture(ms.get(2), 0, 0, 14, 4, "Zulu");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 28, 10, "Marseilles", 1, true);

            this.validateGroup(ms.get(3), 0, 28, 10, true, "Marseilles", 1);
            this.validateCapture(ms.get(3), 0, 0, 28, 10, "Marseilles");
        },
        msdnNegativeCharGroupTest1: function () {
            var pattern = "[^aei]";
            var text = "reign";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "r", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "r", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "r");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 1, "g", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 1, true, "g", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 1, "g");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 4, 1, "n", 1, true);

            this.validateGroup(ms.get(2), 0, 4, 1, true, "n", 1);
            this.validateCapture(ms.get(2), 0, 0, 4, 1, "n");
        },
        msdnNegativeCharGroupTest2: function () {
            var pattern = "\\bth[^o]\\w+\\b";
            var text = "thought thing though them through thus thorough this";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 8, 5, "thing", 1, true);

            this.validateGroup(ms.get(0), 0, 8, 5, true, "thing", 1);
            this.validateCapture(ms.get(0), 0, 0, 8, 5, "thing");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 21, 4, "them", 1, true);

            this.validateGroup(ms.get(1), 0, 21, 4, true, "them", 1);
            this.validateCapture(ms.get(1), 0, 0, 21, 4, "them");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 26, 7, "through", 1, true);

            this.validateGroup(ms.get(2), 0, 26, 7, true, "through", 1);
            this.validateCapture(ms.get(2), 0, 0, 26, 7, "through");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 34, 4, "thus", 1, true);

            this.validateGroup(ms.get(3), 0, 34, 4, true, "thus", 1);
            this.validateCapture(ms.get(3), 0, 0, 34, 4, "thus");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 48, 4, "this", 1, true);

            this.validateGroup(ms.get(4), 0, 48, 4, true, "this", 1);
            this.validateCapture(ms.get(4), 0, 0, 48, 4, "this");
        },
        msdnDotCharTest1: function () {
            var pattern = "a.e";
            var text = "water";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 3, "ate", 1, true);

            this.validateGroup(m, 0, 1, 3, true, "ate", 1);
            this.validateCapture(m, 0, 0, 1, 3, "ate");
        },
        msdnDotCharTest2: function () {
            var pattern = "^.+";
            var text = "This is one line and\r\nthis is the second.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 21, "This is one line and\r", 1, true);

            this.validateGroup(m, 0, 0, 21, true, "This is one line and\r", 1);
            this.validateCapture(m, 0, 0, 0, 21, "This is one line and\r");
        },
        msdnDotCharTest3: function () {
            var pattern = "^.+";
            var text = "This is one line and\r\nthis is the second.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 16);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 41, "This is one line and\r\nthis is the second.", 1, true);

            this.validateGroup(m, 0, 0, 41, true, "This is one line and\r\nthis is the second.", 1);
            this.validateCapture(m, 0, 0, 0, 41, "This is one line and\r\nthis is the second.");
        },
        msdnCharRangeInGroupTest: function () {
            var pattern = "[A-Z]";
            var text = "AB123";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "A", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "A", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "A");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "B", 1, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "B", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "B");
        },
        msdnWordCharTest1: function () {
            var pattern = "\\w";
            var text = "ID A1.3";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "I", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "I", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "I");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "D", 1, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "D", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "D");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 3, 1, "A", 1, true);

            this.validateGroup(ms.get(2), 0, 3, 1, true, "A", 1);
            this.validateCapture(ms.get(2), 0, 0, 3, 1, "A");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 4, 1, "1", 1, true);

            this.validateGroup(ms.get(3), 0, 4, 1, true, "1", 1);
            this.validateCapture(ms.get(3), 0, 0, 4, 1, "1");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 6, 1, "3", 1, true);

            this.validateGroup(ms.get(4), 0, 6, 1, true, "3", 1);
            this.validateCapture(ms.get(4), 0, 0, 6, 1, "3");
        },
        msdnWordCharTest2: function () {
            var pattern = "(\\w)\\1";
            var text = "summer";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 2, 2, "mm", 2, true);

            this.validateGroup(m, 0, 2, 2, true, "mm", 1);
            this.validateCapture(m, 0, 0, 2, 2, "mm");

            this.validateGroup(m, 1, 2, 1, true, "m", 1);
            this.validateCapture(m, 1, 0, 2, 1, "m");
        },
        msdnNonWordCharTest1: function () {
            var pattern = "\\W";
            var text = "ID A1.3";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 2, 1, " ", 1, true);

            this.validateGroup(ms.get(0), 0, 2, 1, true, " ", 1);
            this.validateCapture(ms.get(0), 0, 0, 2, 1, " ");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 5, 1, ".", 1, true);

            this.validateGroup(ms.get(1), 0, 5, 1, true, ".", 1);
            this.validateCapture(ms.get(1), 0, 0, 5, 1, ".");
        },
        msdnNonWordCharTest2: function () {
            var pattern = "\\b(\\w+)(\\W){1,2}";
            var text = "The old, grey mare slowly walked across the narrow, green pasture.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(11, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 4, "The ", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 4, true, "The ", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 4, "The ");

            this.validateGroup(ms.get(0), 1, 0, 3, true, "The", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 3, "The");

            this.validateGroup(ms.get(0), 2, 3, 1, true, " ", 1);
            this.validateCapture(ms.get(0), 2, 0, 3, 1, " ");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 4, 5, "old, ", 3, true);

            this.validateGroup(ms.get(1), 0, 4, 5, true, "old, ", 1);
            this.validateCapture(ms.get(1), 0, 0, 4, 5, "old, ");

            this.validateGroup(ms.get(1), 1, 4, 3, true, "old", 1);
            this.validateCapture(ms.get(1), 1, 0, 4, 3, "old");

            this.validateGroup(ms.get(1), 2, 8, 1, true, " ", 2);
            this.validateCapture(ms.get(1), 2, 0, 7, 1, ",");
            this.validateCapture(ms.get(1), 2, 1, 8, 1, " ");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 9, 5, "grey ", 3, true);

            this.validateGroup(ms.get(2), 0, 9, 5, true, "grey ", 1);
            this.validateCapture(ms.get(2), 0, 0, 9, 5, "grey ");

            this.validateGroup(ms.get(2), 1, 9, 4, true, "grey", 1);
            this.validateCapture(ms.get(2), 1, 0, 9, 4, "grey");

            this.validateGroup(ms.get(2), 2, 13, 1, true, " ", 1);
            this.validateCapture(ms.get(2), 2, 0, 13, 1, " ");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 14, 5, "mare ", 3, true);

            this.validateGroup(ms.get(3), 0, 14, 5, true, "mare ", 1);
            this.validateCapture(ms.get(3), 0, 0, 14, 5, "mare ");

            this.validateGroup(ms.get(3), 1, 14, 4, true, "mare", 1);
            this.validateCapture(ms.get(3), 1, 0, 14, 4, "mare");

            this.validateGroup(ms.get(3), 2, 18, 1, true, " ", 1);
            this.validateCapture(ms.get(3), 2, 0, 18, 1, " ");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 19, 7, "slowly ", 3, true);

            this.validateGroup(ms.get(4), 0, 19, 7, true, "slowly ", 1);
            this.validateCapture(ms.get(4), 0, 0, 19, 7, "slowly ");

            this.validateGroup(ms.get(4), 1, 19, 6, true, "slowly", 1);
            this.validateCapture(ms.get(4), 1, 0, 19, 6, "slowly");

            this.validateGroup(ms.get(4), 2, 25, 1, true, " ", 1);
            this.validateCapture(ms.get(4), 2, 0, 25, 1, " ");

            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 26, 7, "walked ", 3, true);

            this.validateGroup(ms.get(5), 0, 26, 7, true, "walked ", 1);
            this.validateCapture(ms.get(5), 0, 0, 26, 7, "walked ");

            this.validateGroup(ms.get(5), 1, 26, 6, true, "walked", 1);
            this.validateCapture(ms.get(5), 1, 0, 26, 6, "walked");

            this.validateGroup(ms.get(5), 2, 32, 1, true, " ", 1);
            this.validateCapture(ms.get(5), 2, 0, 32, 1, " ");

            // Match #6:
            Bridge.Test.Assert.notNull$1(ms.get(6), "Match[6] is not null.");
            this.validateMatch(ms.get(6), 33, 7, "across ", 3, true);

            this.validateGroup(ms.get(6), 0, 33, 7, true, "across ", 1);
            this.validateCapture(ms.get(6), 0, 0, 33, 7, "across ");

            this.validateGroup(ms.get(6), 1, 33, 6, true, "across", 1);
            this.validateCapture(ms.get(6), 1, 0, 33, 6, "across");

            this.validateGroup(ms.get(6), 2, 39, 1, true, " ", 1);
            this.validateCapture(ms.get(6), 2, 0, 39, 1, " ");

            // Match #7:
            Bridge.Test.Assert.notNull$1(ms.get(7), "Match[7] is not null.");
            this.validateMatch(ms.get(7), 40, 4, "the ", 3, true);

            this.validateGroup(ms.get(7), 0, 40, 4, true, "the ", 1);
            this.validateCapture(ms.get(7), 0, 0, 40, 4, "the ");

            this.validateGroup(ms.get(7), 1, 40, 3, true, "the", 1);
            this.validateCapture(ms.get(7), 1, 0, 40, 3, "the");

            this.validateGroup(ms.get(7), 2, 43, 1, true, " ", 1);
            this.validateCapture(ms.get(7), 2, 0, 43, 1, " ");

            // Match #8:
            Bridge.Test.Assert.notNull$1(ms.get(8), "Match[8] is not null.");
            this.validateMatch(ms.get(8), 44, 8, "narrow, ", 3, true);

            this.validateGroup(ms.get(8), 0, 44, 8, true, "narrow, ", 1);
            this.validateCapture(ms.get(8), 0, 0, 44, 8, "narrow, ");

            this.validateGroup(ms.get(8), 1, 44, 6, true, "narrow", 1);
            this.validateCapture(ms.get(8), 1, 0, 44, 6, "narrow");

            this.validateGroup(ms.get(8), 2, 51, 1, true, " ", 2);
            this.validateCapture(ms.get(8), 2, 0, 50, 1, ",");
            this.validateCapture(ms.get(8), 2, 1, 51, 1, " ");

            // Match #9:
            Bridge.Test.Assert.notNull$1(ms.get(9), "Match[9] is not null.");
            this.validateMatch(ms.get(9), 52, 6, "green ", 3, true);

            this.validateGroup(ms.get(9), 0, 52, 6, true, "green ", 1);
            this.validateCapture(ms.get(9), 0, 0, 52, 6, "green ");

            this.validateGroup(ms.get(9), 1, 52, 5, true, "green", 1);
            this.validateCapture(ms.get(9), 1, 0, 52, 5, "green");

            this.validateGroup(ms.get(9), 2, 57, 1, true, " ", 1);
            this.validateCapture(ms.get(9), 2, 0, 57, 1, " ");

            // Match #10:
            Bridge.Test.Assert.notNull$1(ms.get(10), "Match[10] is not null.");
            this.validateMatch(ms.get(10), 58, 8, "pasture.", 3, true);

            this.validateGroup(ms.get(10), 0, 58, 8, true, "pasture.", 1);
            this.validateCapture(ms.get(10), 0, 0, 58, 8, "pasture.");

            this.validateGroup(ms.get(10), 1, 58, 7, true, "pasture", 1);
            this.validateCapture(ms.get(10), 1, 0, 58, 7, "pasture");

            this.validateGroup(ms.get(10), 2, 65, 1, true, ".", 1);
            this.validateCapture(ms.get(10), 2, 0, 65, 1, ".");
        },
        msdnSpaceCharTest1: function () {
            var pattern = "\\w\\s";
            var text = "ID A1.3";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 2, "D ", 1, true);

            this.validateGroup(m, 0, 1, 2, true, "D ", 1);
            this.validateCapture(m, 0, 0, 1, 2, "D ");
        },
        msdnSpaceCharTest2: function () {
            var pattern = "\\b\\w+(e)?s(\\s|$)";
            var text = "matches stores stops leave leaves";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 8, "matches ", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 8, true, "matches ", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 8, "matches ");

            this.validateGroup(ms.get(0), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(0), 2, 7, 1, true, " ", 1);
            this.validateCapture(ms.get(0), 2, 0, 7, 1, " ");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 7, "stores ", 3, true);

            this.validateGroup(ms.get(1), 0, 8, 7, true, "stores ", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 7, "stores ");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 2, 14, 1, true, " ", 1);
            this.validateCapture(ms.get(1), 2, 0, 14, 1, " ");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 15, 6, "stops ", 3, true);

            this.validateGroup(ms.get(2), 0, 15, 6, true, "stops ", 1);
            this.validateCapture(ms.get(2), 0, 0, 15, 6, "stops ");

            this.validateGroup(ms.get(2), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(2), 2, 20, 1, true, " ", 1);
            this.validateCapture(ms.get(2), 2, 0, 20, 1, " ");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 27, 6, "leaves", 3, true);

            this.validateGroup(ms.get(3), 0, 27, 6, true, "leaves", 1);
            this.validateCapture(ms.get(3), 0, 0, 27, 6, "leaves");

            this.validateGroup(ms.get(3), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(3), 2, 33, 0, true, "", 1);
            this.validateCapture(ms.get(3), 2, 0, 33, 0, "");
        },
        msdnNonSpaceCharTest1: function () {
            var pattern = "\\s\\S";
            var text = "int __ctr";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 3, 2, " _", 1, true);

            this.validateGroup(m, 0, 3, 2, true, " _", 1);
            this.validateCapture(m, 0, 0, 3, 2, " _");
        },
        msdnNonSpaceCharTest2: function () {
            var pattern = "\\b(\\S+)\\s?";
            var text = "This is the first sentence of the first paragraph. This is the second sentence.\nThis is the only sentence of the second paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(23, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 5, "This ", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 5, true, "This ", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 5, "This ");

            this.validateGroup(ms.get(0), 1, 0, 4, true, "This", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 4, "This");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 5, 3, "is ", 2, true);

            this.validateGroup(ms.get(1), 0, 5, 3, true, "is ", 1);
            this.validateCapture(ms.get(1), 0, 0, 5, 3, "is ");

            this.validateGroup(ms.get(1), 1, 5, 2, true, "is", 1);
            this.validateCapture(ms.get(1), 1, 0, 5, 2, "is");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 8, 4, "the ", 2, true);

            this.validateGroup(ms.get(2), 0, 8, 4, true, "the ", 1);
            this.validateCapture(ms.get(2), 0, 0, 8, 4, "the ");

            this.validateGroup(ms.get(2), 1, 8, 3, true, "the", 1);
            this.validateCapture(ms.get(2), 1, 0, 8, 3, "the");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 12, 6, "first ", 2, true);

            this.validateGroup(ms.get(3), 0, 12, 6, true, "first ", 1);
            this.validateCapture(ms.get(3), 0, 0, 12, 6, "first ");

            this.validateGroup(ms.get(3), 1, 12, 5, true, "first", 1);
            this.validateCapture(ms.get(3), 1, 0, 12, 5, "first");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 18, 9, "sentence ", 2, true);

            this.validateGroup(ms.get(4), 0, 18, 9, true, "sentence ", 1);
            this.validateCapture(ms.get(4), 0, 0, 18, 9, "sentence ");

            this.validateGroup(ms.get(4), 1, 18, 8, true, "sentence", 1);
            this.validateCapture(ms.get(4), 1, 0, 18, 8, "sentence");

            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 27, 3, "of ", 2, true);

            this.validateGroup(ms.get(5), 0, 27, 3, true, "of ", 1);
            this.validateCapture(ms.get(5), 0, 0, 27, 3, "of ");

            this.validateGroup(ms.get(5), 1, 27, 2, true, "of", 1);
            this.validateCapture(ms.get(5), 1, 0, 27, 2, "of");

            // Match #6:
            Bridge.Test.Assert.notNull$1(ms.get(6), "Match[6] is not null.");
            this.validateMatch(ms.get(6), 30, 4, "the ", 2, true);

            this.validateGroup(ms.get(6), 0, 30, 4, true, "the ", 1);
            this.validateCapture(ms.get(6), 0, 0, 30, 4, "the ");

            this.validateGroup(ms.get(6), 1, 30, 3, true, "the", 1);
            this.validateCapture(ms.get(6), 1, 0, 30, 3, "the");

            // Match #7:
            Bridge.Test.Assert.notNull$1(ms.get(7), "Match[7] is not null.");
            this.validateMatch(ms.get(7), 34, 6, "first ", 2, true);

            this.validateGroup(ms.get(7), 0, 34, 6, true, "first ", 1);
            this.validateCapture(ms.get(7), 0, 0, 34, 6, "first ");

            this.validateGroup(ms.get(7), 1, 34, 5, true, "first", 1);
            this.validateCapture(ms.get(7), 1, 0, 34, 5, "first");

            // Match #8:
            Bridge.Test.Assert.notNull$1(ms.get(8), "Match[8] is not null.");
            this.validateMatch(ms.get(8), 40, 11, "paragraph. ", 2, true);

            this.validateGroup(ms.get(8), 0, 40, 11, true, "paragraph. ", 1);
            this.validateCapture(ms.get(8), 0, 0, 40, 11, "paragraph. ");

            this.validateGroup(ms.get(8), 1, 40, 10, true, "paragraph.", 1);
            this.validateCapture(ms.get(8), 1, 0, 40, 10, "paragraph.");

            // Match #9:
            Bridge.Test.Assert.notNull$1(ms.get(9), "Match[9] is not null.");
            this.validateMatch(ms.get(9), 51, 5, "This ", 2, true);

            this.validateGroup(ms.get(9), 0, 51, 5, true, "This ", 1);
            this.validateCapture(ms.get(9), 0, 0, 51, 5, "This ");

            this.validateGroup(ms.get(9), 1, 51, 4, true, "This", 1);
            this.validateCapture(ms.get(9), 1, 0, 51, 4, "This");

            // Match #10:
            Bridge.Test.Assert.notNull$1(ms.get(10), "Match[10] is not null.");
            this.validateMatch(ms.get(10), 56, 3, "is ", 2, true);

            this.validateGroup(ms.get(10), 0, 56, 3, true, "is ", 1);
            this.validateCapture(ms.get(10), 0, 0, 56, 3, "is ");

            this.validateGroup(ms.get(10), 1, 56, 2, true, "is", 1);
            this.validateCapture(ms.get(10), 1, 0, 56, 2, "is");

            // Match #11:
            Bridge.Test.Assert.notNull$1(ms.get(11), "Match[11] is not null.");
            this.validateMatch(ms.get(11), 59, 4, "the ", 2, true);

            this.validateGroup(ms.get(11), 0, 59, 4, true, "the ", 1);
            this.validateCapture(ms.get(11), 0, 0, 59, 4, "the ");

            this.validateGroup(ms.get(11), 1, 59, 3, true, "the", 1);
            this.validateCapture(ms.get(11), 1, 0, 59, 3, "the");

            // Match #12:
            Bridge.Test.Assert.notNull$1(ms.get(12), "Match[12] is not null.");
            this.validateMatch(ms.get(12), 63, 7, "second ", 2, true);

            this.validateGroup(ms.get(12), 0, 63, 7, true, "second ", 1);
            this.validateCapture(ms.get(12), 0, 0, 63, 7, "second ");

            this.validateGroup(ms.get(12), 1, 63, 6, true, "second", 1);
            this.validateCapture(ms.get(12), 1, 0, 63, 6, "second");

            // Match #13:
            Bridge.Test.Assert.notNull$1(ms.get(13), "Match[13] is not null.");
            this.validateMatch(ms.get(13), 70, 10, "sentence.\n", 2, true);

            this.validateGroup(ms.get(13), 0, 70, 10, true, "sentence.\n", 1);
            this.validateCapture(ms.get(13), 0, 0, 70, 10, "sentence.\n");

            this.validateGroup(ms.get(13), 1, 70, 9, true, "sentence.", 1);
            this.validateCapture(ms.get(13), 1, 0, 70, 9, "sentence.");

            // Match #14:
            Bridge.Test.Assert.notNull$1(ms.get(14), "Match[14] is not null.");
            this.validateMatch(ms.get(14), 80, 5, "This ", 2, true);

            this.validateGroup(ms.get(14), 0, 80, 5, true, "This ", 1);
            this.validateCapture(ms.get(14), 0, 0, 80, 5, "This ");

            this.validateGroup(ms.get(14), 1, 80, 4, true, "This", 1);
            this.validateCapture(ms.get(14), 1, 0, 80, 4, "This");

            // Match #15:
            Bridge.Test.Assert.notNull$1(ms.get(15), "Match[15] is not null.");
            this.validateMatch(ms.get(15), 85, 3, "is ", 2, true);

            this.validateGroup(ms.get(15), 0, 85, 3, true, "is ", 1);
            this.validateCapture(ms.get(15), 0, 0, 85, 3, "is ");

            this.validateGroup(ms.get(15), 1, 85, 2, true, "is", 1);
            this.validateCapture(ms.get(15), 1, 0, 85, 2, "is");

            // Match #16:
            Bridge.Test.Assert.notNull$1(ms.get(16), "Match[16] is not null.");
            this.validateMatch(ms.get(16), 88, 4, "the ", 2, true);

            this.validateGroup(ms.get(16), 0, 88, 4, true, "the ", 1);
            this.validateCapture(ms.get(16), 0, 0, 88, 4, "the ");

            this.validateGroup(ms.get(16), 1, 88, 3, true, "the", 1);
            this.validateCapture(ms.get(16), 1, 0, 88, 3, "the");

            // Match #17:
            Bridge.Test.Assert.notNull$1(ms.get(17), "Match[17] is not null.");
            this.validateMatch(ms.get(17), 92, 5, "only ", 2, true);

            this.validateGroup(ms.get(17), 0, 92, 5, true, "only ", 1);
            this.validateCapture(ms.get(17), 0, 0, 92, 5, "only ");

            this.validateGroup(ms.get(17), 1, 92, 4, true, "only", 1);
            this.validateCapture(ms.get(17), 1, 0, 92, 4, "only");

            // Match #18:
            Bridge.Test.Assert.notNull$1(ms.get(18), "Match[18] is not null.");
            this.validateMatch(ms.get(18), 97, 9, "sentence ", 2, true);

            this.validateGroup(ms.get(18), 0, 97, 9, true, "sentence ", 1);
            this.validateCapture(ms.get(18), 0, 0, 97, 9, "sentence ");

            this.validateGroup(ms.get(18), 1, 97, 8, true, "sentence", 1);
            this.validateCapture(ms.get(18), 1, 0, 97, 8, "sentence");

            // Match #19:
            Bridge.Test.Assert.notNull$1(ms.get(19), "Match[19] is not null.");
            this.validateMatch(ms.get(19), 106, 3, "of ", 2, true);

            this.validateGroup(ms.get(19), 0, 106, 3, true, "of ", 1);
            this.validateCapture(ms.get(19), 0, 0, 106, 3, "of ");

            this.validateGroup(ms.get(19), 1, 106, 2, true, "of", 1);
            this.validateCapture(ms.get(19), 1, 0, 106, 2, "of");

            // Match #20:
            Bridge.Test.Assert.notNull$1(ms.get(20), "Match[20] is not null.");
            this.validateMatch(ms.get(20), 109, 4, "the ", 2, true);

            this.validateGroup(ms.get(20), 0, 109, 4, true, "the ", 1);
            this.validateCapture(ms.get(20), 0, 0, 109, 4, "the ");

            this.validateGroup(ms.get(20), 1, 109, 3, true, "the", 1);
            this.validateCapture(ms.get(20), 1, 0, 109, 3, "the");

            // Match #21:
            Bridge.Test.Assert.notNull$1(ms.get(21), "Match[21] is not null.");
            this.validateMatch(ms.get(21), 113, 7, "second ", 2, true);

            this.validateGroup(ms.get(21), 0, 113, 7, true, "second ", 1);
            this.validateCapture(ms.get(21), 0, 0, 113, 7, "second ");

            this.validateGroup(ms.get(21), 1, 113, 6, true, "second", 1);
            this.validateCapture(ms.get(21), 1, 0, 113, 6, "second");

            // Match #22:
            Bridge.Test.Assert.notNull$1(ms.get(22), "Match[22] is not null.");
            this.validateMatch(ms.get(22), 120, 10, "paragraph.", 2, true);

            this.validateGroup(ms.get(22), 0, 120, 10, true, "paragraph.", 1);
            this.validateCapture(ms.get(22), 0, 0, 120, 10, "paragraph.");

            this.validateGroup(ms.get(22), 1, 120, 10, true, "paragraph.", 1);
            this.validateCapture(ms.get(22), 1, 0, 120, 10, "paragraph.");
        },
        msdnDigitCharTest1: function () {
            var pattern = "\\d";
            var text = "4 = IV";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 1, "4", 1, true);

            this.validateGroup(m, 0, 0, 1, true, "4", 1);
            this.validateCapture(m, 0, 0, 0, 1, "4");
        },
        msdnDigitCharTest2: function () {
            var pattern = "^(\\(?\\d{3}\\)?[\\s-])?\\d{3}-\\d{4}$";
            var text = "(212) 111-1111";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 14, "(212) 111-1111", 2, true);

            this.validateGroup(m, 0, 0, 14, true, "(212) 111-1111", 1);
            this.validateCapture(m, 0, 0, 0, 14, "(212) 111-1111");

            this.validateGroup(m, 1, 0, 6, true, "(212) ", 1);
            this.validateCapture(m, 1, 0, 0, 6, "(212) ");
        },
        msdnDigitCharTest3: function () {
            var pattern = "^(\\(?\\d{3}\\)?[\\s-])?\\d{3}-\\d{4}$";
            var text = "01 999-9999";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        msdnNonDigitCharTest1: function () {
            var pattern = "\\D";
            var text = "4 = IV";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 1, 1, " ", 1, true);

            this.validateGroup(ms.get(0), 0, 1, 1, true, " ", 1);
            this.validateCapture(ms.get(0), 0, 0, 1, 1, " ");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 2, 1, "=", 1, true);

            this.validateGroup(ms.get(1), 0, 2, 1, true, "=", 1);
            this.validateCapture(ms.get(1), 0, 0, 2, 1, "=");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 3, 1, " ", 1, true);

            this.validateGroup(ms.get(2), 0, 3, 1, true, " ", 1);
            this.validateCapture(ms.get(2), 0, 0, 3, 1, " ");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 4, 1, "I", 1, true);

            this.validateGroup(ms.get(3), 0, 4, 1, true, "I", 1);
            this.validateCapture(ms.get(3), 0, 0, 4, 1, "I");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 5, 1, "V", 1, true);

            this.validateGroup(ms.get(4), 0, 5, 1, true, "V", 1);
            this.validateCapture(ms.get(4), 0, 0, 5, 1, "V");
        },
        msdnNonDigitCharTest2: function () {
            var pattern = "^\\D\\d{1,5}\\D*$";
            var text = "A1039C";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "A1039C", 1, true);

            this.validateGroup(m, 0, 0, 6, true, "A1039C", 1);
            this.validateCapture(m, 0, 0, 0, 6, "A1039C");
        },
        msdnNonDigitCharTest3: function () {
            var pattern = "^\\D\\d{1,5}\\D*$";
            var text = "Y938518";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        msdnSubstactGroupTest1: function () {
            var pattern = "^[0-9-[2468]]+$";
            var text = "123";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        msdnSubstactGroupTest2: function () {
            var pattern = "^[0-9-[2468]]+$";
            var text = "13579753";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 8, "13579753", 1, true);

            this.validateGroup(m, 0, 0, 8, true, "13579753", 1);
            this.validateCapture(m, 0, 0, 0, 8, "13579753");
        },
        msdnSubstactGroupTest3: function () {
            var pattern = "^[0-9-[2468]]+$";
            var text = "3557798";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        msdnSubstactGroupTest4: function () {
            var pattern = "^[0-9-[2468]]+$";
            var text = "335599901";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 9, "335599901", 1, true);

            this.validateGroup(m, 0, 0, 9, true, "335599901", 1);
            this.validateCapture(m, 0, 0, 0, 9, "335599901");
        },
        charClassesInCharGroupTest: function () {
            var pattern = "([ABC\\s]+)";
            var text = "AC  D AA";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 4, "AC  ", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 4, true, "AC  ", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 4, "AC  ");

            this.validateGroup(ms.get(0), 1, 0, 4, true, "AC  ", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 4, "AC  ");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 5, 3, " AA", 2, true);

            this.validateGroup(ms.get(1), 0, 5, 3, true, " AA", 1);
            this.validateCapture(ms.get(1), 0, 0, 5, 3, " AA");

            this.validateGroup(ms.get(1), 1, 5, 3, true, " AA", 1);
            this.validateCapture(ms.get(1), 1, 0, 5, 3, " AA");
        },
        caretSymbolInCharGroupTest: function () {
            var pattern = "([abc^d]+)";
            var text = "abc d^a";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "abc", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "abc", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "abc");

            this.validateGroup(ms.get(0), 1, 0, 3, true, "abc", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 3, "abc");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 4, 3, "d^a", 2, true);

            this.validateGroup(ms.get(1), 0, 4, 3, true, "d^a", 1);
            this.validateCapture(ms.get(1), 0, 0, 4, 3, "d^a");

            this.validateGroup(ms.get(1), 1, 4, 3, true, "d^a", 1);
            this.validateCapture(ms.get(1), 1, 0, 4, 3, "d^a");
        },
        negativeCharGroupTest: function () {
            var pattern = "([^abc]+)";
            var text = "def aaa fff";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 4, "def ", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 4, true, "def ", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 4, "def ");

            this.validateGroup(ms.get(0), 1, 0, 4, true, "def ", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 4, "def ");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 7, 4, " fff", 2, true);

            this.validateGroup(ms.get(1), 0, 7, 4, true, " fff", 1);
            this.validateCapture(ms.get(1), 0, 0, 7, 4, " fff");

            this.validateGroup(ms.get(1), 1, 7, 4, true, " fff", 1);
            this.validateCapture(ms.get(1), 1, 0, 7, 4, " fff");
        },
        combiningCharRangesTest: function () {
            var pattern = "([e-gda-ce]+)";
            var text = "fb";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 2, "fb", 2, true);

            this.validateGroup(m, 0, 0, 2, true, "fb", 1);
            this.validateCapture(m, 0, 0, 0, 2, "fb");

            this.validateGroup(m, 1, 0, 2, true, "fb", 1);
            this.validateCapture(m, 1, 0, 0, 2, "fb");
        },
        substractGroupTest1: function () {
            var pattern = "[a-c-[^b-c]]";
            var text = "b";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 1, "b", 1, true);

            this.validateGroup(m, 0, 0, 1, true, "b", 1);
            this.validateCapture(m, 0, 0, 0, 1, "b");
        },
        substractGroupTest2: function () {
            var pattern = "[a-c-[b-c]]";
            var text = "b";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        substractGroupTest3: function () {
            var pattern = "[a-c-[b-c]]";
            var text = "a";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 1, "a", 1, true);

            this.validateGroup(m, 0, 0, 1, true, "a", 1);
            this.validateCapture(m, 0, 0, 0, 1, "a");
        },
        substractNegativeGroupTest1: function () {
            var pattern = "[^a-f-[a-c]]";
            var text = "abcdefg";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 6, 1, "g", 1, true);

            this.validateGroup(m, 0, 6, 1, true, "g", 1);
            this.validateCapture(m, 0, 0, 6, 1, "g");
        },
        substractNegativeGroupTest2: function () {
            var pattern = "[^a-f-[^a-c]]";
            var text = "abcdefg";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        substractNegativeGroupTest3: function () {
            var pattern = "[^a-f-[^a-g]]";
            var text = "abcdefg";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 6, 1, "g", 1, true);

            this.validateGroup(m, 0, 6, 1, true, "g", 1);
            this.validateCapture(m, 0, 0, 6, 1, "g");
        },
        substractNestedGroupsTest1: function () {
            var pattern = "[a-z-[d-z-[d-e]]]";
            var text = "abcdefg";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "a", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "a");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "b", 1, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "b", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "b");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 2, 1, "c", 1, true);

            this.validateGroup(ms.get(2), 0, 2, 1, true, "c", 1);
            this.validateCapture(ms.get(2), 0, 0, 2, 1, "c");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 3, 1, "d", 1, true);

            this.validateGroup(ms.get(3), 0, 3, 1, true, "d", 1);
            this.validateCapture(ms.get(3), 0, 0, 3, 1, "d");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 4, 1, "e", 1, true);

            this.validateGroup(ms.get(4), 0, 4, 1, true, "e", 1);
            this.validateCapture(ms.get(4), 0, 0, 4, 1, "e");
        },
        substractNestedGroupsTest2: function () {
            var pattern = "[a-e-[^a-c-[^a-[ace]]]]";
            var text = "abcdefghij";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "a", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "a");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "b", 1, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "b", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "b");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 2, 1, "c", 1, true);

            this.validateGroup(ms.get(2), 0, 2, 1, true, "c", 1);
            this.validateCapture(ms.get(2), 0, 0, 2, 1, "c");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 3, 1, "d", 1, true);

            this.validateGroup(ms.get(3), 0, 3, 1, true, "d", 1);
            this.validateCapture(ms.get(3), 0, 0, 3, 1, "d");
        },
        substractGroupIsNotLastTest: function () {
            Bridge.Test.Assert.throws$6(System.ArgumentException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests.f1);
        },
        charClassWithEscapedBracketInGroupTest: function () {
            var pattern = "([\\(])|([\\)])";
            var text = "()";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "(", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "(", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "(");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "(", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "(");

            this.validateGroup(ms.get(0), 2, 0, 0, false, "", 0);

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, ")", 3, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, ")", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, ")");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 2, 1, 1, true, ")", 1);
            this.validateCapture(ms.get(1), 2, 0, 1, 1, ")");
        },
        charClassWithEscapedSquareBracketInGroupTest: function () {
            var pattern = "([\\[])|([\\]])";
            var text = "[]";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "[", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "[", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "[");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "[", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "[");

            this.validateGroup(ms.get(0), 2, 0, 0, false, "", 0);

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "]", 3, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "]", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "]");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 2, 1, 1, true, "]", 1);
            this.validateCapture(ms.get(1), 2, 0, 1, 1, "]");
        },
        charClassWithUnescapedBracketInGroupTest: function () {
            var pattern = "([(])|([)])";
            var text = "()";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "(", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "(", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "(");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "(", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "(");

            this.validateGroup(ms.get(0), 2, 0, 0, false, "", 0);

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, ")", 3, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, ")", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, ")");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 2, 1, 1, true, ")", 1);
            this.validateCapture(ms.get(1), 2, 0, 1, 1, ")");
        },
        charClassWithUnescapedSquareBracketInGroupTest: function () {
            var pattern = "([[])|([]])";
            var text = "[]";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "[", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "[", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "[");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "[", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "[");

            this.validateGroup(ms.get(0), 2, 0, 0, false, "", 0);

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "]", 3, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "]", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "]");

            this.validateGroup(ms.get(1), 1, 0, 0, false, "", 0);

            this.validateGroup(ms.get(1), 2, 1, 1, true, "]", 1);
            this.validateCapture(ms.get(1), 2, 0, 1, 1, "]");
        },
        emptyRangeTest: function () {
            Bridge.Test.Assert.throws$6(System.ArgumentException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests.f2);
        },
        closingSquareBracketTest1: function () {
            var pattern = "[]a]";
            var text = "abc]";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "a", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "a");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 1, "]", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 1, true, "]", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 1, "]");
        },
        closingSquareBracketTest2: function () {
            var pattern = "[c]]";
            var text = "abc]";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 2, 2, "c]", 1, true);

            this.validateGroup(m, 0, 2, 2, true, "c]", 1);
            this.validateCapture(m, 0, 0, 2, 2, "c]");
        },
        openingSquareBracketTest1: function () {
            var pattern = "[[a]";
            var text = "[abc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "[", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "[", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "[");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "a", 1, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "a", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "a");
        },
        openingSquareBracketTest2: function () {
            var pattern = "[a[]";
            var text = "[abc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "[", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "[", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "[");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "a", 1, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "a", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "a");
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests, {
        f1: function () {
            var pattern = "[a-b-[c-d]e]";
            var text = "abcdefghij";

            var rx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            rx.matches(text);
        },
        f2: function () {
            var pattern = "[]";
            var text = "abc";

            var rx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rx.matches(text);
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnBellCharTest: function () {
            var pattern = "\\a";
            var text = "Error!\u0007";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 6, 1, "\u0007", 1, true);

            this.validateGroup(m, 0, 6, 1, true, "\u0007", 1);
            this.validateCapture(m, 0, 0, 6, 1, "\u0007");
        },
        msdnBackspaceCharTest: function () {
            var pattern = "[\\b]{3,}";
            var text = "\b\b\b\b";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "\b\b\b\b", 1, true);

            this.validateGroup(m, 0, 0, 4, true, "\b\b\b\b", 1);
            this.validateCapture(m, 0, 0, 0, 4, "\b\b\b\b");
        },
        msdnTabCharTest: function () {
            var pattern = "(\\w+)\\t";
            var text = "item1\titem2\t";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 6, "item1\t", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 6, true, "item1\t", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 6, "item1\t");

            this.validateGroup(ms.get(0), 1, 0, 5, true, "item1", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 5, "item1");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 6, 6, "item2\t", 2, true);

            this.validateGroup(ms.get(1), 0, 6, 6, true, "item2\t", 1);
            this.validateCapture(ms.get(1), 0, 0, 6, 6, "item2\t");

            this.validateGroup(ms.get(1), 1, 6, 5, true, "item2", 1);
            this.validateCapture(ms.get(1), 1, 0, 6, 5, "item2");
        },
        msdnCarriageRetCharTest: function () {
            var pattern = "\\r\\n(\\w+)";
            var text = "\r\nThese are\ntwo lines.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 7, "\r\nThese", 2, true);

            this.validateGroup(m, 0, 0, 7, true, "\r\nThese", 1);
            this.validateCapture(m, 0, 0, 0, 7, "\r\nThese");

            this.validateGroup(m, 1, 2, 5, true, "These", 1);
            this.validateCapture(m, 1, 0, 2, 5, "These");
        },
        msdnVerticalTabCharTest: function () {
            var pattern = "[\\v]{2,}";
            var text = "\u000b\u000b\u000b";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "\u000b\u000b\u000b", 1, true);

            this.validateGroup(m, 0, 0, 3, true, "\u000b\u000b\u000b", 1);
            this.validateCapture(m, 0, 0, 0, 3, "\u000b\u000b\u000b");
        },
        msdnFormFeedCharTest: function () {
            var pattern = "[\\f]{2,}";
            var text = "\f\f\f";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "\f\f\f", 1, true);

            this.validateGroup(m, 0, 0, 3, true, "\f\f\f", 1);
            this.validateCapture(m, 0, 0, 0, 3, "\f\f\f");
        },
        msdnNewLineCharTest: function () {
            var pattern = "\\r\\n(\\w+)";
            var text = "\r\nThese are\ntwo lines.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 7, "\r\nThese", 2, true);

            this.validateGroup(m, 0, 0, 7, true, "\r\nThese", 1);
            this.validateCapture(m, 0, 0, 0, 7, "\r\nThese");

            this.validateGroup(m, 1, 2, 5, true, "These", 1);
            this.validateCapture(m, 1, 0, 2, 5, "These");
        },
        msdnEscapeCharTest: function () {
            var pattern = "\\e";
            var text = "\u001b";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 1, "\u001b", 1, true);

            this.validateGroup(m, 0, 0, 1, true, "\u001b", 1);
            this.validateCapture(m, 0, 0, 0, 1, "\u001b");
        },
        msdnOctalEscapeTest: function () {
            var pattern = "\\w\\040\\w";
            var text = "a bc d";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "a b", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "a b", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "a b");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 3, "c d", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 3, true, "c d", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 3, "c d");
        },
        msdnHexEscapeTest: function () {
            var pattern = "\\w\\x20\\w";
            var text = "a bc d";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "a b", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "a b", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "a b");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 3, "c d", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 3, true, "c d", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 3, "c d");
        },
        msdnAsciiEscapeTest: function () {
            var pattern = "\\cC";
            var text = "Test\u0003";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 4, 1, "\u0003", 1, true);

            this.validateGroup(m, 0, 4, 1, true, "\u0003", 1);
            this.validateCapture(m, 0, 0, 4, 1, "\u0003");
        },
        msdnUnicodeEscapeTest: function () {
            var pattern = "\\w\\u0020\\w";
            var text = "a bc d";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "a b", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "a b", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "a b");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 3, "c d", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 3, true, "c d", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 3, "c d");
        },
        msdnSpecialEscapesTest: function () {
            var pattern = "\\d+[\\+-x\\*]\\d+";
            var text = "(2+2) * 3*9";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 1, 3, "2+2", 1, true);

            this.validateGroup(ms.get(0), 0, 1, 3, true, "2+2", 1);
            this.validateCapture(ms.get(0), 0, 0, 1, 3, "2+2");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 3, "3*9", 1, true);

            this.validateGroup(ms.get(1), 0, 8, 3, true, "3*9", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 3, "3*9");
        },
        msdnCharEscapesExampleTest: function () {
            var pattern = "\\G(.+)[\\t\\u007c](.+)\\r?\\n";
            var text = "Mumbai, India|13,922,125\t\nShanghai, China\t13,831,900\nKarachi, Pakistan|12,991,000\nDelhi, India\t12,259,230\nIstanbul, Turkey|11,372,613\n";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 26, "Mumbai, India|13,922,125\t\n", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 26, true, "Mumbai, India|13,922,125\t\n", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 26, "Mumbai, India|13,922,125\t\n");

            this.validateGroup(ms.get(0), 1, 0, 13, true, "Mumbai, India", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 13, "Mumbai, India");

            this.validateGroup(ms.get(0), 2, 14, 11, true, "13,922,125\t", 1);
            this.validateCapture(ms.get(0), 2, 0, 14, 11, "13,922,125\t");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 26, 27, "Shanghai, China\t13,831,900\n", 3, true);

            this.validateGroup(ms.get(1), 0, 26, 27, true, "Shanghai, China\t13,831,900\n", 1);
            this.validateCapture(ms.get(1), 0, 0, 26, 27, "Shanghai, China\t13,831,900\n");

            this.validateGroup(ms.get(1), 1, 26, 15, true, "Shanghai, China", 1);
            this.validateCapture(ms.get(1), 1, 0, 26, 15, "Shanghai, China");

            this.validateGroup(ms.get(1), 2, 42, 10, true, "13,831,900", 1);
            this.validateCapture(ms.get(1), 2, 0, 42, 10, "13,831,900");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 53, 29, "Karachi, Pakistan|12,991,000\n", 3, true);

            this.validateGroup(ms.get(2), 0, 53, 29, true, "Karachi, Pakistan|12,991,000\n", 1);
            this.validateCapture(ms.get(2), 0, 0, 53, 29, "Karachi, Pakistan|12,991,000\n");

            this.validateGroup(ms.get(2), 1, 53, 17, true, "Karachi, Pakistan", 1);
            this.validateCapture(ms.get(2), 1, 0, 53, 17, "Karachi, Pakistan");

            this.validateGroup(ms.get(2), 2, 71, 10, true, "12,991,000", 1);
            this.validateCapture(ms.get(2), 2, 0, 71, 10, "12,991,000");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 82, 24, "Delhi, India\t12,259,230\n", 3, true);

            this.validateGroup(ms.get(3), 0, 82, 24, true, "Delhi, India\t12,259,230\n", 1);
            this.validateCapture(ms.get(3), 0, 0, 82, 24, "Delhi, India\t12,259,230\n");

            this.validateGroup(ms.get(3), 1, 82, 12, true, "Delhi, India", 1);
            this.validateCapture(ms.get(3), 1, 0, 82, 12, "Delhi, India");

            this.validateGroup(ms.get(3), 2, 95, 10, true, "12,259,230", 1);
            this.validateCapture(ms.get(3), 2, 0, 95, 10, "12,259,230");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 106, 28, "Istanbul, Turkey|11,372,613\n", 3, true);

            this.validateGroup(ms.get(4), 0, 106, 28, true, "Istanbul, Turkey|11,372,613\n", 1);
            this.validateCapture(ms.get(4), 0, 0, 106, 28, "Istanbul, Turkey|11,372,613\n");

            this.validateGroup(ms.get(4), 1, 106, 16, true, "Istanbul, Turkey", 1);
            this.validateCapture(ms.get(4), 1, 0, 106, 16, "Istanbul, Turkey");

            this.validateGroup(ms.get(4), 2, 123, 10, true, "11,372,613", 1);
            this.validateCapture(ms.get(4), 2, 0, 123, 10, "11,372,613");
        },
        charEscapesTest: function () {
            //NOTE: \b is excluded as it somehow affects the expected result.

            var pattern = "(\\a|\\t|\\r|\\v|\\f|\\n|\\e|\\115|\\x4e|\\cC|\\u004b)+";
            var text = "\u0007, \t, \r, \u000b, \f, \n, \u001b, N, M, \u0003, K";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(11, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "\u0007", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "\u0007", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "\u0007");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "\u0007", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "\u0007");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 1, "\t", 2, true);

            this.validateGroup(ms.get(1), 0, 3, 1, true, "\t", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 1, "\t");

            this.validateGroup(ms.get(1), 1, 3, 1, true, "\t", 1);
            this.validateCapture(ms.get(1), 1, 0, 3, 1, "\t");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 6, 1, "\r", 2, true);

            this.validateGroup(ms.get(2), 0, 6, 1, true, "\r", 1);
            this.validateCapture(ms.get(2), 0, 0, 6, 1, "\r");

            this.validateGroup(ms.get(2), 1, 6, 1, true, "\r", 1);
            this.validateCapture(ms.get(2), 1, 0, 6, 1, "\r");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 9, 1, "\u000b", 2, true);

            this.validateGroup(ms.get(3), 0, 9, 1, true, "\u000b", 1);
            this.validateCapture(ms.get(3), 0, 0, 9, 1, "\u000b");

            this.validateGroup(ms.get(3), 1, 9, 1, true, "\u000b", 1);
            this.validateCapture(ms.get(3), 1, 0, 9, 1, "\u000b");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 12, 1, "\f", 2, true);

            this.validateGroup(ms.get(4), 0, 12, 1, true, "\f", 1);
            this.validateCapture(ms.get(4), 0, 0, 12, 1, "\f");

            this.validateGroup(ms.get(4), 1, 12, 1, true, "\f", 1);
            this.validateCapture(ms.get(4), 1, 0, 12, 1, "\f");

            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 15, 1, "\n", 2, true);

            this.validateGroup(ms.get(5), 0, 15, 1, true, "\n", 1);
            this.validateCapture(ms.get(5), 0, 0, 15, 1, "\n");

            this.validateGroup(ms.get(5), 1, 15, 1, true, "\n", 1);
            this.validateCapture(ms.get(5), 1, 0, 15, 1, "\n");

            // Match #6:
            Bridge.Test.Assert.notNull$1(ms.get(6), "Match[6] is not null.");
            this.validateMatch(ms.get(6), 18, 1, "\u001b", 2, true);

            this.validateGroup(ms.get(6), 0, 18, 1, true, "\u001b", 1);
            this.validateCapture(ms.get(6), 0, 0, 18, 1, "\u001b");

            this.validateGroup(ms.get(6), 1, 18, 1, true, "\u001b", 1);
            this.validateCapture(ms.get(6), 1, 0, 18, 1, "\u001b");

            // Match #7:
            Bridge.Test.Assert.notNull$1(ms.get(7), "Match[7] is not null.");
            this.validateMatch(ms.get(7), 21, 1, "N", 2, true);

            this.validateGroup(ms.get(7), 0, 21, 1, true, "N", 1);
            this.validateCapture(ms.get(7), 0, 0, 21, 1, "N");

            this.validateGroup(ms.get(7), 1, 21, 1, true, "N", 1);
            this.validateCapture(ms.get(7), 1, 0, 21, 1, "N");

            // Match #8:
            Bridge.Test.Assert.notNull$1(ms.get(8), "Match[8] is not null.");
            this.validateMatch(ms.get(8), 24, 1, "M", 2, true);

            this.validateGroup(ms.get(8), 0, 24, 1, true, "M", 1);
            this.validateCapture(ms.get(8), 0, 0, 24, 1, "M");

            this.validateGroup(ms.get(8), 1, 24, 1, true, "M", 1);
            this.validateCapture(ms.get(8), 1, 0, 24, 1, "M");

            // Match #9:
            Bridge.Test.Assert.notNull$1(ms.get(9), "Match[9] is not null.");
            this.validateMatch(ms.get(9), 27, 1, "\u0003", 2, true);

            this.validateGroup(ms.get(9), 0, 27, 1, true, "\u0003", 1);
            this.validateCapture(ms.get(9), 0, 0, 27, 1, "\u0003");

            this.validateGroup(ms.get(9), 1, 27, 1, true, "\u0003", 1);
            this.validateCapture(ms.get(9), 1, 0, 27, 1, "\u0003");

            // Match #10:
            Bridge.Test.Assert.notNull$1(ms.get(10), "Match[10] is not null.");
            this.validateMatch(ms.get(10), 30, 1, "K", 2, true);

            this.validateGroup(ms.get(10), 0, 30, 1, true, "K", 1);
            this.validateCapture(ms.get(10), 0, 0, 30, 1, "K");

            this.validateGroup(ms.get(10), 1, 30, 1, true, "K", 1);
            this.validateCapture(ms.get(10), 1, 0, 30, 1, "K");
        },
        rangeWithCharEscapesTest: function () {
            var pattern = "([\\a\\b\\t\\r\\v\\f\\n\\e\\115\\x4e\\cC\\u004b])+";
            var text = "\u0007, \b, \t, \r, \u000b, \f, \n, \u001b, N, M, \u0003, K";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(12, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "\u0007", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "\u0007", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "\u0007");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "\u0007", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "\u0007");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 1, "\b", 2, true);

            this.validateGroup(ms.get(1), 0, 3, 1, true, "\b", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 1, "\b");

            this.validateGroup(ms.get(1), 1, 3, 1, true, "\b", 1);
            this.validateCapture(ms.get(1), 1, 0, 3, 1, "\b");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 6, 1, "\t", 2, true);

            this.validateGroup(ms.get(2), 0, 6, 1, true, "\t", 1);
            this.validateCapture(ms.get(2), 0, 0, 6, 1, "\t");

            this.validateGroup(ms.get(2), 1, 6, 1, true, "\t", 1);
            this.validateCapture(ms.get(2), 1, 0, 6, 1, "\t");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 9, 1, "\r", 2, true);

            this.validateGroup(ms.get(3), 0, 9, 1, true, "\r", 1);
            this.validateCapture(ms.get(3), 0, 0, 9, 1, "\r");

            this.validateGroup(ms.get(3), 1, 9, 1, true, "\r", 1);
            this.validateCapture(ms.get(3), 1, 0, 9, 1, "\r");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 12, 1, "\u000b", 2, true);

            this.validateGroup(ms.get(4), 0, 12, 1, true, "\u000b", 1);
            this.validateCapture(ms.get(4), 0, 0, 12, 1, "\u000b");

            this.validateGroup(ms.get(4), 1, 12, 1, true, "\u000b", 1);
            this.validateCapture(ms.get(4), 1, 0, 12, 1, "\u000b");

            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 15, 1, "\f", 2, true);

            this.validateGroup(ms.get(5), 0, 15, 1, true, "\f", 1);
            this.validateCapture(ms.get(5), 0, 0, 15, 1, "\f");

            this.validateGroup(ms.get(5), 1, 15, 1, true, "\f", 1);
            this.validateCapture(ms.get(5), 1, 0, 15, 1, "\f");

            // Match #6:
            Bridge.Test.Assert.notNull$1(ms.get(6), "Match[6] is not null.");
            this.validateMatch(ms.get(6), 18, 1, "\n", 2, true);

            this.validateGroup(ms.get(6), 0, 18, 1, true, "\n", 1);
            this.validateCapture(ms.get(6), 0, 0, 18, 1, "\n");

            this.validateGroup(ms.get(6), 1, 18, 1, true, "\n", 1);
            this.validateCapture(ms.get(6), 1, 0, 18, 1, "\n");

            // Match #7:
            Bridge.Test.Assert.notNull$1(ms.get(7), "Match[7] is not null.");
            this.validateMatch(ms.get(7), 21, 1, "\u001b", 2, true);

            this.validateGroup(ms.get(7), 0, 21, 1, true, "\u001b", 1);
            this.validateCapture(ms.get(7), 0, 0, 21, 1, "\u001b");

            this.validateGroup(ms.get(7), 1, 21, 1, true, "\u001b", 1);
            this.validateCapture(ms.get(7), 1, 0, 21, 1, "\u001b");

            // Match #8:
            Bridge.Test.Assert.notNull$1(ms.get(8), "Match[8] is not null.");
            this.validateMatch(ms.get(8), 24, 1, "N", 2, true);

            this.validateGroup(ms.get(8), 0, 24, 1, true, "N", 1);
            this.validateCapture(ms.get(8), 0, 0, 24, 1, "N");

            this.validateGroup(ms.get(8), 1, 24, 1, true, "N", 1);
            this.validateCapture(ms.get(8), 1, 0, 24, 1, "N");

            // Match #9:
            Bridge.Test.Assert.notNull$1(ms.get(9), "Match[9] is not null.");
            this.validateMatch(ms.get(9), 27, 1, "M", 2, true);

            this.validateGroup(ms.get(9), 0, 27, 1, true, "M", 1);
            this.validateCapture(ms.get(9), 0, 0, 27, 1, "M");

            this.validateGroup(ms.get(9), 1, 27, 1, true, "M", 1);
            this.validateCapture(ms.get(9), 1, 0, 27, 1, "M");

            // Match #10:
            Bridge.Test.Assert.notNull$1(ms.get(10), "Match[10] is not null.");
            this.validateMatch(ms.get(10), 30, 1, "\u0003", 2, true);

            this.validateGroup(ms.get(10), 0, 30, 1, true, "\u0003", 1);
            this.validateCapture(ms.get(10), 0, 0, 30, 1, "\u0003");

            this.validateGroup(ms.get(10), 1, 30, 1, true, "\u0003", 1);
            this.validateCapture(ms.get(10), 1, 0, 30, 1, "\u0003");

            // Match #11:
            Bridge.Test.Assert.notNull$1(ms.get(11), "Match[11] is not null.");
            this.validateMatch(ms.get(11), 33, 1, "K", 2, true);

            this.validateGroup(ms.get(11), 0, 33, 1, true, "K", 1);
            this.validateCapture(ms.get(11), 0, 0, 33, 1, "K");

            this.validateGroup(ms.get(11), 1, 33, 1, true, "K", 1);
            this.validateCapture(ms.get(11), 1, 0, 33, 1, "K");
        },
        controlCharsTestUpperTest: function () {
            var pattern = "[\\c@\\cA\\cB\\cC\\cD\\cE\\cF\\cG\\cH\\cI\\cJ\\cK\\cL\\cM\\cN\\cO\\cP\\cQ\\cR\\cS\\cT\\cU\\cV\\cW\\cX\\cY\\cZ\\c[\\c\\\\c]\\c^\\c_]";
            var text = "\u0000, \u0001, \u0002, \u0003, \u0004, \u0005, \u0006, \u0007, \b, \t, \n, \u000b, \f, \r, \u000e, \u000f, \u0010, \u0011, \u0012, \u0013, \u0014, \u0015, \u0016, \u0017, \u0018, \u0019, \u001a, \u001b, \u001c, \u001d, \u001e, \u001f";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(32, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "\u0000", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "\u0000", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "\u0000");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 1, "\u0001", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 1, true, "\u0001", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 1, "\u0001");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 6, 1, "\u0002", 1, true);

            this.validateGroup(ms.get(2), 0, 6, 1, true, "\u0002", 1);
            this.validateCapture(ms.get(2), 0, 0, 6, 1, "\u0002");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 9, 1, "\u0003", 1, true);

            this.validateGroup(ms.get(3), 0, 9, 1, true, "\u0003", 1);
            this.validateCapture(ms.get(3), 0, 0, 9, 1, "\u0003");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 12, 1, "\u0004", 1, true);

            this.validateGroup(ms.get(4), 0, 12, 1, true, "\u0004", 1);
            this.validateCapture(ms.get(4), 0, 0, 12, 1, "\u0004");

            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 15, 1, "\u0005", 1, true);

            this.validateGroup(ms.get(5), 0, 15, 1, true, "\u0005", 1);
            this.validateCapture(ms.get(5), 0, 0, 15, 1, "\u0005");

            // Match #6:
            Bridge.Test.Assert.notNull$1(ms.get(6), "Match[6] is not null.");
            this.validateMatch(ms.get(6), 18, 1, "\u0006", 1, true);

            this.validateGroup(ms.get(6), 0, 18, 1, true, "\u0006", 1);
            this.validateCapture(ms.get(6), 0, 0, 18, 1, "\u0006");

            // Match #7:
            Bridge.Test.Assert.notNull$1(ms.get(7), "Match[7] is not null.");
            this.validateMatch(ms.get(7), 21, 1, "\u0007", 1, true);

            this.validateGroup(ms.get(7), 0, 21, 1, true, "\u0007", 1);
            this.validateCapture(ms.get(7), 0, 0, 21, 1, "\u0007");

            // Match #8:
            Bridge.Test.Assert.notNull$1(ms.get(8), "Match[8] is not null.");
            this.validateMatch(ms.get(8), 24, 1, "\b", 1, true);

            this.validateGroup(ms.get(8), 0, 24, 1, true, "\b", 1);
            this.validateCapture(ms.get(8), 0, 0, 24, 1, "\b");

            // Match #9:
            Bridge.Test.Assert.notNull$1(ms.get(9), "Match[9] is not null.");
            this.validateMatch(ms.get(9), 27, 1, "\t", 1, true);

            this.validateGroup(ms.get(9), 0, 27, 1, true, "\t", 1);
            this.validateCapture(ms.get(9), 0, 0, 27, 1, "\t");

            // Match #10:
            Bridge.Test.Assert.notNull$1(ms.get(10), "Match[10] is not null.");
            this.validateMatch(ms.get(10), 30, 1, "\n", 1, true);

            this.validateGroup(ms.get(10), 0, 30, 1, true, "\n", 1);
            this.validateCapture(ms.get(10), 0, 0, 30, 1, "\n");

            // Match #11:
            Bridge.Test.Assert.notNull$1(ms.get(11), "Match[11] is not null.");
            this.validateMatch(ms.get(11), 33, 1, "\u000b", 1, true);

            this.validateGroup(ms.get(11), 0, 33, 1, true, "\u000b", 1);
            this.validateCapture(ms.get(11), 0, 0, 33, 1, "\u000b");

            // Match #12:
            Bridge.Test.Assert.notNull$1(ms.get(12), "Match[12] is not null.");
            this.validateMatch(ms.get(12), 36, 1, "\f", 1, true);

            this.validateGroup(ms.get(12), 0, 36, 1, true, "\f", 1);
            this.validateCapture(ms.get(12), 0, 0, 36, 1, "\f");

            // Match #13:
            Bridge.Test.Assert.notNull$1(ms.get(13), "Match[13] is not null.");
            this.validateMatch(ms.get(13), 39, 1, "\r", 1, true);

            this.validateGroup(ms.get(13), 0, 39, 1, true, "\r", 1);
            this.validateCapture(ms.get(13), 0, 0, 39, 1, "\r");

            // Match #14:
            Bridge.Test.Assert.notNull$1(ms.get(14), "Match[14] is not null.");
            this.validateMatch(ms.get(14), 42, 1, "\u000e", 1, true);

            this.validateGroup(ms.get(14), 0, 42, 1, true, "\u000e", 1);
            this.validateCapture(ms.get(14), 0, 0, 42, 1, "\u000e");

            // Match #15:
            Bridge.Test.Assert.notNull$1(ms.get(15), "Match[15] is not null.");
            this.validateMatch(ms.get(15), 45, 1, "\u000f", 1, true);

            this.validateGroup(ms.get(15), 0, 45, 1, true, "\u000f", 1);
            this.validateCapture(ms.get(15), 0, 0, 45, 1, "\u000f");

            // Match #16:
            Bridge.Test.Assert.notNull$1(ms.get(16), "Match[16] is not null.");
            this.validateMatch(ms.get(16), 48, 1, "\u0010", 1, true);

            this.validateGroup(ms.get(16), 0, 48, 1, true, "\u0010", 1);
            this.validateCapture(ms.get(16), 0, 0, 48, 1, "\u0010");

            // Match #17:
            Bridge.Test.Assert.notNull$1(ms.get(17), "Match[17] is not null.");
            this.validateMatch(ms.get(17), 51, 1, "\u0011", 1, true);

            this.validateGroup(ms.get(17), 0, 51, 1, true, "\u0011", 1);
            this.validateCapture(ms.get(17), 0, 0, 51, 1, "\u0011");

            // Match #18:
            Bridge.Test.Assert.notNull$1(ms.get(18), "Match[18] is not null.");
            this.validateMatch(ms.get(18), 54, 1, "\u0012", 1, true);

            this.validateGroup(ms.get(18), 0, 54, 1, true, "\u0012", 1);
            this.validateCapture(ms.get(18), 0, 0, 54, 1, "\u0012");

            // Match #19:
            Bridge.Test.Assert.notNull$1(ms.get(19), "Match[19] is not null.");
            this.validateMatch(ms.get(19), 57, 1, "\u0013", 1, true);

            this.validateGroup(ms.get(19), 0, 57, 1, true, "\u0013", 1);
            this.validateCapture(ms.get(19), 0, 0, 57, 1, "\u0013");

            // Match #20:
            Bridge.Test.Assert.notNull$1(ms.get(20), "Match[20] is not null.");
            this.validateMatch(ms.get(20), 60, 1, "\u0014", 1, true);

            this.validateGroup(ms.get(20), 0, 60, 1, true, "\u0014", 1);
            this.validateCapture(ms.get(20), 0, 0, 60, 1, "\u0014");

            // Match #21:
            Bridge.Test.Assert.notNull$1(ms.get(21), "Match[21] is not null.");
            this.validateMatch(ms.get(21), 63, 1, "\u0015", 1, true);

            this.validateGroup(ms.get(21), 0, 63, 1, true, "\u0015", 1);
            this.validateCapture(ms.get(21), 0, 0, 63, 1, "\u0015");

            // Match #22:
            Bridge.Test.Assert.notNull$1(ms.get(22), "Match[22] is not null.");
            this.validateMatch(ms.get(22), 66, 1, "\u0016", 1, true);

            this.validateGroup(ms.get(22), 0, 66, 1, true, "\u0016", 1);
            this.validateCapture(ms.get(22), 0, 0, 66, 1, "\u0016");

            // Match #23:
            Bridge.Test.Assert.notNull$1(ms.get(23), "Match[23] is not null.");
            this.validateMatch(ms.get(23), 69, 1, "\u0017", 1, true);

            this.validateGroup(ms.get(23), 0, 69, 1, true, "\u0017", 1);
            this.validateCapture(ms.get(23), 0, 0, 69, 1, "\u0017");

            // Match #24:
            Bridge.Test.Assert.notNull$1(ms.get(24), "Match[24] is not null.");
            this.validateMatch(ms.get(24), 72, 1, "\u0018", 1, true);

            this.validateGroup(ms.get(24), 0, 72, 1, true, "\u0018", 1);
            this.validateCapture(ms.get(24), 0, 0, 72, 1, "\u0018");

            // Match #25:
            Bridge.Test.Assert.notNull$1(ms.get(25), "Match[25] is not null.");
            this.validateMatch(ms.get(25), 75, 1, "\u0019", 1, true);

            this.validateGroup(ms.get(25), 0, 75, 1, true, "\u0019", 1);
            this.validateCapture(ms.get(25), 0, 0, 75, 1, "\u0019");

            // Match #26:
            Bridge.Test.Assert.notNull$1(ms.get(26), "Match[26] is not null.");
            this.validateMatch(ms.get(26), 78, 1, "\u001a", 1, true);

            this.validateGroup(ms.get(26), 0, 78, 1, true, "\u001a", 1);
            this.validateCapture(ms.get(26), 0, 0, 78, 1, "\u001a");

            // Match #27:
            Bridge.Test.Assert.notNull$1(ms.get(27), "Match[27] is not null.");
            this.validateMatch(ms.get(27), 81, 1, "\u001b", 1, true);

            this.validateGroup(ms.get(27), 0, 81, 1, true, "\u001b", 1);
            this.validateCapture(ms.get(27), 0, 0, 81, 1, "\u001b");

            // Match #28:
            Bridge.Test.Assert.notNull$1(ms.get(28), "Match[28] is not null.");
            this.validateMatch(ms.get(28), 84, 1, "\u001c", 1, true);

            this.validateGroup(ms.get(28), 0, 84, 1, true, "\u001c", 1);
            this.validateCapture(ms.get(28), 0, 0, 84, 1, "\u001c");

            // Match #29:
            Bridge.Test.Assert.notNull$1(ms.get(29), "Match[29] is not null.");
            this.validateMatch(ms.get(29), 87, 1, "\u001d", 1, true);

            this.validateGroup(ms.get(29), 0, 87, 1, true, "\u001d", 1);
            this.validateCapture(ms.get(29), 0, 0, 87, 1, "\u001d");

            // Match #30:
            Bridge.Test.Assert.notNull$1(ms.get(30), "Match[30] is not null.");
            this.validateMatch(ms.get(30), 90, 1, "\u001e", 1, true);

            this.validateGroup(ms.get(30), 0, 90, 1, true, "\u001e", 1);
            this.validateCapture(ms.get(30), 0, 0, 90, 1, "\u001e");

            // Match #31:
            Bridge.Test.Assert.notNull$1(ms.get(31), "Match[31] is not null.");
            this.validateMatch(ms.get(31), 93, 1, "\u001f", 1, true);

            this.validateGroup(ms.get(31), 0, 93, 1, true, "\u001f", 1);
            this.validateCapture(ms.get(31), 0, 0, 93, 1, "\u001f");
        },
        controlCharsTestLowerTest: function () {
            var pattern = "[\\c@\\ca\\cb\\cc\\cd\\ce\\cf\\cg\\ch\\ci\\cj\\ck\\cl\\cm\\cn\\co\\cp\\cq\\cr\\cs\\ct\\cu\\cv\\cw\\cx\\cy\\cz\\c[\\c\\\\c]\\c^\\c_]";
            var text = "\u0000, \u0001, \u0002, \u0003, \u0004, \u0005, \u0006, \u0007, \b, \t, \n, \u000b, \f, \r, \u000e, \u000f, \u0010, \u0011, \u0012, \u0013, \u0014, \u0015, \u0016, \u0017, \u0018, \u0019, \u001a, \u001b, \u001c, \u001d, \u001e, \u001f";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(32, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "\u0000", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "\u0000", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "\u0000");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 1, "\u0001", 1, true);

            this.validateGroup(ms.get(1), 0, 3, 1, true, "\u0001", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 1, "\u0001");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 6, 1, "\u0002", 1, true);

            this.validateGroup(ms.get(2), 0, 6, 1, true, "\u0002", 1);
            this.validateCapture(ms.get(2), 0, 0, 6, 1, "\u0002");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 9, 1, "\u0003", 1, true);

            this.validateGroup(ms.get(3), 0, 9, 1, true, "\u0003", 1);
            this.validateCapture(ms.get(3), 0, 0, 9, 1, "\u0003");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 12, 1, "\u0004", 1, true);

            this.validateGroup(ms.get(4), 0, 12, 1, true, "\u0004", 1);
            this.validateCapture(ms.get(4), 0, 0, 12, 1, "\u0004");

            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 15, 1, "\u0005", 1, true);

            this.validateGroup(ms.get(5), 0, 15, 1, true, "\u0005", 1);
            this.validateCapture(ms.get(5), 0, 0, 15, 1, "\u0005");

            // Match #6:
            Bridge.Test.Assert.notNull$1(ms.get(6), "Match[6] is not null.");
            this.validateMatch(ms.get(6), 18, 1, "\u0006", 1, true);

            this.validateGroup(ms.get(6), 0, 18, 1, true, "\u0006", 1);
            this.validateCapture(ms.get(6), 0, 0, 18, 1, "\u0006");

            // Match #7:
            Bridge.Test.Assert.notNull$1(ms.get(7), "Match[7] is not null.");
            this.validateMatch(ms.get(7), 21, 1, "\u0007", 1, true);

            this.validateGroup(ms.get(7), 0, 21, 1, true, "\u0007", 1);
            this.validateCapture(ms.get(7), 0, 0, 21, 1, "\u0007");

            // Match #8:
            Bridge.Test.Assert.notNull$1(ms.get(8), "Match[8] is not null.");
            this.validateMatch(ms.get(8), 24, 1, "\b", 1, true);

            this.validateGroup(ms.get(8), 0, 24, 1, true, "\b", 1);
            this.validateCapture(ms.get(8), 0, 0, 24, 1, "\b");

            // Match #9:
            Bridge.Test.Assert.notNull$1(ms.get(9), "Match[9] is not null.");
            this.validateMatch(ms.get(9), 27, 1, "\t", 1, true);

            this.validateGroup(ms.get(9), 0, 27, 1, true, "\t", 1);
            this.validateCapture(ms.get(9), 0, 0, 27, 1, "\t");

            // Match #10:
            Bridge.Test.Assert.notNull$1(ms.get(10), "Match[10] is not null.");
            this.validateMatch(ms.get(10), 30, 1, "\n", 1, true);

            this.validateGroup(ms.get(10), 0, 30, 1, true, "\n", 1);
            this.validateCapture(ms.get(10), 0, 0, 30, 1, "\n");

            // Match #11:
            Bridge.Test.Assert.notNull$1(ms.get(11), "Match[11] is not null.");
            this.validateMatch(ms.get(11), 33, 1, "\u000b", 1, true);

            this.validateGroup(ms.get(11), 0, 33, 1, true, "\u000b", 1);
            this.validateCapture(ms.get(11), 0, 0, 33, 1, "\u000b");

            // Match #12:
            Bridge.Test.Assert.notNull$1(ms.get(12), "Match[12] is not null.");
            this.validateMatch(ms.get(12), 36, 1, "\f", 1, true);

            this.validateGroup(ms.get(12), 0, 36, 1, true, "\f", 1);
            this.validateCapture(ms.get(12), 0, 0, 36, 1, "\f");

            // Match #13:
            Bridge.Test.Assert.notNull$1(ms.get(13), "Match[13] is not null.");
            this.validateMatch(ms.get(13), 39, 1, "\r", 1, true);

            this.validateGroup(ms.get(13), 0, 39, 1, true, "\r", 1);
            this.validateCapture(ms.get(13), 0, 0, 39, 1, "\r");

            // Match #14:
            Bridge.Test.Assert.notNull$1(ms.get(14), "Match[14] is not null.");
            this.validateMatch(ms.get(14), 42, 1, "\u000e", 1, true);

            this.validateGroup(ms.get(14), 0, 42, 1, true, "\u000e", 1);
            this.validateCapture(ms.get(14), 0, 0, 42, 1, "\u000e");

            // Match #15:
            Bridge.Test.Assert.notNull$1(ms.get(15), "Match[15] is not null.");
            this.validateMatch(ms.get(15), 45, 1, "\u000f", 1, true);

            this.validateGroup(ms.get(15), 0, 45, 1, true, "\u000f", 1);
            this.validateCapture(ms.get(15), 0, 0, 45, 1, "\u000f");

            // Match #16:
            Bridge.Test.Assert.notNull$1(ms.get(16), "Match[16] is not null.");
            this.validateMatch(ms.get(16), 48, 1, "\u0010", 1, true);

            this.validateGroup(ms.get(16), 0, 48, 1, true, "\u0010", 1);
            this.validateCapture(ms.get(16), 0, 0, 48, 1, "\u0010");

            // Match #17:
            Bridge.Test.Assert.notNull$1(ms.get(17), "Match[17] is not null.");
            this.validateMatch(ms.get(17), 51, 1, "\u0011", 1, true);

            this.validateGroup(ms.get(17), 0, 51, 1, true, "\u0011", 1);
            this.validateCapture(ms.get(17), 0, 0, 51, 1, "\u0011");

            // Match #18:
            Bridge.Test.Assert.notNull$1(ms.get(18), "Match[18] is not null.");
            this.validateMatch(ms.get(18), 54, 1, "\u0012", 1, true);

            this.validateGroup(ms.get(18), 0, 54, 1, true, "\u0012", 1);
            this.validateCapture(ms.get(18), 0, 0, 54, 1, "\u0012");

            // Match #19:
            Bridge.Test.Assert.notNull$1(ms.get(19), "Match[19] is not null.");
            this.validateMatch(ms.get(19), 57, 1, "\u0013", 1, true);

            this.validateGroup(ms.get(19), 0, 57, 1, true, "\u0013", 1);
            this.validateCapture(ms.get(19), 0, 0, 57, 1, "\u0013");

            // Match #20:
            Bridge.Test.Assert.notNull$1(ms.get(20), "Match[20] is not null.");
            this.validateMatch(ms.get(20), 60, 1, "\u0014", 1, true);

            this.validateGroup(ms.get(20), 0, 60, 1, true, "\u0014", 1);
            this.validateCapture(ms.get(20), 0, 0, 60, 1, "\u0014");

            // Match #21:
            Bridge.Test.Assert.notNull$1(ms.get(21), "Match[21] is not null.");
            this.validateMatch(ms.get(21), 63, 1, "\u0015", 1, true);

            this.validateGroup(ms.get(21), 0, 63, 1, true, "\u0015", 1);
            this.validateCapture(ms.get(21), 0, 0, 63, 1, "\u0015");

            // Match #22:
            Bridge.Test.Assert.notNull$1(ms.get(22), "Match[22] is not null.");
            this.validateMatch(ms.get(22), 66, 1, "\u0016", 1, true);

            this.validateGroup(ms.get(22), 0, 66, 1, true, "\u0016", 1);
            this.validateCapture(ms.get(22), 0, 0, 66, 1, "\u0016");

            // Match #23:
            Bridge.Test.Assert.notNull$1(ms.get(23), "Match[23] is not null.");
            this.validateMatch(ms.get(23), 69, 1, "\u0017", 1, true);

            this.validateGroup(ms.get(23), 0, 69, 1, true, "\u0017", 1);
            this.validateCapture(ms.get(23), 0, 0, 69, 1, "\u0017");

            // Match #24:
            Bridge.Test.Assert.notNull$1(ms.get(24), "Match[24] is not null.");
            this.validateMatch(ms.get(24), 72, 1, "\u0018", 1, true);

            this.validateGroup(ms.get(24), 0, 72, 1, true, "\u0018", 1);
            this.validateCapture(ms.get(24), 0, 0, 72, 1, "\u0018");

            // Match #25:
            Bridge.Test.Assert.notNull$1(ms.get(25), "Match[25] is not null.");
            this.validateMatch(ms.get(25), 75, 1, "\u0019", 1, true);

            this.validateGroup(ms.get(25), 0, 75, 1, true, "\u0019", 1);
            this.validateCapture(ms.get(25), 0, 0, 75, 1, "\u0019");

            // Match #26:
            Bridge.Test.Assert.notNull$1(ms.get(26), "Match[26] is not null.");
            this.validateMatch(ms.get(26), 78, 1, "\u001a", 1, true);

            this.validateGroup(ms.get(26), 0, 78, 1, true, "\u001a", 1);
            this.validateCapture(ms.get(26), 0, 0, 78, 1, "\u001a");

            // Match #27:
            Bridge.Test.Assert.notNull$1(ms.get(27), "Match[27] is not null.");
            this.validateMatch(ms.get(27), 81, 1, "\u001b", 1, true);

            this.validateGroup(ms.get(27), 0, 81, 1, true, "\u001b", 1);
            this.validateCapture(ms.get(27), 0, 0, 81, 1, "\u001b");

            // Match #28:
            Bridge.Test.Assert.notNull$1(ms.get(28), "Match[28] is not null.");
            this.validateMatch(ms.get(28), 84, 1, "\u001c", 1, true);

            this.validateGroup(ms.get(28), 0, 84, 1, true, "\u001c", 1);
            this.validateCapture(ms.get(28), 0, 0, 84, 1, "\u001c");

            // Match #29:
            Bridge.Test.Assert.notNull$1(ms.get(29), "Match[29] is not null.");
            this.validateMatch(ms.get(29), 87, 1, "\u001d", 1, true);

            this.validateGroup(ms.get(29), 0, 87, 1, true, "\u001d", 1);
            this.validateCapture(ms.get(29), 0, 0, 87, 1, "\u001d");

            // Match #30:
            Bridge.Test.Assert.notNull$1(ms.get(30), "Match[30] is not null.");
            this.validateMatch(ms.get(30), 90, 1, "\u001e", 1, true);

            this.validateGroup(ms.get(30), 0, 90, 1, true, "\u001e", 1);
            this.validateCapture(ms.get(30), 0, 0, 90, 1, "\u001e");

            // Match #31:
            Bridge.Test.Assert.notNull$1(ms.get(31), "Match[31] is not null.");
            this.validateMatch(ms.get(31), 93, 1, "\u001f", 1, true);

            this.validateGroup(ms.get(31), 0, 93, 1, true, "\u001f", 1);
            this.validateCapture(ms.get(31), 0, 0, 93, 1, "\u001f");
        },
        basicLatinEscapeTest: function () {
            for (var i = 0; i < 128; i = (i + 1) | 0) {
                var ch = i & 65535;
                if (ch >= 48 && ch <= 57) {
                    // Skip numbers - as they will be treated like references.
                    continue;
                }

                var str = String.fromCharCode(ch);
                var escapedStr = System.String.concat("\\", str);

                try {
                    var unescapedStr = System.Text.RegularExpressions.Regex.unescape(escapedStr);
                    if (!Bridge.referenceEquals(unescapedStr, str)) {
                        continue;
                    }
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.ArgumentException)) {
                        continue;
                    } else {
                        throw $e1;
                    }
                }

                // Test regex with the escapedStr as pattern:
                var rgx = new System.Text.RegularExpressions.Regex.ctor(escapedStr);
                var m = rgx.match(str);
                Bridge.Test.Assert.areEqual(str, m.getValue());
            }
        },
        octalEscapeTest: function () {
            for (var i = 0; i < 256; i = (i + 1) | 0) {
                var octalStr = System.Convert.toStringInBase(i, 8, 9);
                var escapedStr = System.String.concat("\\", octalStr);

                var unescapedStr = System.Text.RegularExpressions.Regex.unescape(escapedStr);
                var unescapedCh = unescapedStr.charCodeAt(0);
                var unescapedCode = unescapedCh;

                Bridge.Test.Assert.areEqual(i, unescapedCode);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        emailParseTest: function () {
            var pattern = "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?";
            var text = "user@bridge.net";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 15, "user@bridge.net", 1, true);

            this.validateGroup(m, 0, 0, 15, true, "user@bridge.net", 1);
            this.validateCapture(m, 0, 0, 0, 15, "user@bridge.net");
        },
        phoneParseTest: function () {
            var pattern = "\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}";
            var text = "+7-999-111-1111";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 15, "+7-999-111-1111", 1, true);

            this.validateGroup(m, 0, 0, 15, true, "+7-999-111-1111", 1);
            this.validateCapture(m, 0, 0, 0, 15, "+7-999-111-1111");
        },
        passwordValidationTest: function () {
            var pattern = "^((?=\\S*?[A-Z])(?=\\S*?[a-z])(?=\\S*?[0-9]).{6,})\\S$";
            var text = "P@ssw0rd";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 8, "P@ssw0rd", 2, true);

            this.validateGroup(m, 0, 0, 8, true, "P@ssw0rd", 1);
            this.validateCapture(m, 0, 0, 0, 8, "P@ssw0rd");

            this.validateGroup(m, 1, 0, 7, true, "P@ssw0r", 1);
            this.validateCapture(m, 1, 0, 0, 7, "P@ssw0r");
        },
        wordSlplittingTest: function () {
            var pattern = "([+-]?(?:'.+?'|\".+? \"|[^+\\- ]{1}[^ ]*))";
            var text = "It's time to say: 'Hello world!'";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 4, "It's", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 4, true, "It's", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 4, "It's");

            this.validateGroup(ms.get(0), 1, 0, 4, true, "It's", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 4, "It's");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 5, 4, "time", 2, true);

            this.validateGroup(ms.get(1), 0, 5, 4, true, "time", 1);
            this.validateCapture(ms.get(1), 0, 0, 5, 4, "time");

            this.validateGroup(ms.get(1), 1, 5, 4, true, "time", 1);
            this.validateCapture(ms.get(1), 1, 0, 5, 4, "time");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 10, 2, "to", 2, true);

            this.validateGroup(ms.get(2), 0, 10, 2, true, "to", 1);
            this.validateCapture(ms.get(2), 0, 0, 10, 2, "to");

            this.validateGroup(ms.get(2), 1, 10, 2, true, "to", 1);
            this.validateCapture(ms.get(2), 1, 0, 10, 2, "to");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 13, 4, "say:", 2, true);

            this.validateGroup(ms.get(3), 0, 13, 4, true, "say:", 1);
            this.validateCapture(ms.get(3), 0, 0, 13, 4, "say:");

            this.validateGroup(ms.get(3), 1, 13, 4, true, "say:", 1);
            this.validateCapture(ms.get(3), 1, 0, 13, 4, "say:");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 18, 14, "'Hello world!'", 2, true);

            this.validateGroup(ms.get(4), 0, 18, 14, true, "'Hello world!'", 1);
            this.validateCapture(ms.get(4), 0, 0, 18, 14, "'Hello world!'");

            this.validateGroup(ms.get(4), 1, 18, 14, true, "'Hello world!'", 1);
            this.validateCapture(ms.get(4), 1, 0, 18, 14, "'Hello world!'");
        },
        ipAddressValidationTest: function () {
            var pattern = "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";
            var text = "192.168.1.1";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 11, "192.168.1.1", 5, true);

            this.validateGroup(m, 0, 0, 11, true, "192.168.1.1", 1);
            this.validateCapture(m, 0, 0, 0, 11, "192.168.1.1");

            this.validateGroup(m, 1, 0, 3, true, "192", 1);
            this.validateCapture(m, 1, 0, 0, 3, "192");

            this.validateGroup(m, 2, 4, 3, true, "168", 1);
            this.validateCapture(m, 2, 0, 4, 3, "168");

            this.validateGroup(m, 3, 8, 1, true, "1", 1);
            this.validateCapture(m, 3, 0, 8, 1, "1");

            this.validateGroup(m, 4, 10, 1, true, "1", 1);
            this.validateCapture(m, 4, 0, 10, 1, "1");
        },
        escapeQuotedWordsTest: function () {
            var pattern = "([\"'])((?:(?=(?:\\\\)*)\\.|.)*?)\\1";
            var text = "Another 'te\\st' for several 'quo\"uted' words.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 8, 7, "'te\\st'", 3, true);

            this.validateGroup(ms.get(0), 0, 8, 7, true, "'te\\st'", 1);
            this.validateCapture(ms.get(0), 0, 0, 8, 7, "'te\\st'");

            this.validateGroup(ms.get(0), 1, 8, 1, true, "'", 1);
            this.validateCapture(ms.get(0), 1, 0, 8, 1, "'");

            this.validateGroup(ms.get(0), 2, 9, 5, true, "te\\st", 1);
            this.validateCapture(ms.get(0), 2, 0, 9, 5, "te\\st");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 10, "'quo\"uted'", 3, true);

            this.validateGroup(ms.get(1), 0, 28, 10, true, "'quo\"uted'", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 10, "'quo\"uted'");

            this.validateGroup(ms.get(1), 1, 28, 1, true, "'", 1);
            this.validateCapture(ms.get(1), 1, 0, 28, 1, "'");

            this.validateGroup(ms.get(1), 2, 29, 8, true, "quo\"uted", 1);
            this.validateCapture(ms.get(1), 2, 0, 29, 8, "quo\"uted");
        },
        creditCardExpirationParsingTest: function () {
            var pattern = "^(0[1-9]|1[0-2])(\\/|-)([0-9]{4})$";
            var text = "09/2222";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 7, "09/2222", 4, true);

            this.validateGroup(m, 0, 0, 7, true, "09/2222", 1);
            this.validateCapture(m, 0, 0, 0, 7, "09/2222");

            this.validateGroup(m, 1, 0, 2, true, "09", 1);
            this.validateCapture(m, 1, 0, 0, 2, "09");

            this.validateGroup(m, 2, 2, 1, true, "/", 1);
            this.validateCapture(m, 2, 0, 2, 1, "/");

            this.validateGroup(m, 3, 3, 4, true, "2222", 1);
            this.validateCapture(m, 3, 0, 3, 4, "2222");
        },
        urlParsingTest: function () {
            var pattern = "^((https?:)(\\/\\/\\/?)([\\w]*(?::[\\w]*)?@)?([\\d\\w\\.-]+)(?::(\\d+))?)?([\\/\\\\\\w\\.()-]*)?(?:([?][^#]*)?(#.*)?)*";
            var text = "http://bridge.net/download/";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 27, "http://bridge.net/download/", 10, true);

            this.validateGroup(m, 0, 0, 27, true, "http://bridge.net/download/", 1);
            this.validateCapture(m, 0, 0, 0, 27, "http://bridge.net/download/");

            this.validateGroup(m, 1, 0, 17, true, "http://bridge.net", 1);
            this.validateCapture(m, 1, 0, 0, 17, "http://bridge.net");

            this.validateGroup(m, 2, 0, 5, true, "http:", 1);
            this.validateCapture(m, 2, 0, 0, 5, "http:");

            this.validateGroup(m, 3, 5, 2, true, "//", 1);
            this.validateCapture(m, 3, 0, 5, 2, "//");

            this.validateGroup(m, 4, 0, 0, false, "", 0);

            this.validateGroup(m, 5, 7, 10, true, "bridge.net", 1);
            this.validateCapture(m, 5, 0, 7, 10, "bridge.net");

            this.validateGroup(m, 6, 0, 0, false, "", 0);

            this.validateGroup(m, 7, 17, 10, true, "/download/", 1);
            this.validateCapture(m, 7, 0, 17, 10, "/download/");

            this.validateGroup(m, 8, 0, 0, false, "", 0);

            this.validateGroup(m, 9, 0, 0, false, "", 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnInlineOptionsTest: function () {
            var pattern = "\\b((?# case sensitive comparison)D\\w+)\\s(?ixn)((?#case insensitive comparison)d\\w+)\\b";
            var text = "double dare double Double a Drooling dog The Dreaded Deep";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 28, 12, "Drooling dog", 2, true);

            this.validateGroup(ms.get(0), 0, 28, 12, true, "Drooling dog", 1);
            this.validateCapture(ms.get(0), 0, 0, 28, 12, "Drooling dog");

            this.validateGroup(ms.get(0), 1, 28, 8, true, "Drooling", 1);
            this.validateCapture(ms.get(0), 1, 0, 28, 8, "Drooling");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 45, 12, "Dreaded Deep", 2, true);

            this.validateGroup(ms.get(1), 0, 45, 12, true, "Dreaded Deep", 1);
            this.validateCapture(ms.get(1), 0, 0, 45, 12, "Dreaded Deep");

            this.validateGroup(ms.get(1), 1, 45, 7, true, "Dreaded", 1);
            this.validateCapture(ms.get(1), 1, 0, 45, 7, "Dreaded");
        },
        msdnIgnoreCaseTest: function () {
            var pattern = "\\b(?i:t)he\\w*\\b";
            var text = "The man then told them about that event.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 1);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "The", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "The", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "The");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 4, "then", 1, true);

            this.validateGroup(ms.get(1), 0, 8, 4, true, "then", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 4, "then");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 18, 4, "them", 1, true);

            this.validateGroup(ms.get(2), 0, 18, 4, true, "them", 1);
            this.validateCapture(ms.get(2), 0, 0, 18, 4, "them");
        },
        msdnMultilineInlineOptionTest: function () {
            var pattern = "(?m)^(\\w+)\\s(\\d+)\\r*$";
            var text = "Joe 164\nSam 208\nAllison 211\nGwen 171\n";

            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 7, "Joe 164", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 7, true, "Joe 164", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 7, "Joe 164");

            this.validateGroup(ms.get(0), 1, 0, 3, true, "Joe", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 3, "Joe");

            this.validateGroup(ms.get(0), 2, 4, 3, true, "164", 1);
            this.validateCapture(ms.get(0), 2, 0, 4, 3, "164");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 7, "Sam 208", 3, true);

            this.validateGroup(ms.get(1), 0, 8, 7, true, "Sam 208", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 7, "Sam 208");

            this.validateGroup(ms.get(1), 1, 8, 3, true, "Sam", 1);
            this.validateCapture(ms.get(1), 1, 0, 8, 3, "Sam");

            this.validateGroup(ms.get(1), 2, 12, 3, true, "208", 1);
            this.validateCapture(ms.get(1), 2, 0, 12, 3, "208");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 16, 11, "Allison 211", 3, true);

            this.validateGroup(ms.get(2), 0, 16, 11, true, "Allison 211", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 11, "Allison 211");

            this.validateGroup(ms.get(2), 1, 16, 7, true, "Allison", 1);
            this.validateCapture(ms.get(2), 1, 0, 16, 7, "Allison");

            this.validateGroup(ms.get(2), 2, 24, 3, true, "211", 1);
            this.validateCapture(ms.get(2), 2, 0, 24, 3, "211");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 28, 8, "Gwen 171", 3, true);

            this.validateGroup(ms.get(3), 0, 28, 8, true, "Gwen 171", 1);
            this.validateCapture(ms.get(3), 0, 0, 28, 8, "Gwen 171");

            this.validateGroup(ms.get(3), 1, 28, 4, true, "Gwen", 1);
            this.validateCapture(ms.get(3), 1, 0, 28, 4, "Gwen");

            this.validateGroup(ms.get(3), 2, 33, 3, true, "171", 1);
            this.validateCapture(ms.get(3), 2, 0, 33, 3, "171");
        },
        msdnSinglelineInlineOptionTest: function () {
            var pattern = "(?s)^.+";
            var text = "This is one line and\r\nthis is the second.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 41, "This is one line and\r\nthis is the second.", 1, true);

            this.validateGroup(m, 0, 0, 41, true, "This is one line and\r\nthis is the second.", 1);
            this.validateCapture(m, 0, 0, 0, 41, "This is one line and\r\nthis is the second.");
        },
        msdnIngoreWhitespaceInlineOptionTest1: function () {
            var pattern = "\\b(D\\w+)(?x) \\s (d\\w+) \\b";
            var text = "double dare double Double a Drooling dog The Dreaded Deep";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 28, 12, "Drooling dog", 3, true);

            this.validateGroup(m, 0, 28, 12, true, "Drooling dog", 1);
            this.validateCapture(m, 0, 0, 28, 12, "Drooling dog");

            this.validateGroup(m, 1, 28, 8, true, "Drooling", 1);
            this.validateCapture(m, 1, 0, 28, 8, "Drooling");

            this.validateGroup(m, 2, 37, 3, true, "dog", 1);
            this.validateCapture(m, 2, 0, 37, 3, "dog");
        },
        msdnIngoreWhitespaceInlineOptionTest2: function () {
            var pattern = "\\{\\d+(,-*\\d+)*(\\:\\w{1,4}?)*\\}(?x) # Looks for a composite format item.";
            var text = "{0,-3:F}";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 8, "{0,-3:F}", 3, true);

            this.validateGroup(m, 0, 0, 8, true, "{0,-3:F}", 1);
            this.validateCapture(m, 0, 0, 0, 8, "{0,-3:F}");

            this.validateGroup(m, 1, 2, 3, true, ",-3", 1);
            this.validateCapture(m, 1, 0, 2, 3, ",-3");

            this.validateGroup(m, 2, 5, 2, true, ":F", 1);
            this.validateCapture(m, 2, 0, 5, 2, ":F");
        },
        msdnIngoreWhitespaceInlineOptionTest3: function () {
            var pattern = "(?x)\\b \\(? ( (?:\\w+) ,?\\s? )+  [\\.!?] \\)? # Matches an entire sentence.";
            var text = "This is the first sentence. Is it the beginning of a literary masterpiece? I think not. Instead, it is a nonsensical paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 27, "This is the first sentence.", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 27, true, "This is the first sentence.", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 27, "This is the first sentence.");

            this.validateGroup(ms.get(0), 1, 18, 8, true, "sentence", 5);
            this.validateCapture(ms.get(0), 1, 0, 0, 5, "This ");
            this.validateCapture(ms.get(0), 1, 1, 5, 3, "is ");
            this.validateCapture(ms.get(0), 1, 2, 8, 4, "the ");
            this.validateCapture(ms.get(0), 1, 3, 12, 6, "first ");
            this.validateCapture(ms.get(0), 1, 4, 18, 8, "sentence");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 46, "Is it the beginning of a literary masterpiece?", 2, true);

            this.validateGroup(ms.get(1), 0, 28, 46, true, "Is it the beginning of a literary masterpiece?", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 46, "Is it the beginning of a literary masterpiece?");

            this.validateGroup(ms.get(1), 1, 62, 11, true, "masterpiece", 8);
            this.validateCapture(ms.get(1), 1, 0, 28, 3, "Is ");
            this.validateCapture(ms.get(1), 1, 1, 31, 3, "it ");
            this.validateCapture(ms.get(1), 1, 2, 34, 4, "the ");
            this.validateCapture(ms.get(1), 1, 3, 38, 10, "beginning ");
            this.validateCapture(ms.get(1), 1, 4, 48, 3, "of ");
            this.validateCapture(ms.get(1), 1, 5, 51, 2, "a ");
            this.validateCapture(ms.get(1), 1, 6, 53, 9, "literary ");
            this.validateCapture(ms.get(1), 1, 7, 62, 11, "masterpiece");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 75, 12, "I think not.", 2, true);

            this.validateGroup(ms.get(2), 0, 75, 12, true, "I think not.", 1);
            this.validateCapture(ms.get(2), 0, 0, 75, 12, "I think not.");

            this.validateGroup(ms.get(2), 1, 83, 3, true, "not", 3);
            this.validateCapture(ms.get(2), 1, 0, 75, 2, "I ");
            this.validateCapture(ms.get(2), 1, 1, 77, 6, "think ");
            this.validateCapture(ms.get(2), 1, 2, 83, 3, "not");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 88, 39, "Instead, it is a nonsensical paragraph.", 2, true);

            this.validateGroup(ms.get(3), 0, 88, 39, true, "Instead, it is a nonsensical paragraph.", 1);
            this.validateCapture(ms.get(3), 0, 0, 88, 39, "Instead, it is a nonsensical paragraph.");

            this.validateGroup(ms.get(3), 1, 117, 9, true, "paragraph", 6);
            this.validateCapture(ms.get(3), 1, 0, 88, 9, "Instead, ");
            this.validateCapture(ms.get(3), 1, 1, 97, 3, "it ");
            this.validateCapture(ms.get(3), 1, 2, 100, 3, "is ");
            this.validateCapture(ms.get(3), 1, 3, 103, 2, "a ");
            this.validateCapture(ms.get(3), 1, 4, 105, 12, "nonsensical ");
            this.validateCapture(ms.get(3), 1, 5, 117, 9, "paragraph");
        },
        msdnExplicitCaptureInlineOptionTest1: function () {
            var pattern = "(?n)\\b\\(?((?>\\w+),?\\s?)+[\\.!?]\\)?";
            var text = "This is the first sentence. Is it the beginning of a literary masterpiece? I think not. Instead, it is a nonsensical paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 27, "This is the first sentence.", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 27, true, "This is the first sentence.", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 27, "This is the first sentence.");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 46, "Is it the beginning of a literary masterpiece?", 1, true);

            this.validateGroup(ms.get(1), 0, 28, 46, true, "Is it the beginning of a literary masterpiece?", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 46, "Is it the beginning of a literary masterpiece?");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 75, 12, "I think not.", 1, true);

            this.validateGroup(ms.get(2), 0, 75, 12, true, "I think not.", 1);
            this.validateCapture(ms.get(2), 0, 0, 75, 12, "I think not.");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 88, 39, "Instead, it is a nonsensical paragraph.", 1, true);

            this.validateGroup(ms.get(3), 0, 88, 39, true, "Instead, it is a nonsensical paragraph.", 1);
            this.validateCapture(ms.get(3), 0, 0, 88, 39, "Instead, it is a nonsensical paragraph.");
        },
        msdnExplicitCaptureInlineOptionTest2: function () {
            var pattern = "\\b\\(?(?n:(?>\\w+),?\\s?)+[\\.!?]\\)?";
            var text = "This is the first sentence. Is it the beginning of a literary masterpiece? I think not. Instead, it is a nonsensical paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 27, "This is the first sentence.", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 27, true, "This is the first sentence.", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 27, "This is the first sentence.");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 46, "Is it the beginning of a literary masterpiece?", 1, true);

            this.validateGroup(ms.get(1), 0, 28, 46, true, "Is it the beginning of a literary masterpiece?", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 46, "Is it the beginning of a literary masterpiece?");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 75, 12, "I think not.", 1, true);

            this.validateGroup(ms.get(2), 0, 75, 12, true, "I think not.", 1);
            this.validateCapture(ms.get(2), 0, 0, 75, 12, "I think not.");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 88, 39, "Instead, it is a nonsensical paragraph.", 1, true);

            this.validateGroup(ms.get(3), 0, 88, 39, true, "Instead, it is a nonsensical paragraph.", 1);
            this.validateCapture(ms.get(3), 0, 0, 88, 39, "Instead, it is a nonsensical paragraph.");
        },
        ignoreCaseInlineOptionTest1: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("(?i)Case Is Ignored");
            var res = rgx.isMatch("case is ignored");
            Bridge.Test.Assert.true(res);
        },
        ignoreCaseInlineOptionTest2: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("Case Is (?i)Ignored Partially");
            var res = rgx.isMatch("Case Is ignored partially");
            Bridge.Test.Assert.true(res);
        },
        ignoreCaseInlineOptionTest3: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1("(?-i)Case Sensitive", 1);
            var res = rgx.isMatch("case sensitive");
            Bridge.Test.Assert.false(res);
        },
        ignoreCaseInlineOptionTest4: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1("Case Sensitive (?-i)Partially", 1);
            var res = rgx.isMatch("case sensitive Partially");
            Bridge.Test.Assert.true(res);
        },
        ignoreCaseInlineOptionTest5: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1("Case Sensitive (?-i)Partially", 1);
            var res = rgx.isMatch("case sensitive partially");
            Bridge.Test.Assert.false(res);
        },
        multilineInlineOptionTest1: function () {
            var pattern = "(?-m)^abc$";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        multilineInlineOptionTest2: function () {
            var pattern = "(?m)^abc$";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "abc", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "abc", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "abc");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 4, 3, "abc", 1, true);

            this.validateGroup(ms.get(1), 0, 4, 3, true, "abc", 1);
            this.validateCapture(ms.get(1), 0, 0, 4, 3, "abc");
        },
        multilineInlineOptionTest3: function () {
            var pattern = "(?m)^abc(?-m)$";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 4, 3, "abc", 1, true);

            this.validateGroup(m, 0, 4, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 4, 3, "abc");
        },
        multilineInlineOptionTest4: function () {
            var pattern = "^abc(?-m)$";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 2);
            var m = rgx.match(text);

            this.validateMatch(m, 4, 3, "abc", 1, true);

            this.validateGroup(m, 0, 4, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 4, 3, "abc");
        },
        multilineInlineOptionTest5: function () {
            var pattern = "(?m:^ab(c(?-m)$))";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 4, 3, "abc", 2, true);

            this.validateGroup(m, 0, 4, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 4, 3, "abc");

            this.validateGroup(m, 1, 6, 1, true, "c", 1);
            this.validateCapture(m, 1, 0, 6, 1, "c");
        },
        multilineInlineOptionTest6: function () {
            var pattern = "(?m:^(.*)$)";
            var text = "abc\r\ndef\r\nhij";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 2);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 4, "abc\r", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 4, true, "abc\r", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 4, "abc\r");

            this.validateGroup(ms.get(0), 1, 0, 4, true, "abc\r", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 4, "abc\r");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 5, 4, "def\r", 2, true);

            this.validateGroup(ms.get(1), 0, 5, 4, true, "def\r", 1);
            this.validateCapture(ms.get(1), 0, 0, 5, 4, "def\r");

            this.validateGroup(ms.get(1), 1, 5, 4, true, "def\r", 1);
            this.validateCapture(ms.get(1), 1, 0, 5, 4, "def\r");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 10, 3, "hij", 2, true);

            this.validateGroup(ms.get(2), 0, 10, 3, true, "hij", 1);
            this.validateCapture(ms.get(2), 0, 0, 10, 3, "hij");

            this.validateGroup(ms.get(2), 1, 10, 3, true, "hij", 1);
            this.validateCapture(ms.get(2), 1, 0, 10, 3, "hij");
        },
        multilineInlineOptionTest7: function () {
            var pattern = "(?m:^(.*)(?-m)$)";
            var text = "abc\r\nabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 5, 3, "abc", 2, true);

            this.validateGroup(m, 0, 5, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 5, 3, "abc");

            this.validateGroup(m, 1, 5, 3, true, "abc", 1);
            this.validateCapture(m, 1, 0, 5, 3, "abc");
        },
        singlelineInlineOptionTest1: function () {
            var pattern = "(?s).+";
            var text = "abc\r\nabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 8, "abc\r\nabc", 1, true);

            this.validateGroup(m, 0, 0, 8, true, "abc\r\nabc", 1);
            this.validateCapture(m, 0, 0, 0, 8, "abc\r\nabc");
        },
        singlelineInlineOptionTest2: function () {
            var pattern = "(?s).+def(?-s)(.+hij)?";
            var text = "abc\r\ndef\r\nhij";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 8, "abc\r\ndef", 2, true);

            this.validateGroup(m, 0, 0, 8, true, "abc\r\ndef", 1);
            this.validateCapture(m, 0, 0, 0, 8, "abc\r\ndef");

            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        singlelineInlineOptionTest3: function () {
            var pattern = "abc(.+)((?-s:.+))(.+)xyz";
            var text = "abc\r\n123\r\nxyz";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 16);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 13, "abc\r\n123\r\nxyz", 4, true);

            this.validateGroup(m, 0, 0, 13, true, "abc\r\n123\r\nxyz", 1);
            this.validateCapture(m, 0, 0, 0, 13, "abc\r\n123\r\nxyz");

            this.validateGroup(m, 1, 3, 5, true, "\r\n123", 1);
            this.validateCapture(m, 1, 0, 3, 5, "\r\n123");

            this.validateGroup(m, 2, 8, 1, true, "\r", 1);
            this.validateCapture(m, 2, 0, 8, 1, "\r");

            this.validateGroup(m, 3, 9, 1, true, "\n", 1);
            this.validateCapture(m, 3, 0, 9, 1, "\n");
        },
        ingoreWhitespaceInlineOptionTest1: function () {
            var pattern = "(?x)abc def";
            var text = "abc def";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        ingoreWhitespaceInlineOptionTest2: function () {
            var pattern = "(?x)abc def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 1, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");
        },
        ingoreWhitespaceInlineOptionTest3: function () {
            var pattern = "(?x)abc def(?-x) hij";
            var text = "abcdef hij";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 10, "abcdef hij", 1, true);

            this.validateGroup(m, 0, 0, 10, true, "abcdef hij", 1);
            this.validateCapture(m, 0, 0, 0, 10, "abcdef hij");
        },
        ingoreWhitespaceInlineOptionTest4: function () {
            var pattern = "(?-x)abc\tdef";
            var text = "abc\tdef";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 32);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 7, "abc\tdef", 1, true);

            this.validateGroup(m, 0, 0, 7, true, "abc\tdef", 1);
            this.validateCapture(m, 0, 0, 0, 7, "abc\tdef");
        },
        ingoreWhitespaceInlineOptionTest5: function () {
            var pattern = "(?x)[abc ]{3}";
            var text = "ab ";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "ab ", 1, true);

            this.validateGroup(m, 0, 0, 3, true, "ab ", 1);
            this.validateCapture(m, 0, 0, 0, 3, "ab ");
        },
        ingoreWhitespaceInlineOptionTest6: function () {
            var pattern = "(?x)abc\\ \\sdef";
            var text = "abc  def";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 8, "abc  def", 1, true);

            this.validateGroup(m, 0, 0, 8, true, "abc  def", 1);
            this.validateCapture(m, 0, 0, 0, 8, "abc  def");
        },
        ingoreWhitespaceInlineOptionTest7: function () {
            var pattern = "(?x)abc#def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "abc", 1, true);

            this.validateGroup(m, 0, 0, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 0, 3, "abc");
        },
        ingoreWhitespaceInlineOptionTest8: function () {
            var pattern = "abc(?x: def) hij";
            var text = "abcdef hij";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 10, "abcdef hij", 1, true);

            this.validateGroup(m, 0, 0, 10, true, "abcdef hij", 1);
            this.validateCapture(m, 0, 0, 0, 10, "abcdef hij");
        },
        ingoreWhitespaceInlineOptionTest9: function () {
            var pattern = "(?x)abc #CommentToEOL\ndef";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 0);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 1, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");
        },
        inlineCommentTest1: function () {
            var pattern = "abc(?# comment )";
            var text = "abc";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 0);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "abc", 1, true);

            this.validateGroup(m, 0, 0, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 0, 3, "abc");
        },
        explicitCaptureInlineOptionTest1: function () {
            var pattern = "(?n)(a)(?<name1>b)(c)(?<55>d)";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "abcd", 3, true);

            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");

            this.validateGroup(m, 1, 1, 1, true, "b", 1);
            this.validateCapture(m, 1, 0, 1, 1, "b");

            this.validateGroup(m, 55, 3, 1, true, "d", 1);
            this.validateCapture(m, 55, 0, 3, 1, "d");
        },
        explicitCaptureInlineOptionTest2: function () {
            var pattern = "(?n)(a)(?<name1>b)(?-n)(c)(?<55>d)";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "abcd", 4, true);

            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");

            this.validateGroup(m, 1, 2, 1, true, "c", 1);
            this.validateCapture(m, 1, 0, 2, 1, "c");

            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");

            this.validateGroup(m, 55, 3, 1, true, "d", 1);
            this.validateCapture(m, 55, 0, 3, 1, "d");
        },
        explicitCaptureInlineOptionTest3: function () {
            var pattern = "(?n:a)(?<name1>b)(c)(?<55>d)";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "abcd", 4, true);

            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");

            this.validateGroup(m, 1, 2, 1, true, "c", 1);
            this.validateCapture(m, 1, 0, 2, 1, "c");

            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");

            this.validateGroup(m, 55, 3, 1, true, "d", 1);
            this.validateCapture(m, 55, 0, 3, 1, "d");
        },
        explicitCaptureInlineOptionTest4: function () {
            var pattern = "(?n:(a)(?<name1>b)(?-n:(c))(?<55>d))";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "abcd", 4, true);

            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");

            this.validateGroup(m, 1, 2, 1, true, "c", 1);
            this.validateCapture(m, 1, 0, 2, 1, "c");

            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");

            this.validateGroup(m, 55, 3, 1, true, "d", 1);
            this.validateCapture(m, 55, 0, 3, 1, "d");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnPositiveLookaheadTest: function () {
            var inputs = ["The dog is a Malamute.", "The island has beautiful birds.", "The pitch missed home plate.", "Sunday is a weekend day."];
            var expected = ["dog", null, null, "Sunday"];

            var pattern = "\\b\\w+(?=\\sis\\b)";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnNegativeLookaheadTest: function () {
            var pattern = "\\b(?!un)\\w+\\b";
            var text = "unite one unethical ethics use untie ultimate";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 6, 3, "one", 1, true);

            this.validateGroup(ms.get(0), 0, 6, 3, true, "one", 1);
            this.validateCapture(ms.get(0), 0, 0, 6, 3, "one");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 20, 6, "ethics", 1, true);

            this.validateGroup(ms.get(1), 0, 20, 6, true, "ethics", 1);
            this.validateCapture(ms.get(1), 0, 0, 20, 6, "ethics");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 27, 3, "use", 1, true);

            this.validateGroup(ms.get(2), 0, 27, 3, true, "use", 1);
            this.validateCapture(ms.get(2), 0, 0, 27, 3, "use");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 37, 8, "ultimate", 1, true);

            this.validateGroup(ms.get(3), 0, 37, 8, true, "ultimate", 1);
            this.validateCapture(ms.get(3), 0, 0, 37, 8, "ultimate");
        },
        positiveLookaheadTest1: function () {
            var pattern = "abc(?=def)de";
            var text = "abcde";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        positiveLookaheadTest2: function () {
            var pattern = "abc(?=de)def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 1, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");
        },
        negativeLookaheadTest1: function () {
            var pattern = "ab(?![\\\\d\\\\D])";
            var text = "ab";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 2, "ab", 1, true);

            this.validateGroup(m, 0, 0, 2, true, "ab", 1);
            this.validateCapture(m, 0, 0, 0, 2, "ab");
        },
        negativeLookaheadTest2: function () {
            var pattern = "ab(?!\\D)";
            var text = "abc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        positiveLookaheadWithGroupTest: function () {
            var pattern = "(ab)(?=(d)e)(def)";
            var text = "abdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "abdef", 4, true);

            this.validateGroup(m, 0, 0, 5, true, "abdef", 1);
            this.validateCapture(m, 0, 0, 0, 5, "abdef");

            this.validateGroup(m, 1, 0, 2, true, "ab", 1);
            this.validateCapture(m, 1, 0, 0, 2, "ab");

            this.validateGroup(m, 2, 2, 1, true, "d", 1);
            this.validateCapture(m, 2, 0, 2, 1, "d");

            this.validateGroup(m, 3, 2, 3, true, "def", 1);
            this.validateCapture(m, 3, 0, 2, 3, "def");
        },
        negativeLookaheadWithGroupTest: function () {
            var pattern = "(abc)(?!(d)x)(def)";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 4, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");

            this.validateGroup(m, 1, 0, 3, true, "abc", 1);
            this.validateCapture(m, 1, 0, 0, 3, "abc");

            this.validateGroup(m, 2, 0, 0, false, "", 0);

            this.validateGroup(m, 3, 3, 3, true, "def", 1);
            this.validateCapture(m, 3, 0, 3, 3, "def");
        },
        positiveLookaheadWithOffsetTest: function () {
            var pattern = "(?=cd)(.{3})";
            var text = "abcdefgh";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 2, 3, "cde", 2, true);

            this.validateGroup(m, 0, 2, 3, true, "cde", 1);
            this.validateCapture(m, 0, 0, 2, 3, "cde");

            this.validateGroup(m, 1, 2, 3, true, "cde", 1);
            this.validateCapture(m, 1, 0, 2, 3, "cde");
        },
        negativeLookaheadWithOffsetTest: function () {
            var pattern = "(?!cd)(.)";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "a", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "a");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "a");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "b", 2, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "b", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "b");

            this.validateGroup(ms.get(1), 1, 1, 1, true, "b", 1);
            this.validateCapture(ms.get(1), 1, 0, 1, 1, "b");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 3, 1, "d", 2, true);

            this.validateGroup(ms.get(2), 0, 3, 1, true, "d", 1);
            this.validateCapture(ms.get(2), 0, 0, 3, 1, "d");

            this.validateGroup(ms.get(2), 1, 3, 1, true, "d", 1);
            this.validateCapture(ms.get(2), 1, 0, 3, 1, "d");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 4, 1, "e", 2, true);

            this.validateGroup(ms.get(3), 0, 4, 1, true, "e", 1);
            this.validateCapture(ms.get(3), 0, 0, 4, 1, "e");

            this.validateGroup(ms.get(3), 1, 4, 1, true, "e", 1);
            this.validateCapture(ms.get(3), 1, 0, 4, 1, "e");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 5, 1, "f", 2, true);

            this.validateGroup(ms.get(4), 0, 5, 1, true, "f", 1);
            this.validateCapture(ms.get(4), 0, 0, 5, 1, "f");

            this.validateGroup(ms.get(4), 1, 5, 1, true, "f", 1);
            this.validateCapture(ms.get(4), 1, 0, 5, 1, "f");
        },
        positiveLookaheadGroupCombineTest: function () {
            var pattern = "(abc)(?=def)(def)";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 3, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");

            this.validateGroup(m, 1, 0, 3, true, "abc", 1);
            this.validateCapture(m, 1, 0, 0, 3, "abc");

            this.validateGroup(m, 2, 3, 3, true, "def", 1);
            this.validateCapture(m, 2, 0, 3, 3, "def");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnPositiveLookbehindTest: function () {
            var pattern = "(?<=\\b20)\\d{2}\\b";
            var text = "2010 1999 1861 2140 2009";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 2, 2, "10", 1, true);

            this.validateGroup(ms.get(0), 0, 2, 2, true, "10", 1);
            this.validateCapture(ms.get(0), 0, 0, 2, 2, "10");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 22, 2, "09", 1, true);

            this.validateGroup(ms.get(1), 0, 22, 2, true, "09", 1);
            this.validateCapture(ms.get(1), 0, 0, 22, 2, "09");
        },
        msdnNegativeLookbehindTest: function () {
            var inputs = ["Monday February 1, 2010", "Wednesday February 3, 2010", "Saturday February 6, 2010", "Sunday February 7, 2010", "Monday, February 8, 2010"];
            var expected = ["February 1, 2010", "February 3, 2010", null, null, "February 8, 2010"];

            var pattern = "(?<!(Saturday|Sunday) )\\b\\w+ \\d{1,2}, \\d{4}\\b";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        positiveLookbehindTest1: function () {
            var pattern = "abc(?<=bc)def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 1, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");
        },
        positiveLookbehindTest2: function () {
            var pattern = "abc(?<=bx)def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        positiveLookbehindTest3: function () {
            var pattern = "bc(?<=abc)def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 1, 5, "bcdef", 1, true);

            this.validateGroup(m, 0, 1, 5, true, "bcdef", 1);
            this.validateCapture(m, 0, 0, 1, 5, "bcdef");
        },
        positiveLookbehindWithMatchOffsetTest: function () {
            var pattern = "bc(?<=abc)def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match$1(text, 1);

            this.validateMatch(m, 1, 5, "bcdef", 1, true);

            this.validateGroup(m, 0, 1, 5, true, "bcdef", 1);
            this.validateCapture(m, 0, 0, 1, 5, "bcdef");
        },
        negativeLookbehindTest1: function () {
            var pattern = "abc(?<!bc)def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        negativeLookbehindTest2: function () {
            var pattern = "abc(?<!bx)def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 1, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");
        },
        positiveLookbehindWithGroupTest: function () {
            var pattern = "(abc)(?<=(b)c)(def)";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 4, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");

            this.validateGroup(m, 1, 0, 3, true, "abc", 1);
            this.validateCapture(m, 1, 0, 0, 3, "abc");

            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");

            this.validateGroup(m, 3, 3, 3, true, "def", 1);
            this.validateCapture(m, 3, 0, 3, 3, "def");
        },
        negativeLookbehindWithGroupTest: function () {
            var pattern = "(abc)(?<!(b)x)(def)";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "abcdef", 4, true);

            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");

            this.validateGroup(m, 1, 0, 3, true, "abc", 1);
            this.validateCapture(m, 1, 0, 0, 3, "abc");

            this.validateGroup(m, 2, 0, 0, false, "", 0);

            this.validateGroup(m, 3, 3, 3, true, "def", 1);
            this.validateCapture(m, 3, 0, 3, 3, "def");
        },
        positiveLookbehindWithOffsetTest: function () {
            var pattern = "(?<=cd)(.)";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 4, 1, "e", 2, true);

            this.validateGroup(m, 0, 4, 1, true, "e", 1);
            this.validateCapture(m, 0, 0, 4, 1, "e");

            this.validateGroup(m, 1, 4, 1, true, "e", 1);
            this.validateCapture(m, 1, 0, 4, 1, "e");
        },
        negativeLookbehindWithOffsetTest: function () {
            var pattern = "(?<!cd)(.)";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 1, "a", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 1, "a");

            this.validateGroup(ms.get(0), 1, 0, 1, true, "a", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 1, "a");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 1, 1, "b", 2, true);

            this.validateGroup(ms.get(1), 0, 1, 1, true, "b", 1);
            this.validateCapture(ms.get(1), 0, 0, 1, 1, "b");

            this.validateGroup(ms.get(1), 1, 1, 1, true, "b", 1);
            this.validateCapture(ms.get(1), 1, 0, 1, 1, "b");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 2, 1, "c", 2, true);

            this.validateGroup(ms.get(2), 0, 2, 1, true, "c", 1);
            this.validateCapture(ms.get(2), 0, 0, 2, 1, "c");

            this.validateGroup(ms.get(2), 1, 2, 1, true, "c", 1);
            this.validateCapture(ms.get(2), 1, 0, 2, 1, "c");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 3, 1, "d", 2, true);

            this.validateGroup(ms.get(3), 0, 3, 1, true, "d", 1);
            this.validateCapture(ms.get(3), 0, 0, 3, 1, "d");

            this.validateGroup(ms.get(3), 1, 3, 1, true, "d", 1);
            this.validateCapture(ms.get(3), 1, 0, 3, 1, "d");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 5, 1, "f", 2, true);

            this.validateGroup(ms.get(4), 0, 5, 1, true, "f", 1);
            this.validateCapture(ms.get(4), 0, 0, 5, 1, "f");

            this.validateGroup(ms.get(4), 1, 5, 1, true, "f", 1);
            this.validateCapture(ms.get(4), 1, 0, 5, 1, "f");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnNonBacktrackingTest1: function () {
            var inputs = ["cccd.", "aaad", "aaaa"];
            var expected = ["cccd", "aaad", "aaaa"];

            var pattern = "(\\w)\\1+.\\b";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnNonBacktrackingTest2: function () {
            var inputs = ["cccd.", "aaad", "aaaa"];
            var expected = ["cccd", "aaad", null];

            var pattern = "(?>(\\w)\\1+).\\b";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        nonBacktrackingTest1: function () {
            var pattern = "f*(?>fa+)(a*)bc";
            var text = "faaaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 7, "faaaabc", 2, true);

            this.validateGroup(m, 0, 0, 7, true, "faaaabc", 1);
            this.validateCapture(m, 0, 0, 0, 7, "faaaabc");

            this.validateGroup(m, 1, 5, 0, true, "", 1);
            this.validateCapture(m, 1, 0, 5, 0, "");
        },
        nonBacktrackingTest2: function () {
            var inputs = ["abcc", "abc"];
            var expected = ["abcc", "abc"];

            var pattern = "a(bc|b)c";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        nonBacktrackingTest3: function () {
            var inputs = ["abcc", "abc"];
            var expected = ["abcc", null];

            var pattern = "a(?>bc|b)c";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        nonBacktrackingTest4: function () {
            var pattern = "a(?>bc|b)c";
            var text = "abcabcc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 3, 4, "abcc", 1, true);

            this.validateGroup(m, 0, 3, 4, true, "abcc", 1);
            this.validateCapture(m, 0, 0, 3, 4, "abcc");
        },
        nonBacktrackingTest5: function () {
            var pattern = "a(?>bc|b)c";
            var text = "abccabcc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 4, "abcc", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 4, true, "abcc", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 4, "abcc");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 4, 4, "abcc", 1, true);

            this.validateGroup(ms.get(1), 0, 4, 4, true, "abcc", 1);
            this.validateCapture(ms.get(1), 0, 0, 4, 4, "abcc");
        },
        nonBacktrackingWithOffsetTest: function () {
            var pattern = "a(?>bc|b)c";
            var text = "abcabcc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 3, 4, "abcc", 1, true);

            this.validateGroup(m, 0, 3, 4, true, "abcc", 1);
            this.validateCapture(m, 0, 0, 3, 4, "abcc");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnIgnoreCaseOptionTest: function () {
            var pattern = "\\bthe\\w*\\b";
            var text = "The man then told them about that event.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 1);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "The", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 3, true, "The", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "The");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 4, "then", 1, true);

            this.validateGroup(ms.get(1), 0, 8, 4, true, "then", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 4, "then");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 18, 4, "them", 1, true);

            this.validateGroup(ms.get(2), 0, 18, 4, true, "them", 1);
            this.validateCapture(ms.get(2), 0, 0, 18, 4, "them");
        },
        msdnMultilineOptionTest1: function () {
            var pattern = "^(\\w+)\\s(\\d+)$";
            var text = "Joe 164\nSam 208\nAllison 211\nGwen 171\n";

            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 0);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);

            this.validateGroup(m, 1, 0, 0, false, "", 0);

            this.validateGroup(m, 2, 0, 0, false, "", 0);
        },
        msdnMultilineOptionTest2: function () {
            var pattern = "^(\\w+)\\s(\\d+)\\r*$";
            var text = "Joe 164\nSam 208\nAllison 211\nGwen 171\n";

            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 2);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 7, "Joe 164", 3, true);

            this.validateGroup(ms.get(0), 0, 0, 7, true, "Joe 164", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 7, "Joe 164");

            this.validateGroup(ms.get(0), 1, 0, 3, true, "Joe", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 3, "Joe");

            this.validateGroup(ms.get(0), 2, 4, 3, true, "164", 1);
            this.validateCapture(ms.get(0), 2, 0, 4, 3, "164");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 7, "Sam 208", 3, true);

            this.validateGroup(ms.get(1), 0, 8, 7, true, "Sam 208", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 7, "Sam 208");

            this.validateGroup(ms.get(1), 1, 8, 3, true, "Sam", 1);
            this.validateCapture(ms.get(1), 1, 0, 8, 3, "Sam");

            this.validateGroup(ms.get(1), 2, 12, 3, true, "208", 1);
            this.validateCapture(ms.get(1), 2, 0, 12, 3, "208");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 16, 11, "Allison 211", 3, true);

            this.validateGroup(ms.get(2), 0, 16, 11, true, "Allison 211", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 11, "Allison 211");

            this.validateGroup(ms.get(2), 1, 16, 7, true, "Allison", 1);
            this.validateCapture(ms.get(2), 1, 0, 16, 7, "Allison");

            this.validateGroup(ms.get(2), 2, 24, 3, true, "211", 1);
            this.validateCapture(ms.get(2), 2, 0, 24, 3, "211");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 28, 8, "Gwen 171", 3, true);

            this.validateGroup(ms.get(3), 0, 28, 8, true, "Gwen 171", 1);
            this.validateCapture(ms.get(3), 0, 0, 28, 8, "Gwen 171");

            this.validateGroup(ms.get(3), 1, 28, 4, true, "Gwen", 1);
            this.validateCapture(ms.get(3), 1, 0, 28, 4, "Gwen");

            this.validateGroup(ms.get(3), 2, 33, 3, true, "171", 1);
            this.validateCapture(ms.get(3), 2, 0, 33, 3, "171");
        },
        msdnSinglelineOptionTest: function () {
            var pattern = "^.+";
            var text = "This is one line and\r\nthis is the second.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 16);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 41, "This is one line and\r\nthis is the second.", 1, true);

            this.validateGroup(m, 0, 0, 41, true, "This is one line and\r\nthis is the second.", 1);
            this.validateCapture(m, 0, 0, 0, 41, "This is one line and\r\nthis is the second.");
        },
        msdnIgnoreWhitespaceOptionTest: function () {
            var pattern = " \\b \\(? ( (?:\\w+) ,?\\s? )+  [\\.!?] \\)? # Matches an entire sentence.";
            var text = "This is the first sentence. Is it the beginning of a literary masterpiece? I think not. Instead, it is a nonsensical paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 32);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 27, "This is the first sentence.", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 27, true, "This is the first sentence.", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 27, "This is the first sentence.");

            this.validateGroup(ms.get(0), 1, 18, 8, true, "sentence", 5);
            this.validateCapture(ms.get(0), 1, 0, 0, 5, "This ");
            this.validateCapture(ms.get(0), 1, 1, 5, 3, "is ");
            this.validateCapture(ms.get(0), 1, 2, 8, 4, "the ");
            this.validateCapture(ms.get(0), 1, 3, 12, 6, "first ");
            this.validateCapture(ms.get(0), 1, 4, 18, 8, "sentence");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 46, "Is it the beginning of a literary masterpiece?", 2, true);

            this.validateGroup(ms.get(1), 0, 28, 46, true, "Is it the beginning of a literary masterpiece?", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 46, "Is it the beginning of a literary masterpiece?");

            this.validateGroup(ms.get(1), 1, 62, 11, true, "masterpiece", 8);
            this.validateCapture(ms.get(1), 1, 0, 28, 3, "Is ");
            this.validateCapture(ms.get(1), 1, 1, 31, 3, "it ");
            this.validateCapture(ms.get(1), 1, 2, 34, 4, "the ");
            this.validateCapture(ms.get(1), 1, 3, 38, 10, "beginning ");
            this.validateCapture(ms.get(1), 1, 4, 48, 3, "of ");
            this.validateCapture(ms.get(1), 1, 5, 51, 2, "a ");
            this.validateCapture(ms.get(1), 1, 6, 53, 9, "literary ");
            this.validateCapture(ms.get(1), 1, 7, 62, 11, "masterpiece");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 75, 12, "I think not.", 2, true);

            this.validateGroup(ms.get(2), 0, 75, 12, true, "I think not.", 1);
            this.validateCapture(ms.get(2), 0, 0, 75, 12, "I think not.");

            this.validateGroup(ms.get(2), 1, 83, 3, true, "not", 3);
            this.validateCapture(ms.get(2), 1, 0, 75, 2, "I ");
            this.validateCapture(ms.get(2), 1, 1, 77, 6, "think ");
            this.validateCapture(ms.get(2), 1, 2, 83, 3, "not");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 88, 39, "Instead, it is a nonsensical paragraph.", 2, true);

            this.validateGroup(ms.get(3), 0, 88, 39, true, "Instead, it is a nonsensical paragraph.", 1);
            this.validateCapture(ms.get(3), 0, 0, 88, 39, "Instead, it is a nonsensical paragraph.");

            this.validateGroup(ms.get(3), 1, 117, 9, true, "paragraph", 6);
            this.validateCapture(ms.get(3), 1, 0, 88, 9, "Instead, ");
            this.validateCapture(ms.get(3), 1, 1, 97, 3, "it ");
            this.validateCapture(ms.get(3), 1, 2, 100, 3, "is ");
            this.validateCapture(ms.get(3), 1, 3, 103, 2, "a ");
            this.validateCapture(ms.get(3), 1, 4, 105, 12, "nonsensical ");
            this.validateCapture(ms.get(3), 1, 5, 117, 9, "paragraph");
        },
        msdnExplicitCaptureOptionTest1: function () {
            var pattern = "\\b\\(?((?>\\w+),?\\s?)+[\\.!?]\\)?";
            var text = "This is the first sentence. Is it the beginning of a literary masterpiece? I think not. Instead, it is a nonsensical paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 27, "This is the first sentence.", 2, true);

            this.validateGroup(ms.get(0), 0, 0, 27, true, "This is the first sentence.", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 27, "This is the first sentence.");

            this.validateGroup(ms.get(0), 1, 18, 8, true, "sentence", 5);
            this.validateCapture(ms.get(0), 1, 0, 0, 5, "This ");
            this.validateCapture(ms.get(0), 1, 1, 5, 3, "is ");
            this.validateCapture(ms.get(0), 1, 2, 8, 4, "the ");
            this.validateCapture(ms.get(0), 1, 3, 12, 6, "first ");
            this.validateCapture(ms.get(0), 1, 4, 18, 8, "sentence");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 46, "Is it the beginning of a literary masterpiece?", 2, true);

            this.validateGroup(ms.get(1), 0, 28, 46, true, "Is it the beginning of a literary masterpiece?", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 46, "Is it the beginning of a literary masterpiece?");

            this.validateGroup(ms.get(1), 1, 62, 11, true, "masterpiece", 8);
            this.validateCapture(ms.get(1), 1, 0, 28, 3, "Is ");
            this.validateCapture(ms.get(1), 1, 1, 31, 3, "it ");
            this.validateCapture(ms.get(1), 1, 2, 34, 4, "the ");
            this.validateCapture(ms.get(1), 1, 3, 38, 10, "beginning ");
            this.validateCapture(ms.get(1), 1, 4, 48, 3, "of ");
            this.validateCapture(ms.get(1), 1, 5, 51, 2, "a ");
            this.validateCapture(ms.get(1), 1, 6, 53, 9, "literary ");
            this.validateCapture(ms.get(1), 1, 7, 62, 11, "masterpiece");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 75, 12, "I think not.", 2, true);

            this.validateGroup(ms.get(2), 0, 75, 12, true, "I think not.", 1);
            this.validateCapture(ms.get(2), 0, 0, 75, 12, "I think not.");

            this.validateGroup(ms.get(2), 1, 83, 3, true, "not", 3);
            this.validateCapture(ms.get(2), 1, 0, 75, 2, "I ");
            this.validateCapture(ms.get(2), 1, 1, 77, 6, "think ");
            this.validateCapture(ms.get(2), 1, 2, 83, 3, "not");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 88, 39, "Instead, it is a nonsensical paragraph.", 2, true);

            this.validateGroup(ms.get(3), 0, 88, 39, true, "Instead, it is a nonsensical paragraph.", 1);
            this.validateCapture(ms.get(3), 0, 0, 88, 39, "Instead, it is a nonsensical paragraph.");

            this.validateGroup(ms.get(3), 1, 117, 9, true, "paragraph", 6);
            this.validateCapture(ms.get(3), 1, 0, 88, 9, "Instead, ");
            this.validateCapture(ms.get(3), 1, 1, 97, 3, "it ");
            this.validateCapture(ms.get(3), 1, 2, 100, 3, "is ");
            this.validateCapture(ms.get(3), 1, 3, 103, 2, "a ");
            this.validateCapture(ms.get(3), 1, 4, 105, 12, "nonsensical ");
            this.validateCapture(ms.get(3), 1, 5, 117, 9, "paragraph");
        },
        msdnExplicitCaptureOptionTest2: function () {
            var pattern = "\\b\\(?((?>\\w+),?\\s?)+[\\.!?]\\)?";
            var text = "This is the first sentence. Is it the beginning of a literary masterpiece? I think not. Instead, it is a nonsensical paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 4);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 27, "This is the first sentence.", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 27, true, "This is the first sentence.", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 27, "This is the first sentence.");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 46, "Is it the beginning of a literary masterpiece?", 1, true);

            this.validateGroup(ms.get(1), 0, 28, 46, true, "Is it the beginning of a literary masterpiece?", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 46, "Is it the beginning of a literary masterpiece?");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 75, 12, "I think not.", 1, true);

            this.validateGroup(ms.get(2), 0, 75, 12, true, "I think not.", 1);
            this.validateCapture(ms.get(2), 0, 0, 75, 12, "I think not.");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 88, 39, "Instead, it is a nonsensical paragraph.", 1, true);

            this.validateGroup(ms.get(3), 0, 88, 39, true, "Instead, it is a nonsensical paragraph.", 1);
            this.validateCapture(ms.get(3), 0, 0, 88, 39, "Instead, it is a nonsensical paragraph.");
        },
        ignoreCaseOptionTest1: function () {
            var pattern = "ABcd";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 0);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        ignoreCaseOptionTest2: function () {
            var pattern = "ABcd";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 1);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "abcd", 1, true);

            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");
        },
        ignoreCaseOptionTest3: function () {
            var pattern = "[AB]+cd";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 1);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 4, "abcd", 1, true);

            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");
        },
        defaultLineOptionsTest1: function () {
            var pattern = "^.*";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 16, "The first line.\r", 1, true);

            this.validateGroup(m, 0, 0, 16, true, "The first line.\r", 1);
            this.validateCapture(m, 0, 0, 0, 16, "The first line.\r");
        },
        defaultLineOptionsTest2: function () {
            var pattern = ".+$";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 35, 15, "The third line.", 1, true);

            this.validateGroup(m, 0, 35, 15, true, "The third line.", 1);
            this.validateCapture(m, 0, 0, 35, 15, "The third line.");
        },
        multilineOptionTest1: function () {
            var pattern = ".*";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 2);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(6, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 16, "The first line.\r", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 16, true, "The first line.\r", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 16, "The first line.\r");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 16, 0, "", 1, true);

            this.validateGroup(ms.get(1), 0, 16, 0, true, "", 1);
            this.validateCapture(ms.get(1), 0, 0, 16, 0, "");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 17, 17, "The second line.\r", 1, true);

            this.validateGroup(ms.get(2), 0, 17, 17, true, "The second line.\r", 1);
            this.validateCapture(ms.get(2), 0, 0, 17, 17, "The second line.\r");

            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 34, 0, "", 1, true);

            this.validateGroup(ms.get(3), 0, 34, 0, true, "", 1);
            this.validateCapture(ms.get(3), 0, 0, 34, 0, "");

            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 35, 15, "The third line.", 1, true);

            this.validateGroup(ms.get(4), 0, 35, 15, true, "The third line.", 1);
            this.validateCapture(ms.get(4), 0, 0, 35, 15, "The third line.");

            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 50, 0, "", 1, true);

            this.validateGroup(ms.get(5), 0, 50, 0, true, "", 1);
            this.validateCapture(ms.get(5), 0, 0, 50, 0, "");
        },
        multilineOptionTest2: function () {
            var pattern = ".+$";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 2);
            var ms = rgx.matches(text);

            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");

            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 16, "The first line.\r", 1, true);

            this.validateGroup(ms.get(0), 0, 0, 16, true, "The first line.\r", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 16, "The first line.\r");

            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 17, 17, "The second line.\r", 1, true);

            this.validateGroup(ms.get(1), 0, 17, 17, true, "The second line.\r", 1);
            this.validateCapture(ms.get(1), 0, 0, 17, 17, "The second line.\r");

            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 35, 15, "The third line.", 1, true);

            this.validateGroup(ms.get(2), 0, 35, 15, true, "The third line.", 1);
            this.validateCapture(ms.get(2), 0, 0, 35, 15, "The third line.");
        },
        singlelineOptionTest: function () {
            var pattern = "^.*";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 16);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 50, "The first line.\r\nThe second line.\r\nThe third line.", 1, true);

            this.validateGroup(m, 0, 0, 50, true, "The first line.\r\nThe second line.\r\nThe third line.", 1);
            this.validateCapture(m, 0, 0, 0, 50, "The first line.\r\nThe second line.\r\nThe third line.");
        },
        singlelineDotCharTest: function () {
            var pattern = "[.]+$";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 49, 1, ".", 1, true);

            this.validateGroup(m, 0, 49, 1, true, ".", 1);
            this.validateCapture(m, 0, 0, 49, 1, ".");
        },
        multilineAndSinglelineOptionsTest: function () {
            var pattern = ".+$";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex.$ctor1(pattern, 18);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 50, "The first line.\r\nThe second line.\r\nThe third line.", 1, true);

            this.validateGroup(m, 0, 0, 50, true, "The first line.\r\nThe second line.\r\nThe third line.", 1);
            this.validateCapture(m, 0, 0, 0, 50, "The first line.\r\nThe second line.\r\nThe third line.");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnZeroOrMoreTimesTest: function () {
            var inputs = [".0", "19.9", "219.9", "500", "700."];
            var expected = [".0", "19.9", "219.9", null, null];

            var pattern = "\\d*\\.\\d";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnOneOrMoreTimesTest: function () {
            var inputs = ["been", "bent", "bf", "beee", "aabe"];
            var expected = ["bee", "be", null, "beee", "be"];

            var pattern = "be+";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnZeroOrOneTimeTest: function () {
            var inputs = ["rain", "ran", "raiin"];
            var expected = ["rain", "ran", null];

            var pattern = "rai?n";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnNTimesTest1: function () {
            var inputs = ["1,043.6", ",876", ",543", "9,876,543,210"];
            var expected = [",043", ",876", ",543", ",876"];

            var pattern = ",\\d{3}";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnNTimesTest2: function () {
            var inputs = ["1,043.6", ",876", ",543", "9,876,543,210"];
            var expected = [null, ",876", ",543", ",210"];

            var pattern = ",\\d{3}$";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnNOrMoreTimesTest: function () {
            var inputs = ["166", "29", "1930", "1"];
            var expected = ["166", "29", "1930", null];

            var pattern = "\\d{2,}";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnNToMTimesTest: function () {
            var inputs = ["166", "17668", "193024", "12"];
            var expected = ["166", "17668", "19302", null];

            var pattern = "\\d{3,5}";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnLazyZeroOrMoreTimesTest: function () {
            var inputs = [".0", "19.9", "219.9", "500", "700."];
            var expected = [".0", "19.9", "219.9", null, null];

            var pattern = "\\d*?\\.\\d";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnLazyOneOrMoreTimesTest: function () {
            var inputs = ["been", "bent", "bf", "beee", "aabe"];
            var expected = ["be", "be", null, "be", "be"];

            var pattern = "be+?";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnLazyZeroOrOneTimeTest: function () {
            var inputs = ["rain", "ran", "raiin"];
            var expected = ["rain", "ran", null];

            var pattern = "rai??n";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnLazyNTimesTest: function () {
            var inputs = ["1,043.6", ",876", ",543", "9,876,543,210", "123"];
            var expected = [",043", ",876", ",543", ",876", null];

            var pattern = ",\\d{3}?";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnLazyNOrMoreTimesTest: function () {
            var inputs = ["166", "29", "1930", "1"];
            var expected = ["16", "29", "19", null];

            var pattern = "\\d{2,}?";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        msdnLazyNToMTimesTest: function () {
            var inputs = ["166", "17668", "193024", "12"];
            var expected = ["166", "176", "193", null];

            var pattern = "\\d{3,5}?";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);

            this.validateMatchResults(rgx, inputs, expected);
        },
        zeroOrMoreTimesTest: function () {
            var pattern = "(a*)(abc)";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "aaabc", 3, true);

            this.validateGroup(m, 0, 0, 5, true, "aaabc", 1);
            this.validateCapture(m, 0, 0, 0, 5, "aaabc");

            this.validateGroup(m, 1, 0, 2, true, "aa", 1);
            this.validateCapture(m, 1, 0, 0, 2, "aa");

            this.validateGroup(m, 2, 2, 3, true, "abc", 1);
            this.validateCapture(m, 2, 0, 2, 3, "abc");
        },
        oneOrMoreTimesTest1: function () {
            var pattern = "(a+)(abc)";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "aaabc", 3, true);

            this.validateGroup(m, 0, 0, 5, true, "aaabc", 1);
            this.validateCapture(m, 0, 0, 0, 5, "aaabc");

            this.validateGroup(m, 1, 0, 2, true, "aa", 1);
            this.validateCapture(m, 1, 0, 0, 2, "aa");

            this.validateGroup(m, 2, 2, 3, true, "abc", 1);
            this.validateCapture(m, 2, 0, 2, 3, "abc");
        },
        oneOrMoreTimesTest2: function () {
            var pattern = "(a+)(abc)";
            var text = "abc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 0, "", 1, false);

            this.validateGroup(m, 0, 0, 0, false, "", 0);

            this.validateGroup(m, 1, 0, 0, false, "", 0);

            this.validateGroup(m, 2, 0, 0, false, "", 0);
        },
        oneOrMoreTimesTest3: function () {
            var pattern = "(a+)(a{2}bc)";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "aaabc", 3, true);

            this.validateGroup(m, 0, 0, 5, true, "aaabc", 1);
            this.validateCapture(m, 0, 0, 0, 5, "aaabc");

            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");

            this.validateGroup(m, 2, 1, 4, true, "aabc", 1);
            this.validateCapture(m, 2, 0, 1, 4, "aabc");
        },
        zeroOrOneTimeTest: function () {
            var pattern = "(a?)(abc)";
            var text = "abc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 3, "abc", 3, true);

            this.validateGroup(m, 0, 0, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 0, 3, "abc");

            this.validateGroup(m, 1, 0, 0, true, "", 1);
            this.validateCapture(m, 1, 0, 0, 0, "");

            this.validateGroup(m, 2, 0, 3, true, "abc", 1);
            this.validateCapture(m, 2, 0, 0, 3, "abc");
        },
        lazyZeroOrMoreTimesTest1: function () {
            var pattern = "(a*?)((?:aa)*bc)";
            var text = "aaaaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 7, "aaaaabc", 3, true);

            this.validateGroup(m, 0, 0, 7, true, "aaaaabc", 1);
            this.validateCapture(m, 0, 0, 0, 7, "aaaaabc");

            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");

            this.validateGroup(m, 2, 1, 6, true, "aaaabc", 1);
            this.validateCapture(m, 2, 0, 1, 6, "aaaabc");
        },
        lazyZeroOrMoreTimesTest2: function () {
            var pattern = "(a*?)((?:aa)*bc)";
            var text = "aaaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "aaaabc", 3, true);

            this.validateGroup(m, 0, 0, 6, true, "aaaabc", 1);
            this.validateCapture(m, 0, 0, 0, 6, "aaaabc");

            this.validateGroup(m, 1, 0, 0, true, "", 1);
            this.validateCapture(m, 1, 0, 0, 0, "");

            this.validateGroup(m, 2, 0, 6, true, "aaaabc", 1);
            this.validateCapture(m, 2, 0, 0, 6, "aaaabc");
        },
        lazyOneOrMoreTimesTest1: function () {
            var pattern = "(a+?)((?:aa)*bc)";
            var text = "aaaaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 7, "aaaaabc", 3, true);

            this.validateGroup(m, 0, 0, 7, true, "aaaaabc", 1);
            this.validateCapture(m, 0, 0, 0, 7, "aaaaabc");

            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");

            this.validateGroup(m, 2, 1, 6, true, "aaaabc", 1);
            this.validateCapture(m, 2, 0, 1, 6, "aaaabc");
        },
        lazyOneOrMoreTimesTest2: function () {
            var pattern = "(a+?)((?:aa)*bc)";
            var text = "aaaaaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 8, "aaaaaabc", 3, true);

            this.validateGroup(m, 0, 0, 8, true, "aaaaaabc", 1);
            this.validateCapture(m, 0, 0, 0, 8, "aaaaaabc");

            this.validateGroup(m, 1, 0, 2, true, "aa", 1);
            this.validateCapture(m, 1, 0, 0, 2, "aa");

            this.validateGroup(m, 2, 2, 6, true, "aaaabc", 1);
            this.validateCapture(m, 2, 0, 2, 6, "aaaabc");
        },
        lazyZeroOrOneTimeTest1: function () {
            var pattern = "(a??)((?:aa)*bc)";
            var text = "aaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 5, "aaabc", 3, true);

            this.validateGroup(m, 0, 0, 5, true, "aaabc", 1);
            this.validateCapture(m, 0, 0, 0, 5, "aaabc");

            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");

            this.validateGroup(m, 2, 1, 4, true, "aabc", 1);
            this.validateCapture(m, 2, 0, 1, 4, "aabc");
        },
        lazyZeroOrOneTimeTest2: function () {
            var pattern = "(a??)((?:aa)*bc)";
            var text = "aaaabc";
            var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
            var m = rgx.match(text);

            this.validateMatch(m, 0, 6, "aaaabc", 3, true);

            this.validateGroup(m, 0, 0, 6, true, "aaaabc", 1);
            this.validateCapture(m, 0, 0, 0, 6, "aaaabc");

            this.validateGroup(m, 1, 0, 0, true, "", 1);
            this.validateCapture(m, 1, 0, 0, 0, "");

            this.validateGroup(m, 2, 0, 6, true, "aaaabc", 1);
            this.validateCapture(m, 2, 0, 0, 6, "aaaabc");
        }
    });

    Bridge.define("Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests", {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            ctor: function () {
                Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText = "";
                for (var i = 0; i < 10000; i = (i + 1) | 0) {
                    Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText = System.String.concat(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText, "TestStringForTimeout");
                }

                Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText = "";
                for (var i1 = 0; i1 < 100; i1 = (i1 + 1) | 0) {
                    Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText = System.String.concat(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText, "TestStringWithNoTimeout");
                }
            },
            pattern: "([0-9a-zA-Z]{1})+",
            shortText: null,
            longText: null,
            config: {
                init: function () {
                    this.shortTimeoutMs = System.TimeSpan.fromMilliseconds(1) || new System.TimeSpan();
                    this.longTimeoutMs = System.TimeSpan.fromMilliseconds(3000) || new System.TimeSpan();
                }
            }
        },
        regexTimeoutValidationWorks: function () {
            var rgx = new System.Text.RegularExpressions.Regex.ctor("fakePattern");
            Bridge.Test.Assert.areEqual$1(System.TimeSpan.fromMilliseconds(-1), rgx.getMatchTimeout(), "Default Timeout #1");

            rgx = new System.Text.RegularExpressions.Regex.$ctor1("fakePattern", 0);
            Bridge.Test.Assert.areEqual$1(System.TimeSpan.fromMilliseconds(-1), rgx.getMatchTimeout(), "Default Timeout #2");

            rgx = new System.Text.RegularExpressions.Regex.$ctor2("fakePattern", 0, System.TimeSpan.fromSeconds(123));
            Bridge.Test.Assert.areEqual$1(System.TimeSpan.fromSeconds(123), rgx.getMatchTimeout(), "Specified Timeout");

            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f1);
        },
        regexIsMatchWorksWithShortTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, function () {
                rgx.isMatch(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText);
            });
        },
        regexIsMatchWorksWithLongTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            rgx.isMatch(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText);
            Bridge.Test.Assert.true(rgx != null);
        },
        regexMatchWorksWithShortTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, function () {
                rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText);
            });
        },
        regexMatchWorksWithLongTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText);
            Bridge.Test.Assert.true(rgx != null);
        },
        regexNextMatchWorksWithShortTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor2(System.String.concat("%%|", Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern), 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);

            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, function () {
                var result = rgx.match(System.String.concat("%%", Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText));
                result.nextMatch();
            });
        },
        regexNextMatchWorksWithLongTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex.$ctor2(System.String.concat("%%| ", Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern), 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);

            var result = rgx.match(System.String.concat("%%", Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText));
            result.nextMatch();

            Bridge.Test.Assert.true(rgx != null);
        },
        regexReplaceWorksWithShortTimeout: function () {
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f2);
        },
        regexReplaceWorksWithLongTimeout: function () {
            System.Text.RegularExpressions.Regex.replace$2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, "fakeReplacement", 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            Bridge.Test.Assert.true(true);
        },
        regexReplaceEvaluatorWorksWithShortTimeout: function () {
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f4);
        },
        regexReplaceEvaluatorWorksWithLongTimeout: function () {
            System.Text.RegularExpressions.Regex.replace$5(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f3, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            Bridge.Test.Assert.true(true);
        },
        regexSplitWorksWithShortTimeout: function () {
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f5);
        },
        regexSplitWorksWithLongTimeout: function () {
            System.Text.RegularExpressions.Regex.split$2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            Bridge.Test.Assert.true(true);
        }
    });

    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests", $_);

    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests, {
        f1: function () {
            new System.Text.RegularExpressions.Regex.$ctor2("fakePattern", 0, System.TimeSpan.fromMilliseconds(-5));
        },
        f2: function () {
            System.Text.RegularExpressions.Regex.replace$2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, "fakeReplacement", 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
        },
        f3: function (m) {
            return "fakeReplacement";
        },
        f4: function () {
            System.Text.RegularExpressions.Regex.replace$5(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f3, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
        },
        f5: function () {
            System.Text.RegularExpressions.Regex.split$2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
        }
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.D1", {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1,Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1]
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1", function (T) { return {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(T),Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(T),Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1]
    }; });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3", {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(System.Int32),Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(String)]
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3", {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1],
        $kind: "interface"
    });

    Bridge.definei("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I8$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I6$1(T1),Bridge.ClientTest.TypeSystemTests.AssignableTypes.I7$1(T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.definei("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I5$1", function (T1) { return {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(T1)],
        $kind: "interface"
    }; });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.X1", {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1]
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.I2", {
        inherits: [Bridge.ClientTest.TypeSystemTests.I1],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.I4", {
        inherits: [Bridge.ClientTest.TypeSystemTests.I3],
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.BasicCSharp.TestAbstractClass.C", {
        inherits: [Bridge.ClientTest.BasicCSharp.TestAbstractClass.B],
        getString: function () {
            this.setData((this.getData() - 1) | 0);
            return "C";
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.AttributeTests.C4", {
        inherits: [Bridge.ClientTest.Reflection.AttributeTests.C3]
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.D1", {
        inherits: [Bridge.ClientTest.Reflection.GetMembersTests.C1,Bridge.ClientTest.Reflection.GetMembersTests.I1],
        statics: {
            FDS1: 0,
            FDS2: 0,
            config: {
                properties: {
                    PDS1: 0,
                    PDS2: 0
                }
            },
            addEDS1: function (value) {
            },
            removeEDS1: function (value) {
            },
            addEDS2: function (value) {
            },
            removeEDS2: function (value) {
            },
            MDS: function () {
            },
            MDS$1: function (x) {
            },
            MDS$2: function (x, y) {
            },
            MDS2: function (x, y) {
            }
        },
        FD1: 0,
        FD2: 0,
        config: {
            properties: {
                PD1: 0,
                PD2: 0
            }
        },
        ctor: function () {
            this.$initialize();
            Bridge.ClientTest.Reflection.GetMembersTests.C1.ctor.call(this);
        },
        $ctor1: function (x) {
            this.$initialize();
            Bridge.ClientTest.Reflection.GetMembersTests.C1.ctor.call(this);
        },
        $ctor2: function (x, y) {
            this.$initialize();
            Bridge.ClientTest.Reflection.GetMembersTests.C1.ctor.call(this);
        },
        getItem$2: function (x) {
            return 0;
        },
        setItem$2: function (x, value) {
        },
        get_i1item: function (x) {
            return 0;
        },
        set_i1item: function (x, value) {
        },
        addED1: function (value) {
        },
        removeED1: function (value) {
        },
        addED2: function (value) {
        },
        removeED2: function (value) {
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$getPI11: function () {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$setPI11: function (value) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$getPI12: function () {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$setPI12: function (value) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$addEI11: function (value) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$removeEI11: function (value) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$addEI12: function (value) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$removeEI12: function (value) {
            throw new System.NotImplementedException();
        },
        MD: function () {
        },
        MD$1: function (x) {
        },
        MD$2: function (x, y) {
        },
        MD2: function (x, y) {
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$MI1: function () {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$MI1$1: function (x) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$MI1$2: function (x, y) {
            throw new System.NotImplementedException();
        },
        Bridge$ClientTest$Reflection$GetMembersTests$I1$MI12: function (x, y) {
            throw new System.NotImplementedException();
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.GetMembersTests.D2", {
        inherits: [Bridge.ClientTest.Reflection.GetMembersTests.C2],
        statics: {
            FS: 0,
            FDS: 0,
            config: {
                events: {
                    ES: null,
                    EDS: null
                },
                properties: {
                    PS: 0,
                    PDS: 0
                }
            },
            MS: function () {
            },
            MDS: function () {
            },
            M2S: function (x) {
            },
            M2S$1: function (x) {
            },
            M2DS: function (x) {
            },
            M2DS$1: function (x) {
            },
            M3S: function (x) {
            }
        },
        f$2: 0,
        FD: 0,
        config: {
            events: {
                E$2: null,
                ED: null
            },
            properties: {
                P$2: 0,
                PD: 0
            }
        },
        getItem$4: function (x) {
            return 0;
        },
        setItem$4: function (x, value) {
        },
        getItem$5: function (x) {
            return 0;
        },
        setItem$5: function (x, value) {
        },
        m$2: function () {
        },
        MD: function () {
        },
        M2$4: function (x) {
        },
        M2$5: function (x) {
        },
        M2D: function (x) {
        },
        M2D$1: function (x) {
        },
        M3$2: function (x) {
        }
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C11$1", function (T) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C10$1(T)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.D4", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I3,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I4]
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I10$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(T1,T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y1$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y2$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(T1,T2)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y5$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I6$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(T1,T2))]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y6$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I7$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.I8$2(T1,T2))]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.B", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.I2]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.D4", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I3,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I4]
    });

    Bridge.definei("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I10$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(T1,T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y1$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y2$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(T1,T2)]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y5$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I6$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(T1,T2))]
    }; });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y6$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I7$1(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.I8$2(T1,T2))]
    }; });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.D4", {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3,Bridge.ClientTest.TypeSystemTests.AssignableTypes.I4]
    });

    Bridge.definei("Bridge.ClientTest.TypeSystemTests.AssignableTypes.I10$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I8$2(T1,T2)],
        $kind: "interface",
        $variance: [1,2]
    }; });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.AssignableTypes.X2", {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.X1]
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.B", {
        inherits: [Bridge.ClientTest.TypeSystemTests.I2]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C12", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.C11$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.K)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X1X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X1)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3X2X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.Y3$2(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2,Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests.X2)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.C", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.B,Bridge.ClientTest.Reflection.TypeSystemTests.I4]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X1X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X1", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X1)]
    });

    Bridge.define("Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3X2X2", {
        inherits: [Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.Y3$2(Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2,Bridge.ClientTest.Reflection.TypeSystemTests.IsAssignableFromTypes.X2)]
    });

    Bridge.define("Bridge.ClientTest.TypeSystemTests.C", {
        inherits: [Bridge.ClientTest.TypeSystemTests.B,Bridge.ClientTest.TypeSystemTests.I4]
    });

    var $m = Bridge.setMetadata,
        $n = [System,Bridge.ClientTest.Linq.Expressions,Bridge.ClientTest.Reflection];
    $m($n[1].ExpressionTests.C, function () { return {"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":String,"ps":1}],"sn":"M1","rt":$n[0].Int32,"p":[$n[0].Int32,String]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":String,"ps":1}],"sn":"M2","rt":$n[0].Int32,"p":[$n[0].Int32,String]},{"a":2,"n":"M4","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0}],"sn":"M4","rt":$n[0].Int32,"p":[$n[0].Int32]},{"a":2,"n":"op_Addition","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Addition","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_BitwiseAnd","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_BitwiseAnd","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_BitwiseOr","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_BitwiseOr","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Decrement","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_Decrement","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_Division","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Division","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Equality","rt":Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_ExclusiveOr","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_ExclusiveOr","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int32,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_False","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_False","rt":Boolean,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_GreaterThan","rt":Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_GreaterThanOrEqual","rt":Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Increment","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_Increment","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Inequality","rt":Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_LeftShift","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"sn":"op_LeftShift","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[0].Int32]},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_LessThan","rt":Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_LessThanOrEqual","rt":Boolean,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_LogicalNot","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_LogicalNot","rt":Boolean,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_Modulus","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Modulus","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_Multiply","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Multiply","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_OnesComplement","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_OnesComplement","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_Power","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Power","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_RightShift","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"sn":"op_RightShift","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[0].Int32]},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0},{"n":"b","pt":$n[1].ExpressionTests.C,"ps":1}],"sn":"op_Subtraction","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C,$n[1].ExpressionTests.C]},{"a":2,"n":"op_True","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_True","rt":Boolean,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_UnaryNegation","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_UnaryNegation","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"op_UnaryPlus","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"op_UnaryPlus","rt":$n[1].ExpressionTests.C,"p":[$n[1].ExpressionTests.C]},{"a":2,"n":"CP","t":16,"rt":$n[1].ExpressionTests.C,"g":{"a":2,"n":"get_CP","t":8,"sn":"getCP","rt":$n[1].ExpressionTests.C},"s":{"a":2,"n":"set_CP","t":8,"pi":[{"n":"value","pt":$n[1].ExpressionTests.C,"ps":0}],"sn":"setCP","rt":Object,"p":[$n[1].ExpressionTests.C]}},{"a":2,"n":"Item","t":16,"rt":String,"p":[$n[0].Int32,String],"i":true,"ipi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":String,"ps":1}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":String,"ps":1}],"sn":"getItem","rt":String,"p":[$n[0].Int32,String]}},{"a":2,"n":"LP","t":16,"rt":$n[1].ExpressionTests.MyList,"g":{"a":2,"n":"get_LP","t":8,"sn":"getLP","rt":$n[1].ExpressionTests.MyList},"s":{"a":2,"n":"set_LP","t":8,"pi":[{"n":"value","pt":$n[1].ExpressionTests.MyList,"ps":0}],"sn":"setLP","rt":Object,"p":[$n[1].ExpressionTests.MyList]}},{"a":2,"n":"P1","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P1","t":8,"sn":"getP1","rt":$n[0].Int32},"s":{"a":2,"n":"set_P1","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setP1","rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"CF","t":4,"rt":$n[1].ExpressionTests.C,"sn":"CF"},{"a":2,"n":"F1","t":4,"rt":$n[0].Int32,"sn":"F1"},{"a":2,"n":"LF","t":4,"rt":$n[1].ExpressionTests.MyList,"sn":"LF"}]}; });
    $m($n[1].ExpressionTests.MyList, function () { return {"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Add","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"add","rt":Object,"p":[$n[0].Int32]},{"a":2,"n":"Add","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0},{"n":"j","pt":$n[0].Int32,"ps":1}],"sn":"add$1","rt":Object,"p":[$n[0].Int32,$n[0].Int32]}]}; });
    $m($n[2].AttributeTests.A2Attribute, function () { return {"am":true}; });
    $m($n[2].AttributeTests.A5Attribute, function () { return {"ni":true}; });
    $m($n[2].AttributeTests.C10$2, function (T1, T2) { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A1Attribute(11)]}; });
    $m($n[2].AttributeTests.C11, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A6Attribute(true, 43, 68, 45.5, 46.5, 47, System.Int64(48), 49, 1, "Test_string", null, String)]}; });
    $m($n[2].AttributeTests.C12, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A7Attribute([42, 17, 31], ["X", "Y2", "Z3"])]}; });
    $m($n[2].AttributeTests.C13, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A8Attribute("v2")]}; });
    $m($n[2].AttributeTests.C14, function () { return {"at":[Bridge.merge(new Bridge.ClientTest.Reflection.AttributeTests.A9Attribute(), {
        setP1: 42
    } )]}; });
    $m($n[2].AttributeTests.C15, function () { return {"at":[Bridge.merge(new Bridge.ClientTest.Reflection.AttributeTests.A9Attribute(), {

    }, function () {
        this.$$XX$$ = 18;
    } )]}; });
    $m($n[2].AttributeTests.C16, function () { return {"at":[Bridge.merge(new Bridge.ClientTest.Reflection.AttributeTests.A9Attribute(), {
        P3: 43
    } )]}; });
    $m($n[2].AttributeTests.C18, function () { return {"at":[Bridge.merge(new Bridge.ClientTest.Reflection.AttributeTests.A9Attribute(), {
        setF1: 13
    } )]}; });
    $m($n[2].AttributeTests.C19, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A1Attribute(12)]}; });
    $m($n[2].AttributeTests.C2, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A1Attribute(1),new Bridge.ClientTest.Reflection.AttributeTests.A2Attribute(2)]}; });
    $m($n[2].AttributeTests.C20, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A11Attribute.$ctor1(42)]}; });
    $m($n[2].AttributeTests.C21, function () { return {"at":[{ i: 18 }]}; });
    $m($n[2].AttributeTests.C22, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A12Attribute(),new Bridge.ClientTest.Reflection.AttributeTests.A13Attribute()],"m":[{"at":[new Bridge.ClientTest.Reflection.AttributeTests.A12Attribute(),new Bridge.ClientTest.Reflection.AttributeTests.A13Attribute()],"a":2,"n":"M","t":8,"sn":"m","rt":Object}]}; });
    $m($n[2].AttributeTests.C7, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A5Attribute()]}; });
    $m($n[2].AttributeTests.C9, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A1Attribute(7),new Bridge.ClientTest.Reflection.AttributeTests.A2Attribute(8),new Bridge.ClientTest.Reflection.AttributeTests.A2Attribute(9),new Bridge.ClientTest.Reflection.AttributeTests.A3Attribute(10)]}; });
    $m($n[2].AttributeTests.E1, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A1Attribute(1),new Bridge.ClientTest.Reflection.AttributeTests.A2Attribute(2)]}; });
    $m($n[2].AttributeTests.I1, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A1Attribute(1),new Bridge.ClientTest.Reflection.AttributeTests.A2Attribute(2)]}; });
    $m($n[2].AttributeTests.I2$2, function (T1, T2) { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A1Attribute(12)]}; });
    $m($n[2].GetMembersTests.B1, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(101)],"a":2,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(102)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"$ctor1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(103)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,String],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"$ctor2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(111)],"a":2,"n":"MB","t":8,"sn":"MB","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(112)],"a":2,"n":"MB","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MB$1","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(113)],"a":2,"n":"MB","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MB$2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(114)],"a":2,"n":"MB2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MB2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(121)],"a":2,"n":"MBS","is":true,"t":8,"sn":"MBS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(122)],"a":2,"n":"MBS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MBS$1","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(123)],"a":2,"n":"MBS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MBS$2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(124)],"a":2,"n":"MBS2","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MBS2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(157)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(158)],"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(159)],"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem","rt":Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(151)],"a":2,"n":"PB1","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(152)],"a":2,"n":"get_PB1","t":8,"sn":"getPB1","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(153)],"a":2,"n":"set_PB1","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPB1","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(154)],"a":2,"n":"PB2","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(155)],"a":2,"n":"get_PB2","t":8,"sn":"getPB2","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(156)],"a":2,"n":"set_PB2","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPB2","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(161)],"a":2,"n":"PBS1","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(162)],"a":2,"n":"get_PBS1","is":true,"t":8,"sn":"getPBS1","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(163)],"a":2,"n":"set_PBS1","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPBS1","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(164)],"a":2,"n":"PBS2","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(165)],"a":2,"n":"get_PBS2","is":true,"t":8,"sn":"getPBS2","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(166)],"a":2,"n":"set_PBS2","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPBS2","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(131)],"a":2,"n":"FB1","t":4,"rt":$n[0].Int32,"sn":"FB1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(132)],"a":2,"n":"FB2","t":4,"rt":$n[0].Int32,"sn":"FB2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(141)],"a":2,"n":"FBS1","is":true,"t":4,"rt":$n[0].Int32,"sn":"FBS1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(142)],"a":2,"n":"FBS2","is":true,"t":4,"rt":$n[0].Int32,"sn":"FBS2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(171)],"a":2,"n":"EB1","t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(172)],"a":2,"n":"add_EB1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEB1","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(173)],"a":2,"n":"remove_EB1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEB1","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(174)],"a":2,"n":"EB2","t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(175)],"a":2,"n":"add_EB2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEB2","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(176)],"a":2,"n":"remove_EB2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEB2","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(181)],"a":2,"n":"EBS1","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(182)],"a":2,"n":"add_EBS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEBS1","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(183)],"a":2,"n":"remove_EBS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEBS1","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(184)],"a":2,"n":"EBS2","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(185)],"a":2,"n":"add_EBS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEBS2","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(186)],"a":2,"n":"remove_EBS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEBS2","rt":Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.B2, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(111)],"a":2,"n":"M","t":8,"sn":"m","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(113)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(114)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(115)],"a":2,"n":"M2B","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2B","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(116)],"a":2,"n":"M2B","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2B$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(125)],"a":2,"n":"M2BS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2BS","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(126)],"a":2,"n":"M2BS","is":true,"t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2BS$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(123)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2S","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(124)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2S$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(117)],"a":2,"n":"M3","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M3","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(127)],"a":2,"n":"M3S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M3S","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(112)],"a":2,"n":"MB","t":8,"sn":"MB","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(122)],"a":2,"n":"MBS","is":true,"t":8,"sn":"MBS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(121)],"a":2,"n":"MS","is":true,"t":8,"sn":"MS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(153)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem","rt":Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(154)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[String],"i":true,"ipi":[{"n":"x","pt":String,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"getItem$1","rt":$n[0].Int32,"p":[String]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":String,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$1","rt":Object,"p":[String,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(151)],"a":2,"n":"P","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P","t":8,"sn":"getP","rt":$n[0].Int32},"s":{"a":2,"n":"set_P","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setP","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(152)],"a":2,"n":"PB","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PB","t":8,"sn":"getPB","rt":$n[0].Int32},"s":{"a":2,"n":"set_PB","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPB","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(162)],"a":2,"n":"PBS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PBS","is":true,"t":8,"sn":"getPBS","rt":$n[0].Int32},"s":{"a":2,"n":"set_PBS","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPBS","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(161)],"a":2,"n":"PS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PS","is":true,"t":8,"sn":"getPS","rt":$n[0].Int32},"s":{"a":2,"n":"set_PS","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPS","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(131)],"a":2,"n":"F","t":4,"rt":$n[0].Int32,"sn":"f"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(132)],"a":2,"n":"FB","t":4,"rt":$n[0].Int32,"sn":"FB"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(142)],"a":2,"n":"FBS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FBS"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(141)],"a":2,"n":"FS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FS"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(171)],"a":2,"n":"E","t":2,"ad":{"a":2,"n":"add_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(172)],"a":2,"n":"EB","t":2,"ad":{"a":2,"n":"add_EB","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEB","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_EB","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEB","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(182)],"a":2,"n":"EBS","is":true,"t":2,"ad":{"a":2,"n":"add_EBS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEBS","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_EBS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEBS","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(181)],"a":2,"n":"ES","is":true,"t":2,"ad":{"a":2,"n":"add_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addES","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeES","rt":Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.C3, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(1)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem","rt":Object,"p":[$n[0].Int32,$n[0].Int32]}}]}; });
    $m($n[2].GetMembersTests.I1, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(411)],"ab":true,"a":2,"n":"MI1","t":8,"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$MI1","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(412)],"ab":true,"a":2,"n":"MI1","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$MI1$1","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(413)],"ab":true,"a":2,"n":"MI1","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$MI1$2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(414)],"ab":true,"a":2,"n":"MI12","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$MI12","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(457)],"ab":true,"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(458)],"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$get_i1item","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(459)],"ab":true,"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$set_i1item","rt":Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(451)],"ab":true,"a":2,"n":"PI11","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(452)],"ab":true,"a":2,"n":"get_PI11","t":8,"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$getPI11","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(453)],"ab":true,"a":2,"n":"set_PI11","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$setPI11","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(454)],"ab":true,"a":2,"n":"PI12","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(455)],"ab":true,"a":2,"n":"get_PI12","t":8,"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$getPI12","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(456)],"ab":true,"a":2,"n":"set_PI12","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$setPI12","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(471)],"ab":true,"a":2,"n":"EI11","t":2,"ad":{"ab":true,"a":2,"n":"add_EI11","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$addEI11","rt":Object,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_EI11","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$removeEI11","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(474)],"ab":true,"a":2,"n":"EI12","t":2,"ad":{"ab":true,"a":2,"n":"add_EI12","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$addEI12","rt":Object,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_EI12","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I1$removeEI12","rt":Object,"p":[Function]}}]}; });
    $m($n[2].ReflectionTests.C1, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.ctor()],"a":2,"n":"M2","t":8,"sn":"M2","rt":Object},{"a":2,"n":"M3","t":8,"sn":"M3","rt":Object}]}; });
    $m($n[2].ReflectionTests.C10, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,String],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"sn":"$ctor1"}]}; });
    $m($n[2].ReflectionTests.C11, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[Date],"pi":[{"n":"dt","pt":Date,"ps":0}],"sn":"ctor"}]}; });
    $m($n[2].ReflectionTests.C12, function () { return {"m":[{"a":2,"n":"F1","t":4,"rt":$n[0].Int32,"sn":"F1"},{"a":2,"n":"F2","t":4,"rt":Date,"sn":"renamedF2"},{"a":2,"n":"F3","is":true,"t":4,"rt":String,"sn":"F3"}]}; });
    $m($n[2].ReflectionTests.C13, function () { return {"m":[{"a":2,"n":"E1","t":2,"ad":{"a":2,"n":"add_E1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE1","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_E1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE1","rt":Object,"p":[Function]}},{"a":2,"n":"E2","is":true,"t":2,"ad":{"a":2,"n":"add_E2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE2","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_E2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE2","rt":Object,"p":[Function]}},{"a":2,"n":"E3","t":2,"ad":{"a":2,"n":"add_E3","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return this.addedE3Handler = value; },"rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_E3","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return this.removedE3Handler = value; },"rt":Object,"p":[Function]}},{"a":2,"n":"E4","is":true,"t":2,"ad":{"a":2,"n":"add_E4","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return Bridge.ClientTest.Reflection.ReflectionTests.C13.addedE4Handler = value; },"rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_E4","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return Bridge.ClientTest.Reflection.ReflectionTests.C13.removedE4Handler = value; },"rt":Object,"p":[Function]}}]}; });
    $m($n[2].ReflectionTests.C14, function () { return {"m":[{"a":2,"n":"P1","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P1","t":8,"sn":"getP1","rt":$n[0].Int32},"s":{"a":2,"n":"set_P1","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setP1","rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"P10","t":16,"rt":String,"g":{"a":2,"n":"get_P10","t":8,"rt":String,"fg":"P10"},"s":{"a":2,"n":"set_P10","t":8,"p":[String],"rt":Object,"fs":"P10"},"fn":"P10"},{"a":2,"n":"P11","is":true,"t":16,"rt":Date,"s":{"a":2,"n":"set_P11","is":true,"t":8,"pi":[{"n":"value","pt":Date,"ps":0}],"sn":"setP11","rt":Object,"p":[Date]}},{"a":2,"n":"P12","is":true,"t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_P12","t":8,"rt":$n[0].Double,"fg":"P12","is":true},"s":{"a":2,"n":"set_P12","t":8,"p":[$n[0].Double],"rt":Object,"fs":"P12","is":true},"fn":"P12"},{"a":2,"n":"P13","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P13","t":8,"tpc":0,"def":function () { return this.p13Field; },"rt":$n[0].Int32},"s":{"a":2,"n":"set_P13","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (value) { return this.p13Field = value; },"rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"P14","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P14","is":true,"t":8,"tpc":0,"def":function () { return Bridge.ClientTest.Reflection.ReflectionTests.C14.p14Field; },"rt":$n[0].Int32},"s":{"a":2,"n":"set_P14","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (value) { return Bridge.ClientTest.Reflection.ReflectionTests.C14.p14Field = value; },"rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"P2","t":16,"rt":String,"g":{"a":2,"n":"get_P2","t":8,"rt":String,"fg":"P2"},"s":{"a":2,"n":"set_P2","t":8,"p":[String],"rt":Object,"fs":"P2"},"fn":"P2"},{"a":2,"n":"P3","is":true,"t":16,"rt":Date,"g":{"a":2,"n":"get_P3","is":true,"t":8,"sn":"getP3","rt":Date},"s":{"a":2,"n":"set_P3","is":true,"t":8,"pi":[{"n":"value","pt":Date,"ps":0}],"sn":"setP3","rt":Object,"p":[Date]}},{"a":2,"n":"P4","is":true,"t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_P4","t":8,"rt":$n[0].Double,"fg":"P4","is":true},"s":{"a":2,"n":"set_P4","t":8,"p":[$n[0].Double],"rt":Object,"fs":"P4","is":true},"fn":"P4"},{"a":2,"n":"P5","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P5","t":8,"sn":"getP5","rt":$n[0].Int32}},{"a":2,"n":"P6","t":16,"rt":String,"g":{"a":2,"n":"get_P6","t":8,"rt":String,"fg":"P6"},"s":{"a":2,"n":"set_P6","t":8,"p":[String],"rt":Object,"fs":"P6"},"fn":"P6"},{"a":2,"n":"P7","is":true,"t":16,"rt":Date,"g":{"a":2,"n":"get_P7","is":true,"t":8,"sn":"getP7","rt":Date}},{"a":2,"n":"P8","is":true,"t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_P8","t":8,"rt":$n[0].Double,"fg":"P8","is":true},"s":{"a":2,"n":"set_P8","t":8,"p":[$n[0].Double],"rt":Object,"fs":"P8","is":true},"fn":"P8"},{"a":2,"n":"P9","t":16,"rt":$n[0].Int32,"s":{"a":2,"n":"set_P9","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setP9","rt":Object,"p":[$n[0].Int32]}}]}; });
    $m($n[2].ReflectionTests.C15, function () { return {"m":[{"a":2,"n":"Item","t":16,"rt":String,"p":[$n[0].Int32,String],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"sn":"getItem","rt":String,"p":[$n[0].Int32,String]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1},{"n":"value","pt":String,"ps":2}],"sn":"setItem","rt":Object,"p":[$n[0].Int32,String,String]}}]}; });
    $m($n[2].ReflectionTests.C16, function () { return {"m":[{"a":2,"n":"Item","t":16,"rt":String,"p":[$n[0].Int32,String],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"sn":"getItem","rt":String,"p":[$n[0].Int32,String]}}]}; });
    $m($n[2].ReflectionTests.C17, function () { return {"m":[{"a":2,"n":"Item","t":16,"rt":String,"p":[$n[0].Int32,String],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1},{"n":"value","pt":String,"ps":2}],"sn":"setItem","rt":Object,"p":[$n[0].Int32,String,String]}}]}; });
    $m($n[2].ReflectionTests.C18, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(1),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(2),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"M","t":8,"sn":"m","rt":Object},{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(4),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"P","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(5),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"get_P","t":8,"sn":"getP","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(6),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"set_P","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setP","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(3),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"F","t":4,"rt":$n[0].Int32,"sn":"f"},{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(7),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"E","t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(8),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"add_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.$ctor1(9),new Bridge.ClientTest.Reflection.ReflectionTests.A3Attribute()],"a":2,"n":"remove_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE","rt":Object,"p":[Function]}}]}; });
    $m($n[2].ReflectionTests.C19, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,String],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":String,"ps":1}],"def":function(a, b) { return {a: a, b: b};}}]}; });
    $m($n[2].ReflectionTests.C2, function () { return {"m":[{"a":2,"n":"M1","t":8,"sn":"M1","rt":Object},{"a":2,"n":"M2","is":true,"t":8,"sn":"M2","rt":Object}]}; });
    $m($n[2].ReflectionTests.C20, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,String],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":String,"ps":1}],"def":function (a, b) { return { a: a, b: b }; }}]}; });
    $m($n[2].ReflectionTests.C21, function () { return {"m":[{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (a, b) { return this.X + a + b; },"rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (a, b) { return a + b; },"rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"M3","t":8,"pi":[{"n":"s","pt":String,"ps":0}],"tpc":1,"def":function (T, s) { return this.X + Bridge.Reflection.getTypeFullName(T) + s; },"rt":String,"p":[String]}]}; });
    $m($n[2].ReflectionTests.C22, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,Array],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":Array,"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[String,Array],"pi":[{"n":"a","pt":String,"ps":0},{"n":"b","ip":true,"pt":Array,"ps":1}],"sn":"$ctor1","exp":true},{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":Array,"ps":1}],"sn":"M1","rt":Array,"p":[$n[0].Int32,Array]},{"a":2,"n":"M2","exp":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":Array,"ps":1}],"sn":"M2","rt":Array,"p":[$n[0].Int32,Array]}]}; });
    $m($n[2].ReflectionTests.C23, function () { return {"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,Array],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":Array,"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[String,Array],"pi":[{"n":"a","pt":String,"ps":0},{"n":"b","ip":true,"pt":Array,"ps":1}],"sn":"$ctor1","exp":true},{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":Array,"ps":1}],"sn":"M1","rt":Array,"p":[$n[0].Int32,Array]},{"a":2,"n":"M2","exp":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","ip":true,"pt":Array,"ps":1}],"sn":"M2","rt":Array,"p":[$n[0].Int32,Array]}]}; });
    $m($n[2].ReflectionTests.C24, function () { return {"m":[{"a":2,"n":"Item","t":16,"rt":String,"p":[$n[0].Int32,String],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"tpc":0,"def":function (x, s) { return this.v + ' ' + x + ' ' + s; },"rt":String,"p":[$n[0].Int32,String]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1},{"n":"value","pt":String,"ps":2}],"tpc":0,"def":function (x, s, value) { return (function(t, x, s) { t.x = x; t.s = s; t.v = value; })(this, x, s); },"rt":Object,"p":[$n[0].Int32,String,String]}}]}; });
    $m($n[2].ReflectionTests.C3, function () { return {"m":[{"a":2,"n":"M1","t":8,"sn":"M1","rt":$n[0].Int32},{"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2","rt":$n[0].Int32,"p":[String]},{"a":2,"n":"M3","t":8,"pi":[{"n":"x","pt":String,"ps":0},{"n":"y","pt":$n[0].Int32,"ps":1}],"sn":"M3","rt":$n[0].Int32,"p":[String,$n[0].Int32]},{"a":2,"n":"M4","t":8,"sn":"M4","rt":Object}]}; });
    $m($n[2].ReflectionTests.C4, function () { return {"m":[{"a":2,"n":"M","t":8,"sn":"m","rt":Object},{"a":2,"n":"M","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"m$1","rt":Object,"p":[$n[0].Int32]},{"a":2,"n":"M","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0},{"n":"s","pt":String,"ps":1}],"sn":"x","rt":Object,"p":[$n[0].Int32,String]}]}; });
    $m($n[2].ReflectionTests.C5$2, function (T1, T2) { return {"m":[{"a":2,"n":"M","t":8,"pi":[{"n":"t2","pt":T2,"ps":0},{"n":"s","pt":String,"ps":1}],"sn":"m","rt":T1,"p":[T2,String]},{"a":2,"n":"M2","t":8,"sn":"M2","rt":Object}]}; });
    $m($n[2].ReflectionTests.C6, function () { return {"m":[{"a":2,"n":"M1","t":8,"pi":[{"n":"t2","pt":Object,"ps":0},{"n":"s","pt":String,"ps":1}],"tpc":2,"sn":"M1","rt":Object,"p":[Object,String]},{"a":2,"n":"M2","t":8,"pi":[{"n":"s","pt":String,"ps":0}],"tpc":1,"sn":"M2","rt":Object,"p":[String]},{"a":2,"n":"M3","t":8,"pi":[{"n":"s","pt":String,"ps":0}],"sn":"M3","rt":Object,"p":[String]}]}; });
    $m($n[2].ReflectionTests.C7, function () { return {"m":[{"a":2,"n":"M1","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M1","rt":$n[0].Int32,"p":[$n[0].Int32]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2","rt":Object,"p":[String]},{"a":2,"n":"M3","t":8,"pi":[{"n":"s","pt":String,"ps":0}],"tpc":2,"sn":"M3","rt":String,"p":[String]}]}; });
    $m($n[2].ReflectionTests.C8, function () { return {"m":[{"a":2,"n":"M1","t":8,"pi":[{"n":"a","pt":String,"ps":0},{"n":"b","pt":String,"ps":1}],"sn":"M1","rt":String,"p":[String,String]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"a","pt":String,"ps":0},{"n":"b","pt":String,"ps":1}],"sn":"M2","rt":String,"p":[String,String]},{"a":2,"n":"M3","t":8,"pi":[{"n":"a","pt":String,"ps":0}],"tpc":2,"sn":"M3","rt":String,"p":[String]},{"a":2,"n":"M4","is":true,"t":8,"pi":[{"n":"a","pt":String,"ps":0}],"tpc":2,"sn":"M4","rt":String,"p":[String]}]}; });
    $m($n[2].ReflectionTests.C9$2, function (T1, T2) { return {"m":[{"a":2,"n":"M","is":true,"t":8,"pi":[{"n":"a","pt":String,"ps":0}],"sn":"m","rt":String,"p":[String]}]}; });
    $m($n[2].ReflectionTests.S1, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.ReflectionTests.A1Attribute.ctor()],"a":2,"n":"M2","t":8,"sn":"M2","rt":Object},{"a":2,"n":"M3","t":8,"sn":"M3","rt":Object}]}; });
    $m($n[2].AttributeTests.C3, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A3Attribute(3)]}; });
    $m($n[2].AttributeTests.C5, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A1Attribute(5)]}; });
    $m($n[2].AttributeTests.C6, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A2Attribute(6)]}; });
    $m($n[2].GetMembersTests.C1, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(201)],"a":2,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(202)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"$ctor1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(203)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,String],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"$ctor2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(211)],"a":2,"n":"MC","t":8,"sn":"MC","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(212)],"a":2,"n":"MC","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MC$1","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(213)],"a":2,"n":"MC","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MC$2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(214)],"a":2,"n":"MC2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MC2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(221)],"a":2,"n":"MCS","is":true,"t":8,"sn":"MCS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(222)],"a":2,"n":"MCS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MCS$1","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(223)],"a":2,"n":"MCS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MCS$2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(224)],"a":2,"n":"MCS2","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MCS2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(257)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[String],"i":true,"ipi":[{"n":"x","pt":String,"ps":0}],"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(258)],"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"getItem$1","rt":$n[0].Int32,"p":[String]},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(259)],"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":String,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$1","rt":Object,"p":[String,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(251)],"a":2,"n":"PC1","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(252)],"a":2,"n":"get_PC1","t":8,"sn":"getPC1","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(253)],"a":2,"n":"set_PC1","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPC1","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(254)],"a":2,"n":"PC2","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(255)],"a":2,"n":"get_PC2","t":8,"sn":"getPC2","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(256)],"a":2,"n":"set_PC2","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPC2","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(261)],"a":2,"n":"PCS1","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(262)],"a":2,"n":"get_PCS1","is":true,"t":8,"sn":"getPCS1","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(263)],"a":2,"n":"set_PCS1","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPCS1","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(264)],"a":2,"n":"PCS2","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(265)],"a":2,"n":"get_PCS2","is":true,"t":8,"sn":"getPCS2","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(266)],"a":2,"n":"set_PCS2","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPCS2","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(231)],"a":2,"n":"FC1","t":4,"rt":$n[0].Int32,"sn":"FC1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(232)],"a":2,"n":"FC2","t":4,"rt":$n[0].Int32,"sn":"FC2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(241)],"a":2,"n":"FCS1","is":true,"t":4,"rt":$n[0].Int32,"sn":"FCS1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(242)],"a":2,"n":"FCS2","is":true,"t":4,"rt":$n[0].Int32,"sn":"FCS2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(271)],"a":2,"n":"EC1","t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(272)],"a":2,"n":"add_EC1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEC1","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(273)],"a":2,"n":"remove_EC1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEC1","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(274)],"a":2,"n":"EC2","t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(275)],"a":2,"n":"add_EC2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEC2","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(276)],"a":2,"n":"remove_EC2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEC2","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(281)],"a":2,"n":"ECS1","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(282)],"a":2,"n":"add_ECS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addECS1","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(283)],"a":2,"n":"remove_ECS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeECS1","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(284)],"a":2,"n":"ECS2","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(285)],"a":2,"n":"add_ECS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addECS2","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(286)],"a":2,"n":"remove_ECS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeECS2","rt":Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.C2, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(211)],"a":2,"n":"M","t":8,"sn":"m$1","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(213)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2$2","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(214)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2$3","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(215)],"a":2,"n":"M2C","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2C","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(216)],"a":2,"n":"M2C","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2C$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(225)],"a":2,"n":"M2CS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2CS","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(226)],"a":2,"n":"M2CS","is":true,"t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2CS$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(223)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2S","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(224)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2S$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(217)],"a":2,"n":"M3","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M3$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(227)],"a":2,"n":"M3S","is":true,"t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M3S","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(212)],"a":2,"n":"MC","t":8,"sn":"MC","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(222)],"a":2,"n":"MCS","is":true,"t":8,"sn":"MCS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(221)],"a":2,"n":"MS","is":true,"t":8,"sn":"MS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(253)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem$2","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$2","rt":Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(254)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Double],"i":true,"ipi":[{"n":"x","pt":$n[0].Double,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Double,"ps":0}],"sn":"getItem$3","rt":$n[0].Int32,"p":[$n[0].Double]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Double,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$3","rt":Object,"p":[$n[0].Double,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(251)],"a":2,"n":"P","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P","t":8,"sn":"getP$1","rt":$n[0].Int32},"s":{"a":2,"n":"set_P","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setP$1","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(252)],"a":2,"n":"PC","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PC","t":8,"sn":"getPC","rt":$n[0].Int32},"s":{"a":2,"n":"set_PC","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPC","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(262)],"a":2,"n":"PCS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PCS","is":true,"t":8,"sn":"getPCS","rt":$n[0].Int32},"s":{"a":2,"n":"set_PCS","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPCS","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(261)],"a":2,"n":"PS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PS","is":true,"t":8,"sn":"getPS","rt":$n[0].Int32},"s":{"a":2,"n":"set_PS","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPS","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(231)],"a":2,"n":"F","t":4,"rt":$n[0].Int32,"sn":"f$1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(232)],"a":2,"n":"FC","t":4,"rt":$n[0].Int32,"sn":"FC"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(242)],"a":2,"n":"FCS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FCS"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(241)],"a":2,"n":"FS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FS"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(271)],"a":2,"n":"E","t":2,"ad":{"a":2,"n":"add_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE$1","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE$1","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(272)],"a":2,"n":"EC","t":2,"ad":{"a":2,"n":"add_EC","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEC","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_EC","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEC","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(282)],"a":2,"n":"ECS","is":true,"t":2,"ad":{"a":2,"n":"add_ECS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addECS","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_ECS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeECS","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(281)],"a":2,"n":"ES","is":true,"t":2,"ad":{"a":2,"n":"add_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addES","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeES","rt":Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.I2, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(511)],"ab":true,"a":2,"n":"MI2","t":8,"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$MI2","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(512)],"ab":true,"a":2,"n":"MI2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$MI2$1","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(513)],"ab":true,"a":2,"n":"MI2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$MI2$2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(514)],"ab":true,"a":2,"n":"MI22","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$MI22","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(557)],"ab":true,"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[String],"i":true,"ipi":[{"n":"x","pt":String,"ps":0}],"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(558)],"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$get_item2","rt":$n[0].Int32,"p":[String]},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(559)],"ab":true,"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":String,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$set_item2","rt":Object,"p":[String,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(551)],"ab":true,"a":2,"n":"PI21","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(552)],"ab":true,"a":2,"n":"get_PI21","t":8,"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$getPI21","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(553)],"ab":true,"a":2,"n":"set_PI21","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$setPI21","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(554)],"ab":true,"a":2,"n":"PI22","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(555)],"ab":true,"a":2,"n":"get_PI22","t":8,"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$getPI22","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(556)],"ab":true,"a":2,"n":"set_PI22","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$setPI22","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(571)],"ab":true,"a":2,"n":"EI21","t":2,"ad":{"ab":true,"a":2,"n":"add_EI21","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$addEI21","rt":Object,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_EI21","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$removeEI21","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(574)],"ab":true,"a":2,"n":"EI22","t":2,"ad":{"ab":true,"a":2,"n":"add_EI22","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$addEI22","rt":Object,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_EI22","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"Bridge$ClientTest$Reflection$GetMembersTests$I2$removeEI22","rt":Object,"p":[Function]}}]}; });
    $m($n[2].AttributeTests.C4, function () { return {"at":[new Bridge.ClientTest.Reflection.AttributeTests.A4Attribute(4)]}; });
    $m($n[2].GetMembersTests.D1, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(301)],"a":2,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(302)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"$ctor1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(303)],"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,String],"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"$ctor2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(311)],"a":2,"n":"MD","t":8,"sn":"MD","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(312)],"a":2,"n":"MD","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MD$1","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(313)],"a":2,"n":"MD","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MD$2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(314)],"a":2,"n":"MD2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MD2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(321)],"a":2,"n":"MDS","is":true,"t":8,"sn":"MDS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(322)],"a":2,"n":"MDS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"MDS$1","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(323)],"a":2,"n":"MDS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MDS$2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(324)],"a":2,"n":"MDS2","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":String,"ps":1}],"sn":"MDS2","rt":Object,"p":[$n[0].Int32,String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(357)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Double],"i":true,"ipi":[{"n":"x","pt":$n[0].Double,"ps":0}],"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(358)],"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Double,"ps":0}],"sn":"getItem$2","rt":$n[0].Int32,"p":[$n[0].Double]},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(359)],"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Double,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$2","rt":Object,"p":[$n[0].Double,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(351)],"a":2,"n":"PD1","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(352)],"a":2,"n":"get_PD1","t":8,"sn":"getPD1","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(353)],"a":2,"n":"set_PD1","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPD1","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(354)],"a":2,"n":"PD2","t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(355)],"a":2,"n":"get_PD2","t":8,"sn":"getPD2","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(356)],"a":2,"n":"set_PD2","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPD2","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(361)],"a":2,"n":"PDS1","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(362)],"a":2,"n":"get_PDS1","is":true,"t":8,"sn":"getPDS1","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(363)],"a":2,"n":"set_PDS1","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPDS1","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(364)],"a":2,"n":"PDS2","is":true,"t":16,"rt":$n[0].Int32,"g":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(365)],"a":2,"n":"get_PDS2","is":true,"t":8,"sn":"getPDS2","rt":$n[0].Int32},"s":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(366)],"a":2,"n":"set_PDS2","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPDS2","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(331)],"a":2,"n":"FD1","t":4,"rt":$n[0].Int32,"sn":"FD1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(332)],"a":2,"n":"FD2","t":4,"rt":$n[0].Int32,"sn":"FD2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(341)],"a":2,"n":"FDS1","is":true,"t":4,"rt":$n[0].Int32,"sn":"FDS1"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(342)],"a":2,"n":"FDS2","is":true,"t":4,"rt":$n[0].Int32,"sn":"FDS2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(371)],"a":2,"n":"ED1","t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(372)],"a":2,"n":"add_ED1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addED1","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(373)],"a":2,"n":"remove_ED1","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeED1","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(374)],"a":2,"n":"ED2","t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(375)],"a":2,"n":"add_ED2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addED2","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(376)],"a":2,"n":"remove_ED2","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeED2","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(381)],"a":2,"n":"EDS1","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(382)],"a":2,"n":"add_EDS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEDS1","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(383)],"a":2,"n":"remove_EDS1","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEDS1","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(384)],"a":2,"n":"EDS2","is":true,"t":2,"ad":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(385)],"a":2,"n":"add_EDS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEDS2","rt":Object,"p":[Function]},"r":{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(386)],"a":2,"n":"remove_EDS2","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEDS2","rt":Object,"p":[Function]}}]}; });
    $m($n[2].GetMembersTests.D2, function () { return {"m":[{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(311)],"a":2,"n":"M","t":8,"sn":"m$2","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(313)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2$4","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(314)],"a":2,"n":"M2","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2$5","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(315)],"a":2,"n":"M2D","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2D","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(316)],"a":2,"n":"M2D","t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2D$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(325)],"a":2,"n":"M2DS","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2DS","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(326)],"a":2,"n":"M2DS","is":true,"t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2DS$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(323)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"M2S","rt":Object,"p":[$n[0].Int32]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(324)],"a":2,"n":"M2S","is":true,"t":8,"pi":[{"n":"x","pt":String,"ps":0}],"sn":"M2S$1","rt":Object,"p":[String]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(317)],"a":2,"n":"M3","t":8,"pi":[{"n":"x","pt":Date,"ps":0}],"sn":"M3$2","rt":Object,"p":[Date]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(327)],"a":2,"n":"M3S","is":true,"t":8,"pi":[{"n":"x","pt":Date,"ps":0}],"sn":"M3S","rt":Object,"p":[Date]},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(312)],"a":2,"n":"MD","t":8,"sn":"MD","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(322)],"a":2,"n":"MDS","is":true,"t":8,"sn":"MDS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(321)],"a":2,"n":"MS","is":true,"t":8,"sn":"MS","rt":Object},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(353)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"getItem$4","rt":$n[0].Int32,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$4","rt":Object,"p":[$n[0].Int32,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(354)],"a":2,"n":"Item","t":16,"rt":$n[0].Int32,"p":[Date],"i":true,"ipi":[{"n":"x","pt":Date,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"x","pt":Date,"ps":0}],"sn":"getItem$5","rt":$n[0].Int32,"p":[Date]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"x","pt":Date,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"setItem$5","rt":Object,"p":[Date,$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(351)],"a":2,"n":"P","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_P","t":8,"sn":"getP$2","rt":$n[0].Int32},"s":{"a":2,"n":"set_P","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setP$2","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(352)],"a":2,"n":"PD","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PD","t":8,"sn":"getPD","rt":$n[0].Int32},"s":{"a":2,"n":"set_PD","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPD","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(362)],"a":2,"n":"PDS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PDS","is":true,"t":8,"sn":"getPDS","rt":$n[0].Int32},"s":{"a":2,"n":"set_PDS","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPDS","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(361)],"a":2,"n":"PS","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PS","is":true,"t":8,"sn":"getPS","rt":$n[0].Int32},"s":{"a":2,"n":"set_PS","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setPS","rt":Object,"p":[$n[0].Int32]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(331)],"a":2,"n":"F","t":4,"rt":$n[0].Int32,"sn":"f$2"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(332)],"a":2,"n":"FD","t":4,"rt":$n[0].Int32,"sn":"FD"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(342)],"a":2,"n":"FDS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FDS"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(341)],"a":2,"n":"FS","is":true,"t":4,"rt":$n[0].Int32,"sn":"FS"},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(371)],"a":2,"n":"E","t":2,"ad":{"a":2,"n":"add_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addE$2","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_E","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeE$2","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(372)],"a":2,"n":"ED","t":2,"ad":{"a":2,"n":"add_ED","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addED","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_ED","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeED","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(382)],"a":2,"n":"EDS","is":true,"t":2,"ad":{"a":2,"n":"add_EDS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addEDS","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_EDS","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeEDS","rt":Object,"p":[Function]}},{"at":[new Bridge.ClientTest.Reflection.GetMembersTests.A1Attribute(381)],"a":2,"n":"ES","is":true,"t":2,"ad":{"a":2,"n":"add_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addES","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_ES","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeES","rt":Object,"p":[Function]}}]}; });
    $m($n[2].ReflectionTests.C25, function () { return {"m":[{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C26, function () { return {"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C27, function () { return {"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":4,"n":"A2","t":4,"rt":$n[0].Int32,"sn":"A2"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C28, function () { return {"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":4,"n":"A2","t":4,"rt":$n[0].Int32,"sn":"A2"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":1,"n":"A5","t":4,"rt":$n[0].Int32,"sn":"A5"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $asm.attr= [Bridge.merge(new Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A2Attribute.$ctor1(64), {
        setP: 23
    } ),Bridge.merge(new Bridge.ClientTest.Batch1.Reflection.AssemblyTests.A3Attribute.$ctor1(15), {
        setP: 45
    } )];
});
